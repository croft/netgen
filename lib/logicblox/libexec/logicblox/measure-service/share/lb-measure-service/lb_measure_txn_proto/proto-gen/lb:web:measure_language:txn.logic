//*******************************************
// This code was generated by proto2datalog.
// Do not check into version control.
//*******************************************


/*
 * lb:measure:txn:Guard
 */

/**
 * enum lb:measure:txn:Guard:Kind
 */
lb:measure:txn:Guard:Kind(x) -> .
lb:measure:txn:Guard:Kind_enum[s]=x -> string(s), lb:measure:txn:Guard:Kind(x).
lb:measure:txn:Guard:Kind_value[x]=s -> lb:measure:txn:Guard:Kind(x), string(s).
lang:constructor(`lb:measure:txn:Guard:Kind_enum).
lb:measure:txn:Guard:Kind_enum[s]=_ -> s = "COMPARISON"; s = "CONJUNCTION"; s = "DISJUNCTION"; s = "EXISTS"; s = "NEGATION"; s = "RELATION".
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["COMPARISON"]=x <- .
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["CONJUNCTION"]=x <- .
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["DISJUNCTION"]=x <- .
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["EXISTS"]=x <- .
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["NEGATION"]=x <- .
lb:measure:txn:Guard:Kind(x), lb:measure:txn:Guard:Kind_enum["RELATION"]=x <- .
lb:measure:txn:Guard:Kind_value[x]=s <- lb:measure:txn:Guard:Kind_enum[s]=x.
lb:measure:txn:Guard:Kind_value[x]=s -> lb:measure:txn:Guard:Kind_enum[s]=x.

/*
 * lb:measure:txn:CompGuard
 */

/**
 * enum lb:measure:txn:CompGuard:Op
 */
lb:measure:txn:CompGuard:Op(x) -> .
lb:measure:txn:CompGuard:Op_enum[s]=x -> string(s), lb:measure:txn:CompGuard:Op(x).
lb:measure:txn:CompGuard:Op_value[x]=s -> lb:measure:txn:CompGuard:Op(x), string(s).
lang:constructor(`lb:measure:txn:CompGuard:Op_enum).
lb:measure:txn:CompGuard:Op_enum[s]=_ -> s = "EQUALS"; s = "NOT_EQUALS"; s = "GREATER_THAN"; s = "LESS_THAN"; s = "GREATER_OR_EQUALS"; s = "LESS_OR_EQUALS".
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["EQUALS"]=x <- .
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["NOT_EQUALS"]=x <- .
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["GREATER_THAN"]=x <- .
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["LESS_THAN"]=x <- .
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["GREATER_OR_EQUALS"]=x <- .
lb:measure:txn:CompGuard:Op(x), lb:measure:txn:CompGuard:Op_enum["LESS_OR_EQUALS"]=x <- .
lb:measure:txn:CompGuard:Op_value[x]=s <- lb:measure:txn:CompGuard:Op_enum[s]=x.
lb:measure:txn:CompGuard:Op_value[x]=s -> lb:measure:txn:CompGuard:Op_enum[s]=x.

/*
 * lb:measure:txn:common
 */
/*
* message lb:measure:txn:common:Location
*/
lb:measure:txn:common:Location(_) -> .lb:measure:txn:common:LocationConstructor[i]=x ->int(i), lb:measure:txn:common:Location(x).
lb:measure:txn:common:Location_row[x] = y -> lb:measure:txn:common:Location(x), int(y).
lb:measure:txn:common:Location_column[x] = y -> lb:measure:txn:common:Location(x), int(y).
/*
* message lb:measure:txn:common:Region
*/
lb:measure:txn:common:Region(_) -> .lb:measure:txn:common:RegionConstructor[i]=x ->int(i), lb:measure:txn:common:Region(x).
lb:measure:txn:common:Region_start[x] = y -> lb:measure:txn:common:Region(x), lb:measure:txn:common:Location(y).
lb:measure:txn:common:Region_end[x] = y -> lb:measure:txn:common:Region(x), lb:measure:txn:common:Location(y).
lang:constructor(`lb:measure:txn:common:LocationConstructor).
lang:pulse(`lb:measure:txn:common:LocationConstructor).
lang:pulse(`lb:measure:txn:common:Location).
lang:pulse(`lb:measure:txn:common:Location_row).
lang:pulse(`lb:measure:txn:common:Location_column).
lang:constructor(`lb:measure:txn:common:RegionConstructor).
lang:pulse(`lb:measure:txn:common:RegionConstructor).
lang:pulse(`lb:measure:txn:common:Region).
lang:pulse(`lb:measure:txn:common:Region_start).
lang:pulse(`lb:measure:txn:common:Region_end).

/*
 * lb:measure:txn:FunctionExpr
 */
/*
* message lb:measure:txn:FunctionExpr:Arguments
*/
lb:measure:txn:FunctionExpr:Arguments(_) -> .lb:measure:txn:FunctionExpr:ArgumentsConstructor[i]=x ->int(i), lb:measure:txn:FunctionExpr:Arguments(x).
lb:measure:txn:FunctionExpr:Arguments_arg[x, i] = y -> lb:measure:txn:FunctionExpr:Arguments(x), int(i), lb:measure:txn:Expr(y).
lang:constructor(`lb:measure:txn:FunctionExpr:ArgumentsConstructor).
lang:pulse(`lb:measure:txn:FunctionExpr:ArgumentsConstructor).
lang:pulse(`lb:measure:txn:FunctionExpr:Arguments).
lang:pulse(`lb:measure:txn:FunctionExpr:Arguments_arg).

/*
 * lb:measure:txn:ConstantExpr
 */

/**
 * enum lb:measure:txn:ConstantExpr:Kind
 */
lb:measure:txn:ConstantExpr:Kind(x) -> .
lb:measure:txn:ConstantExpr:Kind_enum[s]=x -> string(s), lb:measure:txn:ConstantExpr:Kind(x).
lb:measure:txn:ConstantExpr:Kind_value[x]=s -> lb:measure:txn:ConstantExpr:Kind(x), string(s).
lang:constructor(`lb:measure:txn:ConstantExpr:Kind_enum).
lb:measure:txn:ConstantExpr:Kind_enum[s]=_ -> s = "BOOLEAN"; s = "STRING"; s = "INT"; s = "FLOAT"; s = "DECIMAL".
lb:measure:txn:ConstantExpr:Kind(x), lb:measure:txn:ConstantExpr:Kind_enum["BOOLEAN"]=x <- .
lb:measure:txn:ConstantExpr:Kind(x), lb:measure:txn:ConstantExpr:Kind_enum["STRING"]=x <- .
lb:measure:txn:ConstantExpr:Kind(x), lb:measure:txn:ConstantExpr:Kind_enum["INT"]=x <- .
lb:measure:txn:ConstantExpr:Kind(x), lb:measure:txn:ConstantExpr:Kind_enum["FLOAT"]=x <- .
lb:measure:txn:ConstantExpr:Kind(x), lb:measure:txn:ConstantExpr:Kind_enum["DECIMAL"]=x <- .
lb:measure:txn:ConstantExpr:Kind_value[x]=s <- lb:measure:txn:ConstantExpr:Kind_enum[s]=x.
lb:measure:txn:ConstantExpr:Kind_value[x]=s -> lb:measure:txn:ConstantExpr:Kind_enum[s]=x.

/*
 * lb:measure:txn:Expr
 */

/**
 * enum lb:measure:txn:Expr:Kind
 */
lb:measure:txn:Expr:Kind(x) -> .
lb:measure:txn:Expr:Kind_enum[s]=x -> string(s), lb:measure:txn:Expr:Kind(x).
lb:measure:txn:Expr:Kind_value[x]=s -> lb:measure:txn:Expr:Kind(x), string(s).
lang:constructor(`lb:measure:txn:Expr:Kind_enum).
lb:measure:txn:Expr:Kind_enum[s]=_ -> s = "FUNCTION"; s = "GROUP"; s = "GUARDED"; s = "P2P"; s = "TUPLE"; s = "VARIABLE"; s = "CONSTANT".
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["FUNCTION"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["GROUP"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["GUARDED"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["P2P"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["TUPLE"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["VARIABLE"]=x <- .
lb:measure:txn:Expr:Kind(x), lb:measure:txn:Expr:Kind_enum["CONSTANT"]=x <- .
lb:measure:txn:Expr:Kind_value[x]=s <- lb:measure:txn:Expr:Kind_enum[s]=x.
lb:measure:txn:Expr:Kind_value[x]=s -> lb:measure:txn:Expr:Kind_enum[s]=x.

/*
 * lb:measure:txn
 */
/*
* message lb:measure:txn:Program
*/
lb:measure:txn:Program(_) -> .lb:measure:txn:ProgramConstructor[i]=x ->int(i), lb:measure:txn:Program(x).
lb:measure:txn:Program_rule[x, i] = y -> lb:measure:txn:Program(x), int(i), lb:measure:txn:Rule(y).
/*
* message lb:measure:txn:Rule
*/
lb:measure:txn:Rule(_) -> .lb:measure:txn:RuleConstructor[i]=x ->int(i), lb:measure:txn:Rule(x).
lb:measure:txn:Rule_name[x] = y -> lb:measure:txn:Rule(x), string(y).
lb:measure:txn:Rule_formula[x, i] = y -> lb:measure:txn:Rule(x), int(i), lb:measure:txn:Formula(y).
lb:measure:txn:Rule_region[x] = y -> lb:measure:txn:Rule(x), lb:measure:txn:common:Region(y).
/*
* message lb:measure:txn:Formula
*/
lb:measure:txn:Formula(_) -> .lb:measure:txn:FormulaConstructor[i]=x ->int(i), lb:measure:txn:Formula(x).
lb:measure:txn:Formula_name[x] = y -> lb:measure:txn:Formula(x), string(y).
lb:measure:txn:Formula_equation[x, i] = y -> lb:measure:txn:Formula(x), int(i), lb:measure:txn:Equation(y).
lb:measure:txn:Formula_region[x] = y -> lb:measure:txn:Formula(x), lb:measure:txn:common:Region(y).
/*
* message lb:measure:txn:Equation
*/
lb:measure:txn:Equation(_) -> .lb:measure:txn:EquationConstructor[i]=x ->int(i), lb:measure:txn:Equation(x).
lb:measure:txn:Equation_left[x] = y -> lb:measure:txn:Equation(x), lb:measure:txn:Expr(y).
lb:measure:txn:Equation_right[x] = y -> lb:measure:txn:Equation(x), lb:measure:txn:Expr(y).
lb:measure:txn:Equation_region[x] = y -> lb:measure:txn:Equation(x), lb:measure:txn:common:Region(y).
/*
* message lb:measure:txn:Expr
*/
lb:measure:txn:Expr(_) -> .lb:measure:txn:ExprConstructor[i]=x ->int(i), lb:measure:txn:Expr(x).
lb:measure:txn:Expr_kind[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:Expr:Kind(y).
lb:measure:txn:Expr_function[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:FunctionExpr(y).
lb:measure:txn:Expr_group[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:GroupExpr(y).
lb:measure:txn:Expr_guarded[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:GuardedExpr(y).
lb:measure:txn:Expr_p2p[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:P2PExpr(y).
lb:measure:txn:Expr_tuple[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:TupleExpr(y).
lb:measure:txn:Expr_variable[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:VarExpr(y).
lb:measure:txn:Expr_constant[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:ConstantExpr(y).
lb:measure:txn:Expr_region[x] = y -> lb:measure:txn:Expr(x), lb:measure:txn:common:Region(y).
/*
* message lb:measure:txn:FunctionExpr
*/
lb:measure:txn:FunctionExpr(_) -> .lb:measure:txn:FunctionExprConstructor[i]=x ->int(i), lb:measure:txn:FunctionExpr(x).
lb:measure:txn:FunctionExpr_name[x] = y -> lb:measure:txn:FunctionExpr(x), string(y).
lb:measure:txn:FunctionExpr_args[x, i] = y -> lb:measure:txn:FunctionExpr(x), int(i), lb:measure:txn:FunctionExpr:Arguments(y).
lb:measure:txn:FunctionExpr_stage[x] = y -> lb:measure:txn:FunctionExpr(x), string(y).
/*
* message lb:measure:txn:GuardedExpr
*/
lb:measure:txn:GuardedExpr(_) -> .lb:measure:txn:GuardedExprConstructor[i]=x ->int(i), lb:measure:txn:GuardedExpr(x).
lb:measure:txn:GuardedExpr_expr[x] = y -> lb:measure:txn:GuardedExpr(x), lb:measure:txn:Expr(y).
lb:measure:txn:GuardedExpr_guard[x] = y -> lb:measure:txn:GuardedExpr(x), lb:measure:txn:Guard(y).
/*
* message lb:measure:txn:P2PExpr
*/
lb:measure:txn:P2PExpr(_) -> .lb:measure:txn:P2PExprConstructor[i]=x ->int(i), lb:measure:txn:P2PExpr(x).
lb:measure:txn:P2PExpr_name[x] = y -> lb:measure:txn:P2PExpr(x), string(y).
lb:measure:txn:P2PExpr_arg[x] = y -> lb:measure:txn:P2PExpr(x), string(y).
/*
* message lb:measure:txn:GroupExpr
*/
lb:measure:txn:GroupExpr(_) -> .lb:measure:txn:GroupExprConstructor[i]=x ->int(i), lb:measure:txn:GroupExpr(x).
lb:measure:txn:GroupExpr_expr[x] = y -> lb:measure:txn:GroupExpr(x), lb:measure:txn:Expr(y).
/*
* message lb:measure:txn:TupleExpr
*/
lb:measure:txn:TupleExpr(_) -> .lb:measure:txn:TupleExprConstructor[i]=x ->int(i), lb:measure:txn:TupleExpr(x).
lb:measure:txn:TupleExpr_expr[x, i] = y -> lb:measure:txn:TupleExpr(x), int(i), lb:measure:txn:Expr(y).
/*
* message lb:measure:txn:VarExpr
*/
lb:measure:txn:VarExpr(_) -> .lb:measure:txn:VarExprConstructor[i]=x ->int(i), lb:measure:txn:VarExpr(x).
lb:measure:txn:VarExpr_variable[x] = y -> lb:measure:txn:VarExpr(x), string(y).
/*
* message lb:measure:txn:ConstantExpr
*/
lb:measure:txn:ConstantExpr(_) -> .lb:measure:txn:ConstantExprConstructor[i]=x ->int(i), lb:measure:txn:ConstantExpr(x).
lb:measure:txn:ConstantExpr_kind[x] = y -> lb:measure:txn:ConstantExpr(x), lb:measure:txn:ConstantExpr:Kind(y).
lb:measure:txn:ConstantExpr_boolean_constant[x] = y -> lb:measure:txn:ConstantExpr(x), boolean(y).
lb:measure:txn:ConstantExpr_string_constant[x] = y -> lb:measure:txn:ConstantExpr(x), string(y).
lb:measure:txn:ConstantExpr_int_constant[x] = y -> lb:measure:txn:ConstantExpr(x), int(y).
lb:measure:txn:ConstantExpr_float_constant[x] = y -> lb:measure:txn:ConstantExpr(x), float(y).
lb:measure:txn:ConstantExpr_decimal_constant[x] = y -> lb:measure:txn:ConstantExpr(x), int(y).
/*
* message lb:measure:txn:Guard
*/
lb:measure:txn:Guard(_) -> .lb:measure:txn:GuardConstructor[i]=x ->int(i), lb:measure:txn:Guard(x).
lb:measure:txn:Guard_kind[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:Guard:Kind(y).
lb:measure:txn:Guard_comparison[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:CompGuard(y).
lb:measure:txn:Guard_conjunction[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:ConjGuard(y).
lb:measure:txn:Guard_disjunction[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:DisjGuard(y).
lb:measure:txn:Guard_exists[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:ExistsGuard(y).
lb:measure:txn:Guard_negation[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:NegationGuard(y).
lb:measure:txn:Guard_relation[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:FunctionExpr(y).
lb:measure:txn:Guard_region[x] = y -> lb:measure:txn:Guard(x), lb:measure:txn:common:Region(y).
/*
* message lb:measure:txn:ConjGuard
*/
lb:measure:txn:ConjGuard(_) -> .lb:measure:txn:ConjGuardConstructor[i]=x ->int(i), lb:measure:txn:ConjGuard(x).
lb:measure:txn:ConjGuard_guard[x, i] = y -> lb:measure:txn:ConjGuard(x), int(i), lb:measure:txn:Guard(y).
/*
* message lb:measure:txn:DisjGuard
*/
lb:measure:txn:DisjGuard(_) -> .lb:measure:txn:DisjGuardConstructor[i]=x ->int(i), lb:measure:txn:DisjGuard(x).
lb:measure:txn:DisjGuard_guard[x, i] = y -> lb:measure:txn:DisjGuard(x), int(i), lb:measure:txn:Guard(y).
/*
* message lb:measure:txn:CompGuard
*/
lb:measure:txn:CompGuard(_) -> .lb:measure:txn:CompGuardConstructor[i]=x ->int(i), lb:measure:txn:CompGuard(x).
lb:measure:txn:CompGuard_op[x] = y -> lb:measure:txn:CompGuard(x), lb:measure:txn:CompGuard:Op(y).
lb:measure:txn:CompGuard_left[x] = y -> lb:measure:txn:CompGuard(x), lb:measure:txn:Expr(y).
lb:measure:txn:CompGuard_right[x] = y -> lb:measure:txn:CompGuard(x), lb:measure:txn:Expr(y).
/*
* message lb:measure:txn:ExistsGuard
*/
lb:measure:txn:ExistsGuard(_) -> .lb:measure:txn:ExistsGuardConstructor[i]=x ->int(i), lb:measure:txn:ExistsGuard(x).
lb:measure:txn:ExistsGuard_expr[x] = y -> lb:measure:txn:ExistsGuard(x), lb:measure:txn:Expr(y).
/*
* message lb:measure:txn:NegationGuard
*/
lb:measure:txn:NegationGuard(_) -> .lb:measure:txn:NegationGuardConstructor[i]=x ->int(i), lb:measure:txn:NegationGuard(x).
lb:measure:txn:NegationGuard_guard[x] = y -> lb:measure:txn:NegationGuard(x), lb:measure:txn:Guard(y).
lang:constructor(`lb:measure:txn:ProgramConstructor).
lang:pulse(`lb:measure:txn:ProgramConstructor).
lang:pulse(`lb:measure:txn:Program).
lang:pulse(`lb:measure:txn:Program_rule).
lang:constructor(`lb:measure:txn:RuleConstructor).
lang:pulse(`lb:measure:txn:RuleConstructor).
lang:pulse(`lb:measure:txn:Rule).
lang:pulse(`lb:measure:txn:Rule_name).
lang:pulse(`lb:measure:txn:Rule_formula).
lang:pulse(`lb:measure:txn:Rule_region).
lang:constructor(`lb:measure:txn:FormulaConstructor).
lang:pulse(`lb:measure:txn:FormulaConstructor).
lang:pulse(`lb:measure:txn:Formula).
lang:pulse(`lb:measure:txn:Formula_name).
lang:pulse(`lb:measure:txn:Formula_equation).
lang:pulse(`lb:measure:txn:Formula_region).
lang:constructor(`lb:measure:txn:EquationConstructor).
lang:pulse(`lb:measure:txn:EquationConstructor).
lang:pulse(`lb:measure:txn:Equation).
lang:pulse(`lb:measure:txn:Equation_left).
lang:pulse(`lb:measure:txn:Equation_right).
lang:pulse(`lb:measure:txn:Equation_region).
lang:constructor(`lb:measure:txn:ExprConstructor).
lang:pulse(`lb:measure:txn:ExprConstructor).
lang:pulse(`lb:measure:txn:Expr).
lang:pulse(`lb:measure:txn:Expr_kind).
lang:pulse(`lb:measure:txn:Expr_function).
lang:pulse(`lb:measure:txn:Expr_group).
lang:pulse(`lb:measure:txn:Expr_guarded).
lang:pulse(`lb:measure:txn:Expr_p2p).
lang:pulse(`lb:measure:txn:Expr_tuple).
lang:pulse(`lb:measure:txn:Expr_variable).
lang:pulse(`lb:measure:txn:Expr_constant).
lang:pulse(`lb:measure:txn:Expr_region).
lang:constructor(`lb:measure:txn:FunctionExprConstructor).
lang:pulse(`lb:measure:txn:FunctionExprConstructor).
lang:pulse(`lb:measure:txn:FunctionExpr).
lang:pulse(`lb:measure:txn:FunctionExpr_name).
lang:pulse(`lb:measure:txn:FunctionExpr_args).
lang:pulse(`lb:measure:txn:FunctionExpr_stage).
lang:constructor(`lb:measure:txn:GuardedExprConstructor).
lang:pulse(`lb:measure:txn:GuardedExprConstructor).
lang:pulse(`lb:measure:txn:GuardedExpr).
lang:pulse(`lb:measure:txn:GuardedExpr_expr).
lang:pulse(`lb:measure:txn:GuardedExpr_guard).
lang:constructor(`lb:measure:txn:P2PExprConstructor).
lang:pulse(`lb:measure:txn:P2PExprConstructor).
lang:pulse(`lb:measure:txn:P2PExpr).
lang:pulse(`lb:measure:txn:P2PExpr_name).
lang:pulse(`lb:measure:txn:P2PExpr_arg).
lang:constructor(`lb:measure:txn:GroupExprConstructor).
lang:pulse(`lb:measure:txn:GroupExprConstructor).
lang:pulse(`lb:measure:txn:GroupExpr).
lang:pulse(`lb:measure:txn:GroupExpr_expr).
lang:constructor(`lb:measure:txn:TupleExprConstructor).
lang:pulse(`lb:measure:txn:TupleExprConstructor).
lang:pulse(`lb:measure:txn:TupleExpr).
lang:pulse(`lb:measure:txn:TupleExpr_expr).
lang:constructor(`lb:measure:txn:VarExprConstructor).
lang:pulse(`lb:measure:txn:VarExprConstructor).
lang:pulse(`lb:measure:txn:VarExpr).
lang:pulse(`lb:measure:txn:VarExpr_variable).
lang:constructor(`lb:measure:txn:ConstantExprConstructor).
lang:pulse(`lb:measure:txn:ConstantExprConstructor).
lang:pulse(`lb:measure:txn:ConstantExpr).
lang:pulse(`lb:measure:txn:ConstantExpr_kind).
lang:pulse(`lb:measure:txn:ConstantExpr_boolean_constant).
lang:pulse(`lb:measure:txn:ConstantExpr_string_constant).
lang:pulse(`lb:measure:txn:ConstantExpr_int_constant).
lang:pulse(`lb:measure:txn:ConstantExpr_float_constant).
lang:pulse(`lb:measure:txn:ConstantExpr_decimal_constant).
lang:constructor(`lb:measure:txn:GuardConstructor).
lang:pulse(`lb:measure:txn:GuardConstructor).
lang:pulse(`lb:measure:txn:Guard).
lang:pulse(`lb:measure:txn:Guard_kind).
lang:pulse(`lb:measure:txn:Guard_comparison).
lang:pulse(`lb:measure:txn:Guard_conjunction).
lang:pulse(`lb:measure:txn:Guard_disjunction).
lang:pulse(`lb:measure:txn:Guard_exists).
lang:pulse(`lb:measure:txn:Guard_negation).
lang:pulse(`lb:measure:txn:Guard_relation).
lang:pulse(`lb:measure:txn:Guard_region).
lang:constructor(`lb:measure:txn:ConjGuardConstructor).
lang:pulse(`lb:measure:txn:ConjGuardConstructor).
lang:pulse(`lb:measure:txn:ConjGuard).
lang:pulse(`lb:measure:txn:ConjGuard_guard).
lang:constructor(`lb:measure:txn:DisjGuardConstructor).
lang:pulse(`lb:measure:txn:DisjGuardConstructor).
lang:pulse(`lb:measure:txn:DisjGuard).
lang:pulse(`lb:measure:txn:DisjGuard_guard).
lang:constructor(`lb:measure:txn:CompGuardConstructor).
lang:pulse(`lb:measure:txn:CompGuardConstructor).
lang:pulse(`lb:measure:txn:CompGuard).
lang:pulse(`lb:measure:txn:CompGuard_op).
lang:pulse(`lb:measure:txn:CompGuard_left).
lang:pulse(`lb:measure:txn:CompGuard_right).
lang:constructor(`lb:measure:txn:ExistsGuardConstructor).
lang:pulse(`lb:measure:txn:ExistsGuardConstructor).
lang:pulse(`lb:measure:txn:ExistsGuard).
lang:pulse(`lb:measure:txn:ExistsGuard_expr).
lang:constructor(`lb:measure:txn:NegationGuardConstructor).
lang:pulse(`lb:measure:txn:NegationGuardConstructor).
lang:pulse(`lb:measure:txn:NegationGuard).
lang:pulse(`lb:measure:txn:NegationGuard_guard).
