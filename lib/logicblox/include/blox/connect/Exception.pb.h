// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blox/connect/Exception.proto

#ifndef PROTOBUF_blox_2fconnect_2fException_2eproto__INCLUDED
#define PROTOBUF_blox_2fconnect_2fException_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace blox {
namespace connect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_blox_2fconnect_2fException_2eproto();
void protobuf_AssignDesc_blox_2fconnect_2fException_2eproto();
void protobuf_ShutdownFile_blox_2fconnect_2fException_2eproto();

class ExceptionContainer;
class WorkspaceException;

enum WorkspaceException_Code {
  WorkspaceException_Code_DOES_NOT_EXIST = 1,
  WorkspaceException_Code_ALREADY_EXISTS = 2
};
bool WorkspaceException_Code_IsValid(int value);
const WorkspaceException_Code WorkspaceException_Code_Code_MIN = WorkspaceException_Code_DOES_NOT_EXIST;
const WorkspaceException_Code WorkspaceException_Code_Code_MAX = WorkspaceException_Code_ALREADY_EXISTS;
const int WorkspaceException_Code_Code_ARRAYSIZE = WorkspaceException_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkspaceException_Code_descriptor();
inline const ::std::string& WorkspaceException_Code_Name(WorkspaceException_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkspaceException_Code_descriptor(), value);
}
inline bool WorkspaceException_Code_Parse(
    const ::std::string& name, WorkspaceException_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkspaceException_Code>(
    WorkspaceException_Code_descriptor(), name, value);
}
// ===================================================================

class ExceptionContainer : public ::google::protobuf::Message {
 public:
  ExceptionContainer();
  virtual ~ExceptionContainer();

  ExceptionContainer(const ExceptionContainer& from);

  inline ExceptionContainer& operator=(const ExceptionContainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExceptionContainer& default_instance();

  void Swap(ExceptionContainer* other);

  // implements Message ----------------------------------------------

  ExceptionContainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExceptionContainer& from);
  void MergeFrom(const ExceptionContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .blox.connect.WorkspaceException workspace = 2;
  inline bool has_workspace() const;
  inline void clear_workspace();
  static const int kWorkspaceFieldNumber = 2;
  inline const ::blox::connect::WorkspaceException& workspace() const;
  inline ::blox::connect::WorkspaceException* mutable_workspace();
  inline ::blox::connect::WorkspaceException* release_workspace();
  inline void set_allocated_workspace(::blox::connect::WorkspaceException* workspace);

  // @@protoc_insertion_point(class_scope:blox.connect.ExceptionContainer)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_workspace();
  inline void clear_has_workspace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::blox::connect::WorkspaceException* workspace_;
  friend void  protobuf_AddDesc_blox_2fconnect_2fException_2eproto();
  friend void protobuf_AssignDesc_blox_2fconnect_2fException_2eproto();
  friend void protobuf_ShutdownFile_blox_2fconnect_2fException_2eproto();

  void InitAsDefaultInstance();
  static ExceptionContainer* default_instance_;
};
// -------------------------------------------------------------------

class WorkspaceException : public ::google::protobuf::Message {
 public:
  WorkspaceException();
  virtual ~WorkspaceException();

  WorkspaceException(const WorkspaceException& from);

  inline WorkspaceException& operator=(const WorkspaceException& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkspaceException& default_instance();

  void Swap(WorkspaceException* other);

  // implements Message ----------------------------------------------

  WorkspaceException* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkspaceException& from);
  void MergeFrom(const WorkspaceException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WorkspaceException_Code Code;
  static const Code DOES_NOT_EXIST = WorkspaceException_Code_DOES_NOT_EXIST;
  static const Code ALREADY_EXISTS = WorkspaceException_Code_ALREADY_EXISTS;
  static inline bool Code_IsValid(int value) {
    return WorkspaceException_Code_IsValid(value);
  }
  static const Code Code_MIN =
    WorkspaceException_Code_Code_MIN;
  static const Code Code_MAX =
    WorkspaceException_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    WorkspaceException_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return WorkspaceException_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return WorkspaceException_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return WorkspaceException_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .blox.connect.WorkspaceException.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::blox::connect::WorkspaceException_Code code() const;
  inline void set_code(::blox::connect::WorkspaceException_Code value);

  // @@protoc_insertion_point(class_scope:blox.connect.WorkspaceException)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int code_;
  friend void  protobuf_AddDesc_blox_2fconnect_2fException_2eproto();
  friend void protobuf_AssignDesc_blox_2fconnect_2fException_2eproto();
  friend void protobuf_ShutdownFile_blox_2fconnect_2fException_2eproto();

  void InitAsDefaultInstance();
  static WorkspaceException* default_instance_;
};
// ===================================================================


// ===================================================================

// ExceptionContainer

// required string message = 1;
inline bool ExceptionContainer::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExceptionContainer::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExceptionContainer::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExceptionContainer::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ExceptionContainer::message() const {
  // @@protoc_insertion_point(field_get:blox.connect.ExceptionContainer.message)
  return *message_;
}
inline void ExceptionContainer::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:blox.connect.ExceptionContainer.message)
}
inline void ExceptionContainer::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:blox.connect.ExceptionContainer.message)
}
inline void ExceptionContainer::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blox.connect.ExceptionContainer.message)
}
inline ::std::string* ExceptionContainer::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blox.connect.ExceptionContainer.message)
  return message_;
}
inline ::std::string* ExceptionContainer::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExceptionContainer::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blox.connect.ExceptionContainer.message)
}

// optional .blox.connect.WorkspaceException workspace = 2;
inline bool ExceptionContainer::has_workspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExceptionContainer::set_has_workspace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExceptionContainer::clear_has_workspace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExceptionContainer::clear_workspace() {
  if (workspace_ != NULL) workspace_->::blox::connect::WorkspaceException::Clear();
  clear_has_workspace();
}
inline const ::blox::connect::WorkspaceException& ExceptionContainer::workspace() const {
  // @@protoc_insertion_point(field_get:blox.connect.ExceptionContainer.workspace)
  return workspace_ != NULL ? *workspace_ : *default_instance_->workspace_;
}
inline ::blox::connect::WorkspaceException* ExceptionContainer::mutable_workspace() {
  set_has_workspace();
  if (workspace_ == NULL) workspace_ = new ::blox::connect::WorkspaceException;
  // @@protoc_insertion_point(field_mutable:blox.connect.ExceptionContainer.workspace)
  return workspace_;
}
inline ::blox::connect::WorkspaceException* ExceptionContainer::release_workspace() {
  clear_has_workspace();
  ::blox::connect::WorkspaceException* temp = workspace_;
  workspace_ = NULL;
  return temp;
}
inline void ExceptionContainer::set_allocated_workspace(::blox::connect::WorkspaceException* workspace) {
  delete workspace_;
  workspace_ = workspace;
  if (workspace) {
    set_has_workspace();
  } else {
    clear_has_workspace();
  }
  // @@protoc_insertion_point(field_set_allocated:blox.connect.ExceptionContainer.workspace)
}

// -------------------------------------------------------------------

// WorkspaceException

// required string name = 1;
inline bool WorkspaceException::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkspaceException::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkspaceException::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkspaceException::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WorkspaceException::name() const {
  // @@protoc_insertion_point(field_get:blox.connect.WorkspaceException.name)
  return *name_;
}
inline void WorkspaceException::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:blox.connect.WorkspaceException.name)
}
inline void WorkspaceException::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:blox.connect.WorkspaceException.name)
}
inline void WorkspaceException::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blox.connect.WorkspaceException.name)
}
inline ::std::string* WorkspaceException::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:blox.connect.WorkspaceException.name)
  return name_;
}
inline ::std::string* WorkspaceException::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorkspaceException::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:blox.connect.WorkspaceException.name)
}

// required .blox.connect.WorkspaceException.Code code = 2;
inline bool WorkspaceException::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkspaceException::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkspaceException::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkspaceException::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::blox::connect::WorkspaceException_Code WorkspaceException::code() const {
  // @@protoc_insertion_point(field_get:blox.connect.WorkspaceException.code)
  return static_cast< ::blox::connect::WorkspaceException_Code >(code_);
}
inline void WorkspaceException::set_code(::blox::connect::WorkspaceException_Code value) {
  assert(::blox::connect::WorkspaceException_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:blox.connect.WorkspaceException.code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connect
}  // namespace blox

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::blox::connect::WorkspaceException_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blox::connect::WorkspaceException_Code>() {
  return ::blox::connect::WorkspaceException_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_blox_2fconnect_2fException_2eproto__INCLUDED
