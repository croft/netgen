############################
#   GLOBAL CONFIGURATION   #
############################
[global]

#
#  SERVER STARTUP
#

# Whether lb services should start lb web-server or not
enabled = true

# How long lb services should wait for the web server to start before timing out, in seconds
startup_timeout = 60

# Arguments to the JVM instance
jvm_args = -Xmx3200m -Xss2048k

# The directory where the web server will write memory dumps on Out Of Memory Errors
# Set to empty to disable dumps
jvm_dump_dir = $(LB_DEPLOYMENT_HOME)/logs/current

# Whether the web server should scan workspaces for services at startup
scan_workspaces_on_startup = true

# A regular expression to match workspaces to scan at startup; only used if
# scan_workspaces_on_startup is true, and has no effect on static workspaces
#   Example: delim-.*|protobuf.* scans only workspaces starting with "delim-"
#   or "protobuf", besides installing static workspaces.
scan_workspaces = .*

# Number of threads to use when scanning workspaces for services
service_scanning_threads = 1

# A list of directories to scan for handler jars. Equivalent to calling lb web-server load -j on
# each jar with the exception that it is not allowed to have configuration conflicts between
# options in the lb-web-server.config files stored inside the jars.
handler_dirs = share/java/handlers



#
#  LOGGING
#
#  The following options configure the server log (for general log messages) and the server access log (with
#  entries for each HTTP request handled by the server).
#

# File to store the server log. Accepts a filename or - for stdout. If this property is empty, will print to
# the lb-web-server.log file in the deployment log directory when started in daemon mode, or to stdout if
# started in foreground.
#log_file = -
#log_file = $(LB_DEPLOYMENT_HOME)/logs/current/lb-web-server.log

# If "systemd" option is not set, lb web-server will try to infer its value based on the presence of
# the "IN_SYSTEMD" environment variable. If this flag is true, the server log will not contain timestamps.
#systemd = false

# The timezone used for log timestamps as a Java TimeZone ID (UTC, PST, America/Los Angeles, etc). This is
# applied to both the server log and server access log.
# The special "host" timezone can be used to select the timezone of the host running the server.
# If left empty, undefined or an invalid timezone is specified, then UTC will be used.
log_timezone = UTC

# If true, server log will add a column after the timestamp with the elapsed time in milliseconds since the
# creation of the logger (very close to the server startup).
log_elapsed = false

# Directory for access logs. If this property is empty, the access log will be printed to stderr.
logdir_access = $(LB_DEPLOYMENT_HOME)/logs/current


#
#  DEBUG LOGGING
#
#  The following should not be used in production as they affect performance.
#

# Print all protobuf request and response messages to the log
log_messages = false

# Print all HTTP messages in protobuf format to the log
log_http = false

# Print all connectblox requests to the log
log_connectblox = false

# Log very detailed info when an exception is detected
log_exception_details = false

# Enable or disable logging of rules generated for TDX services
log_delim_file_rules = false

#
#  DEBUG SUPPORT
#

# Set the web server debug flag to log all events (very noisy).
debug = false

# Do not delete temporary files created by TDX.
debug_keep_tdx_files = false


#
#  AUTHENTICATION
#

# Set to true to force authentication to use secure cookies
secure_cookies = false

# Set to true to force authentication to use HttpOnly cookies
httponly_cookies = false

# Session ids are stored here so that user sessions survive restarts of the web server
authentication_cache = $(LB_DEPLOYMENT_HOME)/authentication_cache

# Path of directory where encryption keys are kept
keydir = $(HOME)/.s3lib-keys



#
#  SERVER
#

# Set the maximum size of a form post, to protect against DOS attacks from large forms (2MB)
max_form_content_bytes = 4194304

# Number of worker threads to use to handle requests
http_server_threads = 250

# Whether or not a client disconnection should abort the transaction it spawned
# Currently only works for protobuf services.
tcp_abort_on_disconnect = true


#
#  HTTP CLIENT
#
# These are configuration options for the HttpClient used internally by the web server when
# connecting to other services (e.g. when acting as a proxy).

# Size of thread pool for HttpClient (shared among all clients)
tcp_client_threads = 100

# Max time the whole exchange can take (in ms)
#tcp_timeout = 320000

# Max time to wait when establishing a connection to the server (in ms)
#tcp_connect_timeout = 75000

# Max time in a connection without processing anything (in ms).
# Processing is defined to be "parsing or generating".
#tcp_idle_timeout = 20000

# Max number of connections httpclient can hold to an address
#tcp_max_connections_per_address = 100


#
# ASYNC REQUESTS
#
# These are configuration options for the AsyncHandler, the internal mechanism that allows
# lb-web handlers to accept ascynchronous requests

# size of the in-memory cache. When cache size increases close to this value, least accessed requests are
# evicted to free up memory.
async_response_cache_size=10000

# Time since last access after which async requests are deleted (in hours)
async_response_expiration_time=24

############################
#  CONFIGURATION SECTIONS  #
############################

#
#  S3 CONFIGURATION
#

# The s3:default configuration is currently used for all S3 access from services. It is a separate
# configuration section because we might later allow multiple S3 configurations.
[s3:default]
# Concurrency of general management of S3 downloads.
max_concurrent = 50

# Number of concurrent uploads/downloads for S3
s3_max_concurrent = 10

# Size of chunks for multipart uploads to S3
chunk_size = 5242880

# iam_role = default
# access_key = ...
# secret_key = ...


#
#  GOOGLE CLOUD STORAGE CONFIGURATION
#

# The gs:default configuration is currently used for all GCS access from services. It is a separate
# configuration section because we might later allow multiple GCS configurations.
[gs:default]
# Concurrency of general management of GCS downloads.
max_concurrent = 50

# Number of concurrent uploads/downloads for GCS
gs_max_concurrent = 10

# Multipart uploads to GCS are not supported yet
# Size of chunks for multipart uploads to GCS
# chunk_size = 5242880

# access_key = ...
# secret_key = ...
# google_application_credentials = ...



#
#  TCP ENDPOINTS
#

[tcp:public]
port = 8080
address = 0.0.0.0
# comma-separated list of groups allowed in this endpoint; if omitted, defaults to lb:web:no_group
groups = lb:web:public, lb:web:no-group
# Attempt to use an inherited channel, usually created by systemd or inetd
#inherited = true

# Set setMaxIdleTime on SocketConnector, which is similar to setting
# SO_TIMEOUT on a socket. 0 means no timeout.
tcp_server_max_idle_time = 200000

[tcp:internal]
port = 55183
address = 0.0.0.0
groups = lb:web:internal, lb:web:no-group

# Set setMaxIdleTime on SocketConnector, which is similar to setting
# SO_TIMEOUT on a socket. 0 means no timeout.
tcp_server_max_idle_time = 0

# [tcp:public-ssl]
# ssl = true
# port = 8443
# address = 0.0.0.0
# groups = authenticated, public
# requires_authentication = true
# keystore_path = $(LB_DEPLOYMENT_HOME)/config/keystore
# truststore_path = $(LB_DEPLOYMENT_HOME)/config/keystore
# keystore_password = password
# truststore_password = password
# keymanager_password = password



#
# ADMISSION CONTROL SUPPORT
#

# Declare a new AdmissionQueue of type Serializer. Services that declare
# a parameter AdmissionQueue = my_serializer will have their requests
# serialized (only one executes at a time).
#[admission-control:my_serializer]
#classname = com.logicblox.bloxweb.SerializerHandlerExecutor
# sleep after a request is done (in ms)
#sleep = 0

# An AdmissionQueue of type Queued, which allows readonly requests to
# execute concurrently but execute write requests exclusively.
#[admission-control:my_queue]
#classname = com.logicblox.bloxweb.QueuedHandlerExecutor


#
#  HANDLERS
#

[handler:default-protobuf]
classname = com.logicblox.bloxweb.DefaultProtoBufHandler
syncmode = sync


[handler:delimited-file]
classname = com.logicblox.bloxweb.delim.DelimitedFileHandler
tmpdir = /tmp
syncmode = sync


[handler:dynamic-delimited-file]
classname = com.logicblox.bloxweb.delim.DynamicDelimitedFileHandler
tmpdir = /tmp
syncmode = sync


[handler:delimited-file-txn]
classname = com.logicblox.bloxweb.delim.DelimTransactionHandler
syncmode = sync


[handler:transparent-proxy]
classname = com.logicblox.bloxweb.proxy.TransparentProxyHandler
syncmode = sync


[handler:exact-proxy]
classname = com.logicblox.bloxweb.proxy.ExactProxyHandler


[handler:global-protobuf]
classname = com.logicblox.bloxweb.GlobalProtoBufHandler
syncmode = sync

[handler:admin]
classname = com.logicblox.bloxweb.AdminHandler

# Configuration for the Activation command. There are currently 2 alternatives:
#
# 1) set maintenance_touch: when the app is to be deactivated, admin will touch
#    this file; when the app is to be activated, the file is deleted.
#
maintenance_touch=$(LB_DEPLOYMENT_HOME)/maintenance

#
# 2) set maintenance_file and maintenance_directory: when the web app is to
#    be deactivated, admin will copy the file into the directory; when the
#    web app is to be activated, the file is deleted from the directory.
#
# maintenance_file=/tmp/maintenance.html
# maintenance_directory=$(LB_DEPLOYMENT_HOME)


[handler:broadcast]
classname = com.logicblox.bloxweb.websocket.BroadcastHandler
syncmode = strict_sync

[handler:login-handler]
classname = com.logicblox.bloxweb.authentication.LoginHandler
syncmode = strict_sync

[handler:meta]
classname = com.logicblox.bloxweb.MetaHandler


# The wait handler just waits. It is only useful for performance testing.
[handler:wait]
classname = com.logicblox.bloxweb.WaitHandler


#
#  EXTENSION HANDLERS (will be extracted in the future)
#

# The bcrypt handler converts a clear text password into a hashed password on requests that update
# passwords; otherwise, it behaves like an normal protobuf service.
[handler:lb:web:bcrypt-credentials]
classname = com.logicblox.bloxweb.authentication.BCryptCredentialsHandler


# Handler to report on the currently authenticated user.
[handler:lb:web:current-user]
classname = com.logicblox.bloxweb.authentication.UserInfoHandler


[handler:lb:web:bcrypt-change-password]
classname = com.logicblox.bloxweb.authentication.ChangePasswordHandler


[handler:lb:web:bcrypt-reset-password]
classname = com.logicblox.bloxweb.authentication.ResetPasswordHandler


[handler:lb:web:bcrypt-confirm-reset-password]
classname = com.logicblox.bloxweb.authentication.ConfirmResetPasswordHandler


[handler:lb:web:send-email]
classname = com.logicblox.bloxweb.email.SendEmailHandler



#
#  STATIC WORKSPACES
#

[workspace:login]
service_login = $(CONFIG_DIR)/login_service_config.json
available = true

[workspace:lb_meta]
service_meta = $(CONFIG_DIR)/meta_service_config.json
available = true


#[workspace:some-static-service]
#config = configuration.json
#request_protocol = request_protocol.descriptor
#response_protocol = response_protocol.descriptor



#
#  REALM CONFIGURATIONS
#

[realm-config:default-password]
class = com.logicblox.bloxweb.authentication.PasswordBCryptAuthenticationMechanism
stateful = true
realm_option_session_key_prefix = lb-session-key
realm_option_seconds_to_live = 1800
mechanism_option_credential_service = /admin/credentials
user_cache_size = 100
user_cache_seconds_until_expire = 1800


[realm-config:default-signature]
class = com.logicblox.bloxweb.authentication.SignatureAuthenticationMechanism
stateful = false
realm_option_header_regex = ^x-logicblox-.*$
realm_option_required_headers = Date Digest
realm_option_max_request_time_skew = 900000
mechanism_option_allowed_signature_algorithm = SHA512withRSA
mechanism_option_credential_service = /admin/credentials
user_cache_size = 100
user_cache_seconds_until_expire = 1800

# set either one of the following option to 0 to disable caching of public keys
public_key_cache_size = 100
public_key_cache_seconds_until_expire = 600


[realm-config:default-saml]
class = com.logicblox.bloxweb.authentication.saml.SAMLMechanism
stateful = true
realm_option_session_key_prefix = lb-session-key
realm_option_seconds_to_live = 1800
user_cache_size = 100
user_cache_seconds_until_expire = 1800



# Send statistics to a statsd server.
#   - Counters
#     - <prefix>.requests.total - Number of requests
#     - <prefix>.requests.timed_out - Number of timed out requests
#     - <prefix>.responses.total - Number of responses
#     - <prefix>.responses.1xx - Number of responses with Informational HTTP status code
#     - <prefix>.responses.2xx - Number of responses with Success HTTP status code
#     - <prefix>.responses.3xx - Number of responses with Redirection HTTP status code
#     - <prefix>.responses.4xx - Number of responses with Client Error HTTP status code
#     - <prefix>.responses.5xx - Number of responses with Server Error HTTP status code
#   - Timers
#     - <prefix>.responses.time - Time to process request (ms)

# [statsd]
# prefix = lb.web
# hostname = 127.0.0.1
# port = 8125

#
# This is an example of attaching support to authenticate users with google
# accounts into a realm. Add one of these sections to lb-web-server.config to
# indicate that users of certain domains can login into a certain realm using
# their google accounts.
#
#[google-signin:my-app-name]
# this is the client id that google issues from their console. It must match the
# id used by the client side to generate the token
#client_id = YOUR_CLIENT_ID.apps.googleusercontent.com

# the realm into which the user will be authenticated if google signin succeeds
#realm = my-app-realm

# google sends the lb-server the authenticated user email. This allows to
# restrict the domains that can log into the realm. If this is empty or
# commented out, any domain is allowed; otherwise, only emails belonging to one
# of these domains is allowed.
#allowed_domains = logicblox.com, predictix.com

# an optional absolute url to a credentials service. If defined, new users will
# be created in this credentials service for users that authenticated
# successfuly but who did not have an entry. Note that the username will be the
# user email, and no password will be set.
#credential_service = http://localhost:55183/admin/credentials

# an optional name of a user role. If a credentials service is set (above) and
# a default role is set, then this role will be assigned to any new users  that
# authenticate via this google sign in configuration. Note that the role must
# already exist in the credentials database configured above.
#default_role = general access role


#
# Settings for plugins and handlers provided by the workbook jar
#

#[handler:workbook-action-service-4]
#jar = $(LB_WORKBOOK_SERVICE_HOME)/lib/java/handlers/lb-web-workbooks.jar
#classname = com.logicblox.bloxweb.workbooks.WorkbookActionHandler
#debug = false
#keep = false

# Max time the whole exchange can take (in ms)
#tcp_timeout = 320000

# Max time to wait when establishing a connection to the server (in ms)
#tcp_connect_timeout = 75000

# Max time in a connection without processing anything (in ms).
# Processing is defined to be "parsing or generating".
#tcp_idle_timeout = 20000

# Max number of connections httpclient can hold to an address
#tcp_max_connections_per_address = 100
