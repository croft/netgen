package lb.web.credentials;

import "blox/options.proto";

option java_package = "com.logicblox.bloxweb.authentication";

/**
 * Request/Response union
 */
message CredentialRequest
{
  repeated GetCredentialRequest get = 1;
  repeated SetCredentialRequest set = 2;
  optional ListUsersRequest list = 3;
}

message CredentialResponse
{
  repeated GetCredentialResponse get = 1;
  repeated SetCredentialResponse set = 2;
  optional ListUsersResponse list = 3;

  optional string error = 4;
  optional string error_code = 5;
}

/**
 * Get
 */
message GetCredentialRequest
{
  optional string user_name = 1;
  optional string email = 2;
  optional string change_token = 3;

  // also bring back the password hash
  optional bool include_password_hash = 4;

  // also bring back the public key
  optional bool include_public_key = 5;
}

message GetCredentialResponse
{
  required string user_name = 1;
  optional string password_hash = 2;
  optional string public_key = 3;

  // Corresponds to EMAIL column in users file. Only set if an email
  // address is available.
  optional string email = 4;

  // Corresponds to ACTIVE column in users file. This field is
  // normally always populated, but for generality of the protocol the
  // field is optional.
  optional bool active = 5;

  // Authorization roles assigned to this user
  repeated string roles = 6 [(blox.options.set) = true];
}

/**
 * Set
 */
message SetCredentialRequest
{
  // User name, corresponds to the USER column in the users file.
  required string user_name = 1;

  // The clear text password is cleared in the custom handler for
  // setting credentials and changed into a password_hash
  optional string password_clear = 2;

  // Hashed password. Usually this is a bcrypt hash. This corresponds
  // to the PASSWORD column in the users file.
  optional string password_hash = 3;
  optional bool delete_password_hash = 11;

  // Public key. This corresponds to the PUBLIC_KEY column of the
  // users file.
  optional string public_key = 4;

  // Is users active or not? This corresponds to the ACTIVE column of
  // the users file.
  optional bool active = 6;

  // Configure if the user should be created if it does not exist. By
  // default, the user is not created.
  optional bool create = 7 [default = false];

  // Change password token
  optional string change_token = 8;
  optional string change_token_valid = 9;
  optional bool delete_change_tokens = 10;
}

message SetCredentialResponse
{
  optional string error = 1;
  optional string error_code = 2;
}

/**
 * List
 */
message ListUsersRequest
{
}

message ListUsersResponse
{
  repeated string user = 1;
}
