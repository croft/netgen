(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.modelerTestUtils = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * This module defines a collection of builder classes using which a client may construct
 *      complex measure expressions using a convenient and readable object-oriented API.
 *  In addition, the root builder class (called 'Expr') provides methods that allow
 *      for the convenient bottom-up construction of complex measure expressions in
 *      a chaining syntax that obviates the need for repeated calls to 'new' for each
 *      node in the resulting measure expr. For instance, one could define an agg expr
 *      using either the following syntax:
 *
 *          new AggExpr( new MetricExpr('sales'), method, grouping )
 *
 *      or the following, which uses the bottom-up chaining syntax:
 *
 *          new MetricExpr('sales').aggBy(method, grouping)
 *
 * @module MQG
 *
 */

(function(name, factory) {

  // Install this module using one of three different methods

  if (typeof define === 'function' && define.amd) { //jshint ignore:line
    // Install using the RequireJS API
    define(factory); //jshint ignore:line
  } else if (typeof exports === 'object') {
    // Install using the Node API
    module.exports = factory();
  } else {
    // Install in a browser.
    window[name] = factory(); //jshint ignore:line
  }

}('MQG', function() { //jshint ignore:line
  var _extendClass = function(Subclass, Superclass) {
    Subclass.prototype = Object.create(Superclass.prototype);
    Subclass.prototype.constructor = Subclass;
  };
  var _sanitizeStr = function(str) {
    return str.toUpperCase().trim();
  };
  /**
   * @param {*} arr
   * @param {(Function|Function[])} constructors
   * @param {(undefined|String)} msg
   */
  var assert = function(cond, message) {
    message = message || '';
    if (!cond) {
      throw new SyntaxError('Assertion failed: ' + message);
    }
  };
  /**
   * Assert that 'arr' is an array of elements constructed by constructors
   *
   * @param {*} arr
   * @param {(Function|Function[])} constructors
   * @param {(undefined|String)} msg
   */
  var assertIsArray = function(arr, constructors, msg) {
    var checkElement;
    if (typeof constructors === 'function') {
      checkElement = function(element) {
        return element instanceof constructors;
      };
    } else {
      assert(Array.isArray(constructors));
      checkElement = function(element) {
        return constructors.some(function(constructor) {
          return element instanceof constructor;
        });
      };
    }
    assert(Array.isArray(arr) && (arr.length === 0 || checkElement(arr[0])), msg);
  };
  // assert that argument is an array
  var _toArray = function(s) {
    var result = [];
    if (Array.isArray(s)) {
      result = s;
    } else if (s !== undefined && s !== null) {
      result.push(s);
    }
    return result;
  };

  var Type = (function() {
    var _TYPES = ['STRING', 'INT', 'FLOAT', 'DECIMAL', 'BOOLEAN', 'NAMED'];
    var _validateType = function(type) {
      type = _sanitizeStr(type);
      if (_TYPES.indexOf(type) === -1) {
        throw new SyntaxError('Invalid type');
      } else {
        return type;
      }
    };
    /**
     * Creates a Type object
     *
     * @class Type
     * @constructor
     * @param {String} kind among _TYPES
     * @param {(String|undefined)} name for NAMED types
     */
    function Type(kind, name) {
      if (typeof(kind) === 'object' && kind.kind) {
        return Type.call(this, kind.kind, kind.named);
      }
      assert(typeof kind === 'string', 'kind should be string, but it is currently ' +kind);
      kind = _validateType(kind);
      assert(kind === 'NAMED' ? typeof name === 'string' : name === undefined);
      this.kind = kind;
      if (kind === 'NAMED') {
        this.named = name;
      }
    }
    return Type;
  })();
  var ValueType = (function() {
    /**
     * Creates a ValueType object
     *
     * @class ValueType
     * @constructor
     * @param {String} kind 'SINGLETON' or 'SET'
     * @param {Type} type of value
     */
    function ValueType(kind, type) {
      assert(typeof kind === 'string' && ['SINGLETON', 'SET'].indexOf(kind) !== -1);
      assert(type instanceof Type);
      this.kind = kind;
      this.type = type;
    }
    return ValueType;
  })();
  var BaseSignature = (function() {
    /**
     * Creates a BaseSignature object
     *
     * @class BaseSignature
     * @constructor
     * @param {Intersection} inter 
     * @param {(ValueType|undefined)} type of value (optional)
     */
    function BaseSignature(inter, type) {
      assert(inter instanceof Intersection);
      assert(type instanceof ValueType || typeof type === 'undefined');
      this.intersection = inter;
      this.type = type;
    }
    return BaseSignature;
  })();


  var Expr = (function() {
    /**
     * Creates an Expr (Measure Expression) object
     *
     * @class Expr
     * @constructor
     * @param {String} kind Kind of the Measure Exprssion
     * Possible values are:
     * <ul>
     *  <li>ATTRIBUTE</li>
     *  <li>METRIC</li>
     *  <li>FILTER</li>
     *  <li>DICE</li>
     *  <li>AGGREGATION</li>
     *  <li>COMPOSITE</li>
     *  <li>TERM</li>
     *  <li>OP</li>
     *  <li>WIDEN</li>
     *  <li>DROP</li>
     *  <li>DIFFERENCE</li>
     *  <li>COND</li>
     *  <li>DEMOTE</li>
     *  <li>PARAM</li>
     *  <li>PREV</li>
     * </ul>
     * @param {Object} val a JSON object that describes the actual Measure Expression
     * @param {String} [str] string-based expr
     */
    function Expr(kind, val, str) {
      /**
       * Reference to the JSON representation of the Expr
       *
       * @private
       * @property _value
       */
      assert(!kind || !str, "kind and str are mutually exclusive");
      if (kind) {
        this.kind = kind.toUpperCase();
        this[kind.toLowerCase()] = val;
      } else if(str){
        this.str = str;
      }
    }
    /**
     * Convenience post-fix method that uses the FilterExpr builder
     * to filter the current Expr by a conjunction or disjunction of Comparison objects
     *
     * @method filterBy
     * @param {Comparison[]} comparisons an array of Comparison objects
     * @param {Boolean} [isDisjunction=false] set to true to keep values that satisfy any of the comparisons
     * @return {FilterExpr} the Expr resulting from the filtering
     */
    Expr.prototype.filterBy = function(comparisons, type, isDisjunction) {
      return new FilterExpr(this, comparisons, type, isDisjunction);
    };
    /**
     * Convenience post-fix method that uses the DiceExpr builder
     * to filter the current Expr by a conjunction or disjunction of Expr objects
     *
     * @method diceBy
     * @param {Expr[]} dicers an array of Expr objects
     * @param {Boolean} [isDisjunction=false] set to true to keep values that satisfy any of the dicers
     * @return {DiceExpr} the Expr resulting from the dice
     */
    Expr.prototype.diceBy = function(dicers, isDisjunction) {
      if (!_toArray(dicers).length) {
        return this;
      }
      return new DiceExpr(this, dicers, isDisjunction);
    };
    /**
     * Convenience post-fix method that uses the AggExpr builder
     * to aggregate over the current Expr using a given method and an array of Grouping objects
     *
     * @method aggBy
     * @param {String} method aggregation method. It could be one of the following:
     * <p>'COLLECT', 'AMBIG', 'TOTAL', 'MIN', 'MAX', 'COUNT', 'MODE', 'COUNT_DISTINCT', 'HISTOGRAM'</p><
     * @param {(Grouping[]|Intersection)} groupingsOrInter an array of Grouping objects or a target intersection, meaningful(and required) only if the first argument is an aggregation method
     * @return {AggExpr} the Expr resulting from the aggregation
     */
    Expr.prototype.aggBy = function(method, groupingsOrInter) {
      var parseGroupings = function(grps) {
        var output = [];
        var dim;
        for (var i = 0; i < grps.length; i++) {
          dim = grps[i];
          if (dim.indexOf('.') > -1) {
            output.push(new Grouping('MAP', dim.split('.')[0], dim.split('.')[1]));
          } else {
            output.push(new Grouping('ALL', dim));
          }
        }
        return output;
      };
      if (groupingsOrInter) {
        if (groupingsOrInter instanceof Intersection) {
          // nothing
        } else if (typeof(groupingsOrInter) === 'string') {
          groupingsOrInter = parseGroupings([groupingsOrInter]);
        } else if (Array.isArray(groupingsOrInter) && typeof(groupingsOrInter[0]) === 'string') {
          //more robust checking
          groupingsOrInter = parseGroupings(groupingsOrInter);
        }
      }
      return new AggExpr(this, method, groupingsOrInter);
    };
    Expr.prototype.widenBy = function(inter) {
      return new WidenExpr(this, inter);
    };
    Expr.prototype.headerSortBy = function(floatingLevel) {
      return new HeaderSortExpr(this, floatingLevel);
    };
    /**
     * Convenience post-fix method that creates a RelabelExpr from the given
     * labelMaps.
     *
     * @method relabelBy
     * @param  {LabelMap[]} labelMaps a list of label mappings to apply to the expr
     * @return {Expr}                 a RelabelExpr
     */
    Expr.prototype.relabelBy = function(labelMaps) {
      return new RelabelExpr(this, labelMaps);
    };
    /**
     * Convenience post-fix method to demote a dimension.
     *
     * @method demote
     * @param  {String} dimension to demote
     * @return {DemoteExpr}
     */
    Expr.prototype.demote = function(dimension) {
      return new DemoteExpr(this, dimension);
    };
    /**
     * Convenience post-fix method to drop the measure's value.
     *
     * @method drop
     * @return {DropExpr}
     */
    Expr.prototype.drop = function() {
      return new DropExpr(this);
    };

    /**
     * Convenience post-fix method that uses the OpExpr builder with an add operator
     * to add two Exprs
     *
     * @method add
     * @param {Expr} expr the Expr object to be added
     * @return {OpExpr} the OpExpr resulting from the operation
     */
    Expr.prototype.add = function(expr) {
      if (['number', 'string'].indexOf(typeof(expr)) > -1) {
        if (arguments.length === 2) {
          return this.add(new ConstantExpr(expr, arguments[1]));
        } else {
          throw 'corresponding measure service type(INT,FLOAT,DECIMAL) is required when the argument is primitive';
        }
      }
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      } else {
        return new OpExpr('+', [this, expr]);
      }
    };
    /**
     * Convenience post-fix method that uses the OpExpr builder with a subtract operator
     * to subtract an Expr from the currrent Expr
     *
     * @method subtract
     * @param {Expr} expr the Expr object to be subtracted
     * @return {OpExpr} the OpExpr resulting from the operation
     */
    Expr.prototype.subtract = function(expr) {
      if (['number', 'string'].indexOf(typeof(expr)) > -1) {
        if (arguments.length === 2) {
          return this.subtract(new ConstantExpr(expr, arguments[1]));
        } else {
          throw 'corresponding measure service type(INT,FLOAT,DECIMAL) is required when the argument is primitive';
        }
      }
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      } else {
        return new OpExpr('-', [this, expr]);
      }
    };
    /**
     * Convenience post-fix method that uses the OpExpr builder with a multiply operator
     * to multiply the current Expr with the one in param
     *
     * @method multiply
     * @param {Expr} expr the multiplier
     * @return {OpExpr} the OpExpr resulting from the operation
     */
    Expr.prototype.multiply = function(expr) {
      if (['number', 'string'].indexOf(typeof(expr)) > -1) {
        if (arguments.length === 2) {
          return this.multiply(new ConstantExpr(expr, arguments[1]));
        } else {
          throw 'corresponding measure service type(INT,FLOAT,DECIMAL) is required when the argument is primitive';
        }
      }
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      } else {
        return new OpExpr('*', [this, expr]);
      }
    };
    /**
     * Convenience post-fix method that uses the OpExpr builder with a divide operator
     * to divide the current Expr by the one in param
     *
     * @method divide
     * @param {Expr} expr the divisor
     * @return {OpExpr} the OpExpr resulting from the operation
     */
    Expr.prototype.divide = function(expr) {
      if (['number', 'string'].indexOf(typeof(expr)) > -1) {
        if (arguments.length === 2) {
          return this.divide(new ConstantExpr(expr, arguments[1]));
        } else {
          throw 'corresponding measure service type(INT,FLOAT,DECIMAL) is required when the argument is primitive';
        }
      }

      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      return new OpExpr('/', [this, expr]);
    };

    /**
     * Convenience post-fix method to widen an expression to other dimension levels
     *
     * @method widen
     * @param {(QualifiedLevel[]|string[]|Intersection)} intersection the intersection to widen to
     * @return {WidenExpr} the WidenExpr resulting from the operation
     */
    Expr.prototype.widen = function(intersection) {
      if (!(intersection instanceof Intersection)) {
        intersection = new Intersection(intersection);
      }
      return new WidenExpr(this, intersection);
    };

    /**
     * Convenience post-fix method to override an expression with another expression
     *
     * @method override
     * @param {Expr} expr the secondary expression
     * @return {OverrideExpr} the OverrideExpr resulting from the operation
     */
    Expr.prototype.overrideBy = function(expr2) {
      return new OverrideExpr(this, expr2);
    };

    /**
     * Convenience post-fix method to difference an expression by another expression
     *
     * @method difference
     * @param {Expr} expr the secondary expression
     * @return {DifferenceExpr} the DifferenceExpr resulting from the operation
     */
    Expr.prototype.difference = function(expr2) {
      return new DifferenceExpr(this, expr2);
    };

    Expr.prototype.toInt = function() {
      return new CastExpr(this, new Type('INT'));
    };
    Expr.prototype.toFloat = function() {
      return new CastExpr(this, new Type('FLOAT'));
    };
    Expr.prototype.toDecimal = function() {
      return new CastExpr(this, new Type('DECIMAL'));
    };
    Expr.prototype.toString = Expr.prototype.toBoolean = function() {
      return this;
    };
    Expr.prototype.prev = function() {
      return new PrevExpr(this);
    };
    Expr.prototype.abs = function() {
      return new OpExpr('ABS', [this]);
    };

    Expr.prototype.negate = function() {
      return new OpExpr('NEGATE', [this]);
    };
    Expr.prototype.cast = function(type) {
      if(typeof type === 'string'){
        type = type.toUpperCase(); 
      }
      return new CastExpr(this, new Type(type));
    };

    return Expr;
  })();

  var AttributeExpr = (function(_super) {
    /**
     * Creates an AttributeExpr object
     *
     * @class AttributeExpr
     * @constructor
     * @extends Expr
     * @param {QualifiedLevel} qualifiedLevel a QualifiedLevel object
     * @param {String} name name of the attribute
     * @example
     *
     *      // first we create a QualifiedLevel object
     *      var ql = new MQG.QualifiedLevel('Product', 'sku');
     *
     *      // then we create the AttributeExpr object
     *      var attr = new MQG.AttributeExpr(ql, 'id');
     *
     */
    function AttributeExpr(qualifiedLevel, name) {
      _super.call(this, 'ATTRIBUTE', attribute(qualifiedLevel, name));
    }
    _extendClass(AttributeExpr, _super);
    return AttributeExpr;
  })(Expr);

  var MetricExpr = (function(_super) {
    /**
     * Creates a MetricExpr object
     * @param {String} name  name of the metric
     * @param {(MQG.Intersection|undefined)} inter implicit aggregation for the metric
     */
    function MetricExpr(name, inter) {
      assert(typeof name === 'string');
      assert(typeof inter === 'undefined' || inter instanceof Intersection);
      if (inter instanceof Intersection) {
        // use an AppExpr to instantiate a MetricExpr with its argument
        var metricExpr = new MetricExpr(name);
        return new AppExpr(metricExpr, new InterArgument('inter', inter));
      } else {
        var value = {
          'name': name,
        };
        _super.call(this, 'METRIC', value);
      }
    }
    _extendClass(MetricExpr, _super);
    return MetricExpr;
  })(Expr);

  var MeasureExpr = (function(_super) {
    /**
     * Creates a MetricExpr object
     * @param {String} name  name of the metric
     * @param {(MQG.Intersection|undefined)} inter implicit aggregation for the metric
     */
    function MeasureExpr(name) {
      assert(typeof name === 'string');
      if (name.indexOf('.') > -1) {
        return new AttributeExpr(name);
      } else {
        return new MetricExpr(name);
      }
    }
    return MeasureExpr;
  })(MetricExpr, AttributeExpr);

  var OpExpr = (function(_super) {
    var _OPERATORS = {
      'NEGATE': 'NEGATE',
      '!': 'NEGATE', // alternate notation
      'SQRT': 'SQRT',
      'GAMMA': 'GAMMA',
      'LOG': 'LOG',
      'TO_UPPER': 'TO_UPPER',
      'TO_LOWER': 'TO_LOWER',
      'ADD': 'ADD',
      '+': 'ADD', // alternate notation
      'SUBTRACT': 'SUBTRACT',
      '-': 'SUBTRACT', // alternate notation
      'MULTIPLY': 'MULTIPLY',
      '*': 'MULTIPLY', // alternate notation
      'DIVIDE': 'DIVIDE',
      '/': 'DIVIDE', // alternate notation
      'NAMED': 'NAMED',
      'INT_TO_FLOAT': 'INT_TO_FLOAT',
      'INT_TO_DECIMAL': 'INT_TO_DECIMAL',
      'DECIMAL_TO_INT': 'DECIMAL_TO_INT',
      'DECIMAL_TO_FLOAT': 'DECIMAL_TO_FLOAT',
      'STRING_TO_FLOAT': 'STRING_TO_FLOAT',
      'STRING_TO_INT': 'STRING_TO_INT',
      'STRING_TO_DECIMAL': 'STRING_TO_DECIMAL',
      'FLOAT_TO_DECIMAL': 'FLOAT_TO_DECIMAL',
      'POW': 'POW',
      'AS_ENTITY': 'AS_ENTITY',
      'ABS': 'ABS'
    };
    var _validateOperator = function(op) {
      op = _OPERATORS[_sanitizeStr(op)];
      if (!op) {
        throw new SyntaxError('Invalide operator');
      } else {
        return op;
      }
    };
    /**
     * Creates a OpExpr object
     *
     * @class OpExpr
     * @constructor
     * @extends Expr
     * @param {String} op the operator to use: '+', '-', '*', '/', '!', 'gamma', 'sqrt', 'log','to_upper', 'to_lower'
     * @param {Expr[]} exprs an array of Expr objects
     * @param {String} name optional name if 'op' is 'NAMED'
     * @example
     *      // FIXME: add an example here
     *
     */
    function OpExpr(op, exprs, name) {
      op = _validateOperator(op);
      assertIsArray(exprs, Expr, "OpExpr takes an array of Expr's.");
      var value = {
        'op': {
          'kind': op
        },
        'expr': exprs
      };
      if (op === 'NAMED') {
        value.op.name = name;
      }
      _super.call(this, 'OP', value);
    }
    _extendClass(OpExpr, _super);
    return OpExpr;
  })(Expr);
  var CastExpr = (function(_super) { // WARN to be deprecated
    /**
     * Creates a CastExpr object
     *
     * @class CastExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression whose value you wish to cast
     * @param {Type} type the type to cast the value to
     * @example
     *      // cast an metric expression's value to a string
     *      var castExpr = new MQG.CastExpr(metricExpr, "STRING");
     */
    function CastExpr(expr, type) {
      var value;
      assert(expr instanceof Expr);
      assert(type instanceof Type);
      value = {
        'expr': expr,
        'type': type
      };
      _super.call(this, 'CAST', value);
    }
    _extendClass(CastExpr, _super);
    return CastExpr;
  })(Expr);
  var LiteralExpr = (function(_super) {
    /**
     * Creates a LiteralExpr object
     *
     * @class LiteralExpr
     * @constructor
     * @extends Expr
     * @param {String} kind 'GENERAL' or 'TOP_SINGLETON'
     * @param {BaseSignature} signature
     * @param {(Column[]|undefined)} column
     * @example
     *      // FIXME: add an example here
     *
     */
    function LiteralExpr(kind, signature, column) {
      var value;
      assert(typeof kind === 'string' && ['GENERAL', 'TOP_SINGLETON'].indexOf(kind) !== -1);
      assert(signature instanceof BaseSignature);
      assert(Array.isArray(column));
      value = {
        'kind': kind,
        'signature': signature,
        'column': column
      };
      _super.call(this, 'LITERAL', value);
    }
    _extendClass(LiteralExpr, _super);
    return LiteralExpr;
  })(Expr);

  var ConstantExpr = (function(_super) {
    /**
     * Creates a ConstantExpr object
     *
     * @class ConstantExpr
     * @constructor
     * @extends Expr
     * @param {(Boolean|Number|String)} value
     * @param {Type} type
     */
    function ConstantExpr(value, type) {
      assert(typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || Array.isArray(value));
      assert(type instanceof Type || typeof type === 'string');
      if (typeof type === 'string') {
        type = new Type(type);
      }
      return new LiteralExpr('GENERAL', new BaseSignature(new Intersection([]), new ValueType('SINGLETON', type)), [new Column(type.kind, _toArray(value))]);
    }
    _extendClass(ConstantExpr, _super);
    return ConstantExpr;
  })(Expr);

  var VarExpr = (function(_super) {
    /**
     * Creates a VarExpr object
     *
     * @class VarExpr
     * @constructor
     * @extends Expr
     * @param {string} name
     */
    function VarExpr(str) {
      _super.call(this, 'VARIABLE', {
        name: str
      });
    }
    _extendClass(VarExpr, _super);
    return VarExpr;
  })(Expr);

  var AbsExpr = (function(_super) {
    /**
     * Creates a AbsExpr object
     *
     * @class AbsExpr
     * @constructor
     * @extends Expr
     * @param {(undefined|InterArgument|InterArgument[])} interArgs
     * @param {(undefined|ExprArgument|ExprArgument[])} exprArgs
     * @param {Expr} body
     */
    function AbsExpr(interArgs, exprArgs, body) {
      interArgs = _toArray(interArgs);
      exprArgs = _toArray(exprArgs);
      assertIsArray(interArgs, InterArgument);
      assertIsArray(exprArgs, ExprArgument);
      assert(body instanceof Expr);
      _super.call(this, 'ABSTRACTION', {
        inter_arg: interArgs,
        expr_arg: exprArgs,
        body: body
      });
    }
    _extendClass(AbsExpr, _super);
    return AbsExpr;
  })(Expr);

  var AppExpr = (function(_super) {
    /**
     * Creates a AppExpr object
     *
     * @class AppExpr
     * @constructor
     * @extends Expr
     * @param {Expr} abstraction
     * @param {(undefined|InterArgument|InterArgument[])} interArgs
     * @param {(undefined|ExprArgument|ExprArgument[])} exprArgs
     */
    function AppExpr(abstraction, interArgs, exprArgs) {
      assert(abstraction instanceof Expr);
      interArgs = _toArray(interArgs);
      exprArgs = _toArray(exprArgs);
      assertIsArray(interArgs, InterArgument);
      assertIsArray(exprArgs, ExprArgument);
      _super.call(this, 'APPLICATION', {
        abstraction: abstraction,
        inter_arg: interArgs,
        expr_arg: exprArgs
      });
    }
    _extendClass(AppExpr, _super);
    return AppExpr;
  })(Expr);



  var FilterExpr = (function(_super) {
    /**
     * Creates a FilterExpr object
     *
     * @class FilterExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to filter
     * @param {Comparison[]} comparisons an array of Comparison objects
     * @param {Boolean} [isDisjunction=false] set to true to keep values that satisfy any of the comparisons
     * @example
     *      // We create an Attribute Expression to filter later
     *      var attr = new MQG.AttributeExpr(new MQG.QualifiedLevel('Product', 'item'), 'id');
     *
     *      // We filter the Attribute Expression using two different comparisons in disjunction
     *      var expr = new MQG.FilterExpr(attr, [
     *          new MQG.Comparison('=', new MQG.TermExpr(new MQG.ConstantTerm('SKU001', 'STRING'))),
     *          new MQG.Comparison('=', new MQG.TermExpr(new MQG.ParamTerm('sku_id', 'string')))
     *      ]);
     *
     */
    function FilterExpr(expr, comparisons, type, isDisjunction) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      if (!(comparisons instanceof MQG.Comparison) && (!comparisons.length || !(comparisons[0] instanceof MQG.Comparison))) {
        if (typeof type !== 'string') {
          throw 'Third argument must be value type if the second argument is a primitive value(not comparison)';
        }
        var prop;
        var new_comparisons = [];
        for (prop in comparisons) {
          new_comparisons.push(new MQG.Comparison(prop, new MQG.ConstantExpr(_toArray(comparisons[prop]), type)));
        }
        comparisons = new_comparisons;
      } else {
        isDisjunction = type;
      }
      isDisjunction = isDisjunction || false;
      value = {
        'expr': expr,
        'comparison': _toArray(comparisons),
        'is_disjunction': isDisjunction
      };
      _super.call(this, 'FILTER', value);
    }
    _extendClass(FilterExpr, _super);
    return FilterExpr;
  })(Expr);
  var DiceExpr = (function(_super) {
    /**
     * Creates a DiceExpr object
     *
     * @class DiceExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to dice
     * @param {Expr[]} dicers an array of Expr objects
     * @param {Boolean} [isDisjunction=false] set to true to keep values that satisfy any of the dicers
     * @example
     *      // FIXME: add an example here
     *
     */
    function DiceExpr(expr, dicers, isDisjunction) {
      var value;
      // default to false if not set
      isDisjunction = isDisjunction || false;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      dicers = _toArray(dicers);
      if (!dicers.length) {
        throw 'empty dicers specified for: ' + JSON.stringify(expr);
      }
      value = {
        'expr': expr,
        'dicer': dicers,
        'is_disjunction': isDisjunction
      };
      _super.call(this, 'DICE', value);
    }
    _extendClass(DiceExpr, _super);
    return DiceExpr;
  })(Expr);
  var SplitExpr = (function(_super) {
    /**
     * Wraps the given expr in a relabel expression.
     *
     * @class SplitExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to relabel
     * @param {LabelMap} labelMaps the mapping from the old label to the new label
     */
    function SplitExpr(expr, labelMaps) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      labelMaps = _toArray(labelMaps);
      if (!labelMaps.length) {
        throw new SyntaxError('empty labelMaps specified for relabeling expr: ' + JSON.stringify(expr));
      }
      value = {
        'expr': expr,
        'map': labelMaps
      };
      _super.call(this, 'SPLIT', value);
    }
    _extendClass(SplitExpr, _super);
    return SplitExpr;
  })(Expr);
  var RelabelExpr = (function(_super) {
    /**
     * Wraps the given expr in a relabel expression.
     *
     * @class RelabelExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to relabel
     * @param {LabelMap} labelMaps the mapping from the old label to the new label
     */
    function RelabelExpr(expr, labelMaps) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      labelMaps = _toArray(labelMaps);
      if (!labelMaps.length) {
        throw new SyntaxError('empty labelMaps specified for relabeling expr: ' + JSON.stringify(expr));
      }
      value = {
        'expr': expr,
        'map': labelMaps
      };
      _super.call(this, 'RELABEL', value);
    }
    _extendClass(RelabelExpr, _super);
    return RelabelExpr;
  })(Expr);
  var LabelMap = (function() {
    /**
     * A mapping from a source label to a target label
     * @class LabelMap
     * @constructor
     * @param {string} source the label to replace
     * @param {string} target the new label
     */
    function LabelMap(source, target) {
      this.source = source;
      this.target = target;
    }
    return LabelMap;
  })();
  var WidenExpr = (function(_super) {
    /**
     * Creates a WidenExpr object
     *
     * @class WidenExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to widen
     * @param {Intersection} inter the intersection to widen to
     * @example
     *      // FIXME: add an example here
     *
     */
    function WidenExpr(expr, inter) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      if (!(inter instanceof Intersection)) {
        throw new SyntaxError('Intersection Expected');
      }
      value = {
        'expr': expr,
        'inter': inter
      };
      _super.call(this, 'WIDEN', value);
    }
    _extendClass(WidenExpr, _super);
    return WidenExpr;
  })(Expr);
  var DropExpr = (function(_super) {
    /**
     * Creates a DropExpr object.
     * Drop expressions drop the values from a measure query to
     * produce a position-only query.  This is useful if you would like
     * to compute over keys without having to worry about values.
     *
     * @class DropExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to drop values from
     * @example
     *      // FIXME: add an example here
     *
     */
    function DropExpr(expr) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      value = {
        'expr': expr
      };
      _super.call(this, 'DROP', value);
    }
    _extendClass(DropExpr, _super);
    return DropExpr;
  })(Expr);
  var DifferenceExpr = (function(_super) {
    /**
     * Creates a DifferenceExpr object.
     * Difference expressions remove those positions and values in
     * the left expression that are contained in the right expression.
     * If the right expression is position-only, then positions in the
     * left expression are removed regardless of value.
     *
     * @class DifferenceExpr
     * @constructor
     * @extends Expr
     * @param {Expr} leftExpr the left expression
     * @param {Expr} rightExpr the right expression
     * @example
     *      // FIXME: add an example here
     *
     */
    function DifferenceExpr(leftExpr, rightExpr) {
      var value;
      if (!(leftExpr instanceof Expr)) {
        throw new SyntaxError('First Argument: Expression Expected');
      }
      if (!(rightExpr instanceof Expr)) {
        throw new SyntaxError('Second Argument: Expression Expected');
      }
      value = {
        'left': leftExpr,
        'right': rightExpr
      };
      _super.call(this, 'DIFFERENCE', value);
    }
    _extendClass(DifferenceExpr, _super);
    return DifferenceExpr;
  })(Expr);
  var DemoteExpr = (function(_super) {
    /**
     * Creates a DemoteExpr object.
     * Demote expressions take a position-only measure expression and
     * convert it to one with a value by making one of the dimensions
     * of its intersection its value.  As such, it may produce a
     * set-valued measure expression
     *
     * @class DemoteExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to Demote. It has to be a position-only expression
     * @param {String} dimension the dimension to convert into a value
     * // FIX: support label besides dimension
     * @example
     *      // FIXME: add an example here
     */
    function DemoteExpr(expr, dimension) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      value = {
        'expr': expr,
        'dimension': dimension.trim()
      };
      _super.call(this, 'DEMOTE', value);
    }
    _extendClass(DemoteExpr, _super);
    return DemoteExpr;
  })(Expr);
  var Branch = (function() {
    /**
     * Creates a Branch object
     *
     * @class Branch
     * @constructor
     * @param {Expr} testExpr the expression to be tested for emptiness
     * @param {Expr} resultExpr the result if non-empty
     */
    function Branch(testExpr, resultExpr) {
      if (!(testExpr instanceof Expr)) {
        throw new SyntaxError('First Argument: Expression Expected');
      }
      if (!(resultExpr instanceof Expr)) {
        throw new SyntaxError('Second Argument: Expression Expected');
      }
      this.test = testExpr;
      this.result = resultExpr;
    }
    return Branch;
  })();

  var AggExpr = (function(_super) {
    var _METHODS = [
      'COLLECT',
      'AMBIG',
      'TOTAL',
      'MIN',
      'MAX',
      'COUNT',
      'MODE',
      'COUNT_DISTINCT',
      'HISTOGRAM',
      'AVERAGE', // simulated, not built-in
    ];
    var _validAggMethod = function(method) {
      if (_METHODS.indexOf(method) === -1) {
        return false;
      } else {
        return true;
      }
    };
    /**
     * Creates an AggExpr object
     *
     * @class AggExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to aggregate
     * @param {String} method the aggregation method. It could be one of the following:
     * <p>'COLLECT', 'AMBIG', 'TOTAL', 'MIN', 'MAX', 'COUNT', 'MODE', 'COUNT_DISTINCT', 'HISTOGRAM'</p>
     * @param {Grouping[]} groupings an array of Grouping objects
     * @param {(Intersection|undefined)} inter target intersection
     * @example
     *      // FIXME: Add an example
     *
     */
    function AggExpr(expr, method, groupingsOrInter) {
      var groupings, inter;
      if (groupingsOrInter instanceof Intersection) {
        inter = groupingsOrInter;
      } else {
        assertIsArray(groupingsOrInter, Grouping,
          'Third argument of AggExpr should be Grouping[] or Intersection, but is: ' + JSON.stringify(groupingsOrInter));
        groupings = groupingsOrInter;
      }
      var value;
      var aggMethod;
      if (typeof method === 'string') {
        method = _sanitizeStr(method);
        if (!_validAggMethod(method)) {
          throw new SyntaxError('Invalid method for aggregation: ' + method);
        }
        aggMethod = {
          'primitive': method
        };
      } else if (typeof method === 'object') {
        aggMethod = method;
      }
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      } else {
        value = {
          'method': aggMethod,
          'expr': expr
        };
        if (groupings) {
          value.grouping = groupings;
        } else if (inter) {
          value.inter = inter;
        }
        // Marouen: based on Kurt's implementation
        // If the aggMethod is MODE, you can get more than one value for an intersection.
        // Wrap the MODE expr in a MAX aggregation to pick one
        if (aggMethod.primitive === 'MODE') {
          _super.call(this, 'AGGREGATION', value);
          return new AggExpr(this, 'MAX', groupings);
        } else {
          _super.call(this, 'AGGREGATION', value);
        }
      }
    }
    _extendClass(AggExpr, _super);
    return AggExpr;
  })(Expr);
  var HeaderSortExpr = (function(_super) {
    /**
     * Creates an HeaderSortExpr object
     *
     * @class HeaderSortExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to aggregate
     * @param {String} floatingLevel the floating level
     */
    function HeaderSortExpr(expr, floatingLevel) {
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      if (!(floatingLevel instanceof QualifiedLevel)) {
        throw new SyntaxError('Qualified Level Expected');
      }
      return _super.call(this, 'AGGREGATION', {
        method: {
          header_sort_level: floatingLevel
        },
        expr: expr,
      });
    }
    _extendClass(HeaderSortExpr, _super);
    return HeaderSortExpr;
  })(Expr);
  var OverrideExpr = (function(_super) {
    /**
     * Creates an OverrideExpr object
     *
     * @class OverrideExpr
     * @constructor
     * @extends Expr
     * @param {Expr} expr the expression to aggregate
     */
    function OverrideExpr() {
      var exprs = Array.prototype.slice.call(arguments, 0);
      exprs.forEach(function(expr) {
        if (!(expr instanceof Expr)) {
          throw new SyntaxError('Expression Expected');
        }
      });
      return _super.call(this, 'OVERRIDE', {
        expr: exprs
      });
    }
    _extendClass(OverrideExpr, _super);
    return OverrideExpr;
  })(Expr);
  var CompositeExpr = (function(_super) {
    var _KINDS = [
      'UNION',
      'INTERSECTION'
    ];
    var _validateKind = function(kind) {
      if (_KINDS.indexOf(kind) === -1) {
        return false;
      } else {
        return true;
      }
    };
    /**
     * Creates an CompositeExpr object.
     * Composite expressions are used to combine together many
     * measure expressions by unioning or intersecting them
     * together.  All the measure expressions must be at the
     * same intersection.
     *
     * @class CompositeExpr
     * @constructor
     * @extends Expr
     * @param {String} kind could be either 'UNION' or 'INTERSECTION'
     * <ul>
     *   <li>INTERSECTION: Only keep those positions and values found in
     *   all measure expressions.</li>
     *   <li>UNION: Collect all positions and values found in all measure expressions.
     *   Currently, trying to combine measure expressions with different values for
     *   the same position will yield a runtime exception. </li>
     * </ul>
     * @param {Expr[]} exprs array of expressions to combine
     * @example
     *      // FIXME: Add an example
     *
     */
    function CompositeExpr(kind, exprs) {
      var value;
      kind = _sanitizeStr(kind);
      if (!_validateKind(kind)) {
        throw new SyntaxError('Invalid kind. Possible values are: INTERSECTION, UNION');
      }
      value = {
        'kind': kind,
        'expr': exprs
      };
      _super.call(this, 'COMPOSITE', value);
    }
    _extendClass(CompositeExpr, _super);
    return CompositeExpr;
  })(Expr);
  var ParamExpr = (function(_super) {
    /**
     * Creates a ParamExpr object
     *
     * @class ParamExpr
     * @constructor
     * @param {string} name
     * @param {Intersection} inter
     * @param {(Type|string|undefined)} type
     */
    function ParamExpr(name, inter, type) {
      if (inter instanceof BaseSignature) {
        assert(typeof type === 'undefined', "third argument 'type' shouldn't be present if BaseSignature is supplied");
        _super.call(this, 'PARAM', {
          name: name,
          signature: inter
        });
      } else {
        assert(type instanceof Type || typeof type === 'string' || typeof type === 'undefined', ["Parameter 'type' should be Type, string or undefined, but is: ", type]);
        type = type instanceof Type ? type :
          typeof type === 'string' ? new Type(type) :
          undefined; // type === undefined
        var valueType = type ? new ValueType('SINGLETON', type) : undefined;

        _super.call(this, 'PARAM', {
          name: name,
          signature: new BaseSignature(inter, valueType)
        });
      }
    }
    _extendClass(ParamExpr, _super);
    return ParamExpr;
  })(Expr);
  var PrevExpr = (function(_super) {
    /**		
     * Creates a PrevExpr object.		
     * Prev expressions are temporal operator, that return the		
     * result of the expression as it was in the previous transaction.		
     *		
     * Currently only works on expressions that will be materialized.		
     *		
     * @class PrevExpr		
     * @constructor		
     * @extends Expr		
     * @param {Expr} expr the expression to Demote. It has to be a position-only expression		
     * @param {String} dimension the dimension to convert into a value		
     * @example		
     *      // FIXME: add an example here		
     */
    function PrevExpr(expr) {
      var value;
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      }
      value = {
        'expr': expr
      };
      _super.call(this, 'PREV', value);
    }
    _extendClass(PrevExpr, _super);
    return PrevExpr;
  })(Expr);
  var Comparison = (function() {
    var _adapter = {
      'EQUALS': 'EQUALS',
      'NOT_EQUALS': 'NOT_EQUALS',
      'LESS_THAN': 'LESS_THAN',
      'LESS_OR_EQUALS': 'LESS_OR_EQUALS',
      'GREATER_THAN': 'GREATER_THAN',
      'GREATER_OR_EQUALS': 'GREATER_OR_EQUALS',
      'match': 'MATCH',
      'MATCH': 'MATCH',
      '~': 'MATCH',
      '=': 'EQUALS',
      '!=': 'NOT_EQUALS',
      '<>': 'NOT_EQUALS', // alternate notation
      '<': 'LESS_THAN',
      '<=': 'LESS_OR_EQUALS',
      '>': 'GREATER_THAN',
      '>=': 'GREATER_OR_EQUALS'
    };
    var _sanitizeOp = function(op) {
      var operator = _sanitizeStr(op);
      if (_adapter[operator]) {
        return _adapter[operator];
      } else {
        throw new SyntaxError('Invalid Operator');
      }
    };
    /**
     * Creates a Comparison object
     *
     * @class Comparison
     * @constructor
     * @param {String} op an operator which could be one of the following:
     * <ul><li>'='</li><li>'!='</li><li>'<'</li><li>'<='</li><li>'>'</li><li>'>='</li><li>'~'</li></ul>
     * @param {Expr} expr an Expr object
     */
    function Comparison(op, expr) {
      var operator = _sanitizeOp(op);
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Expression Expected');
      } else {
        this.op = operator;
        this.expr = expr;
      }
    }
    return Comparison;
  })();
  var QualifiedLevel = (function() {
    /**
     * Creates a QualifiedLevel object
     *
     * @class QualifiedLevel
     * @constructor
     * @param {String} dimension dimension of the qualified level
     * @param {String} level
     * @param {String} [hierarchy] an optional hierarchy
     * @param {String} [label] an optional label
     */
    function QualifiedLevel(dimension, level, hierarchy, label) {
      this.dimension = dimension;
      this.level = level;
      if (hierarchy) {
        this.hierarchy = hierarchy;
      }
      if (label) {
        this.label = label;
      }
    }
    return QualifiedLevel;
  })();
  var Grouping = (function() {
    var _validGpgKind = function(kind) {
      var KINDS = ['NO_GROUPING', 'ALL', 'MAP', 'MULTI_MAP'];
      if (KINDS.indexOf(kind) === -1) {
        return false;
      } else {
        return true;
      }
    };
    /**
     * Creates a Grouping object
     *
     * @class Grouping
     * @constructor
     * @param {String} kind could be one of the following: 'NO_GROUPING', 'ALL', 'MAP', 'MULTI_MAP'
     * @param {String} dimension the dimension of the key that we want to aggregate over
     * @param {String} [level] the level of dimension that we want to aggregate up to
     * @param {String} [multi_dim_map] an optional multi_dim_map
     * @param {String} [hierarchy] an optional hierarchy
     */
    function Grouping(kind, dimension, level, multi_dim_map, hierarchy) {
      var gpgKind = _sanitizeStr(kind);
      if (_validGpgKind(gpgKind)) {
        this.kind = gpgKind;
        this.dimension = dimension;
        if (level) {
          this.level = level;
        }
        if (hierarchy) {
          this.hierarchy = hierarchy;
        }
        if (multi_dim_map) {
          this.multi_dim_map = multi_dim_map;
        }
      } else {
        throw new SyntaxError('Invalid kind for the grouping');
      }
    }
    return Grouping;
  })();
  var _typeColumnAttr = {
    'STRING': 'string_column',
    'INT': 'int_column',
    'FLOAT': 'float_column',
    'DECIMAL': 'decimal_column',
    'BOOLEAN': 'bool_column'
  };
  var Column = (function() {
    /**
     * Creates a Column object
     *
     * @class Column
     * @constructor
     * @param {String} type type of the parameter: ['STRING', 'INT', 'DECIMAL', 'FLOAT', 'BOOLEAN']
     * @param {String[]|Number[]|Boolean[]|String|Number|Boolean} constants An array of the constants that represent this column (of the type of @type), or a single constant
     *
     */
    function Column(type, constants) {
      var typof = typeof constants;
      assert(type instanceof Type || typeof type === 'string');
      type = type instanceof Type ? type.kind.toUpperCase() : type;
      assert(_typeColumnAttr.hasOwnProperty(type), ['Unknown type', type]);
      assert(Array.isArray(constants) || typof === 'string' || typof === 'number' || typof === 'boolean', 'Invalid constants ' + JSON.stringify(constants));
      this[_typeColumnAttr[type]] = {
        value: _toArray(constants)
      };
    }
    return Column;
  })();
  var RelationBinding = (function() {
    /**
     * Creates a RelationBinding object
     *
     * @class RelationBinding
     * @constructor
     * @param {ParamExpr} paramExpr The name of the parameter and its signature
     * @param {Expr} expr The expr to bind to the parameter expression
     */
    function RelationBinding(paramExpr, expr) {
      if (!(paramExpr instanceof ParamExpr)) {
        throw new SyntaxError('First Argument: Param Expression Expected');
      }
      if (!(expr instanceof Expr)) {
        throw new SyntaxError('Second Argument: Expr Expected');
      }
      this.param = paramExpr.param;
      this.expr = expr;
    }
    return RelationBinding;
  })();
  var Intersection = (function() {
    /**
     * Creates a Intersection object
     *
     * @class Intersection
     * @constructor
     * @param {(string|Expr|QualifiedLevel[]|string[])} qualifiedLevels or strings in the format dimension.level
     */
    function Intersection(varOrExprOrQualifiedLevels) {
      if (typeof varOrExprOrQualifiedLevels === 'string') {
        this.variable = varOrExprOrQualifiedLevels;
      } else if (varOrExprOrQualifiedLevels instanceof Expr) {
        this.expr = varOrExprOrQualifiedLevels;
      } else {
        var qualifiedLevels = _toArray(varOrExprOrQualifiedLevels);
        if (typeof(qualifiedLevels[0]) === 'string' && qualifiedLevels[0].indexOf('.') > 0) {
          qualifiedLevels = qualifiedLevels.map(function(el) {
            return new QualifiedLevel(el.split('.')[0], el.split('.')[1]);
          });
        }
        this.qualified_level = qualifiedLevels;
      }
    }
    return Intersection;
  }());
  var MetricInter = (function() {
    function MetricInter(metric, inter) {
      assert(typeof metric === 'string');
      assert(inter instanceof Intersection);
      this.metric = metric;
      this.inter = inter;
    }
    return MetricInter;
  }());

  var InterArgument = (function() {
    /**
     * Creates a InterArgument object
     *
     * @class InterArgument
     * @constructor
     * @param {string} name
     * @param {Intersection} inter
     */
    function InterArgument(name, inter) {
      assert(typeof name === 'string');
      this.name = name;
      if (inter) {
        assert(inter instanceof Intersection);
        this.inter = inter;
      }
    }
    return InterArgument;
  }());

  var ExprArgument = (function() {
    /**
     * Creates a ExprArgument object
     *
     * @class ExprArgument
     * @constructor
     * @param {string} name
     * @param {Expr} expr
     */
    function ExprArgument(name, expr) {
      assert(typeof name === 'string');
      this.name = name;
      if (expr) {
        assert(expr instanceof Expr);
        this.expr = expr;
      }
    }
    return ExprArgument;
  }());

  var Ancestor = (function(_super) {
    /**
     * Create a measure that relates level members between
     * loLabel:dimension:loLevel and hiLabel:dimension:hiLevel
     *
     * @param {String} dimension
     * @param {String} loLevel
     * @param {String} hiLevel
     * @param {String} loLabel
     * @param {String} hiLabel
     */
    function Ancestor(dimension, loLevel, hiLevel, loLabel, hiLabel) {
      assert(Array.prototype.slice.call(arguments, 0).every(function(param) {
        return typeof param === 'string';
      }), 'Expected strings');
      // FIX what if hiLevel === 'ALL'?
      loLabel = loLabel || 'Child';
      hiLabel = hiLabel || 'Parent';

      // (Parent:loLevel, Child:loLevel, Dimension:loLevel ; )
      return new SplitExpr(new DropExpr(new AttributeExpr({
          dimension: dimension,
          level: loLevel
        }, 'id')), [{
          source: dimension,
          target: hiLabel
        }, {
          source: dimension,
          target: loLabel
        }])
        // (Parent:loLevel, Child:loLevel ; Dimension:loLevel)
        .demote(dimension)
        // (Parent:hiLevel, Child:loLevel ; Dimension)
        .aggBy('COLLECT',
          new Intersection([{
            dimension: dimension,
            level: loLevel,
            label: loLabel
          }, {
            dimension: dimension,
            level: hiLevel,
            label: hiLabel
          }]))
        // (Parent:hiLevel, Child:loLevel ; )
        .drop();
    }
    _extendClass(Ancestor, _super);
    return Ancestor;
  }(Expr));

  var Lock = (function() {
    /** Associate 'lockExpr' with 'metricName'
     *
     * @class Lock
     * @constructor
     * @param {String} metricName
     * @param {Expr} lockExpr
     */
    function Lock(metricName, lockExpr, convertible) {
      assert(lockExpr instanceof Expr);
      this.metric = metricName;
      this.expr = lockExpr;
      this.convertible = convertible;
    }
    return Lock;
  }());

  var UpdateRequest = (function() {
    /**
     * Creates an UpdateRequest object
     *
     * @class UpdateRequest
     * @constructor
     * @param {(Expr)} updateExpr
     * @param {Expr} relation Specify relation to fill in parameters that arise in the update expression.
     */
    function UpdateRequest(updateExpr, sourceOrExpr) {
      if (arguments.length > 2) {
        throw new SyntaxError('argument and relation parameters should be hoisted to Request');
      }
      if (!(updateExpr instanceof UpdateExpr)) {
        throw new SyntaxError('First Argument: UpdateExpr Expression Expected');
      }
      if (!(sourceOrExpr instanceof Expr)) {
        throw new SyntaxError('Second Argument: Expr Expected');
      }
      this.input = sourceOrExpr;
      this.expr = updateExpr;
    }
    return UpdateRequest;
  })();


  var UpdateTransform = (function() {
    function UpdateTransform(spread_kind, distribution) {
      this.spread_kind = spread_kind;
      this.distribution = distribution;
    }
    return UpdateTransform;
  })();

  var UpdateQueryTransform = (function(_super) {
    /**
     * Creates an UpdateTransform object for a spread-by-query
     *
     * @class UpdateTransform
     * @constructor
     * @param {Expr} expr Measure expression to compute the result of the query update
     * @param {QualifiedLevel[]} distribution intersection of the previous expression
     * @param {string|object} type The expected type, it can be either the type kind, or an object than contains the kind as well as other attributes(useful for named types).
     */
    // type is optional, it's not used for remove requests
    function UpdateQueryTransform(expr, distribution, type) {
      assert(expr instanceof Expr && (!type || typeof type === 'string' || typeof type === 'object'));
      var spread_kind = {
        query: {
          expr: expr
        }
      };
      if (type) {
        spread_kind.query.type = typeof(type) === 'object' && type || {
          kind: type
        };
      }
      return _super.call(this, spread_kind, distribution);
    }
    _extendClass(UpdateQueryTransform, _super);
    return UpdateQueryTransform;
  })(UpdateTransform);

  var UpdateExpr = (function() {
    /**
     * Creates an UpdateExpr object
     *
     * @class UpdateExpr
     * @constructor
     * @param {string} kind Update kind
     * @param {string} metric The named metric to update
     * @param {UpdateTransform[]} transform
     * @param {(string|Type|undefined)} type The type of the update Expression, should be the same as the type of destination metric. if no type is specified, the type of source is used.
     */
    function UpdateExpr(kind, metric, transform, transformDepr) {
      assert(typeof kind === 'string' && ['SPREAD', 'REMOVE'].indexOf(kind) !== -1);
      assert(typeof metric === 'string' || metric instanceof Target);
      //just to avoid breaking changes
      if(!(transform instanceof UpdateTransform) && transformDepr){
        transform = transformDepr;
      }

      assertIsArray(transform, [UpdateTransform, UpdateQueryTransform]);
      this.kind = kind;
      if (metric instanceof Target) {
        this.target = metric;
      } else {
        this.target = new Target(metric);
      }
      this.transform = transform;
    }
    return UpdateExpr;
  })();

  var QueryRequest = (function() {
    /**
     * Creates an QueryRequest object
     *
     * @class QueryRequest
     * @constructor
     * @param {string} report_name
     * @param {string[]} keys
     * @param {string[]} measures
     * @param {(undefined|Boolean)} return_row_numbers
     * @param {(undefined|Boolean)} limited_rewrites
     */
    function QueryRequest(report_name, keys, measures, return_row_numbers, limited_rewrites) {
      assert(typeof report_name === 'string');
      assert(keys instanceof Array);
      assert(measures instanceof Array);
      assert(typeof return_row_numbers === 'undefined' || typeof return_row_numbers === 'boolean');
      assert(arguments.length <= 5, 'QueryRequest deprecated parameters: argument, relation, row_limit');
      this.report_name = report_name;
      this.key = keys;
      this.measure = measures;
      this.return_row_numbers = return_row_numbers;
      if (typeof limited_rewrites !== 'undefined') {
        this.limited_rewrites = limited_rewrites;
      }
    }
    return QueryRequest;
  })();
  var InstallRequest = (function() {
    /**
     * Creates an InstallRequest object
     *
     * @class InstallRequest
     * @constructor
     * @param {(Expr|Expr[])} measures
     */
    function InstallRequest(measures) {
      measures = _toArray(measures);
      this.measure_expr = measures;
    }
    return InstallRequest;
  }());
  var Request = (function() {
    /**
     * Creates an Request object
     *
     * @class Request
     * @constructor
     * @param {(undefined|QueryRequest|[QueryRequest])} queries
     * @param {(undefined|UpdateRequest|[UpdateRequest])} updates
     * @param {(undefined|[RelationBinding])} relation  [description]
     * @param {(undefined|Boolean)} model_request whether to request the model
     * @param {(undefined|Lock|[Lock])} locks
     * @param {(undefined|InstallRequest)} install_request
     */
    function Request(queries, updates, relation, model_request, locks, install_request) {
      assert(typeof queries === 'undefined' || queries instanceof QueryRequest || queries instanceof Array);
      assert(typeof updates === 'undefined' || updates instanceof UpdateRequest || updates instanceof Array);
      assert(typeof relation === 'undefined' || relation instanceof Array);
      assert(typeof model_request === 'undefined' || typeof model_request === 'boolean');
      assert(typeof locks === 'undefined' || locks instanceof Lock || locks instanceof Array);
      if (queries) {
        this.query_request = _toArray(queries);
      }
      if (updates) {
        this.update_request = _toArray(updates);
      }
      if (model_request) {
        this.model_request = {};
      }
      this.relation = relation;
      if (locks) {
        this.metric_lock = _toArray(locks);
      }
      if (install_request) {
        this.install_request = install_request;
      }
    }
    return Request;
  })();
  var EditabilityRequest = (function() {
    function EditabilityRequest(edited, visible) {
      assertIsArray(edited, MetricInter);
      assertIsArray(visible, MetricInter);
      this.edited = edited;
      this.visible = visible;
    }
    return EditabilityRequest;
  }());
  var EditabilityRequestRequest = (function() {
    /**
     * Specialized Request for editability.
     */
    function EditabilityRequestRequest(editability_request) {
      assert(editability_request instanceof EditabilityRequest);
      this.editability_request = editability_request;
    }
    return EditabilityRequestRequest;
  }());
  var ModelRequestRequest = (function() {
    /**
     * Specialized Request for model.
     */
    function ModelRequestRequest() {
      this.model_request = {};
    }
    return ModelRequestRequest;
  }());

  var _isAttribute = function(str) {
    if (str.indexOf('.') > 0) {
      return true;
    }
    return false;
  };
  var Target = function(target) {
    if (typeof target === 'string') {
      if (_isAttribute(target)) {
        this.attribute = attribute(target);
      } else {
        this.metric = target;
      }
    } else if (target instanceof QualifiedLevel) {
      this.level = target;
    } else {
      throw 'argument not supported';
    }
  };
  var attribute = function(qualifiedLevel, name) {
    var _splitAttr = function(str) {
      var splitted = str.split('.');
      return {
        attr: splitted[2],
        dim: splitted[0],
        level: splitted[1]
      };
    };
    if (typeof(qualifiedLevel) === 'string') {
      var splitted = _splitAttr(qualifiedLevel);
      qualifiedLevel = new MQG.QualifiedLevel(splitted.dim, splitted.level);
      name = splitted.attr;
    }
    return {
      'qualified_level': qualifiedLevel,
      'attribute': name
    };
  };

  // Public API
  var MQG = {};
  MQG.Type = Type;
  MQG.ValueType = ValueType;
  MQG.BaseSignature = BaseSignature;
  MQG.Expr = Expr;
  MQG.AttributeExpr = AttributeExpr;
  MQG.MetricExpr = MetricExpr;
  MQG.FilterExpr = FilterExpr;
  MQG.DiceExpr = DiceExpr;
  MQG.AggExpr = AggExpr;
  MQG.HeaderSortExpr = HeaderSortExpr;
  MQG.OverrideExpr = OverrideExpr;
  MQG.WidenExpr = WidenExpr;
  MQG.VarExpr = VarExpr;
  MQG.AbsExpr = AbsExpr;
  MQG.AppExpr = AppExpr;
  MQG.InterArgument = InterArgument;
  MQG.ExprArgument = ExprArgument;
  MQG.OpExpr = OpExpr;
  MQG.DropExpr = DropExpr;
  MQG.DifferenceExpr = DifferenceExpr;
  MQG.DemoteExpr = DemoteExpr;
  MQG.CompositeExpr = CompositeExpr;
  MQG.ParamExpr = ParamExpr;
  MQG.ConstantExpr = ConstantExpr;
  MQG.LiteralExpr = LiteralExpr;
  MQG.CastExpr = CastExpr;
  MQG.Comparison = Comparison;
  MQG.QualifiedLevel = QualifiedLevel;
  MQG.Grouping = Grouping;
  MQG.Intersection = Intersection;
  MQG.MetricInter = MetricInter;
  MQG.Branch = Branch;
  MQG.RelationBinding = RelationBinding;
  MQG.Column = Column;
  MQG.Branch = Branch;
  MQG.UpdateExpr = UpdateExpr;
  MQG.SplitExpr = SplitExpr;
  MQG.RelabelExpr = RelabelExpr;
  MQG.LabelMap = LabelMap;
  MQG.Request = Request;
  MQG.UpdateTransform = UpdateTransform;
  MQG.UpdateQueryTransform = UpdateQueryTransform;
  MQG.UpdateRequest = UpdateRequest;
  MQG.QueryRequest = QueryRequest;
  MQG.InstallRequest = InstallRequest;
  MQG.EditabilityRequest = EditabilityRequest;
  MQG.EditabilityRequestRequest = EditabilityRequestRequest;
  MQG.ModelRequestRequest = ModelRequestRequest;
  MQG.Ancestor = Ancestor;
  MQG.Lock = Lock;
  MQG.Measure = MeasureExpr;
  MQG.Target = Target;

  return MQG;
}));

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

},{"buffer":undefined}],4:[function(require,module,exports){
var util = require('util');
var Stream = require('stream').Stream;
var DelayedStream = require('delayed-stream');

module.exports = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
}
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};

},{"delayed-stream":11,"stream":undefined,"util":undefined}],5:[function(require,module,exports){
/* jshint node: true */
(function () {
    "use strict";

    function CookieAccessInfo(domain, path, secure, script) {
        if (this instanceof CookieAccessInfo) {
            this.domain = domain || undefined;
            this.path = path || "/";
            this.secure = !!secure;
            this.script = !!script;
            return this;
        }
        return new CookieAccessInfo(domain, path, secure, script);
    }
    CookieAccessInfo.All = Object.freeze(Object.create(null));
    exports.CookieAccessInfo = CookieAccessInfo;

    function Cookie(cookiestr, request_domain, request_path) {
        if (cookiestr instanceof Cookie) {
            return cookiestr;
        }
        if (this instanceof Cookie) {
            this.name = null;
            this.value = null;
            this.expiration_date = Infinity;
            this.path = String(request_path || "/");
            this.explicit_path = false;
            this.domain = request_domain || null;
            this.explicit_domain = false;
            this.secure = false; //how to define default?
            this.noscript = false; //httponly
            if (cookiestr) {
                this.parse(cookiestr, request_domain, request_path);
            }
            return this;
        }
        return new Cookie(cookiestr, request_domain, request_path);
    }
    exports.Cookie = Cookie;

    Cookie.prototype.toString = function toString() {
        var str = [this.name + "=" + this.value];
        if (this.expiration_date !== Infinity) {
            str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
        }
        if (this.domain) {
            str.push("domain=" + this.domain);
        }
        if (this.path) {
            str.push("path=" + this.path);
        }
        if (this.secure) {
            str.push("secure");
        }
        if (this.noscript) {
            str.push("httponly");
        }
        return str.join("; ");
    };

    Cookie.prototype.toValueString = function toValueString() {
        return this.name + "=" + this.value;
    };

    var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
    Cookie.prototype.parse = function parse(str, request_domain, request_path) {
        if (this instanceof Cookie) {
            var parts = str.split(";").filter(function (value) {
                    return !!value;
                }),
                pair = parts[0].match(/([^=]+)=([\s\S]*)/),
                key = pair[1],
                value = pair[2],
                i;
            this.name = key;
            this.value = value;

            for (i = 1; i < parts.length; i += 1) {
                pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                key = pair[1].trim().toLowerCase();
                value = pair[2];
                switch (key) {
                case "httponly":
                    this.noscript = true;
                    break;
                case "expires":
                    this.expiration_date = value ?
                            Number(Date.parse(value)) :
                            Infinity;
                    break;
                case "path":
                    this.path = value ?
                            value.trim() :
                            "";
                    this.explicit_path = true;
                    break;
                case "domain":
                    this.domain = value ?
                            value.trim() :
                            "";
                    this.explicit_domain = !!this.domain;
                    break;
                case "secure":
                    this.secure = true;
                    break;
                }
            }

            if (!this.explicit_path) {
               this.path = request_path || "/";
            }
            if (!this.explicit_domain) {
               this.domain = request_domain;
            }

            return this;
        }
        return new Cookie().parse(str, request_domain, request_path);
    };

    Cookie.prototype.matches = function matches(access_info) {
        if (access_info === CookieAccessInfo.All) {
          return true;
        }
        if (this.noscript && access_info.script ||
                this.secure && !access_info.secure ||
                !this.collidesWith(access_info)) {
            return false;
        }
        return true;
    };

    Cookie.prototype.collidesWith = function collidesWith(access_info) {
        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
            return false;
        }
        if (this.path && access_info.path.indexOf(this.path) !== 0) {
            return false;
        }
        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
           return false;
        }
        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
        var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
        if (cookie_domain === access_domain) {
            return true;
        }
        if (cookie_domain) {
            if (!this.explicit_domain) {
                return false; // we already checked if the domains were exactly the same
            }
            var wildcard = access_domain.indexOf(cookie_domain);
            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                return false;
            }
            return true;
        }
        return true;
    };

    function CookieJar() {
        var cookies, cookies_list, collidable_cookie;
        if (this instanceof CookieJar) {
            cookies = Object.create(null); //name: [Cookie]

            this.setCookie = function setCookie(cookie, request_domain, request_path) {
                var remove, i;
                cookie = new Cookie(cookie, request_domain, request_path);
                //Delete the cookie if the set is past the current time
                remove = cookie.expiration_date <= Date.now();
                if (cookies[cookie.name] !== undefined) {
                    cookies_list = cookies[cookie.name];
                    for (i = 0; i < cookies_list.length; i += 1) {
                        collidable_cookie = cookies_list[i];
                        if (collidable_cookie.collidesWith(cookie)) {
                            if (remove) {
                                cookies_list.splice(i, 1);
                                if (cookies_list.length === 0) {
                                    delete cookies[cookie.name];
                                }
                                return false;
                            }
                            cookies_list[i] = cookie;
                            return cookie;
                        }
                    }
                    if (remove) {
                        return false;
                    }
                    cookies_list.push(cookie);
                    return cookie;
                }
                if (remove) {
                    return false;
                }
                cookies[cookie.name] = [cookie];
                return cookies[cookie.name];
            };
            //returns a cookie
            this.getCookie = function getCookie(cookie_name, access_info) {
                var cookie, i;
                cookies_list = cookies[cookie_name];
                if (!cookies_list) {
                    return;
                }
                for (i = 0; i < cookies_list.length; i += 1) {
                    cookie = cookies_list[i];
                    if (cookie.expiration_date <= Date.now()) {
                        if (cookies_list.length === 0) {
                            delete cookies[cookie.name];
                        }
                        continue;
                    }

                    if (cookie.matches(access_info)) {
                        return cookie;
                    }
                }
            };
            //returns a list of cookies
            this.getCookies = function getCookies(access_info) {
                var matches = [], cookie_name, cookie;
                for (cookie_name in cookies) {
                    cookie = this.getCookie(cookie_name, access_info);
                    if (cookie) {
                        matches.push(cookie);
                    }
                }
                matches.toString = function toString() {
                    return matches.join(":");
                };
                matches.toValueString = function toValueString() {
                    return matches.map(function (c) {
                        return c.toValueString();
                    }).join(';');
                };
                return matches;
            };

            return this;
        }
        return new CookieJar();
    }
    exports.CookieJar = CookieJar;

    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
        cookies = Array.isArray(cookies) ?
                cookies :
                cookies.split(cookie_str_splitter);
        var successful = [],
            i,
            cookie;
        cookies = cookies.map(function(item){
            return new Cookie(item, request_domain, request_path);
        });
        for (i = 0; i < cookies.length; i += 1) {
            cookie = cookies[i];
            if (this.setCookie(cookie, request_domain, request_path)) {
                successful.push(cookie);
            }
        }
        return successful;
    };
}());

},{}],6:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{}],7:[function(require,module,exports){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && typeof window.process !== 'undefined' && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/** Attach to Window*/
if (window) {
  window.debug = exports;
}

},{"./debug":8}],8:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug.default = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":98}],9:[function(require,module,exports){
/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process !== 'undefined' && process.type === 'renderer') {
  module.exports = require('./browser.js');
} else {
  module.exports = require('./node.js');
}

},{"./browser.js":7,"./node.js":10}],10:[function(require,module,exports){
/**
 * Module dependencies.
 */

var tty = require('tty');
var util = require('util');

/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return /^debug_/i.test(key);
}).reduce(function (obj, key) {
  // camel-case
  var prop = key
    .substring(6)
    .toLowerCase()
    .replace(/_([a-z])/, function (_, k) { return k.toUpperCase() });

  // coerce string value into JS value
  var val = process.env[key];
  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
  else if (val === 'null') val = null;
  else val = Number(val);

  obj[prop] = val;
  return obj;
}, {});

/**
 * The file descriptor to write the `debug()` calls to.
 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
 *
 *   $ DEBUG_FD=3 node script.js 3>debug.log
 */

var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
var stream = 1 === fd ? process.stdout :
             2 === fd ? process.stderr :
             createWritableStdioStream(fd);

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts
    ? Boolean(exports.inspectOpts.colors)
    : tty.isatty(fd);
}

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

exports.formatters.o = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts)
    .replace(/\s*\n\s*/g, ' ');
};

/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */

exports.formatters.O = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var name = this.namespace;
  var useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
  } else {
    args[0] = new Date().toUTCString()
      + ' ' + name + ' ' + args[0];
  }
}

/**
 * Invokes `util.format()` with the specified arguments and writes to `stream`.
 */

function log() {
  return stream.write(util.format.apply(util, arguments) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  if (null == namespaces) {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  } else {
    process.env.DEBUG = namespaces;
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  return process.env.DEBUG;
}

/**
 * Copied from `node/src/node.js`.
 *
 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
 */

function createWritableStdioStream (fd) {
  var stream;
  var tty_wrap = process.binding('tty_wrap');

  // Note stream._type is used for test-module-load-list.js

  switch (tty_wrap.guessHandleType(fd)) {
    case 'TTY':
      stream = new tty.WriteStream(fd);
      stream._type = 'tty';

      // Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    case 'FILE':
      var fs = require('fs');
      stream = new fs.SyncWriteStream(fd, { autoClose: false });
      stream._type = 'fs';
      break;

    case 'PIPE':
    case 'TCP':
      var net = require('net');
      stream = new net.Socket({
        fd: fd,
        readable: false,
        writable: true
      });

      // FIXME Should probably have an option in net.Socket to create a
      // stream from an existing fd which is writable only. But for now
      // we'll just add this hack and set the `readable` member to false.
      // Test: ./node test/fixtures/echo.js < /etc/passwd
      stream.readable = false;
      stream.read = null;
      stream._type = 'pipe';

      // FIXME Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    default:
      // Probably an error on in uv_guess_handle()
      throw new Error('Implement me. Unknown stream file type!');
  }

  // For supporting legacy API we put the FD here.
  stream.fd = fd;

  stream._isStdio = true;

  return stream;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init (debug) {
  debug.inspectOpts = util._extend({}, exports.inspectOpts);
}

/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */

exports.enable(load());

},{"./debug":8,"fs":undefined,"net":undefined,"tty":undefined,"util":undefined}],11:[function(require,module,exports){
var Stream = require('stream').Stream;
var util = require('util');

module.exports = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
};

},{"stream":undefined,"util":undefined}],12:[function(require,module,exports){
/*!
  * https://github.com/paulmillr/es6-shim
  * @license es6-shim Copyright 2013-2016 by Paul Miller (http://paulmillr.com)
  *   and contributors,  MIT License
  * es6-shim: v0.35.1
  * see https://github.com/paulmillr/es6-shim/blob/0.35.1/LICENSE
  * Details and documentation:
  * https://github.com/paulmillr/es6-shim/
  */
(function(e,t){if(typeof define==="function"&&define.amd){define(t)}else if(typeof exports==="object"){module.exports=t()}else{e.returnExports=t()}})(this,function(){"use strict";var e=Function.call.bind(Function.apply);var t=Function.call.bind(Function.call);var r=Array.isArray;var n=Object.keys;var o=function notThunker(t){return function notThunk(){return!e(t,this,arguments)}};var i=function(e){try{e();return false}catch(t){return true}};var a=function valueOrFalseIfThrows(e){try{return e()}catch(t){return false}};var u=o(i);var f=function(){return!i(function(){Object.defineProperty({},"x",{get:function(){}})})};var s=!!Object.defineProperty&&f();var c=function foo(){}.name==="foo";var l=Function.call.bind(Array.prototype.forEach);var p=Function.call.bind(Array.prototype.reduce);var v=Function.call.bind(Array.prototype.filter);var y=Function.call.bind(Array.prototype.some);var h=function(e,t,r,n){if(!n&&t in e){return}if(s){Object.defineProperty(e,t,{configurable:true,enumerable:false,writable:true,value:r})}else{e[t]=r}};var b=function(e,t,r){l(n(t),function(n){var o=t[n];h(e,n,o,!!r)})};var g=Function.call.bind(Object.prototype.toString);var d=typeof/abc/==="function"?function IsCallableSlow(e){return typeof e==="function"&&g(e)==="[object Function]"}:function IsCallableFast(e){return typeof e==="function"};var O={getter:function(e,t,r){if(!s){throw new TypeError("getters require true ES5 support")}Object.defineProperty(e,t,{configurable:true,enumerable:false,get:r})},proxy:function(e,t,r){if(!s){throw new TypeError("getters require true ES5 support")}var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,{configurable:n.configurable,enumerable:n.enumerable,get:function getKey(){return e[t]},set:function setKey(r){e[t]=r}})},redefine:function(e,t,r){if(s){var n=Object.getOwnPropertyDescriptor(e,t);n.value=r;Object.defineProperty(e,t,n)}else{e[t]=r}},defineByDescriptor:function(e,t,r){if(s){Object.defineProperty(e,t,r)}else if("value"in r){e[t]=r.value}},preserveToString:function(e,t){if(t&&d(t.toString)){h(e,"toString",t.toString.bind(t),true)}}};var m=Object.create||function(e,t){var r=function Prototype(){};r.prototype=e;var o=new r;if(typeof t!=="undefined"){n(t).forEach(function(e){O.defineByDescriptor(o,e,t[e])})}return o};var w=function(e,t){if(!Object.setPrototypeOf){return false}return a(function(){var r=function Subclass(t){var r=new e(t);Object.setPrototypeOf(r,Subclass.prototype);return r};Object.setPrototypeOf(r,e);r.prototype=m(e.prototype,{constructor:{value:r}});return t(r)})};var j=function(){if(typeof self!=="undefined"){return self}if(typeof window!=="undefined"){return window}if(typeof global!=="undefined"){return global}throw new Error("unable to locate global object")};var S=j();var T=S.isFinite;var I=Function.call.bind(String.prototype.indexOf);var E=Function.apply.bind(Array.prototype.indexOf);var P=Function.call.bind(Array.prototype.concat);var C=Function.call.bind(String.prototype.slice);var M=Function.call.bind(Array.prototype.push);var x=Function.apply.bind(Array.prototype.push);var N=Function.call.bind(Array.prototype.shift);var A=Math.max;var R=Math.min;var _=Math.floor;var k=Math.abs;var F=Math.exp;var L=Math.log;var D=Math.sqrt;var z=Function.call.bind(Object.prototype.hasOwnProperty);var q;var W=function(){};var G=S.Symbol||{};var H=G.species||"@@species";var V=Number.isNaN||function isNaN(e){return e!==e};var B=Number.isFinite||function isFinite(e){return typeof e==="number"&&T(e)};var $=d(Math.sign)?Math.sign:function sign(e){var t=Number(e);if(t===0){return t}if(V(t)){return t}return t<0?-1:1};var U=function isArguments(e){return g(e)==="[object Arguments]"};var J=function isArguments(e){return e!==null&&typeof e==="object"&&typeof e.length==="number"&&e.length>=0&&g(e)!=="[object Array]"&&g(e.callee)==="[object Function]"};var X=U(arguments)?U:J;var K={primitive:function(e){return e===null||typeof e!=="function"&&typeof e!=="object"},string:function(e){return g(e)==="[object String]"},regex:function(e){return g(e)==="[object RegExp]"},symbol:function(e){return typeof S.Symbol==="function"&&typeof e==="symbol"}};var Z=function overrideNative(e,t,r){var n=e[t];h(e,t,r,true);O.preserveToString(e[t],n)};var Y=typeof G==="function"&&typeof G["for"]==="function"&&K.symbol(G());var Q=K.symbol(G.iterator)?G.iterator:"_es6-shim iterator_";if(S.Set&&typeof(new S.Set)["@@iterator"]==="function"){Q="@@iterator"}if(!S.Reflect){h(S,"Reflect",{},true)}var ee=S.Reflect;var te=String;var re={Call:function Call(t,r){var n=arguments.length>2?arguments[2]:[];if(!re.IsCallable(t)){throw new TypeError(t+" is not a function")}return e(t,r,n)},RequireObjectCoercible:function(e,t){if(e==null){throw new TypeError(t||"Cannot call method on "+e)}return e},TypeIsObject:function(e){if(e===void 0||e===null||e===true||e===false){return false}return typeof e==="function"||typeof e==="object"},ToObject:function(e,t){return Object(re.RequireObjectCoercible(e,t))},IsCallable:d,IsConstructor:function(e){return re.IsCallable(e)},ToInt32:function(e){return re.ToNumber(e)>>0},ToUint32:function(e){return re.ToNumber(e)>>>0},ToNumber:function(e){if(g(e)==="[object Symbol]"){throw new TypeError("Cannot convert a Symbol value to a number")}return+e},ToInteger:function(e){var t=re.ToNumber(e);if(V(t)){return 0}if(t===0||!B(t)){return t}return(t>0?1:-1)*_(k(t))},ToLength:function(e){var t=re.ToInteger(e);if(t<=0){return 0}if(t>Number.MAX_SAFE_INTEGER){return Number.MAX_SAFE_INTEGER}return t},SameValue:function(e,t){if(e===t){if(e===0){return 1/e===1/t}return true}return V(e)&&V(t)},SameValueZero:function(e,t){return e===t||V(e)&&V(t)},IsIterable:function(e){return re.TypeIsObject(e)&&(typeof e[Q]!=="undefined"||X(e))},GetIterator:function(e){if(X(e)){return new q(e,"value")}var t=re.GetMethod(e,Q);if(!re.IsCallable(t)){throw new TypeError("value is not an iterable")}var r=re.Call(t,e);if(!re.TypeIsObject(r)){throw new TypeError("bad iterator")}return r},GetMethod:function(e,t){var r=re.ToObject(e)[t];if(r===void 0||r===null){return void 0}if(!re.IsCallable(r)){throw new TypeError("Method not callable: "+t)}return r},IteratorComplete:function(e){return!!e.done},IteratorClose:function(e,t){var r=re.GetMethod(e,"return");if(r===void 0){return}var n,o;try{n=re.Call(r,e)}catch(i){o=i}if(t){return}if(o){throw o}if(!re.TypeIsObject(n)){throw new TypeError("Iterator's return method returned a non-object.")}},IteratorNext:function(e){var t=arguments.length>1?e.next(arguments[1]):e.next();if(!re.TypeIsObject(t)){throw new TypeError("bad iterator")}return t},IteratorStep:function(e){var t=re.IteratorNext(e);var r=re.IteratorComplete(t);return r?false:t},Construct:function(e,t,r,n){var o=typeof r==="undefined"?e:r;if(!n&&ee.construct){return ee.construct(e,t,o)}var i=o.prototype;if(!re.TypeIsObject(i)){i=Object.prototype}var a=m(i);var u=re.Call(e,a,t);return re.TypeIsObject(u)?u:a},SpeciesConstructor:function(e,t){var r=e.constructor;if(r===void 0){return t}if(!re.TypeIsObject(r)){throw new TypeError("Bad constructor")}var n=r[H];if(n===void 0||n===null){return t}if(!re.IsConstructor(n)){throw new TypeError("Bad @@species")}return n},CreateHTML:function(e,t,r,n){var o=re.ToString(e);var i="<"+t;if(r!==""){var a=re.ToString(n);var u=a.replace(/"/g,"&quot;");i+=" "+r+'="'+u+'"'}var f=i+">";var s=f+o;return s+"</"+t+">"},IsRegExp:function IsRegExp(e){if(!re.TypeIsObject(e)){return false}var t=e[G.match];if(typeof t!=="undefined"){return!!t}return K.regex(e)},ToString:function ToString(e){return te(e)}};if(s&&Y){var ne=function defineWellKnownSymbol(e){if(K.symbol(G[e])){return G[e]}var t=G["for"]("Symbol."+e);Object.defineProperty(G,e,{configurable:false,enumerable:false,writable:false,value:t});return t};if(!K.symbol(G.search)){var oe=ne("search");var ie=String.prototype.search;h(RegExp.prototype,oe,function search(e){return re.Call(ie,e,[this])});var ae=function search(e){var t=re.RequireObjectCoercible(this);if(e!==null&&typeof e!=="undefined"){var r=re.GetMethod(e,oe);if(typeof r!=="undefined"){return re.Call(r,e,[t])}}return re.Call(ie,t,[re.ToString(e)])};Z(String.prototype,"search",ae)}if(!K.symbol(G.replace)){var ue=ne("replace");var fe=String.prototype.replace;h(RegExp.prototype,ue,function replace(e,t){return re.Call(fe,e,[this,t])});var se=function replace(e,t){var r=re.RequireObjectCoercible(this);if(e!==null&&typeof e!=="undefined"){var n=re.GetMethod(e,ue);if(typeof n!=="undefined"){return re.Call(n,e,[r,t])}}return re.Call(fe,r,[re.ToString(e),t])};Z(String.prototype,"replace",se)}if(!K.symbol(G.split)){var ce=ne("split");var le=String.prototype.split;h(RegExp.prototype,ce,function split(e,t){return re.Call(le,e,[this,t])});var pe=function split(e,t){var r=re.RequireObjectCoercible(this);if(e!==null&&typeof e!=="undefined"){var n=re.GetMethod(e,ce);if(typeof n!=="undefined"){return re.Call(n,e,[r,t])}}return re.Call(le,r,[re.ToString(e),t])};Z(String.prototype,"split",pe)}var ve=K.symbol(G.match);var ye=ve&&function(){var e={};e[G.match]=function(){return 42};return"a".match(e)!==42}();if(!ve||ye){var he=ne("match");var be=String.prototype.match;h(RegExp.prototype,he,function match(e){return re.Call(be,e,[this])});var ge=function match(e){var t=re.RequireObjectCoercible(this);if(e!==null&&typeof e!=="undefined"){var r=re.GetMethod(e,he);if(typeof r!=="undefined"){return re.Call(r,e,[t])}}return re.Call(be,t,[re.ToString(e)])};Z(String.prototype,"match",ge)}}var de=function wrapConstructor(e,t,r){O.preserveToString(t,e);if(Object.setPrototypeOf){Object.setPrototypeOf(e,t)}if(s){l(Object.getOwnPropertyNames(e),function(n){if(n in W||r[n]){return}O.proxy(e,n,t)})}else{l(Object.keys(e),function(n){if(n in W||r[n]){return}t[n]=e[n]})}t.prototype=e.prototype;O.redefine(e.prototype,"constructor",t)};var Oe=function(){return this};var me=function(e){if(s&&!z(e,H)){O.getter(e,H,Oe)}};var we=function(e,t){var r=t||function iterator(){return this};h(e,Q,r);if(!e[Q]&&K.symbol(Q)){e[Q]=r}};var je=function createDataProperty(e,t,r){if(s){Object.defineProperty(e,t,{configurable:true,enumerable:true,writable:true,value:r})}else{e[t]=r}};var Se=function createDataPropertyOrThrow(e,t,r){je(e,t,r);if(!re.SameValue(e[t],r)){throw new TypeError("property is nonconfigurable")}};var Te=function(e,t,r,n){if(!re.TypeIsObject(e)){throw new TypeError("Constructor requires `new`: "+t.name)}var o=t.prototype;if(!re.TypeIsObject(o)){o=r}var i=m(o);for(var a in n){if(z(n,a)){var u=n[a];h(i,a,u,true)}}return i};if(String.fromCodePoint&&String.fromCodePoint.length!==1){var Ie=String.fromCodePoint;Z(String,"fromCodePoint",function fromCodePoint(e){return re.Call(Ie,this,arguments)})}var Ee={fromCodePoint:function fromCodePoint(e){var t=[];var r;for(var n=0,o=arguments.length;n<o;n++){r=Number(arguments[n]);if(!re.SameValue(r,re.ToInteger(r))||r<0||r>1114111){throw new RangeError("Invalid code point "+r)}if(r<65536){M(t,String.fromCharCode(r))}else{r-=65536;M(t,String.fromCharCode((r>>10)+55296));M(t,String.fromCharCode(r%1024+56320))}}return t.join("")},raw:function raw(e){var t=re.ToObject(e,"bad callSite");var r=re.ToObject(t.raw,"bad raw value");var n=r.length;var o=re.ToLength(n);if(o<=0){return""}var i=[];var a=0;var u,f,s,c;while(a<o){u=re.ToString(a);s=re.ToString(r[u]);M(i,s);if(a+1>=o){break}f=a+1<arguments.length?arguments[a+1]:"";c=re.ToString(f);M(i,c);a+=1}return i.join("")}};if(String.raw&&String.raw({raw:{0:"x",1:"y",length:2}})!=="xy"){Z(String,"raw",Ee.raw)}b(String,Ee);var Pe=function repeat(e,t){if(t<1){return""}if(t%2){return repeat(e,t-1)+e}var r=repeat(e,t/2);return r+r};var Ce=Infinity;var Me={repeat:function repeat(e){var t=re.ToString(re.RequireObjectCoercible(this));var r=re.ToInteger(e);if(r<0||r>=Ce){throw new RangeError("repeat count must be less than infinity and not overflow maximum string size")}return Pe(t,r)},startsWith:function startsWith(e){var t=re.ToString(re.RequireObjectCoercible(this));if(re.IsRegExp(e)){throw new TypeError('Cannot call method "startsWith" with a regex')}var r=re.ToString(e);var n;if(arguments.length>1){n=arguments[1]}var o=A(re.ToInteger(n),0);return C(t,o,o+r.length)===r},endsWith:function endsWith(e){var t=re.ToString(re.RequireObjectCoercible(this));if(re.IsRegExp(e)){throw new TypeError('Cannot call method "endsWith" with a regex')}var r=re.ToString(e);var n=t.length;var o;if(arguments.length>1){o=arguments[1]}var i=typeof o==="undefined"?n:re.ToInteger(o);var a=R(A(i,0),n);return C(t,a-r.length,a)===r},includes:function includes(e){if(re.IsRegExp(e)){throw new TypeError('"includes" does not accept a RegExp')}var t=re.ToString(e);var r;if(arguments.length>1){r=arguments[1]}return I(this,t,r)!==-1},codePointAt:function codePointAt(e){var t=re.ToString(re.RequireObjectCoercible(this));var r=re.ToInteger(e);var n=t.length;if(r>=0&&r<n){var o=t.charCodeAt(r);var i=r+1===n;if(o<55296||o>56319||i){return o}var a=t.charCodeAt(r+1);if(a<56320||a>57343){return o}return(o-55296)*1024+(a-56320)+65536}}};if(String.prototype.includes&&"a".includes("a",Infinity)!==false){Z(String.prototype,"includes",Me.includes)}if(String.prototype.startsWith&&String.prototype.endsWith){var xe=i(function(){"/a/".startsWith(/a/)});var Ne=a(function(){return"abc".startsWith("a",Infinity)===false});if(!xe||!Ne){Z(String.prototype,"startsWith",Me.startsWith);Z(String.prototype,"endsWith",Me.endsWith)}}if(Y){var Ae=a(function(){var e=/a/;e[G.match]=false;return"/a/".startsWith(e)});if(!Ae){Z(String.prototype,"startsWith",Me.startsWith)}var Re=a(function(){var e=/a/;e[G.match]=false;return"/a/".endsWith(e)});if(!Re){Z(String.prototype,"endsWith",Me.endsWith)}var _e=a(function(){var e=/a/;e[G.match]=false;return"/a/".includes(e)});if(!_e){Z(String.prototype,"includes",Me.includes)}}b(String.prototype,Me);var ke=["	\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003","\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028","\u2029\ufeff"].join("");var Fe=new RegExp("(^["+ke+"]+)|(["+ke+"]+$)","g");var Le=function trim(){return re.ToString(re.RequireObjectCoercible(this)).replace(Fe,"")};var De=["\x85","\u200b","\ufffe"].join("");var ze=new RegExp("["+De+"]","g");var qe=/^[\-+]0x[0-9a-f]+$/i;var We=De.trim().length!==De.length;h(String.prototype,"trim",Le,We);var Ge=function(e){return{value:e,done:arguments.length===0}};var He=function(e){re.RequireObjectCoercible(e);this._s=re.ToString(e);this._i=0};He.prototype.next=function(){var e=this._s;var t=this._i;if(typeof e==="undefined"||t>=e.length){this._s=void 0;return Ge()}var r=e.charCodeAt(t);var n,o;if(r<55296||r>56319||t+1===e.length){o=1}else{n=e.charCodeAt(t+1);o=n<56320||n>57343?1:2}this._i=t+o;return Ge(e.substr(t,o))};we(He.prototype);we(String.prototype,function(){return new He(this)});var Ve={from:function from(e){var r=this;var n;if(arguments.length>1){n=arguments[1]}var o,i;if(typeof n==="undefined"){o=false}else{if(!re.IsCallable(n)){throw new TypeError("Array.from: when provided, the second argument must be a function")}if(arguments.length>2){i=arguments[2]}o=true}var a=typeof(X(e)||re.GetMethod(e,Q))!=="undefined";var u,f,s;if(a){f=re.IsConstructor(r)?Object(new r):[];var c=re.GetIterator(e);var l,p;s=0;while(true){l=re.IteratorStep(c);if(l===false){break}p=l.value;try{if(o){p=typeof i==="undefined"?n(p,s):t(n,i,p,s)}f[s]=p}catch(v){re.IteratorClose(c,true);throw v}s+=1}u=s}else{var y=re.ToObject(e);u=re.ToLength(y.length);f=re.IsConstructor(r)?Object(new r(u)):new Array(u);var h;for(s=0;s<u;++s){h=y[s];if(o){h=typeof i==="undefined"?n(h,s):t(n,i,h,s)}Se(f,s,h)}}f.length=u;return f},of:function of(){var e=arguments.length;var t=this;var n=r(t)||!re.IsCallable(t)?new Array(e):re.Construct(t,[e]);for(var o=0;o<e;++o){Se(n,o,arguments[o])}n.length=e;return n}};b(Array,Ve);me(Array);q=function(e,t){this.i=0;this.array=e;this.kind=t};b(q.prototype,{next:function(){var e=this.i;var t=this.array;if(!(this instanceof q)){throw new TypeError("Not an ArrayIterator")}if(typeof t!=="undefined"){var r=re.ToLength(t.length);for(;e<r;e++){var n=this.kind;var o;if(n==="key"){o=e}else if(n==="value"){o=t[e]}else if(n==="entry"){o=[e,t[e]]}this.i=e+1;return Ge(o)}}this.array=void 0;return Ge()}});we(q.prototype);var Be=Array.of===Ve.of||function(){var e=function Foo(e){this.length=e};e.prototype=[];var t=Array.of.apply(e,[1,2]);return t instanceof e&&t.length===2}();if(!Be){Z(Array,"of",Ve.of)}var $e={copyWithin:function copyWithin(e,t){var r=re.ToObject(this);var n=re.ToLength(r.length);var o=re.ToInteger(e);var i=re.ToInteger(t);var a=o<0?A(n+o,0):R(o,n);var u=i<0?A(n+i,0):R(i,n);var f;if(arguments.length>2){f=arguments[2]}var s=typeof f==="undefined"?n:re.ToInteger(f);var c=s<0?A(n+s,0):R(s,n);var l=R(c-u,n-a);var p=1;if(u<a&&a<u+l){p=-1;u+=l-1;a+=l-1}while(l>0){if(u in r){r[a]=r[u]}else{delete r[a]}u+=p;a+=p;l-=1}return r},fill:function fill(e){var t;if(arguments.length>1){t=arguments[1]}var r;if(arguments.length>2){r=arguments[2]}var n=re.ToObject(this);var o=re.ToLength(n.length);t=re.ToInteger(typeof t==="undefined"?0:t);r=re.ToInteger(typeof r==="undefined"?o:r);var i=t<0?A(o+t,0):R(t,o);var a=r<0?o+r:r;for(var u=i;u<o&&u<a;++u){n[u]=e}return n},find:function find(e){var r=re.ToObject(this);var n=re.ToLength(r.length);if(!re.IsCallable(e)){throw new TypeError("Array#find: predicate must be a function")}var o=arguments.length>1?arguments[1]:null;for(var i=0,a;i<n;i++){a=r[i];if(o){if(t(e,o,a,i,r)){return a}}else if(e(a,i,r)){return a}}},findIndex:function findIndex(e){var r=re.ToObject(this);var n=re.ToLength(r.length);if(!re.IsCallable(e)){throw new TypeError("Array#findIndex: predicate must be a function")}var o=arguments.length>1?arguments[1]:null;for(var i=0;i<n;i++){if(o){if(t(e,o,r[i],i,r)){return i}}else if(e(r[i],i,r)){return i}}return-1},keys:function keys(){return new q(this,"key")},values:function values(){return new q(this,"value")},entries:function entries(){return new q(this,"entry")}};if(Array.prototype.keys&&!re.IsCallable([1].keys().next)){delete Array.prototype.keys}if(Array.prototype.entries&&!re.IsCallable([1].entries().next)){delete Array.prototype.entries}if(Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[Q]){b(Array.prototype,{values:Array.prototype[Q]});if(K.symbol(G.unscopables)){Array.prototype[G.unscopables].values=true}}if(c&&Array.prototype.values&&Array.prototype.values.name!=="values"){var Ue=Array.prototype.values;Z(Array.prototype,"values",function values(){return re.Call(Ue,this,arguments)});h(Array.prototype,Q,Array.prototype.values,true)}b(Array.prototype,$e);if(1/[true].indexOf(true,-0)<0){h(Array.prototype,"indexOf",function indexOf(e){var t=E(this,arguments);if(t===0&&1/t<0){return 0}return t},true)}we(Array.prototype,function(){return this.values()});if(Object.getPrototypeOf){we(Object.getPrototypeOf([].values()))}var Je=function(){return a(function(){return Array.from({length:-1}).length===0})}();var Xe=function(){var e=Array.from([0].entries());return e.length===1&&r(e[0])&&e[0][0]===0&&e[0][1]===0}();if(!Je||!Xe){Z(Array,"from",Ve.from)}var Ke=function(){return a(function(){return Array.from([0],void 0)})}();if(!Ke){var Ze=Array.from;Z(Array,"from",function from(e){if(arguments.length>1&&typeof arguments[1]!=="undefined"){return re.Call(Ze,this,arguments)}else{return t(Ze,this,e)}})}var Ye=-(Math.pow(2,32)-1);var Qe=function(e,r){var n={length:Ye};n[r?(n.length>>>0)-1:0]=true;return a(function(){t(e,n,function(){throw new RangeError("should not reach here")},[]);return true})};if(!Qe(Array.prototype.forEach)){var et=Array.prototype.forEach;Z(Array.prototype,"forEach",function forEach(e){return re.Call(et,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.map)){var tt=Array.prototype.map;Z(Array.prototype,"map",function map(e){return re.Call(tt,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.filter)){var rt=Array.prototype.filter;Z(Array.prototype,"filter",function filter(e){return re.Call(rt,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.some)){var nt=Array.prototype.some;Z(Array.prototype,"some",function some(e){return re.Call(nt,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.every)){var ot=Array.prototype.every;Z(Array.prototype,"every",function every(e){return re.Call(ot,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.reduce)){var it=Array.prototype.reduce;Z(Array.prototype,"reduce",function reduce(e){return re.Call(it,this.length>=0?this:[],arguments)},true)}if(!Qe(Array.prototype.reduceRight,true)){var at=Array.prototype.reduceRight;Z(Array.prototype,"reduceRight",function reduceRight(e){return re.Call(at,this.length>=0?this:[],arguments)},true)}var ut=Number("0o10")!==8;var ft=Number("0b10")!==2;var st=y(De,function(e){return Number(e+0+e)===0});if(ut||ft||st){var ct=Number;var lt=/^0b[01]+$/i;var pt=/^0o[0-7]+$/i;var vt=lt.test.bind(lt);var yt=pt.test.bind(pt);var ht=function(e){var t;if(typeof e.valueOf==="function"){t=e.valueOf();if(K.primitive(t)){return t}}if(typeof e.toString==="function"){t=e.toString();if(K.primitive(t)){return t}}throw new TypeError("No default value")};var bt=ze.test.bind(ze);var gt=qe.test.bind(qe);var dt=function(){var e=function Number(t){var r;if(arguments.length>0){r=K.primitive(t)?t:ht(t,"number")}else{r=0}if(typeof r==="string"){r=re.Call(Le,r);if(vt(r)){r=parseInt(C(r,2),2)}else if(yt(r)){r=parseInt(C(r,2),8)}else if(bt(r)||gt(r)){r=NaN}}var n=this;var o=a(function(){ct.prototype.valueOf.call(n);return true});if(n instanceof e&&!o){return new ct(r)}return ct(r)};return e}();de(ct,dt,{});b(dt,{NaN:ct.NaN,MAX_VALUE:ct.MAX_VALUE,MIN_VALUE:ct.MIN_VALUE,NEGATIVE_INFINITY:ct.NEGATIVE_INFINITY,POSITIVE_INFINITY:ct.POSITIVE_INFINITY});Number=dt;O.redefine(S,"Number",dt)}var Ot=Math.pow(2,53)-1;b(Number,{MAX_SAFE_INTEGER:Ot,MIN_SAFE_INTEGER:-Ot,EPSILON:2.220446049250313e-16,parseInt:S.parseInt,parseFloat:S.parseFloat,isFinite:B,isInteger:function isInteger(e){return B(e)&&re.ToInteger(e)===e},isSafeInteger:function isSafeInteger(e){return Number.isInteger(e)&&k(e)<=Number.MAX_SAFE_INTEGER},isNaN:V});h(Number,"parseInt",S.parseInt,Number.parseInt!==S.parseInt);if(![,1].find(function(e,t){return t===0})){Z(Array.prototype,"find",$e.find)}if([,1].findIndex(function(e,t){return t===0})!==0){Z(Array.prototype,"findIndex",$e.findIndex)}var mt=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable);var wt=function ensureEnumerable(e,t){if(s&&mt(e,t)){Object.defineProperty(e,t,{enumerable:false})}};var jt=function sliceArgs(){var e=Number(this);var t=arguments.length;var r=t-e;var n=new Array(r<0?0:r);for(var o=e;o<t;++o){n[o-e]=arguments[o]}return n};var St=function assignTo(e){return function assignToSource(t,r){t[r]=e[r];return t}};var Tt=function(e,t){var r=n(Object(t));var o;if(re.IsCallable(Object.getOwnPropertySymbols)){o=v(Object.getOwnPropertySymbols(Object(t)),mt(t))}return p(P(r,o||[]),St(t),e)};var It={assign:function(e,t){var r=re.ToObject(e,"Cannot convert undefined or null to object");return p(re.Call(jt,1,arguments),Tt,r)},is:function is(e,t){return re.SameValue(e,t)}};var Et=Object.assign&&Object.preventExtensions&&function(){var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return e[1]==="y"}}();if(Et){Z(Object,"assign",It.assign)}b(Object,It);if(s){var Pt={setPrototypeOf:function(e,r){var n;var o=function(e,t){if(!re.TypeIsObject(e)){throw new TypeError("cannot set prototype on a non-object")}if(!(t===null||re.TypeIsObject(t))){throw new TypeError("can only set prototype to an object or null"+t)}};var i=function(e,r){o(e,r);t(n,e,r);return e};try{n=e.getOwnPropertyDescriptor(e.prototype,r).set;t(n,{},null)}catch(a){if(e.prototype!=={}[r]){return}n=function(e){this[r]=e};i.polyfill=i(i({},null),e.prototype)instanceof e}return i}(Object,"__proto__")};b(Object,Pt)}if(Object.setPrototypeOf&&Object.getPrototypeOf&&Object.getPrototypeOf(Object.setPrototypeOf({},null))!==null&&Object.getPrototypeOf(Object.create(null))===null){(function(){var e=Object.create(null);var t=Object.getPrototypeOf;var r=Object.setPrototypeOf;Object.getPrototypeOf=function(r){var n=t(r);return n===e?null:n};Object.setPrototypeOf=function(t,n){var o=n===null?e:n;return r(t,o)};Object.setPrototypeOf.polyfill=false})()}var Ct=!i(function(){Object.keys("foo")});if(!Ct){var Mt=Object.keys;Z(Object,"keys",function keys(e){return Mt(re.ToObject(e))});n=Object.keys}var xt=i(function(){Object.keys(/a/g)});if(xt){var Nt=Object.keys;Z(Object,"keys",function keys(e){if(K.regex(e)){var t=[];for(var r in e){if(z(e,r)){M(t,r)}}return t}return Nt(e)});n=Object.keys}if(Object.getOwnPropertyNames){var At=!i(function(){Object.getOwnPropertyNames("foo")});if(!At){var Rt=typeof window==="object"?Object.getOwnPropertyNames(window):[];var _t=Object.getOwnPropertyNames;Z(Object,"getOwnPropertyNames",function getOwnPropertyNames(e){var t=re.ToObject(e);if(g(t)==="[object Window]"){try{return _t(t)}catch(r){return P([],Rt)}}return _t(t)})}}if(Object.getOwnPropertyDescriptor){var kt=!i(function(){Object.getOwnPropertyDescriptor("foo","bar")});if(!kt){var Ft=Object.getOwnPropertyDescriptor;Z(Object,"getOwnPropertyDescriptor",function getOwnPropertyDescriptor(e,t){return Ft(re.ToObject(e),t)})}}if(Object.seal){var Lt=!i(function(){Object.seal("foo")});if(!Lt){var Dt=Object.seal;Z(Object,"seal",function seal(e){if(!re.TypeIsObject(e)){return e}return Dt(e)})}}if(Object.isSealed){var zt=!i(function(){Object.isSealed("foo")});if(!zt){var qt=Object.isSealed;Z(Object,"isSealed",function isSealed(e){if(!re.TypeIsObject(e)){return true}return qt(e)})}}if(Object.freeze){var Wt=!i(function(){Object.freeze("foo")});if(!Wt){var Gt=Object.freeze;Z(Object,"freeze",function freeze(e){if(!re.TypeIsObject(e)){return e}return Gt(e)})}}if(Object.isFrozen){var Ht=!i(function(){Object.isFrozen("foo")});if(!Ht){var Vt=Object.isFrozen;Z(Object,"isFrozen",function isFrozen(e){if(!re.TypeIsObject(e)){return true}return Vt(e)})}}if(Object.preventExtensions){var Bt=!i(function(){Object.preventExtensions("foo")});if(!Bt){var $t=Object.preventExtensions;Z(Object,"preventExtensions",function preventExtensions(e){if(!re.TypeIsObject(e)){return e}return $t(e)})}}if(Object.isExtensible){var Ut=!i(function(){Object.isExtensible("foo")});if(!Ut){var Jt=Object.isExtensible;Z(Object,"isExtensible",function isExtensible(e){if(!re.TypeIsObject(e)){return false}return Jt(e)})}}if(Object.getPrototypeOf){var Xt=!i(function(){Object.getPrototypeOf("foo")});if(!Xt){var Kt=Object.getPrototypeOf;Z(Object,"getPrototypeOf",function getPrototypeOf(e){return Kt(re.ToObject(e))})}}var Zt=s&&function(){var e=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags");return e&&re.IsCallable(e.get)}();if(s&&!Zt){var Yt=function flags(){if(!re.TypeIsObject(this)){throw new TypeError("Method called on incompatible type: must be an object.")}var e="";if(this.global){e+="g"}if(this.ignoreCase){e+="i"}if(this.multiline){e+="m"}if(this.unicode){e+="u"}if(this.sticky){e+="y"}return e};O.getter(RegExp.prototype,"flags",Yt)}var Qt=s&&a(function(){return String(new RegExp(/a/g,"i"))==="/a/i"});var er=Y&&s&&function(){var e=/./;e[G.match]=false;return RegExp(e)===e}();var tr=a(function(){return RegExp.prototype.toString.call({source:"abc"})==="/abc/"});var rr=tr&&a(function(){return RegExp.prototype.toString.call({source:"a",flags:"b"})==="/a/b"});if(!tr||!rr){var nr=RegExp.prototype.toString;h(RegExp.prototype,"toString",function toString(){var e=re.RequireObjectCoercible(this);if(K.regex(e)){return t(nr,e)}var r=te(e.source);var n=te(e.flags);return"/"+r+"/"+n},true);O.preserveToString(RegExp.prototype.toString,nr)}if(s&&(!Qt||er)){var or=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags").get;var ir=Object.getOwnPropertyDescriptor(RegExp.prototype,"source")||{};var ar=function(){return this.source};var ur=re.IsCallable(ir.get)?ir.get:ar;var fr=RegExp;var sr=function(){return function RegExp(e,t){var r=re.IsRegExp(e);var n=this instanceof RegExp;if(!n&&r&&typeof t==="undefined"&&e.constructor===RegExp){return e}var o=e;var i=t;if(K.regex(e)){o=re.Call(ur,e);i=typeof t==="undefined"?re.Call(or,e):t;return new RegExp(o,i)}else if(r){o=e.source;i=typeof t==="undefined"?e.flags:t}return new fr(e,t)}}();de(fr,sr,{$input:true});RegExp=sr;O.redefine(S,"RegExp",sr)}if(s){var cr={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};l(n(cr),function(e){if(e in RegExp&&!(cr[e]in RegExp)){O.getter(RegExp,cr[e],function get(){return RegExp[e]})}})}me(RegExp);var lr=1/Number.EPSILON;var pr=function roundTiesToEven(e){return e+lr-lr};var vr=Math.pow(2,-23);var yr=Math.pow(2,127)*(2-vr);var hr=Math.pow(2,-126);var br=Math.E;var gr=Math.LOG2E;var dr=Math.LOG10E;var Or=Number.prototype.clz;delete Number.prototype.clz;var mr={acosh:function acosh(e){var t=Number(e);if(V(t)||e<1){return NaN}if(t===1){return 0}if(t===Infinity){return t}return L(t/br+D(t+1)*D(t-1)/br)+1},asinh:function asinh(e){var t=Number(e);if(t===0||!T(t)){return t}return t<0?-asinh(-t):L(t+D(t*t+1))},atanh:function atanh(e){var t=Number(e);if(V(t)||t<-1||t>1){return NaN}if(t===-1){return-Infinity}if(t===1){return Infinity}if(t===0){return t}return.5*L((1+t)/(1-t))},cbrt:function cbrt(e){var t=Number(e);if(t===0){return t}var r=t<0;var n;if(r){t=-t}if(t===Infinity){n=Infinity}else{n=F(L(t)/3);n=(t/(n*n)+2*n)/3}return r?-n:n},clz32:function clz32(e){var t=Number(e);var r=re.ToUint32(t);if(r===0){return 32}return Or?re.Call(Or,r):31-_(L(r+.5)*gr)},cosh:function cosh(e){var t=Number(e);if(t===0){return 1}if(V(t)){return NaN}if(!T(t)){return Infinity}if(t<0){t=-t}if(t>21){return F(t)/2}return(F(t)+F(-t))/2},expm1:function expm1(e){var t=Number(e);if(t===-Infinity){return-1}if(!T(t)||t===0){return t}if(k(t)>.5){return F(t)-1}var r=t;var n=0;var o=1;while(n+r!==n){n+=r;o+=1;r*=t/o}return n},hypot:function hypot(e,t){var r=0;var n=0;for(var o=0;o<arguments.length;++o){var i=k(Number(arguments[o]));if(n<i){r*=n/i*(n/i);r+=1;n=i}else{r+=i>0?i/n*(i/n):i}}return n===Infinity?Infinity:n*D(r)},log2:function log2(e){return L(e)*gr},log10:function log10(e){return L(e)*dr},log1p:function log1p(e){var t=Number(e);if(t<-1||V(t)){return NaN}if(t===0||t===Infinity){return t}if(t===-1){return-Infinity}return 1+t-1===0?t:t*(L(1+t)/(1+t-1))},sign:$,sinh:function sinh(e){var t=Number(e);if(!T(t)||t===0){return t}if(k(t)<1){return(Math.expm1(t)-Math.expm1(-t))/2}return(F(t-1)-F(-t-1))*br/2},tanh:function tanh(e){var t=Number(e);if(V(t)||t===0){return t}if(t>=20){return 1}if(t<=-20){return-1}return(Math.expm1(t)-Math.expm1(-t))/(F(t)+F(-t))},trunc:function trunc(e){var t=Number(e);return t<0?-_(-t):_(t)},imul:function imul(e,t){var r=re.ToUint32(e);var n=re.ToUint32(t);var o=r>>>16&65535;var i=r&65535;var a=n>>>16&65535;var u=n&65535;return i*u+(o*u+i*a<<16>>>0)|0},fround:function fround(e){var t=Number(e);if(t===0||t===Infinity||t===-Infinity||V(t)){return t}var r=$(t);var n=k(t);if(n<hr){return r*pr(n/hr/vr)*hr*vr}var o=(1+vr/Number.EPSILON)*n;var i=o-(o-n);if(i>yr||V(i)){return r*Infinity}return r*i}};b(Math,mr);h(Math,"log1p",mr.log1p,Math.log1p(-1e-17)!==-1e-17);h(Math,"asinh",mr.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7));h(Math,"tanh",mr.tanh,Math.tanh(-2e-17)!==-2e-17);h(Math,"acosh",mr.acosh,Math.acosh(Number.MAX_VALUE)===Infinity);h(Math,"cbrt",mr.cbrt,Math.abs(1-Math.cbrt(1e-300)/1e-100)/Number.EPSILON>8);h(Math,"sinh",mr.sinh,Math.sinh(-2e-17)!==-2e-17);var wr=Math.expm1(10);h(Math,"expm1",mr.expm1,wr>22025.465794806718||wr<22025.465794806718);var jr=Math.round;var Sr=Math.round(.5-Number.EPSILON/4)===0&&Math.round(-.5+Number.EPSILON/3.99)===1;var Tr=lr+1;var Ir=2*lr-1;var Er=[Tr,Ir].every(function(e){return Math.round(e)===e});h(Math,"round",function round(e){var t=_(e);var r=t===-1?-0:t+1;return e-t<.5?t:r},!Sr||!Er);O.preserveToString(Math.round,jr);var Pr=Math.imul;if(Math.imul(4294967295,5)!==-5){Math.imul=mr.imul;O.preserveToString(Math.imul,Pr)}if(Math.imul.length!==2){Z(Math,"imul",function imul(e,t){return re.Call(Pr,Math,arguments);
})}var Cr=function(){var e=S.setTimeout;if(typeof e!=="function"&&typeof e!=="object"){return}re.IsPromise=function(e){if(!re.TypeIsObject(e)){return false}if(typeof e._promise==="undefined"){return false}return true};var r=function(e){if(!re.IsConstructor(e)){throw new TypeError("Bad promise constructor")}var t=this;var r=function(e,r){if(t.resolve!==void 0||t.reject!==void 0){throw new TypeError("Bad Promise implementation!")}t.resolve=e;t.reject=r};t.resolve=void 0;t.reject=void 0;t.promise=new e(r);if(!(re.IsCallable(t.resolve)&&re.IsCallable(t.reject))){throw new TypeError("Bad promise constructor")}};var n;if(typeof window!=="undefined"&&re.IsCallable(window.postMessage)){n=function(){var e=[];var t="zero-timeout-message";var r=function(r){M(e,r);window.postMessage(t,"*")};var n=function(r){if(r.source===window&&r.data===t){r.stopPropagation();if(e.length===0){return}var n=N(e);n()}};window.addEventListener("message",n,true);return r}}var o=function(){var e=S.Promise;var t=e&&e.resolve&&e.resolve();return t&&function(e){return t.then(e)}};var i=re.IsCallable(S.setImmediate)?S.setImmediate:typeof process==="object"&&process.nextTick?process.nextTick:o()||(re.IsCallable(n)?n():function(t){e(t,0)});var a=function(e){return e};var u=function(e){throw e};var f=0;var s=1;var c=2;var l=0;var p=1;var v=2;var y={};var h=function(e,t,r){i(function(){g(e,t,r)})};var g=function(e,t,r){var n,o;if(t===y){return e(r)}try{n=e(r);o=t.resolve}catch(i){n=i;o=t.reject}o(n)};var d=function(e,t){var r=e._promise;var n=r.reactionLength;if(n>0){h(r.fulfillReactionHandler0,r.reactionCapability0,t);r.fulfillReactionHandler0=void 0;r.rejectReactions0=void 0;r.reactionCapability0=void 0;if(n>1){for(var o=1,i=0;o<n;o++,i+=3){h(r[i+l],r[i+v],t);e[i+l]=void 0;e[i+p]=void 0;e[i+v]=void 0}}}r.result=t;r.state=s;r.reactionLength=0};var O=function(e,t){var r=e._promise;var n=r.reactionLength;if(n>0){h(r.rejectReactionHandler0,r.reactionCapability0,t);r.fulfillReactionHandler0=void 0;r.rejectReactions0=void 0;r.reactionCapability0=void 0;if(n>1){for(var o=1,i=0;o<n;o++,i+=3){h(r[i+p],r[i+v],t);e[i+l]=void 0;e[i+p]=void 0;e[i+v]=void 0}}}r.result=t;r.state=c;r.reactionLength=0};var m=function(e){var t=false;var r=function(r){var n;if(t){return}t=true;if(r===e){return O(e,new TypeError("Self resolution"))}if(!re.TypeIsObject(r)){return d(e,r)}try{n=r.then}catch(o){return O(e,o)}if(!re.IsCallable(n)){return d(e,r)}i(function(){j(e,r,n)})};var n=function(r){if(t){return}t=true;return O(e,r)};return{resolve:r,reject:n}};var w=function(e,r,n,o){if(e===I){t(e,r,n,o,y)}else{t(e,r,n,o)}};var j=function(e,t,r){var n=m(e);var o=n.resolve;var i=n.reject;try{w(r,t,o,i)}catch(a){i(a)}};var T,I;var E=function(){var e=function Promise(t){if(!(this instanceof e)){throw new TypeError('Constructor Promise requires "new"')}if(this&&this._promise){throw new TypeError("Bad construction")}if(!re.IsCallable(t)){throw new TypeError("not a valid resolver")}var r=Te(this,e,T,{_promise:{result:void 0,state:f,reactionLength:0,fulfillReactionHandler0:void 0,rejectReactionHandler0:void 0,reactionCapability0:void 0}});var n=m(r);var o=n.reject;try{t(n.resolve,o)}catch(i){o(i)}return r};return e}();T=E.prototype;var P=function(e,t,r,n){var o=false;return function(i){if(o){return}o=true;t[e]=i;if(--n.count===0){var a=r.resolve;a(t)}}};var C=function(e,t,r){var n=e.iterator;var o=[];var i={count:1};var a,u;var f=0;while(true){try{a=re.IteratorStep(n);if(a===false){e.done=true;break}u=a.value}catch(s){e.done=true;throw s}o[f]=void 0;var c=t.resolve(u);var l=P(f,o,r,i);i.count+=1;w(c.then,c,l,r.reject);f+=1}if(--i.count===0){var p=r.resolve;p(o)}return r.promise};var x=function(e,t,r){var n=e.iterator;var o,i,a;while(true){try{o=re.IteratorStep(n);if(o===false){e.done=true;break}i=o.value}catch(u){e.done=true;throw u}a=t.resolve(i);w(a.then,a,r.resolve,r.reject)}return r.promise};b(E,{all:function all(e){var t=this;if(!re.TypeIsObject(t)){throw new TypeError("Promise is not object")}var n=new r(t);var o,i;try{o=re.GetIterator(e);i={iterator:o,done:false};return C(i,t,n)}catch(a){var u=a;if(i&&!i.done){try{re.IteratorClose(o,true)}catch(f){u=f}}var s=n.reject;s(u);return n.promise}},race:function race(e){var t=this;if(!re.TypeIsObject(t)){throw new TypeError("Promise is not object")}var n=new r(t);var o,i;try{o=re.GetIterator(e);i={iterator:o,done:false};return x(i,t,n)}catch(a){var u=a;if(i&&!i.done){try{re.IteratorClose(o,true)}catch(f){u=f}}var s=n.reject;s(u);return n.promise}},reject:function reject(e){var t=this;if(!re.TypeIsObject(t)){throw new TypeError("Bad promise constructor")}var n=new r(t);var o=n.reject;o(e);return n.promise},resolve:function resolve(e){var t=this;if(!re.TypeIsObject(t)){throw new TypeError("Bad promise constructor")}if(re.IsPromise(e)){var n=e.constructor;if(n===t){return e}}var o=new r(t);var i=o.resolve;i(e);return o.promise}});b(T,{"catch":function(e){return this.then(null,e)},then:function then(e,t){var n=this;if(!re.IsPromise(n)){throw new TypeError("not a promise")}var o=re.SpeciesConstructor(n,E);var i;var b=arguments.length>2&&arguments[2]===y;if(b&&o===E){i=y}else{i=new r(o)}var g=re.IsCallable(e)?e:a;var d=re.IsCallable(t)?t:u;var O=n._promise;var m;if(O.state===f){if(O.reactionLength===0){O.fulfillReactionHandler0=g;O.rejectReactionHandler0=d;O.reactionCapability0=i}else{var w=3*(O.reactionLength-1);O[w+l]=g;O[w+p]=d;O[w+v]=i}O.reactionLength+=1}else if(O.state===s){m=O.result;h(g,i,m)}else if(O.state===c){m=O.result;h(d,i,m)}else{throw new TypeError("unexpected Promise state")}return i.promise}});y=new r(E);I=T.then;return E}();if(S.Promise){delete S.Promise.accept;delete S.Promise.defer;delete S.Promise.prototype.chain}if(typeof Cr==="function"){b(S,{Promise:Cr});var Mr=w(S.Promise,function(e){return e.resolve(42).then(function(){})instanceof e});var xr=!i(function(){S.Promise.reject(42).then(null,5).then(null,W)});var Nr=i(function(){S.Promise.call(3,W)});var Ar=function(e){var t=e.resolve(5);t.constructor={};var r=e.resolve(t);try{r.then(null,W).then(null,W)}catch(n){return true}return t===r}(S.Promise);var Rr=s&&function(){var e=0;var t=Object.defineProperty({},"then",{get:function(){e+=1}});Promise.resolve(t);return e===1}();var _r=function BadResolverPromise(e){var t=new Promise(e);e(3,function(){});this.then=t.then;this.constructor=BadResolverPromise};_r.prototype=Promise.prototype;_r.all=Promise.all;var kr=a(function(){return!!_r.all([1,2])});if(!Mr||!xr||!Nr||Ar||!Rr||kr){Promise=Cr;Z(S,"Promise",Cr)}if(Promise.all.length!==1){var Fr=Promise.all;Z(Promise,"all",function all(e){return re.Call(Fr,this,arguments)})}if(Promise.race.length!==1){var Lr=Promise.race;Z(Promise,"race",function race(e){return re.Call(Lr,this,arguments)})}if(Promise.resolve.length!==1){var Dr=Promise.resolve;Z(Promise,"resolve",function resolve(e){return re.Call(Dr,this,arguments)})}if(Promise.reject.length!==1){var zr=Promise.reject;Z(Promise,"reject",function reject(e){return re.Call(zr,this,arguments)})}wt(Promise,"all");wt(Promise,"race");wt(Promise,"resolve");wt(Promise,"reject");me(Promise)}var qr=function(e){var t=n(p(e,function(e,t){e[t]=true;return e},{}));return e.join(":")===t.join(":")};var Wr=qr(["z","a","bb"]);var Gr=qr(["z",1,"a","3",2]);if(s){var Hr=function fastkey(e){if(!Wr){return null}if(typeof e==="undefined"||e===null){return"^"+re.ToString(e)}else if(typeof e==="string"){return"$"+e}else if(typeof e==="number"){if(!Gr){return"n"+e}return e}else if(typeof e==="boolean"){return"b"+e}return null};var Vr=function emptyObject(){return Object.create?Object.create(null):{}};var Br=function addIterableToMap(e,n,o){if(r(o)||K.string(o)){l(o,function(e){if(!re.TypeIsObject(e)){throw new TypeError("Iterator value "+e+" is not an entry object")}n.set(e[0],e[1])})}else if(o instanceof e){t(e.prototype.forEach,o,function(e,t){n.set(t,e)})}else{var i,a;if(o!==null&&typeof o!=="undefined"){a=n.set;if(!re.IsCallable(a)){throw new TypeError("bad map")}i=re.GetIterator(o)}if(typeof i!=="undefined"){while(true){var u=re.IteratorStep(i);if(u===false){break}var f=u.value;try{if(!re.TypeIsObject(f)){throw new TypeError("Iterator value "+f+" is not an entry object")}t(a,n,f[0],f[1])}catch(s){re.IteratorClose(i,true);throw s}}}}};var $r=function addIterableToSet(e,n,o){if(r(o)||K.string(o)){l(o,function(e){n.add(e)})}else if(o instanceof e){t(e.prototype.forEach,o,function(e){n.add(e)})}else{var i,a;if(o!==null&&typeof o!=="undefined"){a=n.add;if(!re.IsCallable(a)){throw new TypeError("bad set")}i=re.GetIterator(o)}if(typeof i!=="undefined"){while(true){var u=re.IteratorStep(i);if(u===false){break}var f=u.value;try{t(a,n,f)}catch(s){re.IteratorClose(i,true);throw s}}}}};var Ur={Map:function(){var e={};var r=function MapEntry(e,t){this.key=e;this.value=t;this.next=null;this.prev=null};r.prototype.isRemoved=function isRemoved(){return this.key===e};var n=function isMap(e){return!!e._es6map};var o=function requireMapSlot(e,t){if(!re.TypeIsObject(e)||!n(e)){throw new TypeError("Method Map.prototype."+t+" called on incompatible receiver "+re.ToString(e))}};var i=function MapIterator(e,t){o(e,"[[MapIterator]]");this.head=e._head;this.i=this.head;this.kind=t};i.prototype={next:function next(){var e=this.i;var t=this.kind;var r=this.head;if(typeof this.i==="undefined"){return Ge()}while(e.isRemoved()&&e!==r){e=e.prev}var n;while(e.next!==r){e=e.next;if(!e.isRemoved()){if(t==="key"){n=e.key}else if(t==="value"){n=e.value}else{n=[e.key,e.value]}this.i=e;return Ge(n)}}this.i=void 0;return Ge()}};we(i.prototype);var a;var u=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}if(this&&this._es6map){throw new TypeError("Bad construction")}var e=Te(this,Map,a,{_es6map:true,_head:null,_storage:Vr(),_size:0});var t=new r(null,null);t.next=t.prev=t;e._head=t;if(arguments.length>0){Br(Map,e,arguments[0])}return e};a=u.prototype;O.getter(a,"size",function(){if(typeof this._size==="undefined"){throw new TypeError("size method called on incompatible Map")}return this._size});b(a,{get:function get(e){o(this,"get");var t=Hr(e);if(t!==null){var r=this._storage[t];if(r){return r.value}else{return}}var n=this._head;var i=n;while((i=i.next)!==n){if(re.SameValueZero(i.key,e)){return i.value}}},has:function has(e){o(this,"has");var t=Hr(e);if(t!==null){return typeof this._storage[t]!=="undefined"}var r=this._head;var n=r;while((n=n.next)!==r){if(re.SameValueZero(n.key,e)){return true}}return false},set:function set(e,t){o(this,"set");var n=this._head;var i=n;var a;var u=Hr(e);if(u!==null){if(typeof this._storage[u]!=="undefined"){this._storage[u].value=t;return this}else{a=this._storage[u]=new r(e,t);i=n.prev}}while((i=i.next)!==n){if(re.SameValueZero(i.key,e)){i.value=t;return this}}a=a||new r(e,t);if(re.SameValue(-0,e)){a.key=+0}a.next=this._head;a.prev=this._head.prev;a.prev.next=a;a.next.prev=a;this._size+=1;return this},"delete":function(t){o(this,"delete");var r=this._head;var n=r;var i=Hr(t);if(i!==null){if(typeof this._storage[i]==="undefined"){return false}n=this._storage[i].prev;delete this._storage[i]}while((n=n.next)!==r){if(re.SameValueZero(n.key,t)){n.key=n.value=e;n.prev.next=n.next;n.next.prev=n.prev;this._size-=1;return true}}return false},clear:function clear(){o(this,"clear");this._size=0;this._storage=Vr();var t=this._head;var r=t;var n=r.next;while((r=n)!==t){r.key=r.value=e;n=r.next;r.next=r.prev=t}t.next=t.prev=t},keys:function keys(){o(this,"keys");return new i(this,"key")},values:function values(){o(this,"values");return new i(this,"value")},entries:function entries(){o(this,"entries");return new i(this,"key+value")},forEach:function forEach(e){o(this,"forEach");var r=arguments.length>1?arguments[1]:null;var n=this.entries();for(var i=n.next();!i.done;i=n.next()){if(r){t(e,r,i.value[1],i.value[0],this)}else{e(i.value[1],i.value[0],this)}}}});we(a,a.entries);return u}(),Set:function(){var e=function isSet(e){return e._es6set&&typeof e._storage!=="undefined"};var r=function requireSetSlot(t,r){if(!re.TypeIsObject(t)||!e(t)){throw new TypeError("Set.prototype."+r+" called on incompatible receiver "+re.ToString(t))}};var o;var i=function Set(){if(!(this instanceof Set)){throw new TypeError('Constructor Set requires "new"')}if(this&&this._es6set){throw new TypeError("Bad construction")}var e=Te(this,Set,o,{_es6set:true,"[[SetData]]":null,_storage:Vr()});if(!e._es6set){throw new TypeError("bad set")}if(arguments.length>0){$r(Set,e,arguments[0])}return e};o=i.prototype;var a=function(e){var t=e;if(t==="^null"){return null}else if(t==="^undefined"){return void 0}else{var r=t.charAt(0);if(r==="$"){return C(t,1)}else if(r==="n"){return+C(t,1)}else if(r==="b"){return t==="btrue"}}return+t};var u=function ensureMap(e){if(!e["[[SetData]]"]){var t=e["[[SetData]]"]=new Ur.Map;l(n(e._storage),function(e){var r=a(e);t.set(r,r)});e["[[SetData]]"]=t}e._storage=null};O.getter(i.prototype,"size",function(){r(this,"size");if(this._storage){return n(this._storage).length}u(this);return this["[[SetData]]"].size});b(i.prototype,{has:function has(e){r(this,"has");var t;if(this._storage&&(t=Hr(e))!==null){return!!this._storage[t]}u(this);return this["[[SetData]]"].has(e)},add:function add(e){r(this,"add");var t;if(this._storage&&(t=Hr(e))!==null){this._storage[t]=true;return this}u(this);this["[[SetData]]"].set(e,e);return this},"delete":function(e){r(this,"delete");var t;if(this._storage&&(t=Hr(e))!==null){var n=z(this._storage,t);return delete this._storage[t]&&n}u(this);return this["[[SetData]]"]["delete"](e)},clear:function clear(){r(this,"clear");if(this._storage){this._storage=Vr()}if(this["[[SetData]]"]){this["[[SetData]]"].clear()}},values:function values(){r(this,"values");u(this);return this["[[SetData]]"].values()},entries:function entries(){r(this,"entries");u(this);return this["[[SetData]]"].entries()},forEach:function forEach(e){r(this,"forEach");var n=arguments.length>1?arguments[1]:null;var o=this;u(o);this["[[SetData]]"].forEach(function(r,i){if(n){t(e,n,i,i,o)}else{e(i,i,o)}})}});h(i.prototype,"keys",i.prototype.values,true);we(i.prototype,i.prototype.values);return i}()};if(S.Map||S.Set){var Jr=a(function(){return new Map([[1,2]]).get(1)===2});if(!Jr){var Xr=S.Map;S.Map=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}var e=new Xr;if(arguments.length>0){Br(Map,e,arguments[0])}delete e.constructor;Object.setPrototypeOf(e,S.Map.prototype);return e};S.Map.prototype=m(Xr.prototype);h(S.Map.prototype,"constructor",S.Map,true);O.preserveToString(S.Map,Xr)}var Kr=new Map;var Zr=function(){var e=new Map([[1,0],[2,0],[3,0],[4,0]]);e.set(-0,e);return e.get(0)===e&&e.get(-0)===e&&e.has(0)&&e.has(-0)}();var Yr=Kr.set(1,2)===Kr;if(!Zr||!Yr){var Qr=Map.prototype.set;Z(Map.prototype,"set",function set(e,r){t(Qr,this,e===0?0:e,r);return this})}if(!Zr){var en=Map.prototype.get;var tn=Map.prototype.has;b(Map.prototype,{get:function get(e){return t(en,this,e===0?0:e)},has:function has(e){return t(tn,this,e===0?0:e)}},true);O.preserveToString(Map.prototype.get,en);O.preserveToString(Map.prototype.has,tn)}var rn=new Set;var nn=function(e){e["delete"](0);e.add(-0);return!e.has(0)}(rn);var on=rn.add(1)===rn;if(!nn||!on){var an=Set.prototype.add;Set.prototype.add=function add(e){t(an,this,e===0?0:e);return this};O.preserveToString(Set.prototype.add,an)}if(!nn){var un=Set.prototype.has;Set.prototype.has=function has(e){return t(un,this,e===0?0:e)};O.preserveToString(Set.prototype.has,un);var fn=Set.prototype["delete"];Set.prototype["delete"]=function SetDelete(e){return t(fn,this,e===0?0:e)};O.preserveToString(Set.prototype["delete"],fn)}var sn=w(S.Map,function(e){var t=new e([]);t.set(42,42);return t instanceof e});var cn=Object.setPrototypeOf&&!sn;var ln=function(){try{return!(S.Map()instanceof S.Map)}catch(e){return e instanceof TypeError}}();if(S.Map.length!==0||cn||!ln){var pn=S.Map;S.Map=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}var e=new pn;if(arguments.length>0){Br(Map,e,arguments[0])}delete e.constructor;Object.setPrototypeOf(e,Map.prototype);return e};S.Map.prototype=pn.prototype;h(S.Map.prototype,"constructor",S.Map,true);O.preserveToString(S.Map,pn)}var vn=w(S.Set,function(e){var t=new e([]);t.add(42,42);return t instanceof e});var yn=Object.setPrototypeOf&&!vn;var hn=function(){try{return!(S.Set()instanceof S.Set)}catch(e){return e instanceof TypeError}}();if(S.Set.length!==0||yn||!hn){var bn=S.Set;S.Set=function Set(){if(!(this instanceof Set)){throw new TypeError('Constructor Set requires "new"')}var e=new bn;if(arguments.length>0){$r(Set,e,arguments[0])}delete e.constructor;Object.setPrototypeOf(e,Set.prototype);return e};S.Set.prototype=bn.prototype;h(S.Set.prototype,"constructor",S.Set,true);O.preserveToString(S.Set,bn)}var gn=new S.Map;var dn=!a(function(){return gn.keys().next().done});if(typeof S.Map.prototype.clear!=="function"||(new S.Set).size!==0||gn.size!==0||typeof S.Map.prototype.keys!=="function"||typeof S.Set.prototype.keys!=="function"||typeof S.Map.prototype.forEach!=="function"||typeof S.Set.prototype.forEach!=="function"||u(S.Map)||u(S.Set)||typeof gn.keys().next!=="function"||dn||!sn){b(S,{Map:Ur.Map,Set:Ur.Set},true)}if(S.Set.prototype.keys!==S.Set.prototype.values){h(S.Set.prototype,"keys",S.Set.prototype.values,true)}we(Object.getPrototypeOf((new S.Map).keys()));we(Object.getPrototypeOf((new S.Set).keys()));if(c&&S.Set.prototype.has.name!=="has"){var On=S.Set.prototype.has;Z(S.Set.prototype,"has",function has(e){return t(On,this,e)})}}b(S,Ur);me(S.Map);me(S.Set)}var mn=function throwUnlessTargetIsObject(e){if(!re.TypeIsObject(e)){throw new TypeError("target must be an object")}};var wn={apply:function apply(){return re.Call(re.Call,null,arguments)},construct:function construct(e,t){if(!re.IsConstructor(e)){throw new TypeError("First argument must be a constructor.")}var r=arguments.length>2?arguments[2]:e;if(!re.IsConstructor(r)){throw new TypeError("new.target must be a constructor.")}return re.Construct(e,t,r,"internal")},deleteProperty:function deleteProperty(e,t){mn(e);if(s){var r=Object.getOwnPropertyDescriptor(e,t);if(r&&!r.configurable){return false}}return delete e[t]},has:function has(e,t){mn(e);return t in e}};if(Object.getOwnPropertyNames){Object.assign(wn,{ownKeys:function ownKeys(e){mn(e);var t=Object.getOwnPropertyNames(e);if(re.IsCallable(Object.getOwnPropertySymbols)){x(t,Object.getOwnPropertySymbols(e))}return t}})}var jn=function ConvertExceptionToBoolean(e){return!i(e)};if(Object.preventExtensions){Object.assign(wn,{isExtensible:function isExtensible(e){mn(e);return Object.isExtensible(e)},preventExtensions:function preventExtensions(e){mn(e);return jn(function(){Object.preventExtensions(e)})}})}if(s){var Sn=function get(e,t,r){var n=Object.getOwnPropertyDescriptor(e,t);if(!n){var o=Object.getPrototypeOf(e);if(o===null){return void 0}return Sn(o,t,r)}if("value"in n){return n.value}if(n.get){return re.Call(n.get,r)}return void 0};var Tn=function set(e,r,n,o){var i=Object.getOwnPropertyDescriptor(e,r);if(!i){var a=Object.getPrototypeOf(e);if(a!==null){return Tn(a,r,n,o)}i={value:void 0,writable:true,enumerable:true,configurable:true}}if("value"in i){if(!i.writable){return false}if(!re.TypeIsObject(o)){return false}var u=Object.getOwnPropertyDescriptor(o,r);if(u){return ee.defineProperty(o,r,{value:n})}else{return ee.defineProperty(o,r,{value:n,writable:true,enumerable:true,configurable:true})}}if(i.set){t(i.set,o,n);return true}return false};Object.assign(wn,{defineProperty:function defineProperty(e,t,r){mn(e);return jn(function(){Object.defineProperty(e,t,r)})},getOwnPropertyDescriptor:function getOwnPropertyDescriptor(e,t){mn(e);return Object.getOwnPropertyDescriptor(e,t)},get:function get(e,t){mn(e);var r=arguments.length>2?arguments[2]:e;return Sn(e,t,r)},set:function set(e,t,r){mn(e);var n=arguments.length>3?arguments[3]:e;return Tn(e,t,r,n)}})}if(Object.getPrototypeOf){var In=Object.getPrototypeOf;wn.getPrototypeOf=function getPrototypeOf(e){mn(e);return In(e)}}if(Object.setPrototypeOf&&wn.getPrototypeOf){var En=function(e,t){var r=t;while(r){if(e===r){return true}r=wn.getPrototypeOf(r)}return false};Object.assign(wn,{setPrototypeOf:function setPrototypeOf(e,t){mn(e);if(t!==null&&!re.TypeIsObject(t)){throw new TypeError("proto must be an object or null")}if(t===ee.getPrototypeOf(e)){return true}if(ee.isExtensible&&!ee.isExtensible(e)){return false}if(En(e,t)){return false}Object.setPrototypeOf(e,t);return true}})}var Pn=function(e,t){if(!re.IsCallable(S.Reflect[e])){h(S.Reflect,e,t)}else{var r=a(function(){S.Reflect[e](1);S.Reflect[e](NaN);S.Reflect[e](true);return true});if(r){Z(S.Reflect,e,t)}}};Object.keys(wn).forEach(function(e){Pn(e,wn[e])});var Cn=S.Reflect.getPrototypeOf;if(c&&Cn&&Cn.name!=="getPrototypeOf"){Z(S.Reflect,"getPrototypeOf",function getPrototypeOf(e){return t(Cn,S.Reflect,e)})}if(S.Reflect.setPrototypeOf){if(a(function(){S.Reflect.setPrototypeOf(1,{});return true})){Z(S.Reflect,"setPrototypeOf",wn.setPrototypeOf)}}if(S.Reflect.defineProperty){if(!a(function(){var e=!S.Reflect.defineProperty(1,"test",{value:1});var t=typeof Object.preventExtensions!=="function"||!S.Reflect.defineProperty(Object.preventExtensions({}),"test",{});return e&&t})){Z(S.Reflect,"defineProperty",wn.defineProperty)}}if(S.Reflect.construct){if(!a(function(){var e=function F(){};return S.Reflect.construct(function(){},[],e)instanceof e})){Z(S.Reflect,"construct",wn.construct)}}if(String(new Date(NaN))!=="Invalid Date"){var Mn=Date.prototype.toString;var xn=function toString(){var e=+this;if(e!==e){return"Invalid Date"}return re.Call(Mn,this)};Z(Date.prototype,"toString",xn)}var Nn={anchor:function anchor(e){return re.CreateHTML(this,"a","name",e)},big:function big(){return re.CreateHTML(this,"big","","")},blink:function blink(){return re.CreateHTML(this,"blink","","")},bold:function bold(){return re.CreateHTML(this,"b","","")},fixed:function fixed(){return re.CreateHTML(this,"tt","","")},fontcolor:function fontcolor(e){return re.CreateHTML(this,"font","color",e)},fontsize:function fontsize(e){return re.CreateHTML(this,"font","size",e)},italics:function italics(){return re.CreateHTML(this,"i","","")},link:function link(e){return re.CreateHTML(this,"a","href",e)},small:function small(){return re.CreateHTML(this,"small","","")},strike:function strike(){return re.CreateHTML(this,"strike","","")},sub:function sub(){return re.CreateHTML(this,"sub","","")},sup:function sub(){return re.CreateHTML(this,"sup","","")}};l(Object.keys(Nn),function(e){var r=String.prototype[e];var n=false;if(re.IsCallable(r)){var o=t(r,"",' " ');var i=P([],o.match(/"/g)).length;n=o!==o.toLowerCase()||i>2}else{n=true}if(n){Z(String.prototype,e,Nn[e])}});var An=function(){if(!Y){return false}var e=typeof JSON==="object"&&typeof JSON.stringify==="function"?JSON.stringify:null;if(!e){return false}if(typeof e(G())!=="undefined"){return true}if(e([G()])!=="[null]"){return true}var t={a:G()};t[G()]=true;if(e(t)!=="{}"){return true}return false}();var Rn=a(function(){if(!Y){return true}return JSON.stringify(Object(G()))==="{}"&&JSON.stringify([Object(G())])==="[{}]"});if(An||!Rn){var _n=JSON.stringify;Z(JSON,"stringify",function stringify(e){if(typeof e==="symbol"){return}var n;if(arguments.length>1){n=arguments[1]}var o=[e];if(!r(n)){var i=re.IsCallable(n)?n:null;var a=function(e,r){var n=i?t(i,this,e,r):r;if(typeof n!=="symbol"){if(K.symbol(n)){return St({})(n)}else{return n}}};o.push(a)}else{o.push(n)}if(arguments.length>2){o.push(arguments[2])}return _n.apply(this,o)})}return S});


},{}],13:[function(require,module,exports){
'use strict';

var util = require('../util');

/**
 * 
 * @param {Object} config
 * @param {Number} config.x X offset in EMU's
 * @param {Number} config.y Y offset in EMU's
 * @param {Number} config.width Width in EMU's
 * @param {Number} config.height Height in EMU's
 * @constructor
 */
var AbsoluteAnchor = function (config) {
  this.x = null;
  this.y = null;
  this.width = null;
  this.height = null;

  if (config) {
    this.setPos(config.x, config.y);
    this.setDimensions(config.width, config.height);
  }
};

/**
 * Sets the X and Y offsets.
 *
 * @param {Number} x
 * @param {Number} y
 * @returns {undefined}
 */
AbsoluteAnchor.prototype.setPos = function (x, y) {
  this.x = x;
  this.y = y;
};

/**
 * Sets the width and height of the image.
 *
 * @param {Number} width
 * @param {Number} height
 * @returns {undefined}
 */
AbsoluteAnchor.prototype.setDimensions = function (width, height) {
  this.width = width;
  this.height = height;
};

AbsoluteAnchor.prototype.toXML = function (xmlDoc, content) {
  var root = util.createElement(xmlDoc, 'xdr:absoluteAnchor');
  var pos = util.createElement(xmlDoc, 'xdr:pos');
  pos.setAttribute('x', this.x);
  pos.setAttribute('y', this.y);
  root.appendChild(pos);

  var dimensions = util.createElement(xmlDoc, 'xdr:ext');
  dimensions.setAttribute('cx', this.width);
  dimensions.setAttribute('cy', this.height);
  root.appendChild(dimensions);

  root.appendChild(content);

  root.appendChild(util.createElement(xmlDoc, 'xdr:clientData'));

  return root;
};

module.exports = AbsoluteAnchor;
},{"../util":29}],14:[function(require,module,exports){
'use strict';

var Chart = function () {};

module.exports = Chart;
},{}],15:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var AbsoluteAnchor = require('./AbsoluteAnchor');
var OneCellAnchor = require('./OneCellAnchor');
var TwoCellAnchor = require('./TwoCellAnchor');

/**
 * @constructor
 */
var Drawing = function () {
  this.id = _.uniqueId('Drawing');
};

/**
 * 
 * @param {String} type Can be 'absoluteAnchor', 'oneCellAnchor', or 'twoCellAnchor'. 
 * @param {Object} config Shorthand - pass the created anchor coords that can normally be used to construct it.
 * @returns {Anchor}
 */
Drawing.prototype.createAnchor = function (type, config) {
  config = config || {};
  config.drawing = this;

  switch(type) {
    case 'absoluteAnchor': 
      this.anchor = new AbsoluteAnchor(config);
      break;
    case 'oneCellAnchor':
      this.anchor = new OneCellAnchor(config);
      break;
    case 'twoCellAnchor':
      this.anchor = new TwoCellAnchor(config);
      break;
  }

  return this.anchor;
};

module.exports = Drawing;
},{"./AbsoluteAnchor":13,"./OneCellAnchor":16,"./TwoCellAnchor":18,"underscore":150}],16:[function(require,module,exports){
'use strict';

var util = require('../util');

/**
 * 
 * @param {Object} config
 * @param {Number} config.x The cell column number that the top left of the picture will start in
 * @param {Number} config.y The cell row number that the top left of the picture will start in
 * @param {Number} config.width Width in EMU's
 * @param {Number} config.height Height in EMU's
 * @constructor
 */

var OneCellAnchor = function (config) {
  this.x = null;
  this.y = null;
  this.xOff = null;
  this.yOff = null;
  this.width = null;
  this.height = null;
  if(config) {
    this.setPos(config.x, config.y, config.xOff, config.yOff);
    this.setDimensions(config.width, config.height);
  }
};

OneCellAnchor.prototype.setPos = function (x, y, xOff, yOff) {
  this.x = x;
  this.y = y;

  if (xOff !== undefined) {
    this.xOff = xOff;
  }
  if (yOff !== undefined) {
    this.yOff = yOff;
  }
};

OneCellAnchor.prototype.setDimensions = function (width, height) {
  this.width = width;
  this.height = height;
};

OneCellAnchor.prototype.toXML = function (xmlDoc, content) {
  var root = util.createElement(xmlDoc, 'xdr:oneCellAnchor');
  var from = util.createElement(xmlDoc, 'xdr:from');
  var fromCol = util.createElement(xmlDoc, 'xdr:col');
  fromCol.appendChild(xmlDoc.createTextNode(this.x));
  var fromColOff = util.createElement(xmlDoc, 'xdr:colOff');
  fromColOff.appendChild(xmlDoc.createTextNode(this.xOff || 0));
  var fromRow = util.createElement(xmlDoc, 'xdr:row');
  fromRow.appendChild(xmlDoc.createTextNode(this.y));
  var fromRowOff = util.createElement(xmlDoc, 'xdr:rowOff');
  fromRowOff.appendChild(xmlDoc.createTextNode(this.yOff || 0));
  from.appendChild(fromCol);
  from.appendChild(fromColOff);
  from.appendChild(fromRow);
  from.appendChild(fromRowOff);

  root.appendChild(from);

  var dimensions = util.createElement(xmlDoc, 'xdr:ext');
  dimensions.setAttribute('cx', this.width);
  dimensions.setAttribute('cy', this.height);
  root.appendChild(dimensions);

  root.appendChild(content);

  root.appendChild(util.createElement(xmlDoc, 'xdr:clientData'));

  return root;
};

module.exports = OneCellAnchor;
},{"../util":29}],17:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('../util');
var Drawing = require('./Drawing');

/**
 * @constructor
 */
var Picture = function () {
  this.media = null;
  this.id = _.uniqueId('Picture');
  this.pictureId = util.uniqueId('Picture');
  this.fill = {};
  this.mediaData = null;
};

Picture.prototype = new Drawing();

Picture.prototype.setMedia = function (mediaRef) {
  this.mediaData = mediaRef;
};

Picture.prototype.setDescription = function (description) {
  this.description = description;
};

Picture.prototype.setFillType = function (type) {
  this.fill.type = type;
};

Picture.prototype.setFillConfig = function (config) {
  _.extend(this.fill, config);
};

Picture.prototype.getMediaType = function () {
  return 'image';
};

Picture.prototype.getMediaData = function () {
  return this.mediaData;
};

Picture.prototype.setRelationshipId = function (rId) {
  this.mediaData.rId = rId;
};

Picture.prototype.toXML = function (xmlDoc) {
  var pictureNode = util.createElement(xmlDoc, 'xdr:pic');

  var nonVisibleProperties = util.createElement(xmlDoc, 'xdr:nvPicPr');

  var nameProperties = util.createElement(xmlDoc, 'xdr:cNvPr', [
    ['id', this.pictureId],
    ['name', this.mediaData.fileName],
    ['descr', this.description || '']
  ]);
  nonVisibleProperties.appendChild(nameProperties);
  var nvPicProperties = util.createElement(xmlDoc, 'xdr:cNvPicPr');
  nvPicProperties.appendChild(util.createElement(xmlDoc, 'a:picLocks', [
    ['noChangeAspect', '1'],
    ['noChangeArrowheads', '1']
  ]));
  nonVisibleProperties.appendChild(nvPicProperties);
  pictureNode.appendChild(nonVisibleProperties);
  var pictureFill = util.createElement(xmlDoc, 'xdr:blipFill');
  pictureFill.appendChild(util.createElement(xmlDoc, 'a:blip', [
    ['xmlns:r', util.schemas.relationships],
    ['r:embed', this.mediaData.rId]
  ]));
  pictureFill.appendChild(util.createElement(xmlDoc, 'a:srcRect'));
  var stretch = util.createElement(xmlDoc, 'a:stretch');
  stretch.appendChild(util.createElement(xmlDoc, 'a:fillRect'));
  pictureFill.appendChild(stretch);
  pictureNode.appendChild(pictureFill);

  var shapeProperties = util.createElement(xmlDoc, 'xdr:spPr', [
    ['bwMode', 'auto']
  ]);

  var transform2d = util.createElement(xmlDoc, 'a:xfrm');
  shapeProperties.appendChild(transform2d);

  var presetGeometry = util.createElement(xmlDoc, 'a:prstGeom', [
    ['prst', 'rect']
  ]);
  shapeProperties.appendChild(presetGeometry);

  pictureNode.appendChild(shapeProperties);

  return this.anchor.toXML(xmlDoc, pictureNode);
};

module.exports = Picture;
},{"../util":29,"./Drawing":15,"underscore":150}],18:[function(require,module,exports){
'use strict';

var util = require('../util');

/**
 * 
 * @param {Object} config
 * @param {Number} config.from The x and y offset from where the picture will start
 * @param {Number} config.to The x and y offset to where the picture will end
 * @constructor
 */

var TwoCellAnchor = function (config) {
  this.from = {xOff: 0, yOff: 0};
  this.to = {xOff: 0, yOff: 0};

  if (config) {
    this.setFrom(config.from.x, config.from.y, config.to.xOff, config.to.yOff);
    this.setTo(config.to.x, config.to.y, config.to.xOff, config.to.yOff);
  }
};

TwoCellAnchor.prototype.setFrom = function (x, y, xOff, yOff) {
  this.from.x = x;
  this.from.y = y;

  if (xOff !== undefined) {
    this.from.xOff = xOff;
  }

  if (yOff !== undefined) {
    this.from.yOff = xOff;
  }
};

TwoCellAnchor.prototype.setTo = function (x, y, xOff, yOff) {
  this.to.x = x;
  this.to.y = y;

  if (xOff !== undefined) {
    this.to.xOff = xOff;
  }

  if (yOff !== undefined) {
    this.to.yOff = xOff;
  }
};

TwoCellAnchor.prototype.toXML = function (xmlDoc, content) {
  var root = util.createElement(xmlDoc, 'xdr:twoCellAnchor');

  var from = util.createElement(xmlDoc, 'xdr:from');
  var fromCol = util.createElement(xmlDoc, 'xdr:col');
  fromCol.appendChild(xmlDoc.createTextNode(this.from.x));
  var fromColOff = util.createElement(xmlDoc, 'xdr:colOff');
  fromColOff.appendChild(xmlDoc.createTextNode(this.from.xOff));
  var fromRow = util.createElement(xmlDoc, 'xdr:row');
  fromRow.appendChild(xmlDoc.createTextNode(this.from.y));
  var fromRowOff = util.createElement(xmlDoc, 'xdr:rowOff');
  fromRowOff.appendChild(xmlDoc.createTextNode(this.from.yOff));

  from.appendChild(fromCol);
  from.appendChild(fromColOff);
  from.appendChild(fromRow);
  from.appendChild(fromRowOff);

  var to = util.createElement(xmlDoc, 'xdr:to');
  var toCol = util.createElement(xmlDoc, 'xdr:col');
  toCol.appendChild(xmlDoc.createTextNode(this.to.x));
  var toColOff = util.createElement(xmlDoc, 'xdr:colOff');
  toColOff.appendChild(xmlDoc.createTextNode(this.from.xOff));
  var toRow = util.createElement(xmlDoc, 'xdr:row');
  toRow.appendChild(xmlDoc.createTextNode(this.to.y));
  var toRowOff = util.createElement(xmlDoc, 'xdr:rowOff');
  toRowOff.appendChild(xmlDoc.createTextNode(this.from.yOff));

  to.appendChild(toCol);
  to.appendChild(toColOff);
  to.appendChild(toRow);
  to.appendChild(toRowOff);

  root.appendChild(from);
  root.appendChild(to);

  root.appendChild(content);

  root.appendChild(util.createElement(xmlDoc, 'xdr:clientData'));

  return root;
};

module.exports = TwoCellAnchor;
},{"../util":29}],19:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var RelationshipManager = require('./RelationshipManager');
var util = require('./util');

var Drawings = function () {
  this.drawings = [];
  this.relations = new RelationshipManager();
  this.id = _.uniqueId('Drawings');
};

/**
 * Adds a drawing (more likely a subclass of a Drawing) to the 'Drawings' for a particular worksheet.
 *
 * @param {Drawing} drawing
 * @returns {undefined}
 */
Drawings.prototype.addDrawing = function (drawing) {
  this.drawings.push(drawing);
};

Drawings.prototype.getCount = function () {
  return this.drawings.length;
};

Drawings.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.spreadsheetDrawing, 'xdr:wsDr');
  var drawings = doc.documentElement;
  drawings.setAttribute('xmlns:a', util.schemas.drawing);
  drawings.setAttribute('xmlns:xdr', util.schemas.spreadsheetDrawing);

  for(var i = 0, l = this.drawings.length; i < l; i++) {

    var rId = this.relations.getRelationshipId(this.drawings[i].getMediaData());
    if(!rId) {
      rId = this.relations.addRelation(this.drawings[i].getMediaData(), this.drawings[i].getMediaType()); //chart
    }
    this.drawings[i].setRelationshipId(rId);
    drawings.appendChild(this.drawings[i].toXML(doc));
  }

  return doc;
};

module.exports = Drawings;
},{"./RelationshipManager":22,"./util":29,"underscore":150}],20:[function(require,module,exports){
'use strict';

if (!global.Paths) { global.Paths = {}; }

module.exports = global.Paths;
},{}],21:[function(require,module,exports){
'use strict';

var pixelsToEMUs = function (pixels) {
  return Math.round(pixels * 914400 / 96);
};

module.exports = {
  pixelsToEMUs: pixelsToEMUs
};
},{}],22:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('./util');
var Paths = require('./Paths');

var RelationshipManager = function () {
  this.relations = {};
  this.lastId = 1;
};

_.uniqueId('rId');

RelationshipManager.prototype.importData = function (data) {
  this.relations = data.relations;
  this.lastId = data.lastId;
};

RelationshipManager.prototype.exportData = function () {
  return {
    relations: this.relations,
    lastId: this.lastId
  };
};

RelationshipManager.prototype.addRelation = function (object, type) {
  this.relations[object.id] = {
    id: _.uniqueId('rId'),
    schema: util.schemas[type]
  };

  return this.relations[object.id].id;
};

RelationshipManager.prototype.getRelationshipId = function (object) {
  return this.relations[object.id] ? this.relations[object.id].id : null;
};

RelationshipManager.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.relationshipPackage, 'Relationships');
  var relationships = doc.documentElement;

  _.each(this.relations, function (data, id) {
    var relationship = util.createElement(doc, 'Relationship', [
      ['Id', data.id],
      ['Type', data.schema],
      ['Target', Paths[id]]
    ]);
    relationships.appendChild(relationship);
  });

  return doc;
};

module.exports = RelationshipManager;
},{"./Paths":20,"./util":29,"underscore":150}],23:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('./util');

var sharedStrings = function () {
  this.strings = {};
  this.stringArray = [];
  this.id = _.uniqueId('SharedStrings');
};

/**
 * Adds a string to the shared string file, and returns the ID of the
 * string which can be used to reference it in worksheets.
 *
 * @param string {String}
 * @return int
 */
sharedStrings.prototype.addString = function (string) {
  this.strings[string] = this.stringArray.length;
  this.stringArray[this.stringArray.length] = string;

  return this.strings[string];
};

sharedStrings.prototype.exportData = function () {
  return this.strings;
};

sharedStrings.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.spreadsheetml, 'sst');
  var sharedStringTable = doc.documentElement;
  this.stringArray.reverse();
  var l = this.stringArray.length;
  sharedStringTable.setAttribute('count', l);
  sharedStringTable.setAttribute('uniqueCount', l);

  var template = doc.createElement('si');
  var templateValue = doc.createElement('t');
  templateValue.appendChild(doc.createTextNode('--placeholder--'));
  template.appendChild(templateValue);
  var strings = this.stringArray;

  while (l--) {
    var clone = template.cloneNode(true);
    clone.firstChild.firstChild.nodeValue = strings[l];
    sharedStringTable.appendChild(clone);
  }

  return doc;
};

module.exports = sharedStrings;
},{"./util":29,"underscore":150}],24:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('./util');

var StyleSheet = function () {
  this.id = _.uniqueId('StyleSheet');
  this.cellStyles = [{
    name:'Normal',
    xfId:'0',
    builtinId:'0'
  }];
  this.defaultTableStyle = false;
  this.differentialStyles = [{}];
  this.masterCellFormats = [{
    numFmtId: 0,
    fontId: 0,
    fillId: 0,
    borderId: 0,
    xfid: 0
  }];
  this.masterCellStyles = [{
    numFmtId: 0,
    fontId: 0,
    fillId: 0,
    borderId: 0
  }];
  this.fonts = [{}];
  this.numberFormatters = [];
  this.fills = [{}, {
    type: 'pattern',
    patternType: 'gray125',
    fgColor: 'FF333333',
    bgColor: 'FF333333'
  }];
  this.borders = [{
    top: {},
    left: {},
    right: {},
    bottom: {},
    diagonal: {}
  }];
  this.tableStyles = [];
};

StyleSheet.prototype.createSimpleFormatter = function (type) {
  var sid = this.masterCellFormats.length;
  var style = {
    id: sid
  };
  switch(type) {
    case 'date':
      style.numFmtId = 14;
      break;
  }
  this.masterCellFormats.push(style);
  return style;
};

StyleSheet.prototype.createFill = function (fillInstructions) {
  var id = this.fills.length;
  var fill = fillInstructions;
  fill.id = id;
  this.fills.push(fill);
  return fill;
};

StyleSheet.prototype.createNumberFormatter = function (formatInstructions) {
  var id = this.numberFormatters.length + 100;
  var format = {
    id: id,
    formatCode: formatInstructions
  };
  this.numberFormatters.push(format);
  return format;
};

/**
 * alignment: {
        *  horizontal: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_HorizontalAlignment.html
        *  vertical: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_VerticalAlignment.html
        *  @param {Object} styleInstructions
 */
StyleSheet.prototype.createFormat = function (styleInstructions) {
  var sid = this.masterCellFormats.length;
  var style = {
    id: sid
  };
  if(styleInstructions.font && _.isObject(styleInstructions.font)) {
    style.fontId = this.createFontStyle(styleInstructions.font).id;
  } else if(styleInstructions.font) {
    if(_.isNaN(parseInt(styleInstructions.font, 10))) {
      throw 'Passing a non-numeric font id is not supported';
    }
    style.fontId = styleInstructions.font;
  }

  if (styleInstructions.format && _.isString(styleInstructions.format)) {
    style.numFmtId = this.createNumberFormatter(styleInstructions.format).id;
  } else if(styleInstructions.format) {
    if(_.isNaN(parseInt(styleInstructions.format, 10))) {
      throw 'Invalid number formatter id';
    }
    style.numFmtId = styleInstructions.format;
  }

  if (styleInstructions.border && _.isObject(styleInstructions.border)) {
    style.borderId = this.createBorderFormatter(styleInstructions.border).id;
  } else if (styleInstructions.border) {
    if(_.isNaN(parseInt(styleInstructions.border, 10))) {
      throw 'Passing a non-numeric border id is not supported';
    }
    style.borderId = styleInstructions.border;
  }

  if (styleInstructions.fill && _.isObject(styleInstructions.fill)) {
    style.fillId = this.createFill(styleInstructions.fill).id;
  } else if (styleInstructions.fill) {
    if(_.isNaN(parseInt(styleInstructions.fill, 10))) {
      throw 'Passing a non-numeric fill id is not supported';
    }
    style.fillId = styleInstructions.fill;
  }

  if (styleInstructions.alignment && _.isObject(styleInstructions.alignment)) {
    style.alignment = _.pick(
      styleInstructions.alignment,
      'horizontal',
      'justifyLastLine',
      'readingOrder',
      'relativeIndent',
      'shrinkToFit',
      'textRotation',
      'vertical',
      'wrapText'
    );
  }

  this.masterCellFormats.push(style);
  return style;
};

StyleSheet.prototype.createDifferentialStyle = function (styleInstructions) {
  var id = this.differentialStyles.length;
  var style = {
    id: id
  };

  if (styleInstructions.font && _.isObject(styleInstructions.font)) {
    style.font = styleInstructions.font;
  }

  if (styleInstructions.border && _.isObject(styleInstructions.border)) {
    style.border = _.defaults(styleInstructions.border, {
      top: {},
      left: {},
      right: {},
      bottom: {},
      diagonal: {}
    });
  }

  if (styleInstructions.fill && _.isObject(styleInstructions.fill)) {
    style.fill = styleInstructions.fill;
  }

  if (styleInstructions.alignment && _.isObject(styleInstructions.alignment)) {
    style.alignment = styleInstructions.alignment;
  }

  if (styleInstructions.format && _.isString(styleInstructions.format)) {
    style.numFmt = styleInstructions.format;
  }

  this.differentialStyles[id] = style;

  return style;
};

/**
 * Should be an object containing keys that match with one of the keys from this list:
 * http://www.schemacentral.com/sc/ooxml/t-ssml_ST_TableStyleType.html
 *
 * The value should be a reference to a differential format (dxf)
 * @param {Object} instructions
 */
StyleSheet.prototype.createTableStyle = function (instructions) {
  this.tableStyles.push(instructions);
};

/**
 * All params optional
 * Expects: {
  * top: {},
  * left: {},
  * right: {},
  * bottom: {},
  * diagonal: {},
  * outline: boolean,
  * diagonalUp: boolean,
  * diagonalDown: boolean
  * }
  * Each border should follow:
  * {
  * style: styleString, http://www.schemacentral.com/sc/ooxml/t-ssml_ST_BorderStyle.html
  * color: ARBG color (requires the A, so for example FF006666)
  * }
  * @param {Object} border
 */
StyleSheet.prototype.createBorderFormatter = function (border) {
  _.defaults(border, {
    top: {},
    left: {},
    right: {},
    bottom: {},
    diagonal: {},
    id: this.borders.length
  });
  this.borders.push(border);
  return border;
};

/**
 * Supported font styles:
 * bold
 * italic
 * underline (single, double, singleAccounting, doubleAccounting)
 * size
 * color
 * fontName
 * strike (strikethrough)
 * outline (does this actually do anything?)
 * shadow (does this actually do anything?)
 * superscript
 * subscript
 *
 * Color is a future goal - at the moment it's looking a bit complicated
 * @param {Object} instructions
 */
StyleSheet.prototype.createFontStyle = function (instructions) {
  var fontId = this.fonts.length;
  var fontStyle = {
    id: fontId
  };

  if (instructions.bold) {
    fontStyle.bold = true;
  }

  if (instructions.italic) {
    fontStyle.italic = true;
  }

  if (instructions.superscript) {
    fontStyle.vertAlign = 'superscript';
  }

  if (instructions.subscript) {
    fontStyle.vertAlign = 'subscript';
  }

  if(instructions.underline) {
    if (_.indexOf([
      'double',
      'singleAccounting',
      'doubleAccounting'
    ], instructions.underline) !== -1) {
      fontStyle.underline = instructions.underline;
    } else {
      fontStyle.underline = true;
    }
  }

  if (instructions.strike) {
    fontStyle.strike = true;
  }

  if (instructions.outline) {
    fontStyle.outline = true;
  }

  if (instructions.shadow) {
    fontStyle.shadow = true;
  }

  if (instructions.size) {
    fontStyle.size = instructions.size;
  }

  if (instructions.color) {
    fontStyle.color = instructions.color;
  }

  if (instructions.fontName) {
    fontStyle.fontName = instructions.fontName;
  }

  this.fonts.push(fontStyle);

  return fontStyle;
};

StyleSheet.prototype.exportBorders = function (doc) {
  var borders = doc.createElement('borders');
  borders.setAttribute('count', this.borders.length);

  for (var i = 0, l = this.borders.length; i < l; i++) {
    borders.appendChild(this.exportBorder(doc, this.borders[i]));
  }

  return borders;
};

StyleSheet.prototype.exportBorder = function (doc, data) {
  var border = doc.createElement('border');
  var self = this;
  var borderGenerator = function (name) {
    var b = doc.createElement(name);
    if (data[name].style) {
      b.setAttribute('style', data[name].style);
    }
    if (data[name].color) {
      b.appendChild(self.exportColor(doc, data[name].color));
    }

    return b;
  };

  border.appendChild(borderGenerator('left'));
  border.appendChild(borderGenerator('right'));
  border.appendChild(borderGenerator('top'));
  border.appendChild(borderGenerator('bottom'));
  border.appendChild(borderGenerator('diagonal'));

  return border;
};

StyleSheet.prototype.exportColor = function (doc, color) {
  var colorEl = doc.createElement('color');
  if (_.isString(color)) {
    colorEl.setAttribute('rgb', color);
    return colorEl;
  }

  if (!_.isUndefined(color.tint)) {
    colorEl.setAttribute('tint', color.tint);
  }

  if (!_.isUndefined(color.auto)) {
    colorEl.setAttribute('auto', !!color.auto);
  }

  if (!_.isUndefined(color.theme)) {
    colorEl.setAttribute('theme', color.theme);
  }

  return colorEl;
};

StyleSheet.prototype.exportMasterCellFormats = function (doc) {
  var cellFormats = util.createElement(doc, 'cellXfs', [
    ['count', this.masterCellFormats.length]
  ]);
  for (var i = 0, l = this.masterCellFormats.length; i < l; i++) {
    var mformat = this.masterCellFormats[i];
    cellFormats.appendChild(this.exportCellFormatElement(doc, mformat));
  }

  return cellFormats;
};

StyleSheet.prototype.exportMasterCellStyles = function (doc) {
  var records = util.createElement(doc, 'cellStyleXfs', [
    ['count', this.masterCellStyles.length]
  ]);

  for (var i = 0, l = this.masterCellStyles.length; i < l; i++) {
    var mstyle = this.masterCellStyles[i];
    records.appendChild(this.exportCellFormatElement(doc, mstyle));
  }

  return records;
};

StyleSheet.prototype.exportCellFormatElement = function (doc, styleInstructions) {
  var xf = doc.createElement('xf');
  var allowed = ['applyAlignment', 'applyBorder', 'applyFill', 'applyFont', 'applyNumberFormat',
    'applyProtection', 'borderId', 'fillId', 'fontId', 'numFmtId', 'pivotButton', 'quotePrefix', 'xfId'];
  var attributes = _.filter(_.keys(styleInstructions), function (key) {
    if (_.indexOf(allowed, key) !== -1) {
      return true;
    }
  });

  if (styleInstructions.alignment) {
    var alignmentData = styleInstructions.alignment;
    xf.appendChild(this.exportAlignment(doc, alignmentData));
  }

  var a = attributes.length;
  while(a--) {
    xf.setAttribute(attributes[a], styleInstructions[attributes[a]]);
  }

  if (styleInstructions.fillId) {
    xf.setAttribute('applyFill', '1');
  }

  return xf;
};

StyleSheet.prototype.exportAlignment = function (doc, alignmentData) {
  var alignment = doc.createElement('alignment');
  var keys = _.keys(alignmentData);

  for (var i = 0, l = keys.length; i < l; i++) {
    alignment.setAttribute(keys[i], alignmentData[keys[i]]);
  }

  return alignment;
};

StyleSheet.prototype.exportFonts = function (doc) {
  var fonts = doc.createElement('fonts');
  fonts.setAttribute('count', this.fonts.length);

  for (var i = 0, l = this.fonts.length; i < l; i++) {
    var fd = this.fonts[i];
    fonts.appendChild(this.exportFont(doc, fd));
  }

  return fonts;
};

StyleSheet.prototype.exportFont = function (doc, fd) {
  var font = doc.createElement('font');

  if (fd.size) {
    var size = doc.createElement('sz');
    size.setAttribute('val', fd.size);
    font.appendChild(size);
  }

  if (fd.fontName) {
    var fontName = doc.createElement('name');
    fontName.setAttribute('val', fd.fontName);
    font.appendChild(fontName);
  }

  if (fd.bold) {
    font.appendChild(doc.createElement('b'));
  }
  if (fd.italic) {
    font.appendChild(doc.createElement('i'));
  }

  if (fd.vertAlign) {
    var vertAlign = doc.createElement('vertAlign');
    vertAlign.setAttribute('val', fd.vertAlign);
    font.appendChild(vertAlign);
  }

  if (fd.underline) {
    var u = doc.createElement('u');
    if (fd.underline !== true) {
      u.setAttribute('val', fd.underline);
    }
    font.appendChild(u);
  }

  if (fd.strike) {
    font.appendChild(doc.createElement('strike'));
  }

  if (fd.shadow) {
    font.appendChild(doc.createElement('shadow'));
  }

  if (fd.outline) {
    font.appendChild(doc.createElement('outline'));
  }

  if (fd.color) {
    font.appendChild(this.exportColor(doc, fd.color));
  }

  return font;
};

StyleSheet.prototype.exportFills = function (doc) {
  var fills = doc.createElement('fills');
  fills.setAttribute('count', this.fills.length);

  for (var i = 0, l = this.fills.length; i < l; i++) {
    var fd = this.fills[i];
    fills.appendChild(this.exportFill(doc, fd));
  }

  return fills;
};

StyleSheet.prototype.exportFill = function (doc, fd) {
  var fillDef;
  var fill = doc.createElement('fill');

  if (fd.type === 'pattern') {
    fillDef = this.exportPatternFill(doc, fd);
    fill.appendChild(fillDef);
  } else if (fd.type === 'gradient') {
    fillDef = this.exportGradientFill(doc, fd);
    fill.appendChild(fillDef);
  }

  return fill;
};

StyleSheet.prototype.exportGradientFill = function (doc, data) {
  var fillDef = doc.createElement('gradientFill');

  if (data.degree) {
    fillDef.setAttribute('degree', data.degree);
  } else if (data.left) {
    fillDef.setAttribute('left', data.left);
    fillDef.setAttribute('right', data.right);
    fillDef.setAttribute('top', data.top);
    fillDef.setAttribute('bottom', data.bottom);
  }

  var start = doc.createElement('stop');
  start.setAttribute('position', data.start.pureAt || 0);
  var startColor = doc.createElement('color');

  if (typeof data.start === 'string' || data.start.color) {
    startColor.setAttribute('rgb', data.start.color || data.start);
  } else if (typeof data.start.theme) {
    startColor.setAttribute('theme', data.start.theme);
  }

  var end = doc.createElement('stop');
  var endColor = doc.createElement('color');
  end.setAttribute('position', data.end.pureAt || 1);

  if (typeof data.start === 'string' || data.end.color) {
    endColor.setAttribute('rgb', data.end.color || data.end);
  } else if (typeof data.end.theme) {
    endColor.setAttribute('theme', data.end.theme);
  }

  start.appendChild(startColor);
  end.appendChild(endColor);
  fillDef.appendChild(start);
  fillDef.appendChild(end);

  return fillDef;
};

/**
 * Pattern types: http://www.schemacentral.com/sc/ooxml/t-ssml_ST_PatternType.html
 * @param {XMLDoc} doc
 * @param {Object} data
 */
StyleSheet.prototype.exportPatternFill = function (doc, data) {
  var fillDef = util.createElement(doc, 'patternFill', [
    ['patternType', data.patternType]
  ]);

  if (!data.bgColor) {
    data.bgColor = 'FFFFFFFF';
  }
  if (!data.fgColor) {
    data.fgColor = 'FFFFFFFF';
  }

  var bgColor = doc.createElement('bgColor');
  if (_.isString(data.bgColor)) {
    bgColor.setAttribute('rgb', data.bgColor);
  } else {
    if (data.bgColor.theme) {
      bgColor.setAttribute('theme', data.bgColor.theme);
    } else {
      bgColor.setAttribute('rgb', data.bgColor.rbg);
    }
  }

  var fgColor = doc.createElement('fgColor');
  if (_.isString(data.fgColor)) {
    fgColor.setAttribute('rgb', data.fgColor);
  } else {
    if (data.fgColor.theme) {
      fgColor.setAttribute('theme', data.fgColor.theme);
    } else {
      fgColor.setAttribute('rgb', data.fgColor.rbg);
    }
  }

  fillDef.appendChild(fgColor);
  fillDef.appendChild(bgColor);

  return fillDef;
};

StyleSheet.prototype.exportNumberFormatters = function (doc) {
  var formatters = doc.createElement('numFmts');
  formatters.setAttribute('count', this.numberFormatters.length);

  for (var i = 0, l = this.numberFormatters.length; i < l; i++) {
    var fd = this.numberFormatters[i];
    formatters.appendChild(this.exportNumberFormatter(doc, fd));
  }

  return formatters;
};

StyleSheet.prototype.exportNumberFormatter = function (doc, fd) {
  var numFmt = doc.createElement('numFmt');
  numFmt.setAttribute('numFmtId', fd.id);
  numFmt.setAttribute('formatCode', fd.formatCode);
  return numFmt;
};

StyleSheet.prototype.exportCellStyles = function (doc) {
  var cellStyles = doc.createElement('cellStyles');
  cellStyles.setAttribute('count', this.cellStyles.length);

  for (var i = 0, l = this.cellStyles.length; i < l; i++) {
    var style = this.cellStyles[i];
    delete style.id; //Remove internal id
    var record = util.createElement(doc, 'cellStyle');
    cellStyles.appendChild(record);
    var attributes = _.keys(style);
    var a = attributes.length;
    while(a--) {
      record.setAttribute(attributes[a], style[attributes[a]]);
    }
  }

  return cellStyles;
};

StyleSheet.prototype.exportDifferentialStyles = function (doc) {
  var dxfs = doc.createElement('dxfs');
  dxfs.setAttribute('count', this.differentialStyles.length);

  for (var i = 0, l = this.differentialStyles.length; i < l; i++) {
    var style = this.differentialStyles[i];
    dxfs.appendChild(this.exportDFX(doc, style));
  }

  return dxfs;
};

StyleSheet.prototype.exportDFX = function (doc, style) {
  var dxf = doc.createElement('dxf');
  if (style.font) {
    dxf.appendChild(this.exportFont(doc, style.font));
  }

  if (style.fill) {
    dxf.appendChild(this.exportFill(doc, style.fill));
  }

  if (style.border) {
    dxf.appendChild(this.exportBorder(doc, style.border));
  }

  if (style.numFmt) {
    dxf.appendChild(this.exportNumberFormatter(doc, style.numFmt));
  }

  if (style.alignment) {
    dxf.appendChild(this.exportAlignment(doc, style.alignment));
  }

  return dxf;
};

StyleSheet.prototype.exportTableStyles = function (doc) {
  var tableStyles = doc.createElement('tableStyles');
  tableStyles.setAttribute('count', this.tableStyles.length);

  if (this.defaultTableStyle) {
    tableStyles.setAttribute('defaultTableStyle', this.defaultTableStyle);
  }

  for (var i = 0, l = this.tableStyles.length; i < l; i++) {
    tableStyles.appendChild(this.exportTableStyle(doc, this.tableStyles[i]));
  }

  return tableStyles;
};

StyleSheet.prototype.exportTableStyle = function (doc, style) {
  var tableStyle = doc.createElement('tableStyle');
  tableStyle.setAttribute('name', style.name);
  tableStyle.setAttribute('pivot', 0);
  var i = 0;

  _.each(style, function (value, key) {
    if (key === 'name') {return;}
    i++;
    var styleEl = doc.createElement('tableStyleElement');
    styleEl.setAttribute('type', key);
    styleEl.setAttribute('dxfId', value);
    tableStyle.appendChild(styleEl);
  });

  tableStyle.setAttribute('count', i);

  return tableStyle;
};

StyleSheet.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.spreadsheetml, 'styleSheet');
  var styleSheet = doc.documentElement;
  styleSheet.appendChild(this.exportNumberFormatters(doc));
  styleSheet.appendChild(this.exportFonts(doc));
  styleSheet.appendChild(this.exportFills(doc));
  styleSheet.appendChild(this.exportBorders(doc));
  styleSheet.appendChild(this.exportMasterCellStyles(doc));
  styleSheet.appendChild(this.exportMasterCellFormats(doc));
  styleSheet.appendChild(this.exportCellStyles(doc));
  styleSheet.appendChild(this.exportDifferentialStyles(doc));

  if (this.tableStyles.length) {
    styleSheet.appendChild(this.exportTableStyles(doc));
  }
  
  return doc;
};

module.exports = StyleSheet;
},{"./util":29,"underscore":150}],25:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('./util');

var Table = function (config) {
  _.defaults(this, {
    name: '',
    displayName: '',
    dataCellStyle: null,
    dataDfxId: null,
    headerRowBorderDxfId: null,
    headerRowCellStyle: null,
    headerRowCount: 1,
    headerRowDxfId: null,
    insertRow: false,
    insertRowShift: false,
    ref: null,
    tableBorderDxfId: null,
    totalsRowBorderDxfId: null,
    totalsRowCellStyle: null,
    totalsRowCount: 0,
    totalsRowDxfId: null,
    tableColumns: [],
    autoFilter: null,
    sortState: null,
    styleInfo: {}
  });

  this.initialize(config);
};

Table.prototype.initialize = function (config) {
  this.displayName = _.uniqueId('Table');
  this.name = this.displayName;
  this.id = this.name;
  this.tableId = this.id.replace('Table', '');
  _.extend(this, config);
};

Table.prototype.setReferenceRange = function (start, end) {
  this.ref = [start, end];
};

Table.prototype.setTableColumns = function (columns) {
  _.each(columns, function (column) {
    this.addTableColumn(column);
  }, this);
};

/**
 * Expects an object with the following optional properties:
 * name (required)
 * dataCellStyle
 * dataDxfId
 * headerRowCellStyle
 * headerRowDxfId
 * totalsRowCellStyle
 * totalsRowDxfId
 * totalsRowFunction
 * totalsRowLabel
 * columnFormula
 * columnFormulaIsArrayType (boolean)
 * totalFormula
 * totalFormulaIsArrayType (boolean)
 */
Table.prototype.addTableColumn = function (column) {
  if(_.isString(column)) {
    column = {
      name: column
    };
  }
  if(!column.name) {
    throw 'Invalid argument for addTableColumn - minimum requirement is a name property';
  }
  this.tableColumns.push(column);
};

/**
 * Expects an object with the following properties:
 * caseSensitive (boolean)
 * dataRange
 * columnSort (assumes true)
 * sortDirection
 * sortRange (defaults to dataRange)
 */
Table.prototype.setSortState = function (state) {
  this.sortState = state;
};

Table.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.spreadsheetml, 'table');
  var table = doc.documentElement;
  table.setAttribute('id', this.tableId);
  table.setAttribute('name', this.name);
  table.setAttribute('displayName', this.displayName);
  var s = this.ref[0];
  var e = this.ref[1];
  table.setAttribute('ref', util.positionToLetterRef(s[0], s[1]) + ':' + util.positionToLetterRef(e[0], e[1]));

  /** TOTALS **/
  table.setAttribute('totalsRowCount', this.totalsRowCount);

  /** HEADER **/
  table.setAttribute('headerRowCount', this.headerRowCount);
  if(this.headerRowDxfId) {
    table.setAttribute('headerRowDxfId', this.headerRowDxfId);
  }
  if(this.headerRowBorderDxfId) {
    table.setAttribute('headerRowBorderDxfId', this.headerRowBorderDxfId);
  }

  if(!this.ref) {
    throw 'Needs at least a reference range';
  }
  if(!this.autoFilter) {
    this.addAutoFilter(this.ref[0], this.ref[1]);
  }

  table.appendChild(this.exportAutoFilter(doc));

  table.appendChild(this.exportTableColumns(doc));
  table.appendChild(this.exportTableStyleInfo(doc));

  return doc;
};

Table.prototype.exportTableColumns = function (doc) {
  var tableColumns = doc.createElement('tableColumns');
  tableColumns.setAttribute('count', this.tableColumns.length);
  var tcs = this.tableColumns;
  for(var i = 0, l = tcs.length; i < l; i++) {
    var tc = tcs[i];
    var tableColumn = doc.createElement('tableColumn');
    tableColumn.setAttribute('id', i + 1);
    tableColumn.setAttribute('name', tc.name);
    tableColumns.appendChild(tableColumn);

    if(tc.totalsRowFunction) {
      tableColumn.setAttribute('totalsRowFunction', tc.totalsRowFunction);
    }
    if(tc.totalsRowLabel) {
      tableColumn.setAttribute('totalsRowLabel', tc.totalsRowLabel);
    }
  }
  return tableColumns;
};

Table.prototype.exportAutoFilter = function (doc) {
  var autoFilter = doc.createElement('autoFilter');
  var s = this.autoFilter[0];
  var e = this.autoFilter[1];
  autoFilter.setAttribute('ref', util.positionToLetterRef(s[0], s[1]) + ':' + util.positionToLetterRef(e[0], e[1]  - this.totalsRowCount));
  return autoFilter;
};

Table.prototype.exportTableStyleInfo = function (doc) {
  var ts = this.styleInfo;
  var tableStyle = doc.createElement('tableStyleInfo');
  tableStyle.setAttribute('name', ts.themeStyle);
  tableStyle.setAttribute('showFirstColumn', ts.showFirstColumn ? '1' : '0');
  tableStyle.setAttribute('showLastColumn', ts.showLastColumn ? '1' : '0');
  tableStyle.setAttribute('showColumnStripes', ts.showColumnStripes ? '1' : '0');
  tableStyle.setAttribute('showRowStripes', ts.showRowStripes ? '1' : '0');
  return tableStyle;
};

Table.prototype.addAutoFilter = function (startRef, endRef) {
  this.autoFilter = [startRef, endRef];
};

module.exports = Table;
},{"./util":29,"underscore":150}],26:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var StyleSheet = require('./StyleSheet');
var Worksheet = require('./Worksheet');
var SharedStrings = require('./SharedStrings');
var RelationshipManager = require('./RelationshipManager');
var Paths = require('./Paths');
var XMLDOM = require('./XMLDOM');
var XMLSerializer = require('xmldom').XMLSerializer;
var util = require('./util');

var Workbook = function (config) {
  this.worksheets = [];
  this.tables = [];
  this.drawings = [];
  this.media = {};
  this.initialize(config);
};

Workbook.prototype.initialize = function () {
  this.id = _.uniqueId('Workbook');
  this.styleSheet = new StyleSheet();
  this.sharedStrings = new SharedStrings();
  this.relations = new RelationshipManager();
  this.relations.addRelation(this.styleSheet, 'stylesheet');
  this.relations.addRelation(this.sharedStrings, 'sharedStrings');
};

Workbook.prototype.createWorksheet = function (config) {
  config = config || {};
  _.defaults(config, {
    name: 'Sheet '.concat(this.worksheets.length + 1)
  });
  return new Worksheet(config);
};

Workbook.prototype.getStyleSheet = function () {
  return this.styleSheet;
};

Workbook.prototype.addTable = function (table) {
  this.tables.push(table);
};

Workbook.prototype.addDrawings = function (drawings) {
  this.drawings.push(drawings);
};

Workbook.prototype.addMedia = function (type, fileName, fileData, contentType) {
  var fileNamePieces = fileName.split('.');
  var extension = fileNamePieces[fileNamePieces.length - 1];

  if(!contentType) {
    switch(extension.toLowerCase()) {
      case 'jpeg':
      case 'jpg':
        contentType = 'image/jpeg';
        break;
      case 'png':
        contentType = 'image/png';
        break;
      case 'gif':
        contentType = 'image/gif';
        break;
      default:
        contentType = null;
        break;
    }
  }

  if(!this.media[fileName]) {
    this.media[fileName] = {
      id: fileName,
      data: fileData,
      fileName: fileName,
      contentType: contentType,
      extension: extension
    };
  }
  return this.media[fileName];
};

Workbook.prototype.addWorksheet = function (worksheet) {
  this.relations.addRelation(worksheet, 'worksheet');
  worksheet.setSharedStringCollection(this.sharedStrings);
  this.worksheets.push(worksheet);
};

Workbook.prototype.createContentTypes = function () {
  var doc = util.createXmlDoc(util.schemas.contentTypes, 'Types');
  var types = doc.documentElement;
  var i, l;

  types.appendChild(util.createElement(doc, 'Default', [
    ['Extension', 'rels'],
    ['ContentType', 'application/vnd.openxmlformats-package.relationships+xml']
  ]));
  types.appendChild(util.createElement(doc, 'Default', [
    ['Extension', 'xml'],
    ['ContentType', 'application/xml']
  ]));

  var extensions = {};
  for(var filename in this.media) {
    if(this.media.hasOwnProperty(filename)) {
      extensions[this.media[filename].extension] = this.media[filename].contentType;
    }
  }
  for(var extension in extensions) {
    if(extensions.hasOwnProperty(extension)) {
      types.appendChild(util.createElement(doc, 'Default', [
        ['Extension', extension],
        ['ContentType', extensions[extension]]
      ]));
    }
  }

  types.appendChild(util.createElement(doc, 'Override', [
    ['PartName', '/xl/workbook.xml'],
    ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml']
  ]));
  types.appendChild(util.createElement(doc, 'Override', [
    ['PartName', '/xl/sharedStrings.xml'],
    ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml']
  ]));
  types.appendChild(util.createElement(doc, 'Override', [
    ['PartName', '/xl/styles.xml'],
    ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml']
  ]));

  for(i = 0, l = this.worksheets.length; i < l; i++) {
    types.appendChild(util.createElement(doc, 'Override', [
      ['PartName', '/xl/worksheets/sheet' + (i + 1) + '.xml'],
      ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml']
    ]));
  }
  for(i = 0, l = this.tables.length; i < l; i++) {
    types.appendChild(util.createElement(doc, 'Override', [
      ['PartName', '/xl/tables/table' + (i + 1) + '.xml'],
      ['ContentType', 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml']
    ]));
  }

  for(i = 0, l = this.drawings.length; i < l; i++) {
    types.appendChild(util.createElement(doc, 'Override', [
      ['PartName', '/xl/drawings/drawing' + (i + 1) + '.xml'],
      ['ContentType', 'application/vnd.openxmlformats-officedocument.drawing+xml']
    ]));
  }

  return doc;
};

Workbook.prototype.toXML = function () {
  var doc = util.createXmlDoc(util.schemas.spreadsheetml, 'workbook');
  var wb = doc.documentElement;
  wb.setAttribute('xmlns:r', util.schemas.relationships);

  var maxWorksheetNameLength = 31;
  var sheets = util.createElement(doc, 'sheets');
  for(var i = 0, l = this.worksheets.length; i < l; i++) {
    var sheet = doc.createElement('sheet');
    // Microsoft Excel (2007, 2013) do not allow worksheet names longer than 31 characters
    // if the worksheet name is longer, Excel displays an 'Excel found unreadable content...' popup when opening the file
    if(console != null && this.worksheets[i].name.length > maxWorksheetNameLength) {
      console.log('Microsoft Excel requires work sheet names to be less than ' + (maxWorksheetNameLength+1) +
        ' characters long, work sheet name "' + this.worksheets[i].name +
        '" is ' + this.worksheets[i].name.length + ' characters long');
    }
    sheet.setAttribute('name', this.worksheets[i].name);
    sheet.setAttribute('sheetId', i + 1);
    sheet.setAttribute('r:id', this.relations.getRelationshipId(this.worksheets[i]));
    sheets.appendChild(sheet);
  }
  wb.appendChild(sheets);
  return doc;
};

Workbook.prototype.createWorkbookRelationship = function () {
  var doc = util.createXmlDoc(util.schemas.relationshipPackage, 'Relationships');
  var relationships = doc.documentElement;
  relationships.appendChild(util.createElement(doc, 'Relationship', [
    ['Id', 'rId1'],
    ['Type', util.schemas.officeDocument],
    ['Target', 'xl/workbook.xml']
  ]));
  return doc;
};

Workbook.prototype._generateCorePaths = function (files) {
  var i, l;
  Paths[this.styleSheet.id] = 'styles.xml';
  Paths[this.sharedStrings.id] = 'sharedStrings.xml';
  Paths[this.id] = '/xl/workbook.xml';

  for(i = 0, l = this.tables.length; i < l; i++) {
    files['/xl/tables/table' + (i + 1) + '.xml'] = this.tables[i].toXML();
    Paths[this.tables[i].id] = '/xl/tables/table' + (i + 1) + '.xml';
  }

  for(var fileName in this.media) {
    if(this.media.hasOwnProperty(fileName)) {
      var media = this.media[fileName];
      files['/xl/media/' + fileName] = media.data;
      Paths[fileName] = '/xl/media/' + fileName;
    }
  }

  for(i = 0, l = this.drawings.length; i < l; i++) {
    files['/xl/drawings/drawing' + (i + 1) + '.xml'] = this.drawings[i].toXML();
    Paths[this.drawings[i].id] = '/xl/drawings/drawing' + (i + 1) + '.xml';
    files['/xl/drawings/_rels/drawing' + (i + 1) + '.xml.rels'] = this.drawings[i].relations.toXML();
  }


};

Workbook.prototype._prepareFilesForPackaging = function (files) {

  _.extend(files, {
    '/[Content_Types].xml': this.createContentTypes(),
    '/_rels/.rels': this.createWorkbookRelationship(),
    '/xl/styles.xml': this.styleSheet.toXML(),
    '/xl/workbook.xml': this.toXML(),
    '/xl/sharedStrings.xml': this.sharedStrings.toXML(),
    '/xl/_rels/workbook.xml.rels': this.relations.toXML()
  });

  _.each(files, function (value, key) {
    if(key.indexOf('.xml') !== -1 || key.indexOf('.rels') !== -1) {
      if (value instanceof XMLDOM){
        files[key] = value.toString();
      } else {
        files[key] = value.xml || new XMLSerializer().serializeToString(value);
      }
      var content = files[key].replace(/xmlns=""/g, '');
      content = content.replace(/NS[\d]+:/g, '');
      content = content.replace(/xmlns:NS[\d]+=""/g, '');
      files[key] = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + '\n' + content;
    }
  });
};

Workbook.prototype.generateFilesAsync = function () {
  //TODO Implement
};

Workbook.prototype._createWorker = function () {
  //TODO Implement
};

Workbook.prototype.generateFiles = function () {
  var files = {};
  this._generateCorePaths(files);

  for(var i = 0, l = this.worksheets.length; i < l; i++) {
    files['/xl/worksheets/sheet' + (i + 1) + '.xml'] = this.worksheets[i].toXML();
    Paths[this.worksheets[i].id] = 'worksheets/sheet' + (i + 1) + '.xml';
    files['/xl/worksheets/_rels/sheet' + (i + 1) + '.xml.rels'] = this.worksheets[i].relations.toXML();
  }

  this._prepareFilesForPackaging(files);

  return files;
};

module.exports = Workbook;
},{"./Paths":20,"./RelationshipManager":22,"./SharedStrings":23,"./StyleSheet":24,"./Worksheet":27,"./XMLDOM":28,"./util":29,"underscore":150,"xmldom":152}],27:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var util = require('./util');
var RelationshipManager = require('./RelationshipManager');

var Worksheet = function (config) {
  this.relations = null;
  this.columnFormats = [];
  this.data = [];
  this.mergedCells = [];
  this.columns = [];
  this._headers = [];
  this._footers = [];
  this._tables = [];
  this._drawings = [];
  this._rowInstructions = {};
  this.initialize(config);
};

Worksheet.prototype.initialize = function (config) {
  config = config || {};
  this.name = config.name;
  this.id = _.uniqueId('Worksheet');
  this._timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
  if (config.columns) {
    this.setColumns(config.columns);
  }

  this.relations = new RelationshipManager();
};

/**
 * Returns an object that can be consumed by a WorksheetExportWorker
 * @returns {Object}
 */
Worksheet.prototype.exportData = function () {
  return {
    relations: this.relations.exportData(),
    columnFormats: this.columnFormats,
    data: this.data,
    columns: this.columns,
    mergedCells: this.mergedCells,
    _headers: this._headers,
    _footers: this._footers,
    _tables: this._tables,
    _rowInstructions: this._rowInstructions,
    name: this.name,
    id: this.id
  };
};

/**
 * Imports data - to be used while inside of a WorksheetExportWorker.
 * @param {Object} data
 */
Worksheet.prototype.importData = function (data) {
  this.relations.importData(data.relations);
  delete data.relations;
  _.extend(this, data);
};

Worksheet.prototype.setSharedStringCollection = function (stringCollection) {
  this.sharedStrings = stringCollection;
};

Worksheet.prototype.addTable = function (table) {
  this._tables.push(table);
  this.relations.addRelation(table, 'table');
};

Worksheet.prototype.addDrawings = function (table) {
  this._drawings.push(table);
  this.relations.addRelation(table, 'drawingRelationship');
};

/**
 * Expects an object with the following (all optional) properties:
 * 
 * * height (number)
 * * style (a style id)
 * 
 * @param {object} instructions An object with row creation instructions
 * @returns {undefined}
 */
Worksheet.prototype.setRowInstructions = function (instructions) {
  this._rowInstructions = instructions;
};

/**
 * Expects an array length of three.
 *
 * @see Excel/Worksheet compilePageDetailPiece
 * @see <a href='/cookbook/addingHeadersAndFooters.html'>Adding headers and footers to a worksheet</a>
 *
 * @param {Array} headers [left, center, right]
 */
Worksheet.prototype.setHeader = function (headers) {
  if (!_.isArray(headers)) {
    throw 'Invalid argument type - setHeader expects an array of three instructions';
  }
  this._headers = headers;
};

/**
 * Expects an array length of three.
 *
 * @see Excel/Worksheet compilePageDetailPiece
 * @see <a href='/cookbook/addingHeadersAndFooters.html'>Adding headers and footers to a worksheet</a>
 *
 * @param {Array} footers [left, center, right]
 */
Worksheet.prototype.setFooter = function (footers) {
  if (!_.isArray(footers)) {
    throw 'Invalid argument type - setFooter expects an array of three instructions';
  }
  this._footers = footers;
};

/**
 * Turns page header/footer details into the proper format for Excel.
 * @param {type} data
 * @returns {String}
 */
Worksheet.prototype.compilePageDetailPackage = function (data) {
  data = data || '';
  return [
    '&L', this.compilePageDetailPiece(data[0] || ''),
    '&C', this.compilePageDetailPiece(data[1] || ''),
    '&R', this.compilePageDetailPiece(data[2] || '')
  ].join('');
};

/**
 * Turns instructions on page header/footer details into something
 * usable by Excel.
 *
 * @param {type} data
 * @returns {String|@exp;_@call;reduce}
 */
Worksheet.prototype.compilePageDetailPiece = function (data) {
  if (_.isString(data)) {
    return '&"-,Regular"'.concat(data);
  }
  if (_.isObject(data) && !_.isArray(data)) {
    var string = '';

    if (data.font || data.bold) {
      var weighting = data.bold ? 'Bold' : 'Regular';
      string += '&"' + (data.font || '-');
      string += ',' + weighting + '"';
    } else {
      string += '&"-,Regular"';
    }
    if (data.underline) {
      string += '&U';
    }
    if (data.fontSize) {
      string += '&'+data.fontSize;
    }
    string += data.text;

    return string;
  }

  if (_.isArray(data)) {
    var self = this;
    return _.reduce(data, function (m, v) {
      return m.concat(self.compilePageDetailPiece(v));
    }, '');
  }
};

/**
 * Creates the header node.
 *
 * @todo implement the ability to do even/odd headers
 * @param {XML Doc} doc
 * @returns {XML Node}
 */
Worksheet.prototype.exportHeader = function (doc) {
  var oddHeader = doc.createElement('oddHeader');
  oddHeader.appendChild(doc.createTextNode(this.compilePageDetailPackage(this._headers)));

  return oddHeader;
};

/**
 * Creates the footer node.
 *
 * @todo implement the ability to do even/odd footers
 * @param {XML Doc} doc
 * @returns {XML Node}
 */
Worksheet.prototype.exportFooter = function (doc) {
  var oddFooter = doc.createElement('oddFooter');
  oddFooter.appendChild(doc.createTextNode(this.compilePageDetailPackage(this._footers)));
  return oddFooter;
};

/**
 * This creates some nodes ahead of time, which cuts down on generation time due to
 * most cell definitions being essentially the same, but having multiple nodes that need
 * to be created. Cloning takes less time than creation.
 *
 * @private
 * @param {XML Doc} doc
 * @returns {_L8.Anonym$0._buildCache.Anonym$2}
 */
Worksheet.prototype._buildCache = function (doc) {
  var numberNode = doc.createElement('c');
  var value = doc.createElement('v');
  value.appendChild(doc.createTextNode('--temp--'));
  numberNode.appendChild(value);

  var formulaNode = doc.createElement('c');
  var formulaValue = doc.createElement('f');
  formulaValue.appendChild(doc.createTextNode('--temp--'));
  formulaNode.appendChild(formulaValue);

  var stringNode = doc.createElement('c');
  stringNode.setAttribute('t', 's');
  var stringValue = doc.createElement('v');
  stringValue.appendChild(doc.createTextNode('--temp--'));
  stringNode.appendChild(stringValue);

  return {
    number: numberNode,
    date: numberNode,
    string: stringNode,
    formula: formulaNode
  };
};

/**
 * Runs through the XML document and grabs all of the strings that will
 * be sent to the 'shared strings' document.
 *
 * @returns {Array}
 */
Worksheet.prototype.collectSharedStrings = function () {
  var data = this.data;
  var maxX = 0;
  var strings = {};

  for (var row = 0, l = data.length; row < l; row++) {
    var dataRow = data[row];
    var cellCount = dataRow.length;
    maxX = cellCount > maxX ? cellCount : maxX;

    for (var c = 0; c < cellCount; c++) {
      var cellValue = dataRow[c];
      var metadata = cellValue && cellValue.metadata || {};
      if (cellValue && typeof cellValue === 'object') {
        cellValue = cellValue.value;
      }

      if (!metadata.type) {
        if (typeof cellValue === 'number') {
          metadata.type = 'number';
        }
      }
      if (metadata.type === 'text' || !metadata.type) {
        if (typeof strings[cellValue] === 'undefined') {
          strings[cellValue] = true;
        }
      }
    }
  }

  return _.keys(strings);
};

Worksheet.prototype.toXML = function () {
  var data = this.data;
  var columns = this.columns || [];
  var doc = util.createXmlDoc(util.schemas.spreadsheetml, 'worksheet');
  var worksheet = doc.documentElement;
  var i, l, row;
  worksheet.setAttribute('xmlns:r', util.schemas.relationships);
  worksheet.setAttribute('xmlns:mc', util.schemas.markupCompat);
  
  var maxX = 0;
  var sheetData = util.createElement(doc, 'sheetData');
  
  var cellCache = this._buildCache(doc);
  
  for (row = 0, l = data.length; row < l; row++) {
    var dataRow = data[row];
    var cellCount = dataRow.length;
    maxX = cellCount > maxX ? cellCount : maxX;
    var rowNode = doc.createElement('row');
    
    for (var c = 0; c < cellCount; c++) {
      columns[c] = columns[c] || {};
      var cellValue = dataRow[c];
      var cell, metadata = cellValue && cellValue.metadata || {};

      if (cellValue && typeof cellValue === 'object') {
        cellValue = cellValue.value;
      }

      if (!metadata.type) {
        if (typeof cellValue === 'number') {
          metadata.type = 'number';
        }
      }

      switch(metadata.type) {
        case "number":
          cell = cellCache.number.cloneNode(true);
          cell.firstChild.firstChild.nodeValue = cellValue;
          break;
        case "date":
          cell = cellCache.date.cloneNode(true);
          cell.firstChild.firstChild.nodeValue = 25569.0 + ((cellValue - this._timezoneOffset)  / (60 * 60 * 24 * 1000));
          break;
        case "formula":
          cell = cellCache.formula.cloneNode(true);
          cell.firstChild.firstChild.nodeValue = cellValue;
          break;
        case "text":
          /*falls through*/
        default:
          var id;
          if (typeof this.sharedStrings.strings[cellValue] !== 'undefined') {
              id = this.sharedStrings.strings[cellValue];
          } else {
              id = this.sharedStrings.addString(cellValue);
          }
          cell = cellCache.string.cloneNode(true);
          cell.firstChild.firstChild.nodeValue = id;
          break;
      }

      if (metadata.style) {
        cell.setAttribute('s', metadata.style);
      }

      cell.setAttribute('r', util.positionToLetterRef(c + 1, row + 1));
      rowNode.appendChild(cell);
    }
    rowNode.setAttribute('r', row + 1);

    if (this._rowInstructions) {
      var rowInst = this._rowInstructions;

      for (var i = 0; i < data.length; i++) {
        if (rowInst.height !== undefined) {
          rowNode.setAttribute('customHeight', '1');
          rowNode.setAttribute('ht', rowInst.height);
        }

        if (rowInst.style !== undefined) {
          rowNode.setAttribute('customFormat', '1');
          rowNode.setAttribute('s', rowInst.style);
        }
      }
    }

    sheetData.appendChild(rowNode);
  } 
  
  if (maxX !== 0) {
    worksheet.appendChild(util.createElement(doc, 'dimension', [
        ['ref',  util.positionToLetterRef(1, 1) + ':' + util.positionToLetterRef(maxX, data.length)]
    ]));
  } else {
    worksheet.appendChild(util.createElement(doc, 'dimension', [
        ['ref',  util.positionToLetterRef(1, 1)]
    ]));
  }
  
  if (this.columns.length) {
     worksheet.appendChild(this.exportColumns(doc));
  }
  worksheet.appendChild(sheetData);

  // 'mergeCells' should be written before 'headerFoot' and 'drawing' due to issue
  // with Microsoft Excel (2007, 2013)
  if (this.mergedCells.length > 0) {
    var mergeCells = doc.createElement('mergeCells');
    for (i = 0, l = this.mergedCells.length; i < l; i++) {
      var mergeCell = doc.createElement('mergeCell');
      mergeCell.setAttribute('ref', this.mergedCells[i][0] + ':' + this.mergedCells[i][1]);
      mergeCells.appendChild(mergeCell);
    }
    worksheet.appendChild(mergeCells);
  }
  
  this.exportPageSettings(doc, worksheet);
  
  if (this._headers.length > 0 || this._footers.length > 0) {
    var headerFooter = doc.createElement('headerFooter');
    if (this._headers.length > 0) {
      headerFooter.appendChild(this.exportHeader(doc));
    }

    if (this._footers.length > 0) {
      headerFooter.appendChild(this.exportFooter(doc));
    }
    worksheet.appendChild(headerFooter);
  }
  
  if (this._tables.length > 0) {
    var tables = doc.createElement('tableParts');
    tables.setAttribute('count', this._tables.length);

    for (i = 0, l = this._tables.length; i < l; i++) {
        var table = doc.createElement('tablePart');
        table.setAttribute('r:id', this.relations.getRelationshipId(this._tables[i]));
        tables.appendChild(table);
    }
    worksheet.appendChild(tables);
  }

  // the 'drawing' element should be written last, after 'headerFooter', 'mergeCells', etc. due
  // to issue with Microsoft Excel (2007, 2013)
  for (i = 0, l = this._drawings.length; i < l; i++) {
    var drawing = doc.createElement('drawing');
    drawing.setAttribute('r:id', this.relations.getRelationshipId(this._drawings[i]));
    worksheet.appendChild(drawing);
  }

  return doc;
};

/**
 *
 * @param {XML Doc} doc
 * @returns {XML Node}
 */
Worksheet.prototype.exportColumns = function (doc) {
  var cols = util.createElement(doc, 'cols');
  for (var i = 0, l = this.columns.length; i < l; i++) {
    var cd = this.columns[i];
    var col = util.createElement(doc, 'col', [
      ['min', cd.min || i + 1],
      ['max', cd.max || i + 1]
    ]);

    if (cd.hidden) {
      col.setAttribute('hidden', 1);
    }

    if (cd.bestFit) {
      col.setAttribute('bestFit', 1);
    }

    if (cd.customWidth || cd.width) {
      col.setAttribute('customWidth', 1);
    }

    if (cd.width) {
      col.setAttribute('width', cd.width);
    } else {
      col.setAttribute('width', 9.140625);
    }

    cols.appendChild(col);
  }

  return cols;
};

/**
 * Sets the page settings on a worksheet node.
 *
 * @param {XML Doc} doc
 * @param {XML Node} worksheet
 * @returns {undefined}
 */
Worksheet.prototype.exportPageSettings = function (doc, worksheet) {
  if(this._orientation) {
    worksheet.appendChild(util.createElement(doc, 'pageSetup', [
      ['orientation', this._orientation]
    ]));
  }
};

/**
 * http://www.schemacentral.com/sc/ooxml/t-ssml_ST_Orientation.html
 *
 * Can be one of 'portrait' or 'landscape'.
 *
 * @param {String} orientation
 * @returns {undefined}
 */
Worksheet.prototype.setPageOrientation = function (orientation) {
  this._orientation = orientation;
};

/**
 * Expects an array of column definitions. Each column definition needs to have a width assigned to it.
 *
 * @param {Array} columns
 */
Worksheet.prototype.setColumns = function (columns) {
  this.columns = columns;
};

/**
 * Expects an array of data to be translated into cells.
 *
 * @param {Array} data Two dimensional array - [ [A1, A2], [B1, B2] ]
 * @see <a href='/cookbook/addingDataToAWorksheet.html'>Adding data to a worksheet</a>
 */
Worksheet.prototype.setData = function (data) {
  this.data = data;
};

/**
 * Merge cells in given range
 *
 * @param cell1 - A1, A2...
 * @param cell2 - A2, A3...
 */
Worksheet.prototype.mergeCells = function(cell1, cell2) {
  this.mergedCells.push([cell1, cell2]);
};

/**
 * Expects an array containing an object full of column format definitions.
 * http://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.column.aspx
 * bestFit
 * collapsed
 * customWidth
 * hidden
 * max
 * min
 * outlineLevel
 * phonetic
 * style
 * width
 * @param {Array} columnFormats
 */
Worksheet.prototype.setColumnFormats = function (columnFormats) {
  this.columnFormats = columnFormats;
};

module.exports = Worksheet;
},{"./RelationshipManager":22,"./util":29,"underscore":150}],28:[function(require,module,exports){
'use strict';

var _ = require('underscore');

var XMLDOM = function (ns, rootNodeName) {
  this.documentElement = this.createElement(rootNodeName);
  this.documentElement.setAttribute('xmlns', ns);
};

XMLDOM.prototype.createElement = function (name) {
  return new XMLDOM.XMLNode({
    nodeName: name
  });
};

XMLDOM.prototype.createTextNode = function (text) {
  return new XMLDOM.TextNode(text);
};

XMLDOM.prototype.toString = function () {
  return this.documentElement.toString();
};

XMLDOM.Node = function () {};

XMLDOM.Node.Create = function (config) {
  switch(config.type) {
    case 'XML':
      return new XMLDOM.XMLNode(config);
    case 'TEXT':
      return new XMLDOM.TextNode(config.nodeValue);
  }
};

XMLDOM.TextNode = function (text) {
  this.nodeValue = text;
};

XMLDOM.TextNode.prototype.toJSON = function () {
  return {
    nodeValue: this.nodeValue,
    type: 'TEXT'
  };
};

XMLDOM.TextNode.prototype.toString = function () {
  return _.escape(this.nodeValue);
};

XMLDOM.XMLNode = function (config) {
  this.nodeName = config.nodeName;
  this.children = [];
  this.nodeValue = config.nodeValue || '';
  this.attributes = {};

  if(config.children) {
    for(var i = 0; i < config.children.length; i++) {
      this.appendChild(XMLDOM.Node.Create(config.children[i]));
    }
  }

  if(config.attributes) {
    for(var attr in config.attributes) {
      if(config.attributes.hasOwnProperty(attr)) {
        this.setAttribute(attr, config.attributes[attr]);
      }
    }
  }
};

XMLDOM.XMLNode.prototype.toString = function () {
  var string = '<' + this.nodeName;
  var attrs = [];
  for(var attr in this.attributes) {
    if(this.attributes.hasOwnProperty(attr)) {
      attrs.push(attr + '="' + _.escape(this.attributes[attr]) + '"');
    }
  }
  if (attrs.length > 0){
    string+= ' ' + attrs.join(' ');
  }

  var childContent = '';
  for(var i = 0, l = this.children.length; i < l; i++) {
    childContent += this.children[i].toString();
  }

  if (childContent){
    string +=  '>' + childContent + '</' + this.nodeName + '>';
  } else {
    string += '/>';
  }

  return string;
};

XMLDOM.XMLNode.prototype.toJSON = function () {
  var children = [];
  for (var i = 0, l = this.children.length; i < l; i++) {
    children.push(this.children[i].toJSON());
  }

  return {
    nodeName: this.nodeName,
    children: children,
    nodeValue: this.nodeValue,
    attributes: this.attributes,
    type: 'XML'
  };
};

XMLDOM.XMLNode.prototype.setAttribute = function (name, val) {
  if (val === null) {
    delete this.attributes[name];
    delete this[name];
    return;
  }

  this.attributes[name] = val;
  this[name] = val;
};

XMLDOM.XMLNode.prototype.setAttributeNS = function (ns, name, val) {
  this.setAttribute(name, val);
};

XMLDOM.XMLNode.prototype.appendChild = function (child) {
  this.children.push(child);
  this.firstChild = this.children[0];
};

XMLDOM.XMLNode.prototype.cloneNode = function () {
  return new XMLDOM.XMLNode(this.toJSON());
};

module.exports = XMLDOM;

},{"underscore":150}],29:[function(require,module,exports){
'use strict';

var XMLDOM = require('./XMLDOM');
var fs = require('fs');

module.exports = {
  _idSpaces: {},

  /**
   * Returns a number based on a namespace. So, running with 'Picture' will return 1. Run again, you will get 2. Run with 'Foo', you'll get 1.
   * @param {String} space
   * @returns {Number}
   */
  uniqueId: function (space) {
    if(!this._idSpaces[space]) {
      this._idSpaces[space] = 1;
    }
    return this._idSpaces[space]++;
  },

  /**
   * Attempts to create an XML document. Due to limitations in web workers,
   * it may return a 'fake' xml document created from the XMLDOM.js file.
   *
   * Takes a namespace to start the xml file in, as well as the root element
   * of the xml file.
   *
   * @param {type} ns
   * @param {type} base
   * @returns {ActiveXObject|@exp;document@pro;implementation@call;createDocument|@new;XMLDOM}
   */
  createXmlDoc: function (ns, base) {
    return new XMLDOM(ns || null, base, null);
  },

  /**
   * Creates an xml node (element). Used to simplify some calls, as IE is
   * very particular about namespaces and such.
   *
   * @param {XMLDOM} doc An xml document (actual DOM or fake DOM, not a string)
   * @param {type} name The name of the element
   * @param {type} attributes
   * @returns {XML Node}
   */
  createElement: function (doc, name, attributes) {
    var el = doc.createElement(name);
    var ie = !el.setAttributeNS;
    attributes = attributes || [];
    var i = attributes.length;
    while (i--) {
      if(!ie && attributes[i][0].indexOf('xmlns') !== -1) {
        el.setAttributeNS('http://www.w3.org/2000/xmlns/', attributes[i][0], attributes[i][1]);
      } else {
        el.setAttribute(attributes[i][0], attributes[i][1]);
      }
    }
    return el;
  },

  LETTER_REFS: {},

  positionToLetterRef: function (x, y) {
    var digit = 1, index, num = x, string = '', alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if(this.LETTER_REFS[x]) {
      return this.LETTER_REFS[x].concat(y);
    }
    while (num > 0) {
      num -= Math.pow(26, digit -1);
      index = num % Math.pow(26, digit);
      num -= index;
      index = index / Math.pow(26, digit - 1);
      string = alphabet.charAt(index) + string;
      digit += 1;
    }
    this.LETTER_REFS[x] = string;
    return string.concat(y);
  },

  base64Encode: function (file) {
    var bitmap = fs.readFileSync(file);
    return new Buffer(bitmap).toString('base64');
  },

  base64Decode: function (base64str, file) {
    var bitmap = new Buffer(base64str, 'base64');
    fs.writeFileSync(file, bitmap);
  },


  schemas: {
    'worksheet': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
    'sharedStrings': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
    'stylesheet': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
    'relationships': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
    'relationshipPackage': 'http://schemas.openxmlformats.org/package/2006/relationships',
    'contentTypes': 'http://schemas.openxmlformats.org/package/2006/content-types',
    'spreadsheetml': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
    'markupCompat': 'http://schemas.openxmlformats.org/markup-compatibility/2006',
    'x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',
    'officeDocument': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
    'package': 'http://schemas.openxmlformats.org/package/2006/relationships',
    'table': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',
    'spreadsheetDrawing': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',
    'drawing': 'http://schemas.openxmlformats.org/drawingml/2006/main',
    'drawingRelationship': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
    'image': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
    'chart': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart'
  }
};

},{"./XMLDOM":28,"fs":undefined}],30:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var JSZip = require('jszip');

var Drawings = require('./Excel/Drawings');
var Paths = require('./Excel/Paths');
var Positioning = require('./Excel/Positioning');
var RelationshipManager = require('./Excel/RelationshipManager');
var SharedStrings = require('./Excel/SharedStrings');
var StyleSheet = require('./Excel/StyleSheet');
var Table = require('./Excel/Table');
var util = require('./Excel/util');
var Workbook = require('./Excel/Workbook');
var Worksheet = require('./Excel/Worksheet');
//var WorksheetExportWorker = require('./Excel/WorksheetExportWorker');
var XMLDOM = require('./Excel/XMLDOM');
//var Worker = require('./Excel/ZipWorker');

var AbsoluteAnchor = require('./Excel/Drawing/AbsoluteAnchor');
var Chart  = require('./Excel/Drawing/Chart');
var Drawing = require('./Excel/Drawing/Drawing');
var OneCellAnchor = require('./Excel/Drawing/OneCellAnchor');
var Picture = require('./Excel/Drawing/Picture');
var TwoCellAnchor = require('./Excel/Drawing/TwoCellAnchor');

module.exports = {
  Drawings: Drawings,
  Paths: Paths,
  Positioning: Positioning,
  RelationshipManager: RelationshipManager,
  SharedStrings: SharedStrings,
  StyleSheet: StyleSheet,
  Table: Table,
  util: util,
  Worksheet: Worksheet,
  //WorksheetExportWorker: WorksheetExportWorker,
  XMLDOM: XMLDOM,

  AbsoluteAnchor: AbsoluteAnchor,
  Chart: Chart,
  Drawing: Drawing,
  OneCellAnchor: OneCellAnchor,
  Picture: Picture,
  TwoCellAnchor: TwoCellAnchor,
  
  /**
   * Creates a new workbook.
   */
  createWorkbook: function () {
    return new Workbook();
  },
  
  /**
   * Turns a workbook into a downloadable file. 
   * @param {Excel/Workbook} workbook The workbook that is being converted
   * @param {Object} options
   * @param {Boolean} options.base64 Whether to 'return' the generated file as a base64 string
   * @param {Function} options.success The callback function to run after workbook creation is successful.
   * @param {Function} options.error The callback function to run if there is an error creating the workbook.
   * @param {String} options.requireJsPath (Optional) The path to requirejs. Will use the id 'requirejs' to look up the script if not specified.
   */
  createFileAsync: function (workbook, options) {
    // workbook.generateFilesAsync({
    //   success: function (files) {
    //     var worker = new Worker();
    //     worker.addEventListener('message', function (event, data) {
    //       if(event.data.status === 'done') {
    //         options.success(event.data.data);
    //       }
    //     });
    //     worker.postMessage({
    //       files: files,
    //       ziplib: require.toUrl('JSZip'),
    //       base64: (!options || options.base64 !== false)
    //     });
    //   },
    //   error: function () {
    //     options.error();
    //   }
    // });
  },
  
  /**
   * Turns a workbook into a downloadable file.
   * @param {Excel/Workbook} workbook The workbook that is being converted
   * @param {Object} options - options to modify how the zip is created. See http://stuk.github.io/jszip/#doc_generate_options
   */
  createFile: function (workbook, options) {
    var zip = new JSZip();
    var files = workbook.generateFiles();
    
    _.each(files, function (content, path) {
      path = path.substr(1);
      if (path.indexOf('.xml') !== -1 || path.indexOf('.rel') !== -1) {
        zip.file(path, content, {base64: false});
      } else {
        zip.file(path, content, {base64: true, binary: true});
      }
    });

    return zip.generate(_.defaults(options || {}, {
      type: 'base64'
    }));
  }
};
},{"./Excel/Drawing/AbsoluteAnchor":13,"./Excel/Drawing/Chart":14,"./Excel/Drawing/Drawing":15,"./Excel/Drawing/OneCellAnchor":16,"./Excel/Drawing/Picture":17,"./Excel/Drawing/TwoCellAnchor":18,"./Excel/Drawings":19,"./Excel/Paths":20,"./Excel/Positioning":21,"./Excel/RelationshipManager":22,"./Excel/SharedStrings":23,"./Excel/StyleSheet":24,"./Excel/Table":25,"./Excel/Workbook":26,"./Excel/Worksheet":27,"./Excel/XMLDOM":28,"./Excel/util":29,"jszip":75,"underscore":150}],31:[function(require,module,exports){
'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {/**/}

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						target[name] = copy;
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


},{}],32:[function(require,module,exports){
var CombinedStream = require('combined-stream');
var util = require('util');
var path = require('path');
var http = require('http');
var https = require('https');
var parseUrl = require('url').parse;
var fs = require('fs');
var mime = require('mime-types');
var async = require('async');
var populate = require('./populate.js');

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 */
function FormData() {
  if (!(this instanceof FormData)) {
    throw new TypeError('Failed to construct FormData: Please use the _new_ operator, this object constructor cannot be called as a function.');
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._lengthRetrievers = [];

  CombinedStream.call(this);
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response
  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._lengthRetrievers.push(function(next) {

      if (value.hasOwnProperty('fd')) {

        // take read range into a account
        // `end` = Infinity –> read file till the end
        //
        // TODO: Looks like there is bug in Node fs.createReadStream
        // it doesn't respect `end` options without `start` options
        // Fix it when node fixes it.
        // https://github.com/joyent/node/issues/7819
        if (value.end != undefined && value.end != Infinity && value.start != undefined) {

          // when end specified
          // no need to calculate range
          // inclusive, starts with 0
          next(null, value.end + 1 - (value.start ? value.start : 0));

        // not that fast snoopy
        } else {
          // still need to fetch file size from fs
          fs.stat(value.path, function(err, stat) {

            var fileSize;

            if (err) {
              next(err);
              return;
            }

            // update final size based on the range options
            fileSize = stat.size - (value.start ? value.start : 0);
            next(null, fileSize);
          });
        }

      // or http response
      } else if (value.hasOwnProperty('httpVersion')) {
        next(null, +value.headers['content-length']);

      // or request stream http://github.com/mikeal/request
      } else if (value.hasOwnProperty('httpModule')) {
        // wait till response come back
        value.on('response', function(response) {
          value.pause();
          next(null, +response.headers['content-length']);
        });
        value.resume();

      // something else
      } else {
        next('Unknown stream');
      }
    });
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (options.header) {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  for (var prop in headers) {
    if (headers[prop].length) {
      contents += prop + ': ' + headers[prop].join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {

  var contentDisposition;

  // custom filename takes precedence
  // fs- and request- streams have path property
  var filename = options.filename || value.path;

  // or try http response
  if (!filename && value.readable && value.hasOwnProperty('httpVersion')) {
    filename = value.client._httpMessage.path;
  }

  if (filename) {
    contentDisposition = 'filename="' + path.basename(filename) + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filename
  if (!contentType && options.filename) {
    contentType = mime.lookup(options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.getCustomHeaders = function(contentType) {
  contentType = contentType ? contentType : 'multipart/form-data';

  var formHeaders = {
    'content-type': contentType + '; boundary=' + this.getBoundary(),
    'content-length': this.getLengthSync()
  };

  return formHeaders;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (this._lengthRetrievers.length) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._lengthRetrievers.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  async.parallel(this._lengthRetrievers, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err) {
      this._error(err);
      return;
    }

    // add content length
    request.setHeader('Content-Length', length);

    this.pipe(request);
    if (cb) {
      request.on('error', cb);
      request.on('response', cb.bind(this, null));
    }
  }.bind(this));

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

},{"./populate.js":33,"async":34,"combined-stream":4,"fs":undefined,"http":undefined,"https":undefined,"mime-types":94,"path":undefined,"url":undefined,"util":undefined}],33:[function(require,module,exports){
// populates missing values
module.exports = function(dst, src) {
  for (var prop in src) {
    if (src.hasOwnProperty(prop) && !dst[prop]) {
      dst[prop] = src[prop];
    }
  }
  return dst;
};

},{}],34:[function(require,module,exports){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () {

    var async = {};
    function noop() {}
    function identity(v) {
        return v;
    }
    function toBool(v) {
        return !!v;
    }
    function notId(v) {
        return !v;
    }

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global ||
            this;

    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        return function() {
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        };
    }

    function _once(fn) {
        return function() {
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        };
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    // Ported from underscore.js isObject
    var _isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    function _isArrayLike(arr) {
        return _isArray(arr) || (
            // has a positive integer length property
            typeof arr.length === "number" &&
            arr.length >= 0 &&
            arr.length % 1 === 0
        );
    }

    function _arrayEach(arr, iterator) {
        var index = -1,
            length = arr.length;

        while (++index < length) {
            iterator(arr[index], index, arr);
        }
    }

    function _map(arr, iterator) {
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iterator(arr[index], index, arr);
        }
        return result;
    }

    function _range(count) {
        return _map(Array(count), function (v, i) { return i; });
    }

    function _reduce(arr, iterator, memo) {
        _arrayEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    }

    function _forEachOf(object, iterator) {
        _arrayEach(_keys(object), function (key) {
            iterator(object[key], key);
        });
    }

    function _indexOf(arr, item) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === item) return i;
        }
        return -1;
    }

    var _keys = Object.keys || function (obj) {
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    function _keyIterator(coll) {
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) {
            len = coll.length;
            return function next() {
                i++;
                return i < len ? i : null;
            };
        } else {
            keys = _keys(coll);
            len = keys.length;
            return function next() {
                i++;
                return i < len ? keys[i] : null;
            };
        }
    }

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) {
                rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
                case 0: return func.call(this, rest);
                case 1: return func.call(this, arguments[0], rest);
            }
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) {
            //     args[index] = arguments[index];
            // }
            // args[startIndex] = rest;
            // return func.apply(this, args);
        };
    }

    function _withoutIndex(iterator) {
        return function (value, index, callback) {
            return iterator(value, callback);
        };
    }

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function(fn) {
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    } : function(fn) {
        setTimeout(fn, 0);
    };

    if (typeof process === 'object' && typeof process.nextTick === 'function') {
        async.nextTick = process.nextTick;
    } else {
        async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;


    async.forEach =
    async.each = function (arr, iterator, callback) {
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    };

    async.forEachSeries =
    async.eachSeries = function (arr, iterator, callback) {
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };


    async.forEachLimit =
    async.eachLimit = function (arr, limit, iterator, callback) {
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };

    async.forEachOf =
    async.eachOf = function (object, iterator, callback) {
        callback = _once(callback || noop);
        object = object || [];

        var iter = _keyIterator(object);
        var key, completed = 0;

        while ((key = iter()) != null) {
            completed += 1;
            iterator(object[key], key, only_once(done));
        }

        if (completed === 0) callback(null);

        function done(err) {
            completed--;
            if (err) {
                callback(err);
            }
            // Check key is null in case iterator isn't exhausted
            // and done resolved synchronously.
            else if (key === null && completed <= 0) {
                callback(null);
            }
        }
    };

    async.forEachOfSeries =
    async.eachOfSeries = function (obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() {
            var sync = true;
            if (key === null) {
                return callback(null);
            }
            iterator(obj[key], key, only_once(function (err) {
                if (err) {
                    callback(err);
                }
                else {
                    key = nextKey();
                    if (key === null) {
                        return callback(null);
                    } else {
                        if (sync) {
                            async.setImmediate(iterate);
                        } else {
                            iterate();
                        }
                    }
                }
            }));
            sync = false;
        }
        iterate();
    };



    async.forEachOfLimit =
    async.eachOfLimit = function (obj, limit, iterator, callback) {
        _eachOfLimit(limit)(obj, iterator, callback);
    };

    function _eachOfLimit(limit) {

        return function (obj, iterator, callback) {
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) {
                return callback(null);
            }
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish () {
                if (done && running <= 0) {
                    return callback(null);
                }

                while (running < limit && !errored) {
                    var key = nextKey();
                    if (key === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) {
                        running -= 1;
                        if (err) {
                            callback(err);
                            errored = true;
                        }
                        else {
                            replenish();
                        }
                    }));
                }
            })();
        };
    }


    function doParallel(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOf, obj, iterator, callback);
        };
    }
    function doParallelLimit(fn) {
        return function (obj, limit, iterator, callback) {
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        };
    }
    function doSeries(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOfSeries, obj, iterator, callback);
        };
    }

    function _asyncMap(eachfn, arr, iterator, callback) {
        callback = _once(callback || noop);
        arr = arr || [];
        var results = _isArrayLike(arr) ? [] : {};
        eachfn(arr, function (value, index, callback) {
            iterator(value, function (err, v) {
                results[index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    }

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject =
    async.foldl =
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachOfSeries(arr, function (x, i, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };

    async.foldr =
    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };

    async.transform = function (arr, memo, iterator, callback) {
        if (arguments.length === 3) {
            callback = iterator;
            iterator = memo;
            memo = _isArray(arr) ? [] : {};
        }

        async.eachOf(arr, function(v, k, cb) {
            iterator(memo, v, k, cb);
        }, function(err) {
            callback(err, memo);
        });
    };

    function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        eachfn(arr, function (x, index, callback) {
            iterator(x, function (v) {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            });
        }, function () {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    }

    async.select =
    async.filter = doParallel(_filter);

    async.selectLimit =
    async.filterLimit = doParallelLimit(_filter);

    async.selectSeries =
    async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) {
        _filter(eachfn, arr, function(value, cb) {
            iterator(value, function(v) {
                cb(!v);
            });
        }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) {
        return function(arr, limit, iterator, cb) {
            function done() {
                if (cb) cb(getResult(false, void 0));
            }
            function iteratee(x, _, callback) {
                if (!cb) return callback();
                iterator(x, function (v) {
                    if (cb && check(v)) {
                        cb(getResult(true, x));
                        cb = iterator = false;
                    }
                    callback();
                });
            }
            if (arguments.length > 3) {
                eachfn(arr, limit, iteratee, done);
            } else {
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            }
        };
    }

    async.any =
    async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all =
    async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) {
        return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                callback(null, _map(results.sort(comparator), function (x) {
                    return x.value;
                }));
            }

        });

        function comparator(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    };

    async.auto = function (tasks, concurrency, callback) {
        if (typeof arguments[1] === 'function') {
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        }
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) {
            return callback(null);
        }
        if (!concurrency) {
            concurrency = remainingTasks;
        }

        var results = {};
        var runningTasks = 0;

        var hasError = false;

        var listeners = [];
        function addListener(fn) {
            listeners.unshift(fn);
        }
        function removeListener(fn) {
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        }
        function taskComplete() {
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) {
                fn();
            });
        }

        addListener(function () {
            if (!remainingTasks) {
                callback(null, results);
            }
        });

        _arrayEach(keys, function (k) {
            if (hasError) return;
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = _restParam(function(err, args) {
                runningTasks--;
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _forEachOf(results, function(val, rkey) {
                        safeResults[rkey] = val;
                    });
                    safeResults[k] = args;
                    hasError = true;

                    callback(err, safeResults);
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            });
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) {
                if (!(dep = tasks[requires[len]])) {
                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                }
                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                    throw new Error('Has cyclic dependencies');
                }
            }
            function ready() {
                return runningTasks < concurrency && _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            }
            if (ready()) {
                runningTasks++;
                task[task.length - 1](taskCallback, results);
            }
            else {
                addListener(listener);
            }
            function listener() {
                if (ready()) {
                    runningTasks++;
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                }
            }
        });
    };



    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = {
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        };

        function parseTimes(acc, t){
            if(typeof t === 'number'){
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            } else if(typeof t === 'object'){
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            } else {
                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
            }
        }

        var length = arguments.length;
        if (length < 1 || length > 3) {
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        } else if (length <= 2 && typeof times === 'function') {
            callback = task;
            task = times;
        }
        if (typeof times !== 'function') {
            parseTimes(opts, times);
        }
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) {
            function retryAttempt(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            }

            function retryInterval(interval){
                return function(seriesCallback){
                    setTimeout(function(){
                        seriesCallback(null);
                    }, interval);
                };
            }

            while (opts.times) {

                var finalAttempt = !(opts.times-=1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if(!finalAttempt && opts.interval > 0){
                    attempts.push(retryInterval(opts.interval));
                }
            }

            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            });
        }

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    };

    async.waterfall = function (tasks, callback) {
        callback = _once(callback || noop);
        if (!_isArray(tasks)) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        function wrapIterator(iterator) {
            return _restParam(function (err, args) {
                if (err) {
                    callback.apply(null, [err].concat(args));
                }
                else {
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    ensureAsync(iterator).apply(null, args);
                }
            });
        }
        wrapIterator(async.iterator(tasks))();
    };

    function _parallel(eachfn, tasks, callback) {
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : {};

        eachfn(tasks, function (task, key, callback) {
            task(_restParam(function (err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                results[key] = args;
                callback(err);
            }));
        }, function (err) {
            callback(err, results);
        });
    }

    async.parallel = function (tasks, callback) {
        _parallel(async.eachOf, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel(_eachOfLimit(limit), tasks, callback);
    };

    async.series = function(tasks, callback) {
        _parallel(async.eachOfSeries, tasks, callback);
    };

    async.iterator = function (tasks) {
        function makeCallback(index) {
            function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            }
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        }
        return makeCallback(0);
    };

    async.apply = _restParam(function (fn, args) {
        return _restParam(function (callArgs) {
            return fn.apply(
                null, args.concat(callArgs)
            );
        });
    });

    function _concat(eachfn, arr, fn, callback) {
        var result = [];
        eachfn(arr, function (x, index, cb) {
            fn(x, function (err, y) {
                result = result.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, result);
        });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        callback = callback || noop;
        if (test()) {
            var next = _restParam(function(err, args) {
                if (err) {
                    callback(err);
                } else if (test.apply(this, args)) {
                    iterator(next);
                } else {
                    callback.apply(null, [null].concat(args));
                }
            });
            iterator(next);
        } else {
            callback(null);
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var calls = 0;
        return async.whilst(function() {
            return ++calls <= 1 || test.apply(this, arguments);
        }, iterator, callback);
    };

    async.until = function (test, iterator, callback) {
        return async.whilst(function() {
            return !test.apply(this, arguments);
        }, iterator, callback);
    };

    async.doUntil = function (iterator, test, callback) {
        return async.doWhilst(iterator, function() {
            return !test.apply(this, arguments);
        }, callback);
    };

    async.during = function (test, iterator, callback) {
        callback = callback || noop;

        var next = _restParam(function(err, args) {
            if (err) {
                callback(err);
            } else {
                args.push(check);
                test.apply(this, args);
            }
        });

        var check = function(err, truth) {
            if (err) {
                callback(err);
            } else if (truth) {
                iterator(next);
            } else {
                callback(null);
            }
        };

        test(check);
    };

    async.doDuring = function (iterator, test, callback) {
        var calls = 0;
        async.during(function(next) {
            if (calls++ < 1) {
                next(null, true);
            } else {
                test.apply(this, arguments);
            }
        }, iterator, callback);
    };

    function _queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        }
        else if(concurrency === 0) {
            throw new Error('Concurrency must not be zero');
        }
        function _insert(q, data, pos, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    callback: callback || noop
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
            });
            async.setImmediate(q.process);
        }
        function _next(q, tasks) {
            return function(){
                workers -= 1;

                var removed = false;
                var args = arguments;
                _arrayEach(tasks, function (task) {
                    _arrayEach(workersList, function (worker, index) {
                        if (worker === task && !removed) {
                            workersList.splice(index, 1);
                            removed = true;
                        }
                    });

                    task.callback.apply(task, args);
                });
                if (q.tasks.length + workers === 0) {
                    q.drain();
                }
                q.process();
            };
        }

        var workers = 0;
        var workersList = [];
        var q = {
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function (data, callback) {
                _insert(q, data, false, callback);
            },
            kill: function () {
                q.drain = noop;
                q.tasks = [];
            },
            unshift: function (data, callback) {
                _insert(q, data, true, callback);
            },
            process: function () {
                while(!q.paused && workers < q.concurrency && q.tasks.length){

                    var tasks = q.payload ?
                        q.tasks.splice(0, q.payload) :
                        q.tasks.splice(0, q.tasks.length);

                    var data = _map(tasks, function (task) {
                        return task.data;
                    });

                    if (q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    workersList.push(tasks[0]);
                    var cb = only_once(_next(q, tasks));
                    worker(data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            workersList: function () {
                return workersList;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                q.paused = true;
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    }

    async.queue = function (worker, concurrency) {
        var q = _queue(function (items, cb) {
            worker(items[0], cb);
        }, concurrency, 1);

        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b){
            return a.priority - b.priority;
        }

        function _binarySearch(sequence, item, compare) {
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) {
                var mid = beg + ((end - beg + 1) >>> 1);
                if (compare(item, sequence[mid]) >= 0) {
                    beg = mid;
                } else {
                    end = mid - 1;
                }
            }
            return beg;
        }

        function _insert(q, data, priority, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                };

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
            _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        return _queue(worker, 1, payload);
    };

    function _console_fn(name) {
        return _restParam(function (fn, args) {
            fn.apply(null, args.concat([_restParam(function (err, args) {
                if (typeof console === 'object') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _arrayEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            })]));
        });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        var has = Object.prototype.hasOwnProperty;
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) {
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (has.call(memo, key)) {   
                async.setImmediate(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (has.call(queues, key)) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) {
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, args);
                    }
                })]));
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    function _times(mapper) {
        return function (count, iterator, callback) {
            mapper(_range(count), iterator, callback);
        };
    }

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) {
        return async.mapLimit(_range(count), limit, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return _restParam(function (args) {
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') {
                args.pop();
            } else {
                callback = noop;
            }

            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                    cb(err, nextargs);
                })]));
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        });
    };

    async.compose = function (/* functions... */) {
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };


    function _applyEach(eachfn) {
        return _restParam(function(fns, args) {
            var go = _restParam(function(args) {
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) {
                    fn.apply(that, args.concat([cb]));
                },
                callback);
            });
            if (args.length) {
                return go.apply(this, args);
            }
            else {
                return go;
            }
        });
    }

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);


    async.forever = function (fn, callback) {
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) {
            if (err) {
                return done(err);
            }
            task(next);
        }
        next();
    };

    function ensureAsync(fn) {
        return _restParam(function (args) {
            var callback = args.pop();
            args.push(function () {
                var innerArgs = arguments;
                if (sync) {
                    async.setImmediate(function () {
                        callback.apply(null, innerArgs);
                    });
                } else {
                    callback.apply(null, innerArgs);
                }
            });
            var sync = true;
            fn.apply(this, args);
            sync = false;
        });
    }

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function(values) {
        var args = [null].concat(values);
        return function (callback) {
            return callback.apply(this, args);
        };
    });

    async.wrapSync =
    async.asyncify = function asyncify(func) {
        return _restParam(function (args) {
            var callback = args.pop();
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") {
                result.then(function(value) {
                    callback(null, value);
                })["catch"](function(err) {
                    callback(err.message ? err : new Error(err));
                });
            } else {
                callback(null, result);
            }
        });
    };

    // Node.js
    if (typeof module === 'object' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

},{}],35:[function(require,module,exports){
if (global.GENTLY) require = GENTLY.hijack(require);

var util = require('util'),
    WriteStream = require('fs').WriteStream,
    EventEmitter = require('events').EventEmitter,
    crypto = require('crypto');

function File(properties) {
  EventEmitter.call(this);

  this.size = 0;
  this.path = null;
  this.name = null;
  this.type = null;
  this.hash = null;
  this.lastModifiedDate = null;

  this._writeStream = null;
  
  for (var key in properties) {
    this[key] = properties[key];
  }

  if(typeof this.hash === 'string') {
    this.hash = crypto.createHash(properties.hash);
  } else {
    this.hash = null;
  }
}
module.exports = File;
util.inherits(File, EventEmitter);

File.prototype.open = function() {
  this._writeStream = new WriteStream(this.path);
};

File.prototype.toJSON = function() {
  return {
    size: this.size,
    path: this.path,
    name: this.name,
    type: this.type,
    mtime: this.lastModifiedDate,
    length: this.length,
    filename: this.filename,
    mime: this.mime
  };
};

File.prototype.write = function(buffer, cb) {
  var self = this;
  if (self.hash) {
    self.hash.update(buffer);
  }
  this._writeStream.write(buffer, function() {
    self.lastModifiedDate = new Date();
    self.size += buffer.length;
    self.emit('progress', self.size);
    cb();
  });
};

File.prototype.end = function(cb) {
  var self = this;
  if (self.hash) {
    self.hash = self.hash.digest('hex');
  }
  this._writeStream.end(function() {
    self.emit('end');
    cb();
  });
};

},{"crypto":undefined,"events":undefined,"fs":undefined,"util":undefined}],36:[function(require,module,exports){
if (global.GENTLY) require = GENTLY.hijack(require);

var crypto = require('crypto');
var fs = require('fs');
var util = require('util'),
    path = require('path'),
    File = require('./file'),
    MultipartParser = require('./multipart_parser').MultipartParser,
    QuerystringParser = require('./querystring_parser').QuerystringParser,
    OctetParser       = require('./octet_parser').OctetParser,
    JSONParser = require('./json_parser').JSONParser,
    StringDecoder = require('string_decoder').StringDecoder,
    EventEmitter = require('events').EventEmitter,
    Stream = require('stream').Stream,
    os = require('os');

function IncomingForm(opts) {
  if (!(this instanceof IncomingForm)) return new IncomingForm(opts);
  EventEmitter.call(this);

  opts=opts||{};

  this.error = null;
  this.ended = false;

  this.maxFields = opts.maxFields || 1000;
  this.maxFieldsSize = opts.maxFieldsSize || 2 * 1024 * 1024;
  this.keepExtensions = opts.keepExtensions || false;
  this.uploadDir = opts.uploadDir || os.tmpDir();
  this.encoding = opts.encoding || 'utf-8';
  this.headers = null;
  this.type = null;
  this.hash = opts.hash || false;
  this.multiples = opts.multiples || false;

  this.bytesReceived = null;
  this.bytesExpected = null;

  this._parser = null;
  this._flushing = 0;
  this._fieldsSize = 0;
  this.openedFiles = [];

  return this;
}
util.inherits(IncomingForm, EventEmitter);
exports.IncomingForm = IncomingForm;

IncomingForm.prototype.parse = function(req, cb) {
  this.pause = function() {
    try {
      req.pause();
    } catch (err) {
      // the stream was destroyed
      if (!this.ended) {
        // before it was completed, crash & burn
        this._error(err);
      }
      return false;
    }
    return true;
  };

  this.resume = function() {
    try {
      req.resume();
    } catch (err) {
      // the stream was destroyed
      if (!this.ended) {
        // before it was completed, crash & burn
        this._error(err);
      }
      return false;
    }

    return true;
  };

  // Setup callback first, so we don't miss anything from data events emitted
  // immediately.
  if (cb) {
    var fields = {}, files = {};
    this
      .on('field', function(name, value) {
        fields[name] = value;
      })
      .on('file', function(name, file) {
        if (this.multiples) {
          if (files[name]) {
            if (!Array.isArray(files[name])) {
              files[name] = [files[name]];
            }
            files[name].push(file);
          } else {
            files[name] = file;
          }
        } else {
          files[name] = file;
        }
      })
      .on('error', function(err) {
        cb(err, fields, files);
      })
      .on('end', function() {
        cb(null, fields, files);
      });
  }

  // Parse headers and setup the parser, ready to start listening for data.
  this.writeHeaders(req.headers);

  // Start listening for data.
  var self = this;
  req
    .on('error', function(err) {
      self._error(err);
    })
    .on('aborted', function() {
      self.emit('aborted');
      self._error(new Error('Request aborted'));
    })
    .on('data', function(buffer) {
      self.write(buffer);
    })
    .on('end', function() {
      if (self.error) {
        return;
      }

      var err = self._parser.end();
      if (err) {
        self._error(err);
      }
    });

  return this;
};

IncomingForm.prototype.writeHeaders = function(headers) {
  this.headers = headers;
  this._parseContentLength();
  this._parseContentType();
};

IncomingForm.prototype.write = function(buffer) {
  if (this.error) {
    return;
  }
  if (!this._parser) {
    this._error(new Error('uninitialized parser'));
    return;
  }

  this.bytesReceived += buffer.length;
  this.emit('progress', this.bytesReceived, this.bytesExpected);

  var bytesParsed = this._parser.write(buffer);
  if (bytesParsed !== buffer.length) {
    this._error(new Error('parser error, '+bytesParsed+' of '+buffer.length+' bytes parsed'));
  }

  return bytesParsed;
};

IncomingForm.prototype.pause = function() {
  // this does nothing, unless overwritten in IncomingForm.parse
  return false;
};

IncomingForm.prototype.resume = function() {
  // this does nothing, unless overwritten in IncomingForm.parse
  return false;
};

IncomingForm.prototype.onPart = function(part) {
  // this method can be overwritten by the user
  this.handlePart(part);
};

IncomingForm.prototype.handlePart = function(part) {
  var self = this;

  if (part.filename === undefined) {
    var value = ''
      , decoder = new StringDecoder(this.encoding);

    part.on('data', function(buffer) {
      self._fieldsSize += buffer.length;
      if (self._fieldsSize > self.maxFieldsSize) {
        self._error(new Error('maxFieldsSize exceeded, received '+self._fieldsSize+' bytes of field data'));
        return;
      }
      value += decoder.write(buffer);
    });

    part.on('end', function() {
      self.emit('field', part.name, value);
    });
    return;
  }

  this._flushing++;

  var file = new File({
    path: this._uploadPath(part.filename),
    name: part.filename,
    type: part.mime,
    hash: self.hash
  });

  this.emit('fileBegin', part.name, file);

  file.open();
  this.openedFiles.push(file);

  part.on('data', function(buffer) {
    if (buffer.length == 0) {
      return;
    }
    self.pause();
    file.write(buffer, function() {
      self.resume();
    });
  });

  part.on('end', function() {
    file.end(function() {
      self._flushing--;
      self.emit('file', part.name, file);
      self._maybeEnd();
    });
  });
};

function dummyParser(self) {
  return {
    end: function () {
      self.ended = true;
      self._maybeEnd();
      return null;
    }
  };
}

IncomingForm.prototype._parseContentType = function() {
  if (this.bytesExpected === 0) {
    this._parser = dummyParser(this);
    return;
  }

  if (!this.headers['content-type']) {
    this._error(new Error('bad content-type header, no content-type'));
    return;
  }

  if (this.headers['content-type'].match(/octet-stream/i)) {
    this._initOctetStream();
    return;
  }

  if (this.headers['content-type'].match(/urlencoded/i)) {
    this._initUrlencoded();
    return;
  }

  if (this.headers['content-type'].match(/multipart/i)) {
    var m = this.headers['content-type'].match(/boundary=(?:"([^"]+)"|([^;]+))/i);
    if (m) {
      this._initMultipart(m[1] || m[2]);
    } else {
      this._error(new Error('bad content-type header, no multipart boundary'));
    }
    return;
  }

  if (this.headers['content-type'].match(/json/i)) {
    this._initJSONencoded();
    return;
  }

  this._error(new Error('bad content-type header, unknown content-type: '+this.headers['content-type']));
};

IncomingForm.prototype._error = function(err) {
  if (this.error || this.ended) {
    return;
  }

  this.error = err;
  this.emit('error', err);

  if (Array.isArray(this.openedFiles)) {
    this.openedFiles.forEach(function(file) {
      file._writeStream.destroy();
      setTimeout(fs.unlink, 0, file.path, function(error) { });
    });
  }
};

IncomingForm.prototype._parseContentLength = function() {
  this.bytesReceived = 0;
  if (this.headers['content-length']) {
    this.bytesExpected = parseInt(this.headers['content-length'], 10);
  } else if (this.headers['transfer-encoding'] === undefined) {
    this.bytesExpected = 0;
  }

  if (this.bytesExpected !== null) {
    this.emit('progress', this.bytesReceived, this.bytesExpected);
  }
};

IncomingForm.prototype._newParser = function() {
  return new MultipartParser();
};

IncomingForm.prototype._initMultipart = function(boundary) {
  this.type = 'multipart';

  var parser = new MultipartParser(),
      self = this,
      headerField,
      headerValue,
      part;

  parser.initWithBoundary(boundary);

  parser.onPartBegin = function() {
    part = new Stream();
    part.readable = true;
    part.headers = {};
    part.name = null;
    part.filename = null;
    part.mime = null;

    part.transferEncoding = 'binary';
    part.transferBuffer = '';

    headerField = '';
    headerValue = '';
  };

  parser.onHeaderField = function(b, start, end) {
    headerField += b.toString(self.encoding, start, end);
  };

  parser.onHeaderValue = function(b, start, end) {
    headerValue += b.toString(self.encoding, start, end);
  };

  parser.onHeaderEnd = function() {
    headerField = headerField.toLowerCase();
    part.headers[headerField] = headerValue;

    var m = headerValue.match(/\bname="([^"]+)"/i);
    if (headerField == 'content-disposition') {
      if (m) {
        part.name = m[1];
      }

      part.filename = self._fileName(headerValue);
    } else if (headerField == 'content-type') {
      part.mime = headerValue;
    } else if (headerField == 'content-transfer-encoding') {
      part.transferEncoding = headerValue.toLowerCase();
    }

    headerField = '';
    headerValue = '';
  };

  parser.onHeadersEnd = function() {
    switch(part.transferEncoding){
      case 'binary':
      case '7bit':
      case '8bit':
      parser.onPartData = function(b, start, end) {
        part.emit('data', b.slice(start, end));
      };

      parser.onPartEnd = function() {
        part.emit('end');
      };
      break;

      case 'base64':
      parser.onPartData = function(b, start, end) {
        part.transferBuffer += b.slice(start, end).toString('ascii');

        /*
        four bytes (chars) in base64 converts to three bytes in binary
        encoding. So we should always work with a number of bytes that
        can be divided by 4, it will result in a number of buytes that
        can be divided vy 3.
        */
        var offset = parseInt(part.transferBuffer.length / 4, 10) * 4;
        part.emit('data', new Buffer(part.transferBuffer.substring(0, offset), 'base64'));
        part.transferBuffer = part.transferBuffer.substring(offset);
      };

      parser.onPartEnd = function() {
        part.emit('data', new Buffer(part.transferBuffer, 'base64'));
        part.emit('end');
      };
      break;

      default:
      return self._error(new Error('unknown transfer-encoding'));
    }

    self.onPart(part);
  };


  parser.onEnd = function() {
    self.ended = true;
    self._maybeEnd();
  };

  this._parser = parser;
};

IncomingForm.prototype._fileName = function(headerValue) {
  var m = headerValue.match(/\bfilename="(.*?)"($|; )/i);
  if (!m) return;

  var filename = m[1].substr(m[1].lastIndexOf('\\') + 1);
  filename = filename.replace(/%22/g, '"');
  filename = filename.replace(/&#([\d]{4});/g, function(m, code) {
    return String.fromCharCode(code);
  });
  return filename;
};

IncomingForm.prototype._initUrlencoded = function() {
  this.type = 'urlencoded';

  var parser = new QuerystringParser(this.maxFields)
    , self = this;

  parser.onField = function(key, val) {
    self.emit('field', key, val);
  };

  parser.onEnd = function() {
    self.ended = true;
    self._maybeEnd();
  };

  this._parser = parser;
};

IncomingForm.prototype._initOctetStream = function() {
  this.type = 'octet-stream';
  var filename = this.headers['x-file-name'];
  var mime = this.headers['content-type'];

  var file = new File({
    path: this._uploadPath(filename),
    name: filename,
    type: mime
  });

  this.emit('fileBegin', filename, file);
  file.open();

  this._flushing++;

  var self = this;

  self._parser = new OctetParser();

  //Keep track of writes that haven't finished so we don't emit the file before it's done being written
  var outstandingWrites = 0;

  self._parser.on('data', function(buffer){
    self.pause();
    outstandingWrites++;

    file.write(buffer, function() {
      outstandingWrites--;
      self.resume();

      if(self.ended){
        self._parser.emit('doneWritingFile');
      }
    });
  });

  self._parser.on('end', function(){
    self._flushing--;
    self.ended = true;

    var done = function(){
      file.end(function() {
        self.emit('file', 'file', file);
        self._maybeEnd();
      });
    };

    if(outstandingWrites === 0){
      done();
    } else {
      self._parser.once('doneWritingFile', done);
    }
  });
};

IncomingForm.prototype._initJSONencoded = function() {
  this.type = 'json';

  var parser = new JSONParser()
    , self = this;

  if (this.bytesExpected) {
    parser.initWithLength(this.bytesExpected);
  }

  parser.onField = function(key, val) {
    self.emit('field', key, val);
  };

  parser.onEnd = function() {
    self.ended = true;
    self._maybeEnd();
  };

  this._parser = parser;
};

IncomingForm.prototype._uploadPath = function(filename) {
  var name = 'upload_';
  var buf = crypto.randomBytes(16);
  for (var i = 0; i < buf.length; ++i) {
    name += ('0' + buf[i].toString(16)).slice(-2);
  }

  if (this.keepExtensions) {
    var ext = path.extname(filename);
    ext     = ext.replace(/(\.[a-z0-9]+).*/i, '$1');

    name += ext;
  }

  return path.join(this.uploadDir, name);
};

IncomingForm.prototype._maybeEnd = function() {
  if (!this.ended || this._flushing || this.error) {
    return;
  }

  this.emit('end');
};


},{"./file":35,"./json_parser":38,"./multipart_parser":39,"./octet_parser":40,"./querystring_parser":41,"crypto":undefined,"events":undefined,"fs":undefined,"os":undefined,"path":undefined,"stream":undefined,"string_decoder":undefined,"util":undefined}],37:[function(require,module,exports){
var IncomingForm = require('./incoming_form').IncomingForm;
IncomingForm.IncomingForm = IncomingForm;
module.exports = IncomingForm;

},{"./incoming_form":36}],38:[function(require,module,exports){
if (global.GENTLY) require = GENTLY.hijack(require);

var Buffer = require('buffer').Buffer;

function JSONParser() {
  this.data = new Buffer('');
  this.bytesWritten = 0;
}
exports.JSONParser = JSONParser;

JSONParser.prototype.initWithLength = function(length) {
  this.data = new Buffer(length);
};

JSONParser.prototype.write = function(buffer) {
  if (this.data.length >= this.bytesWritten + buffer.length) {
    buffer.copy(this.data, this.bytesWritten);
  } else {
    this.data = Buffer.concat([this.data, buffer]);
  }
  this.bytesWritten += buffer.length;
  return buffer.length;
};

JSONParser.prototype.end = function() {
  try {
    var fields = JSON.parse(this.data.toString('utf8'));
    for (var field in fields) {
      this.onField(field, fields[field]);
    }
  } catch (e) {}
  this.data = null;

  this.onEnd();
};

},{"buffer":undefined}],39:[function(require,module,exports){
var Buffer = require('buffer').Buffer,
    s = 0,
    S =
    { PARSER_UNINITIALIZED: s++,
      START: s++,
      START_BOUNDARY: s++,
      HEADER_FIELD_START: s++,
      HEADER_FIELD: s++,
      HEADER_VALUE_START: s++,
      HEADER_VALUE: s++,
      HEADER_VALUE_ALMOST_DONE: s++,
      HEADERS_ALMOST_DONE: s++,
      PART_DATA_START: s++,
      PART_DATA: s++,
      PART_END: s++,
      END: s++
    },

    f = 1,
    F =
    { PART_BOUNDARY: f,
      LAST_BOUNDARY: f *= 2
    },

    LF = 10,
    CR = 13,
    SPACE = 32,
    HYPHEN = 45,
    COLON = 58,
    A = 97,
    Z = 122,

    lower = function(c) {
      return c | 0x20;
    };

for (s in S) {
  exports[s] = S[s];
}

function MultipartParser() {
  this.boundary = null;
  this.boundaryChars = null;
  this.lookbehind = null;
  this.state = S.PARSER_UNINITIALIZED;

  this.index = null;
  this.flags = 0;
}
exports.MultipartParser = MultipartParser;

MultipartParser.stateToString = function(stateNumber) {
  for (var state in S) {
    var number = S[state];
    if (number === stateNumber) return state;
  }
};

MultipartParser.prototype.initWithBoundary = function(str) {
  this.boundary = new Buffer(str.length+4);
  this.boundary.write('\r\n--', 0);
  this.boundary.write(str, 4);
  this.lookbehind = new Buffer(this.boundary.length+8);
  this.state = S.START;

  this.boundaryChars = {};
  for (var i = 0; i < this.boundary.length; i++) {
    this.boundaryChars[this.boundary[i]] = true;
  }
};

MultipartParser.prototype.write = function(buffer) {
  var self = this,
      i = 0,
      len = buffer.length,
      prevIndex = this.index,
      index = this.index,
      state = this.state,
      flags = this.flags,
      lookbehind = this.lookbehind,
      boundary = this.boundary,
      boundaryChars = this.boundaryChars,
      boundaryLength = this.boundary.length,
      boundaryEnd = boundaryLength - 1,
      bufferLength = buffer.length,
      c,
      cl,

      mark = function(name) {
        self[name+'Mark'] = i;
      },
      clear = function(name) {
        delete self[name+'Mark'];
      },
      callback = function(name, buffer, start, end) {
        if (start !== undefined && start === end) {
          return;
        }

        var callbackSymbol = 'on'+name.substr(0, 1).toUpperCase()+name.substr(1);
        if (callbackSymbol in self) {
          self[callbackSymbol](buffer, start, end);
        }
      },
      dataCallback = function(name, clear) {
        var markSymbol = name+'Mark';
        if (!(markSymbol in self)) {
          return;
        }

        if (!clear) {
          callback(name, buffer, self[markSymbol], buffer.length);
          self[markSymbol] = 0;
        } else {
          callback(name, buffer, self[markSymbol], i);
          delete self[markSymbol];
        }
      };

  for (i = 0; i < len; i++) {
    c = buffer[i];
    switch (state) {
      case S.PARSER_UNINITIALIZED:
        return i;
      case S.START:
        index = 0;
        state = S.START_BOUNDARY;
      case S.START_BOUNDARY:
        if (index == boundary.length - 2) {
          if (c == HYPHEN) {
            flags |= F.LAST_BOUNDARY;
          } else if (c != CR) {
            return i;
          }
          index++;
          break;
        } else if (index - 1 == boundary.length - 2) {
          if (flags & F.LAST_BOUNDARY && c == HYPHEN){
            callback('end');
            state = S.END;
            flags = 0;
          } else if (!(flags & F.LAST_BOUNDARY) && c == LF) {
            index = 0;
            callback('partBegin');
            state = S.HEADER_FIELD_START;
          } else {
            return i;
          }
          break;
        }

        if (c != boundary[index+2]) {
          index = -2;
        }
        if (c == boundary[index+2]) {
          index++;
        }
        break;
      case S.HEADER_FIELD_START:
        state = S.HEADER_FIELD;
        mark('headerField');
        index = 0;
      case S.HEADER_FIELD:
        if (c == CR) {
          clear('headerField');
          state = S.HEADERS_ALMOST_DONE;
          break;
        }

        index++;
        if (c == HYPHEN) {
          break;
        }

        if (c == COLON) {
          if (index == 1) {
            // empty header field
            return i;
          }
          dataCallback('headerField', true);
          state = S.HEADER_VALUE_START;
          break;
        }

        cl = lower(c);
        if (cl < A || cl > Z) {
          return i;
        }
        break;
      case S.HEADER_VALUE_START:
        if (c == SPACE) {
          break;
        }

        mark('headerValue');
        state = S.HEADER_VALUE;
      case S.HEADER_VALUE:
        if (c == CR) {
          dataCallback('headerValue', true);
          callback('headerEnd');
          state = S.HEADER_VALUE_ALMOST_DONE;
        }
        break;
      case S.HEADER_VALUE_ALMOST_DONE:
        if (c != LF) {
          return i;
        }
        state = S.HEADER_FIELD_START;
        break;
      case S.HEADERS_ALMOST_DONE:
        if (c != LF) {
          return i;
        }

        callback('headersEnd');
        state = S.PART_DATA_START;
        break;
      case S.PART_DATA_START:
        state = S.PART_DATA;
        mark('partData');
      case S.PART_DATA:
        prevIndex = index;

        if (index === 0) {
          // boyer-moore derrived algorithm to safely skip non-boundary data
          i += boundaryEnd;
          while (i < bufferLength && !(buffer[i] in boundaryChars)) {
            i += boundaryLength;
          }
          i -= boundaryEnd;
          c = buffer[i];
        }

        if (index < boundary.length) {
          if (boundary[index] == c) {
            if (index === 0) {
              dataCallback('partData', true);
            }
            index++;
          } else {
            index = 0;
          }
        } else if (index == boundary.length) {
          index++;
          if (c == CR) {
            // CR = part boundary
            flags |= F.PART_BOUNDARY;
          } else if (c == HYPHEN) {
            // HYPHEN = end boundary
            flags |= F.LAST_BOUNDARY;
          } else {
            index = 0;
          }
        } else if (index - 1 == boundary.length)  {
          if (flags & F.PART_BOUNDARY) {
            index = 0;
            if (c == LF) {
              // unset the PART_BOUNDARY flag
              flags &= ~F.PART_BOUNDARY;
              callback('partEnd');
              callback('partBegin');
              state = S.HEADER_FIELD_START;
              break;
            }
          } else if (flags & F.LAST_BOUNDARY) {
            if (c == HYPHEN) {
              callback('partEnd');
              callback('end');
              state = S.END;
              flags = 0;
            } else {
              index = 0;
            }
          } else {
            index = 0;
          }
        }

        if (index > 0) {
          // when matching a possible boundary, keep a lookbehind reference
          // in case it turns out to be a false lead
          lookbehind[index-1] = c;
        } else if (prevIndex > 0) {
          // if our boundary turned out to be rubbish, the captured lookbehind
          // belongs to partData
          callback('partData', lookbehind, 0, prevIndex);
          prevIndex = 0;
          mark('partData');

          // reconsider the current character even so it interrupted the sequence
          // it could be the beginning of a new sequence
          i--;
        }

        break;
      case S.END:
        break;
      default:
        return i;
    }
  }

  dataCallback('headerField');
  dataCallback('headerValue');
  dataCallback('partData');

  this.index = index;
  this.state = state;
  this.flags = flags;

  return len;
};

MultipartParser.prototype.end = function() {
  var callback = function(self, name) {
    var callbackSymbol = 'on'+name.substr(0, 1).toUpperCase()+name.substr(1);
    if (callbackSymbol in self) {
      self[callbackSymbol]();
    }
  };
  if ((this.state == S.HEADER_FIELD_START && this.index === 0) ||
      (this.state == S.PART_DATA && this.index == this.boundary.length)) {
    callback(this, 'partEnd');
    callback(this, 'end');
  } else if (this.state != S.END) {
    return new Error('MultipartParser.end(): stream ended unexpectedly: ' + this.explain());
  }
};

MultipartParser.prototype.explain = function() {
  return 'state = ' + MultipartParser.stateToString(this.state);
};

},{"buffer":undefined}],40:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter
	, util = require('util');

function OctetParser(options){
	if(!(this instanceof OctetParser)) return new OctetParser(options);
	EventEmitter.call(this);
}

util.inherits(OctetParser, EventEmitter);

exports.OctetParser = OctetParser;

OctetParser.prototype.write = function(buffer) {
    this.emit('data', buffer);
	return buffer.length;
};

OctetParser.prototype.end = function() {
	this.emit('end');
};

},{"events":undefined,"util":undefined}],41:[function(require,module,exports){
if (global.GENTLY) require = GENTLY.hijack(require);

// This is a buffering parser, not quite as nice as the multipart one.
// If I find time I'll rewrite this to be fully streaming as well
var querystring = require('querystring');

function QuerystringParser(maxKeys) {
  this.maxKeys = maxKeys;
  this.buffer = '';
}
exports.QuerystringParser = QuerystringParser;

QuerystringParser.prototype.write = function(buffer) {
  this.buffer += buffer.toString('ascii');
  return buffer.length;
};

QuerystringParser.prototype.end = function() {
  var fields = querystring.parse(this.buffer, '&', '=', { maxKeys: this.maxKeys });
  for (var field in fields) {
    this.onField(field, fields[field]);
  }
  this.buffer = '';

  this.onEnd();
};


},{"querystring":undefined}],42:[function(require,module,exports){
// Declare internals

var internals = {};


exports.escapeJavaScript = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeJavaScriptChar(charCode);
        }
    }

    return escaped;
};


exports.escapeHtml = function (input) {

    if (!input) {
        return '';
    }

    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeHtmlChar(charCode);
        }
    }

    return escaped;
};


internals.escapeJavaScriptChar = function (charCode) {

    if (charCode >= 256) {
        return '\\u' + internals.padLeft('' + charCode, 4);
    }

    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '\\x' + internals.padLeft(hexValue, 2);
};


internals.escapeHtmlChar = function (charCode) {

    var namedEscape = internals.namedHtml[charCode];
    if (typeof namedEscape !== 'undefined') {
        return namedEscape;
    }

    if (charCode >= 256) {
        return '&#' + charCode + ';';
    }

    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '&#x' + internals.padLeft(hexValue, 2) + ';';
};


internals.padLeft = function (str, len) {

    while (str.length < len) {
        str = '0' + str;
    }

    return str;
};


internals.isSafe = function (charCode) {

    return (typeof internals.safeCharCodes[charCode] !== 'undefined');
};


internals.namedHtml = {
    '38': '&amp;',
    '60': '&lt;',
    '62': '&gt;',
    '34': '&quot;',
    '160': '&nbsp;',
    '162': '&cent;',
    '163': '&pound;',
    '164': '&curren;',
    '169': '&copy;',
    '174': '&reg;'
};


internals.safeCharCodes = (function () {

    var safe = {};

    for (var i = 32; i < 123; ++i) {

        if ((i >= 97) ||                    // a-z
            (i >= 65 && i <= 90) ||         // A-Z
            (i >= 48 && i <= 57) ||         // 0-9
            i === 32 ||                     // space
            i === 46 ||                     // .
            i === 44 ||                     // ,
            i === 45 ||                     // -
            i === 58 ||                     // :
            i === 95) {                     // _

            safe[i] = null;
        }
    }

    return safe;
}());

},{}],43:[function(require,module,exports){
// Load modules

var Crypto = require('crypto');
var Path = require('path');
var Util = require('util');
var Escape = require('./escape');


// Declare internals

var internals = {};


// Clone object or array

exports.clone = function (obj, seen) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    seen = seen || { orig: [], copy: [] };

    var lookup = seen.orig.indexOf(obj);
    if (lookup !== -1) {
        return seen.copy[lookup];
    }

    var newObj;
    var cloneDeep = false;

    if (!Array.isArray(obj)) {
        if (Buffer.isBuffer(obj)) {
            newObj = new Buffer(obj);
        }
        else if (obj instanceof Date) {
            newObj = new Date(obj.getTime());
        }
        else if (obj instanceof RegExp) {
            newObj = new RegExp(obj);
        }
        else {
            var proto = Object.getPrototypeOf(obj);
            if (proto &&
                proto.isImmutable) {

                newObj = obj;
            }
            else {
                newObj = Object.create(proto);
                cloneDeep = true;
            }
        }
    }
    else {
        newObj = [];
        cloneDeep = true;
    }

    seen.orig.push(obj);
    seen.copy.push(newObj);

    if (cloneDeep) {
        var keys = Object.getOwnPropertyNames(obj);
        for (var i = 0, il = keys.length; i < il; ++i) {
            var key = keys[i];
            var descriptor = Object.getOwnPropertyDescriptor(obj, key);
            if (descriptor &&
                (descriptor.get ||
                 descriptor.set)) {

                Object.defineProperty(newObj, key, descriptor);
            }
            else {
                newObj[key] = exports.clone(obj[key], seen);
            }
        }
    }

    return newObj;
};


// Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied
/*eslint-disable */
exports.merge = function (target, source, isNullOverride /* = true */, isMergeArrays /* = true */) {
/*eslint-enable */
    exports.assert(target && typeof target === 'object', 'Invalid target value: must be an object');
    exports.assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');

    if (!source) {
        return target;
    }

    if (Array.isArray(source)) {
        exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
        if (isMergeArrays === false) {                                                  // isMergeArrays defaults to true
            target.length = 0;                                                          // Must not change target assignment
        }

        for (var i = 0, il = source.length; i < il; ++i) {
            target.push(exports.clone(source[i]));
        }

        return target;
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];
        if (value &&
            typeof value === 'object') {

            if (!target[key] ||
                typeof target[key] !== 'object' ||
                (Array.isArray(target[key]) ^ Array.isArray(value)) ||
                value instanceof Date ||
                Buffer.isBuffer(value) ||
                value instanceof RegExp) {

                target[key] = exports.clone(value);
            }
            else {
                exports.merge(target[key], value, isNullOverride, isMergeArrays);
            }
        }
        else {
            if (value !== null &&
                value !== undefined) {                              // Explicit to preserve empty strings

                target[key] = value;
            }
            else if (isNullOverride !== false) {                    // Defaults to true
                target[key] = value;
            }
        }
    }

    return target;
};


// Apply options to a copy of the defaults

exports.applyToDefaults = function (defaults, options, isNullOverride) {

    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');

    if (!options) {                                                 // If no options, return null
        return null;
    }

    var copy = exports.clone(defaults);

    if (options === true) {                                         // If options is set to true, use defaults
        return copy;
    }

    return exports.merge(copy, options, isNullOverride === true, false);
};


// Clone an object except for the listed keys which are shallow copied

exports.cloneWithShallow = function (source, keys) {

    if (!source ||
        typeof source !== 'object') {

        return source;
    }

    var storage = internals.store(source, keys);    // Move shallow copy items to storage
    var copy = exports.clone(source);               // Deep copy the rest
    internals.restore(copy, source, storage);       // Shallow copy the stored items and restore
    return copy;
};


internals.store = function (source, keys) {

    var storage = {};
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var value = exports.reach(source, key);
        if (value !== undefined) {
            storage[key] = value;
            internals.reachSet(source, key, undefined);
        }
    }

    return storage;
};


internals.restore = function (copy, source, storage) {

    var keys = Object.keys(storage);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        internals.reachSet(copy, key, storage[key]);
        internals.reachSet(source, key, storage[key]);
    }
};


internals.reachSet = function (obj, key, value) {

    var path = key.split('.');
    var ref = obj;
    for (var i = 0, il = path.length; i < il; ++i) {
        var segment = path[i];
        if (i + 1 === il) {
            ref[segment] = value;
        }

        ref = ref[segment];
    }
};


// Apply options to defaults except for the listed keys which are shallow copied from option without merging

exports.applyToDefaultsWithShallow = function (defaults, options, keys) {

    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');
    exports.assert(keys && Array.isArray(keys), 'Invalid keys');

    if (!options) {                                                 // If no options, return null
        return null;
    }

    var copy = exports.cloneWithShallow(defaults, keys);

    if (options === true) {                                         // If options is set to true, use defaults
        return copy;
    }

    var storage = internals.store(options, keys);   // Move shallow copy items to storage
    exports.merge(copy, options, false, false);     // Deep copy the rest
    internals.restore(copy, options, storage);      // Shallow copy the stored items and restore
    return copy;
};


// Deep object or array comparison

exports.deepEqual = function (obj, ref, options, seen) {

    options = options || { prototype: true };

    var type = typeof obj;

    if (type !== typeof ref) {
        return false;
    }

    if (type !== 'object' ||
        obj === null ||
        ref === null) {

        if (obj === ref) {                                                      // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
            return obj !== 0 || 1 / obj === 1 / ref;        // -0 / +0
        }

        return obj !== obj && ref !== ref;                  // NaN
    }

    seen = seen || [];
    if (seen.indexOf(obj) !== -1) {
        return true;                            // If previous comparison failed, it would have stopped execution
    }

    seen.push(obj);

    if (Array.isArray(obj)) {
        if (!Array.isArray(ref)) {
            return false;
        }

        if (!options.part && obj.length !== ref.length) {
            return false;
        }

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (options.part) {
                var found = false;
                for (var r = 0, rl = ref.length; r < rl; ++r) {
                    if (exports.deepEqual(obj[i], ref[r], options, seen)) {
                        found = true;
                        break;
                    }
                }

                return found;
            }

            if (!exports.deepEqual(obj[i], ref[i], options, seen)) {
                return false;
            }
        }

        return true;
    }

    if (Buffer.isBuffer(obj)) {
        if (!Buffer.isBuffer(ref)) {
            return false;
        }

        if (obj.length !== ref.length) {
            return false;
        }

        for (var j = 0, jl = obj.length; j < jl; ++j) {
            if (obj[j] !== ref[j]) {
                return false;
            }
        }

        return true;
    }

    if (obj instanceof Date) {
        return (ref instanceof Date && obj.getTime() === ref.getTime());
    }

    if (obj instanceof RegExp) {
        return (ref instanceof RegExp && obj.toString() === ref.toString());
    }

    if (options.prototype) {
        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
            return false;
        }
    }

    var keys = Object.getOwnPropertyNames(obj);

    if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
        return false;
    }

    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        if (descriptor.get) {
            if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                return false;
            }
        }
        else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
            return false;
        }
    }

    return true;
};


// Remove duplicate items from array

exports.unique = function (array, key) {

    var index = {};
    var result = [];

    for (var i = 0, il = array.length; i < il; ++i) {
        var id = (key ? array[i][key] : array[i]);
        if (index[id] !== true) {

            result.push(array[i]);
            index[id] = true;
        }
    }

    return result;
};


// Convert array into object

exports.mapToObject = function (array, key) {

    if (!array) {
        return null;
    }

    var obj = {};
    for (var i = 0, il = array.length; i < il; ++i) {
        if (key) {
            if (array[i][key]) {
                obj[array[i][key]] = true;
            }
        }
        else {
            obj[array[i]] = true;
        }
    }

    return obj;
};


// Find the common unique items in two arrays

exports.intersect = function (array1, array2, justFirst) {

    if (!array1 || !array2) {
        return [];
    }

    var common = [];
    var hash = (Array.isArray(array1) ? exports.mapToObject(array1) : array1);
    var found = {};
    for (var i = 0, il = array2.length; i < il; ++i) {
        if (hash[array2[i]] && !found[array2[i]]) {
            if (justFirst) {
                return array2[i];
            }

            common.push(array2[i]);
            found[array2[i]] = true;
        }
    }

    return (justFirst ? null : common);
};


// Test if the reference contains the values

exports.contain = function (ref, values, options) {

    /*
        string -> string(s)
        array -> item(s)
        object -> key(s)
        object -> object (key:value)
    */

    var valuePairs = null;
    if (typeof ref === 'object' &&
        typeof values === 'object' &&
        !Array.isArray(ref) &&
        !Array.isArray(values)) {

        valuePairs = values;
        values = Object.keys(values);
    }
    else {
        values = [].concat(values);
    }

    options = options || {};            // deep, once, only, part

    exports.assert(arguments.length >= 2, 'Insufficient arguments');
    exports.assert(typeof ref === 'string' || typeof ref === 'object', 'Reference must be string or an object');
    exports.assert(values.length, 'Values array cannot be empty');

    var compare, compareFlags;
    if (options.deep) {
        compare = exports.deepEqual;

        var hasOnly = options.hasOwnProperty('only'), hasPart = options.hasOwnProperty('part');

        compareFlags = {
            prototype: hasOnly ? options.only : hasPart ? !options.part : false,
            part: hasOnly ? !options.only : hasPart ? options.part : true
        };
    }
    else {
        compare = function (a, b) {

            return a === b;
        };
    }

    var misses = false;
    var matches = new Array(values.length);
    for (var i = 0, il = matches.length; i < il; ++i) {
        matches[i] = 0;
    }

    if (typeof ref === 'string') {
        var pattern = '(';
        for (i = 0, il = values.length; i < il; ++i) {
            var value = values[i];
            exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
            pattern += (i ? '|' : '') + exports.escapeRegex(value);
        }

        var regex = new RegExp(pattern + ')', 'g');
        var leftovers = ref.replace(regex, function ($0, $1) {

            var index = values.indexOf($1);
            ++matches[index];
            return '';          // Remove from string
        });

        misses = !!leftovers;
    }
    else if (Array.isArray(ref)) {
        for (i = 0, il = ref.length; i < il; ++i) {
            for (var j = 0, jl = values.length, matched = false; j < jl && matched === false; ++j) {
                matched = compare(values[j], ref[i], compareFlags) && j;
            }

            if (matched !== false) {
                ++matches[matched];
            }
            else {
                misses = true;
            }
        }
    }
    else {
        var keys = Object.keys(ref);
        for (i = 0, il = keys.length; i < il; ++i) {
            var key = keys[i];
            var pos = values.indexOf(key);
            if (pos !== -1) {
                if (valuePairs &&
                    !compare(valuePairs[key], ref[key], compareFlags)) {

                    return false;
                }

                ++matches[pos];
            }
            else {
                misses = true;
            }
        }
    }

    var result = false;
    for (i = 0, il = matches.length; i < il; ++i) {
        result = result || !!matches[i];
        if ((options.once && matches[i] > 1) ||
            (!options.part && !matches[i])) {

            return false;
        }
    }

    if (options.only &&
        misses) {

        return false;
    }

    return result;
};


// Flatten array

exports.flatten = function (array, target) {

    var result = target || [];

    for (var i = 0, il = array.length; i < il; ++i) {
        if (Array.isArray(array[i])) {
            exports.flatten(array[i], result);
        }
        else {
            result.push(array[i]);
        }
    }

    return result;
};


// Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

exports.reach = function (obj, chain, options) {

    if (chain === false ||
        chain === null ||
        typeof chain === 'undefined') {

        return obj;
    }

    options = options || {};
    if (typeof options === 'string') {
        options = { separator: options };
    }

    var path = chain.split(options.separator || '.');
    var ref = obj;
    for (var i = 0, il = path.length; i < il; ++i) {
        var key = path[i];
        if (key[0] === '-' && Array.isArray(ref)) {
            key = key.slice(1, key.length);
            key = ref.length - key;
        }

        if (!ref ||
            !ref.hasOwnProperty(key) ||
            (typeof ref !== 'object' && options.functions === false)) {         // Only object and function can have properties

            exports.assert(!options.strict || i + 1 === il, 'Missing segment', key, 'in reach path ', chain);
            exports.assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
            ref = options.default;
            break;
        }

        ref = ref[key];
    }

    return ref;
};


exports.reachTemplate = function (obj, template, options) {

    return template.replace(/{([^}]+)}/g, function ($0, chain) {

        var value = exports.reach(obj, chain, options);
        return (value === undefined || value === null ? '' : value);
    });
};


exports.formatStack = function (stack) {

    var trace = [];
    for (var i = 0, il = stack.length; i < il; ++i) {
        var item = stack[i];
        trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
    }

    return trace;
};


exports.formatTrace = function (trace) {

    var display = [];

    for (var i = 0, il = trace.length; i < il; ++i) {
        var row = trace[i];
        display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
    }

    return display;
};


exports.callStack = function (slice) {

    // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

    var v8 = Error.prepareStackTrace;
    Error.prepareStackTrace = function (err, stack) {

        return stack;
    };

    var capture = {};
    Error.captureStackTrace(capture, arguments.callee);     /*eslint no-caller:0 */
    var stack = capture.stack;

    Error.prepareStackTrace = v8;

    var trace = exports.formatStack(stack);

    if (slice) {
        return trace.slice(slice);
    }

    return trace;
};


exports.displayStack = function (slice) {

    var trace = exports.callStack(slice === undefined ? 1 : slice + 1);

    return exports.formatTrace(trace);
};


exports.abortThrow = false;


exports.abort = function (message, hideStack) {

    if (process.env.NODE_ENV === 'test' || exports.abortThrow === true) {
        throw new Error(message || 'Unknown error');
    }

    var stack = '';
    if (!hideStack) {
        stack = exports.displayStack(1).join('\n\t');
    }
    console.log('ABORT: ' + message + '\n\t' + stack);
    process.exit(1);
};


exports.assert = function (condition /*, msg1, msg2, msg3 */) {

    if (condition) {
        return;
    }

    if (arguments.length === 2 && arguments[1] instanceof Error) {
        throw arguments[1];
    }

    var msgs = [];
    for (var i = 1, il = arguments.length; i < il; ++i) {
        if (arguments[i] !== '') {
            msgs.push(arguments[i]);            // Avoids Array.slice arguments leak, allowing for V8 optimizations
        }
    }

    msgs = msgs.map(function (msg) {

        return typeof msg === 'string' ? msg : msg instanceof Error ? msg.message : exports.stringify(msg);
    });
    throw new Error(msgs.join(' ') || 'Unknown error');
};


exports.Timer = function () {

    this.ts = 0;
    this.reset();
};


exports.Timer.prototype.reset = function () {

    this.ts = Date.now();
};


exports.Timer.prototype.elapsed = function () {

    return Date.now() - this.ts;
};


exports.Bench = function () {

    this.ts = 0;
    this.reset();
};


exports.Bench.prototype.reset = function () {

    this.ts = exports.Bench.now();
};


exports.Bench.prototype.elapsed = function () {

    return exports.Bench.now() - this.ts;
};


exports.Bench.now = function () {

    var ts = process.hrtime();
    return (ts[0] * 1e3) + (ts[1] / 1e6);
};


// Escape string for Regex construction

exports.escapeRegex = function (string) {

    // Escape ^$.*+-?=!:|\/()[]{},
    return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
};


// Base64url (RFC 4648) encode

exports.base64urlEncode = function (value, encoding) {

    var buf = (Buffer.isBuffer(value) ? value : new Buffer(value, encoding || 'binary'));
    return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
};


// Base64url (RFC 4648) decode

exports.base64urlDecode = function (value, encoding) {

    if (value &&
        !/^[\w\-]*$/.test(value)) {

        return new Error('Invalid character');
    }

    try {
        var buf = new Buffer(value, 'base64');
        return (encoding === 'buffer' ? buf : buf.toString(encoding || 'binary'));
    }
    catch (err) {
        return err;
    }
};


// Escape attribute value for use in HTTP header

exports.escapeHeaderAttribute = function (attribute) {

    // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

    exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');

    return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');                             // Escape quotes and slash
};


exports.escapeHtml = function (string) {

    return Escape.escapeHtml(string);
};


exports.escapeJavaScript = function (string) {

    return Escape.escapeJavaScript(string);
};


exports.nextTick = function (callback) {

    return function () {

        var args = arguments;
        process.nextTick(function () {

            callback.apply(null, args);
        });
    };
};


exports.once = function (method) {

    if (method._hoekOnce) {
        return method;
    }

    var once = false;
    var wrapped = function () {

        if (!once) {
            once = true;
            method.apply(null, arguments);
        }
    };

    wrapped._hoekOnce = true;

    return wrapped;
};


exports.isAbsolutePath = function (path, platform) {

    if (!path) {
        return false;
    }

    if (Path.isAbsolute) {                      // node >= 0.11
        return Path.isAbsolute(path);
    }

    platform = platform || process.platform;

    // Unix

    if (platform !== 'win32') {
        return path[0] === '/';
    }

    // Windows

    return !!/^(?:[a-zA-Z]:[\\\/])|(?:[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/])/.test(path);        // C:\ or \\something\something
};


exports.isInteger = function (value) {

    return (typeof value === 'number' &&
            parseFloat(value) === parseInt(value, 10) &&
            !isNaN(value));
};


exports.ignore = function () { };


exports.inherits = Util.inherits;


exports.format = Util.format;


exports.transform = function (source, transform, options) {

    exports.assert(source === null || source === undefined || typeof source === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');

    if (Array.isArray(source)) {
        var results = [];
        for (var i = 0, il = source.length; i < il; ++i) {
            results.push(exports.transform(source[i], transform, options));
        }
        return results;
    }

    var result = {};
    var keys = Object.keys(transform);

    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var path = key.split('.');
        var sourcePath = transform[key];

        exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');

        var segment;
        var res = result;

        while (path.length > 1) {
            segment = path.shift();
            if (!res[segment]) {
                res[segment] = {};
            }
            res = res[segment];
        }
        segment = path.shift();
        res[segment] = exports.reach(source, sourcePath, options);
    }

    return result;
};


exports.uniqueFilename = function (path, extension) {

    if (extension) {
        extension = extension[0] !== '.' ? '.' + extension : extension;
    }
    else {
        extension = '';
    }

    path = Path.resolve(path);
    var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
    return Path.join(path, name);
};


exports.stringify = function () {

    try {
        return JSON.stringify.apply(null, arguments);
    }
    catch (err) {
        return '[Cannot display object: ' + err.message + ']';
    }
};


exports.shallow = function (source) {

    var target = {};
    var keys = Object.keys(source);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        target[key] = source[key];
    }

    return target;
};

},{"./escape":42,"crypto":undefined,"path":undefined,"util":undefined}],44:[function(require,module,exports){
/**
 *  Copyright (c) 2014-2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Immutable = factory());
}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
      return isIterable(value) ? value : Seq(value);
    }


  createClass(KeyedIterable, Iterable);
    function KeyedIterable(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }


  createClass(IndexedIterable, Iterable);
    function IndexedIterable(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }


  createClass(SetIterable, Iterable);
    function SetIterable(value) {
      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
    }



  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;


  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  // Used for setting prototype methods that IE8 chokes on.
  var DELETE = 'delete';

  // Constants describing the size of trie nodes.
  var SHIFT = 5; // Resulted in best performance after ______?
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  // A consistent shared value representing "not set" which equals nothing other
  // than itself, and nothing that could be provided externally.
  var NOT_SET = {};

  // Boolean references, Rough equivalent of `bool &`.
  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  // A function which returns a value representing an "owner" for transient writes
  // to tries. The return value will only ever equal itself, and will not equal
  // the return of any subsequent call of this function.
  function OwnerID() {}

  // http://jsperf.com/copy-array-inline
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    // This implements "is array index" which the ECMAString spec defines as:
    //
    //     A String property name P is an array index if and only if
    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
    //     to 2^32−1.
    //
    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || (size !== undefined && begin <= -size)) &&
      (end === undefined || (size !== undefined && end >= size));
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ?
      defaultIndex :
      index < 0 ?
        Math.max(0, size + index) :
        size === undefined ?
          index :
          Math.min(size, index);
  }

  /* global Symbol */

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


  function Iterator(next) {
      this.next = next;
    }

    Iterator.prototype.toString = function() {
      return '[Iterator]';
    };


  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect =
  Iterator.prototype.toSource = function () { return this.toString(); }
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };


  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
      value: value, done: false
    });
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (
      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
      iterable[FAUX_ITERATOR_SYMBOL]
    );
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
    function Seq(value) {
      return value === null || value === undefined ? emptySequence() :
        isIterable(value) ? value.toSeq() : seqFromValue(value);
    }

    Seq.of = function(/*...values*/) {
      return Seq(arguments);
    };

    Seq.prototype.toSeq = function() {
      return this;
    };

    Seq.prototype.toString = function() {
      return this.__toString('Seq {', '}');
    };

    Seq.prototype.cacheResult = function() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };

    // abstract __iterateUncached(fn, reverse)

    Seq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, true);
    };

    // abstract __iteratorUncached(type, reverse)

    Seq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, true);
    };



  createClass(KeyedSeq, Seq);
    function KeyedSeq(value) {
      return value === null || value === undefined ?
        emptySequence().toKeyedSeq() :
        isIterable(value) ?
          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
          keyedSeqFromValue(value);
    }

    KeyedSeq.prototype.toKeyedSeq = function() {
      return this;
    };



  createClass(IndexedSeq, Seq);
    function IndexedSeq(value) {
      return value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
    }

    IndexedSeq.of = function(/*...values*/) {
      return IndexedSeq(arguments);
    };

    IndexedSeq.prototype.toIndexedSeq = function() {
      return this;
    };

    IndexedSeq.prototype.toString = function() {
      return this.__toString('Seq [', ']');
    };

    IndexedSeq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, false);
    };

    IndexedSeq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, false);
    };



  createClass(SetSeq, Seq);
    function SetSeq(value) {
      return (
        value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value
      ).toSetSeq();
    }

    SetSeq.of = function(/*...values*/) {
      return SetSeq(arguments);
    };

    SetSeq.prototype.toSetSeq = function() {
      return this;
    };



  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;



  createClass(ArraySeq, IndexedSeq);
    function ArraySeq(array) {
      this._array = array;
      this.size = array.length;
    }

    ArraySeq.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };

    ArraySeq.prototype.__iterate = function(fn, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ArraySeq.prototype.__iterator = function(type, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      var ii = 0;
      return new Iterator(function() 
        {return ii > maxIndex ?
          iteratorDone() :
          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
      );
    };



  createClass(ObjectSeq, KeyedSeq);
    function ObjectSeq(object) {
      var keys = Object.keys(object);
      this._object = object;
      this._keys = keys;
      this.size = keys.length;
    }

    ObjectSeq.prototype.get = function(key, notSetValue) {
      if (notSetValue !== undefined && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };

    ObjectSeq.prototype.has = function(key) {
      return this._object.hasOwnProperty(key);
    };

    ObjectSeq.prototype.__iterate = function(fn, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var key = keys[reverse ? maxIndex - ii : ii];
        if (fn(object[key], key, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ObjectSeq.prototype.__iterator = function(type, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var key = keys[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, key, object[key]);
      });
    };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(IterableSeq, IndexedSeq);
    function IterableSeq(iterable) {
      this._iterable = iterable;
      this.size = iterable.length || iterable.size;
    }

    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };

    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      if (!isIterator(iterator)) {
        return new Iterator(iteratorDone);
      }
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type, iterations++, step.value);
      });
    };



  createClass(IteratorSeq, IndexedSeq);
    function IteratorSeq(iterator) {
      this._iterator = iterator;
      this._iteratorCache = [];
    }

    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      while (iterations < cache.length) {
        if (fn(cache[iterations], iterations++, this) === false) {
          return iterations;
        }
      }
      var step;
      while (!(step = iterator.next()).done) {
        var val = step.value;
        cache[iterations] = val;
        if (fn(val, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };

    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      return new Iterator(function()  {
        if (iterations >= cache.length) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          cache[iterations] = step.value;
        }
        return iteratorValue(type, iterations, cache[iterations++]);
      });
    };




  // # pragma Helper functions

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq =
      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
      typeof value === 'object' ? new ObjectSeq(value) :
      undefined;
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of [k, v] entries, '+
        'or keyed object: ' + value
      );
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values: ' + value
      );
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) ||
      (typeof value === 'object' && new ObjectSeq(value));
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values, or keyed object: ' + value
      );
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return (
      isArrayLike(value) ? new ArraySeq(value) :
      isIterator(value) ? new IteratorSeq(value) :
      hasIterator(value) ? new IterableSeq(value) :
      undefined
    );
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ?
      fromJSWith(converter, json, '', {'': json}) :
      fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  /**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */
  function is(valueA, valueB) {
    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' &&
        typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' &&
        typeof valueB.equals === 'function' &&
        valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (
      !isIterable(b) ||
      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
      isKeyed(a) !== isKeyed(b) ||
      isIndexed(a) !== isIndexed(b) ||
      isOrdered(a) !== isOrdered(b)
    ) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function(v, k)  {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function(v, k)  {
      if (notAssociative ? !a.has(v) :
          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

    function Repeat(value, times) {
      if (!(this instanceof Repeat)) {
        return new Repeat(value, times);
      }
      this._value = value;
      this.size = times === undefined ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }

    Repeat.prototype.toString = function() {
      if (this.size === 0) {
        return 'Repeat []';
      }
      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
    };

    Repeat.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };

    Repeat.prototype.includes = function(searchValue) {
      return is(this._value, searchValue);
    };

    Repeat.prototype.slice = function(begin, end) {
      var size = this.size;
      return wholeSlice(begin, end, size) ? this :
        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
    };

    Repeat.prototype.reverse = function() {
      return this;
    };

    Repeat.prototype.indexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };

    Repeat.prototype.lastIndexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };

    Repeat.prototype.__iterate = function(fn, reverse) {
      for (var ii = 0; ii < this.size; ii++) {
        if (fn(this._value, ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
      var ii = 0;
      return new Iterator(function() 
        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
      );
    };

    Repeat.prototype.equals = function(other) {
      return other instanceof Repeat ?
        is(this._value, other._value) :
        deepEqual(other);
    };


  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

    function Range(start, end, step) {
      if (!(this instanceof Range)) {
        return new Range(start, end, step);
      }
      invariant(step !== 0, 'Cannot step a Range by 0');
      start = start || 0;
      if (end === undefined) {
        end = Infinity;
      }
      step = step === undefined ? 1 : Math.abs(step);
      if (end < start) {
        step = -step;
      }
      this._start = start;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }

    Range.prototype.toString = function() {
      if (this.size === 0) {
        return 'Range []';
      }
      return 'Range [ ' +
        this._start + '...' + this._end +
        (this._step !== 1 ? ' by ' + this._step : '') +
      ' ]';
    };

    Range.prototype.get = function(index, notSetValue) {
      return this.has(index) ?
        this._start + wrapIndex(this, index) * this._step :
        notSetValue;
    };

    Range.prototype.includes = function(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 &&
        possibleIndex < this.size &&
        possibleIndex === Math.floor(possibleIndex);
    };

    Range.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range(0, 0);
      }
      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
    };

    Range.prototype.indexOf = function(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index
        }
      }
      return -1;
    };

    Range.prototype.lastIndexOf = function(searchValue) {
      return this.indexOf(searchValue);
    };

    Range.prototype.__iterate = function(fn, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(value, ii, this) === false) {
          return ii + 1;
        }
        value += reverse ? -step : step;
      }
      return ii;
    };

    Range.prototype.__iterator = function(type, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      var ii = 0;
      return new Iterator(function()  {
        var v = value;
        value += reverse ? -step : step;
        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
      });
    };

    Range.prototype.equals = function(other) {
      return other instanceof Range ?
        this._start === other._start &&
        this._end === other._end &&
        this._step === other._step :
        deepEqual(this, other);
    };


  var EMPTY_RANGE;

  createClass(Collection, Iterable);
    function Collection() {
      throw TypeError('Abstract');
    }


  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}


  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul =
    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
    Math.imul :
    function imul(a, b) {
      a = a | 0; // int
      b = b | 0; // int
      var c = a & 0xffff;
      var d = b & 0xffff;
      // Shift by 0 fixes the sign on the high part.
      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
    };

  // v8 has an optimization for storing 31-bit signed numbers.
  // Values which have either 00 or 11 as the high order bits qualify.
  // This function drops the highest order bit in a signed number, maintaining
  // the sign bit.
  function smi(i32) {
    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      if (o !== o || o === Infinity) {
        return 0;
      }
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  // http://jsperf.com/hashing-strings
  function hashString(string) {
    // This is the hash from JVM
    // The hash code for a string is computed as
    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
    // where s[i] is the ith character of the string and n is the length of
    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
    // (exclusive) by dropping high bits.
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined &&
               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      // Since we can't define a non-enumerable property on the object
      // we'll hijack one of the less-used non-enumerable properties to
      // save our hash on it. Since this is a function it will not show up in
      // `JSON.stringify` which is what we want.
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      // At this point we couldn't get the IE `uniqueID` to use as a hash
      // and we couldn't use a non-enumerable property to exploit the
      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
      // itself.
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  // Get references to ES5 object methods.
  var isExtensible = Object.isExtensible;

  // True if Object.defineProperty works as expected. IE8 fails this test.
  var canDefineProperty = (function() {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }());

  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
  // and avoid memory leaks from the IE cloneNode bug.
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1: // Element
          return node.uniqueID;
        case 9: // Document
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  // If possible, use a WeakMap.
  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(
      size !== Infinity,
      'Cannot perform this action with an infinite size.'
    );
  }

  createClass(Map, KeyedCollection);

    // @pragma Construction

    function Map(value) {
      return value === null || value === undefined ? emptyMap() :
        isMap(value) && !isOrdered(value) ? value :
        emptyMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
      return emptyMap().withMutations(function(map ) {
        for (var i = 0; i < keyValues.length; i += 2) {
          if (i + 1 >= keyValues.length) {
            throw new Error('Missing value for key: ' + keyValues[i]);
          }
          map.set(keyValues[i], keyValues[i + 1]);
        }
      });
    };

    Map.prototype.toString = function() {
      return this.__toString('Map {', '}');
    };

    // @pragma Access

    Map.prototype.get = function(k, notSetValue) {
      return this._root ?
        this._root.get(0, undefined, k, notSetValue) :
        notSetValue;
    };

    // @pragma Modification

    Map.prototype.set = function(k, v) {
      return updateMap(this, k, v);
    };

    Map.prototype.setIn = function(keyPath, v) {
      return this.updateIn(keyPath, NOT_SET, function()  {return v});
    };

    Map.prototype.remove = function(k) {
      return updateMap(this, k, NOT_SET);
    };

    Map.prototype.deleteIn = function(keyPath) {
      return this.updateIn(keyPath, function()  {return NOT_SET});
    };

    Map.prototype.update = function(k, notSetValue, updater) {
      return arguments.length === 1 ?
        k(this) :
        this.updateIn([k], notSetValue, updater);
    };

    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
      if (!updater) {
        updater = notSetValue;
        notSetValue = undefined;
      }
      var updatedValue = updateInDeepMap(
        this,
        forceIterator(keyPath),
        notSetValue,
        updater
      );
      return updatedValue === NOT_SET ? undefined : updatedValue;
    };

    Map.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };

    // @pragma Composition

    Map.prototype.merge = function(/*...iters*/) {
      return mergeIntoMapWith(this, undefined, arguments);
    };

    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, merger, iters);
    };

    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.merge === 'function' ?
          m.merge.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoMapWith(this, deepMerger, arguments);
    };

    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
    };

    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.mergeDeep === 'function' ?
          m.mergeDeep.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.sort = function(comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator));
    };

    Map.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator, mapper));
    };

    // @pragma Mutability

    Map.prototype.withMutations = function(fn) {
      var mutable = this.asMutable();
      fn(mutable);
      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
    };

    Map.prototype.asMutable = function() {
      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
    };

    Map.prototype.asImmutable = function() {
      return this.__ensureOwner();
    };

    Map.prototype.wasAltered = function() {
      return this.__altered;
    };

    Map.prototype.__iterator = function(type, reverse) {
      return new MapIterator(this, type, reverse);
    };

    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry ) {
        iterations++;
        return fn(entry[1], entry[0], this$0);
      }, reverse);
      return iterations;
    };

    Map.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };


  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;


  // #pragma Trie Nodes



    function ArrayMapNode(ownerID, entries) {
      this.ownerID = ownerID;
      this.entries = entries;
    }

    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && entries.length === 1) {
        return; // undefined
      }

      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries, key, value);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new ArrayMapNode(ownerID, newEntries);
    };




    function BitmapIndexedNode(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    }

    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue :
        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
    };

    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;

      if (!exists && value === NOT_SET) {
        return this;
      }

      var idx = popCount(bitmap & (bit - 1));
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : undefined;
      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

      if (newNode === node) {
        return this;
      }

      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }

      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }

      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ?
        setIn(nodes, idx, newNode, isEditable) :
        spliceOut(nodes, idx, isEditable) :
        spliceIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }

      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };




    function HashArrayMapNode(ownerID, count, nodes) {
      this.ownerID = ownerID;
      this.count = count;
      this.nodes = nodes;
    }

    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };

    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];

      if (removed && !node) {
        return this;
      }

      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
      if (newNode === node) {
        return this;
      }

      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }

      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };




    function HashCollisionNode(ownerID, keyHash, entries) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries;
    }

    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }

      var removed = value === NOT_SET;

      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
      }

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };




    function ValueNode(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    }

    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };

    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var keyMatch = is(key, this.entry[0]);
      if (keyMatch ? value === this.entry[1] : removed) {
        return this;
      }

      SetRef(didAlter);

      if (removed) {
        SetRef(didChangeSize);
        return; // undefined
      }

      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value]);
      }

      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
    };



  // #pragma Iterators

  ArrayMapNode.prototype.iterate =
  HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  }

  BitmapIndexedNode.prototype.iterate =
  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  }

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  }

  createClass(MapIterator, Iterator);

    function MapIterator(map, type, reverse) {
      this._type = type;
      this._reverse = reverse;
      this._stack = map._root && mapIteratorFrame(map._root);
    }

    MapIterator.prototype.next = function() {
      var type = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };


  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ?
      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ?
      existing.mergeDeep(value) :
      is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function(existing, value, key)  {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function(x ) {return x.size !== 0});
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection ) {
      var mergeIntoMap = merger ?
        function(value, key)  {
          collection.update(key, NOT_SET, function(existing )
            {return existing === NOT_SET ? value : merger(existing, value, key)}
          );
        } :
        function(value, key)  {
          collection.set(key, value);
        }
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(
      isNotSet || (existing && existing.set),
      'invalid keyPath'
    );
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(
      nextExisting,
      keyPathIter,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing :
      nextUpdated === NOT_SET ? existing.remove(key) :
      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - ((x >> 1) & 0x55555555);
    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
    x = (x + (x >> 4)) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

    // @pragma Construction

    function List(value) {
      var empty = emptyList();
      if (value === null || value === undefined) {
        return empty;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedIterable(value);
      var size = iter.size;
      if (size === 0) {
        return empty;
      }
      assertNotInfinite(size);
      if (size > 0 && size < SIZE) {
        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty.withMutations(function(list ) {
        list.setSize(size);
        iter.forEach(function(v, i)  {return list.set(i, v)});
      });
    }

    List.of = function(/*...values*/) {
      return this(arguments);
    };

    List.prototype.toString = function() {
      return this.__toString('List [', ']');
    };

    // @pragma Access

    List.prototype.get = function(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };

    // @pragma Modification

    List.prototype.set = function(index, value) {
      return updateList(this, index, value);
    };

    List.prototype.remove = function(index) {
      return !this.has(index) ? this :
        index === 0 ? this.shift() :
        index === this.size - 1 ? this.pop() :
        this.splice(index, 1);
    };

    List.prototype.insert = function(index, value) {
      return this.splice(index, 0, value);
    };

    List.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };

    List.prototype.push = function(/*...values*/) {
      var values = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list ) {
        setListBounds(list, 0, oldSize + values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(oldSize + ii, values[ii]);
        }
      });
    };

    List.prototype.pop = function() {
      return setListBounds(this, 0, -1);
    };

    List.prototype.unshift = function(/*...values*/) {
      var values = arguments;
      return this.withMutations(function(list ) {
        setListBounds(list, -values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(ii, values[ii]);
        }
      });
    };

    List.prototype.shift = function() {
      return setListBounds(this, 1);
    };

    // @pragma Composition

    List.prototype.merge = function(/*...iters*/) {
      return mergeIntoListWith(this, undefined, arguments);
    };

    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, merger, iters);
    };

    List.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoListWith(this, deepMerger, arguments);
    };

    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, deepMergerWith(merger), iters);
    };

    List.prototype.setSize = function(size) {
      return setListBounds(this, 0, size);
    };

    // @pragma Iteration

    List.prototype.slice = function(begin, end) {
      var size = this.size;
      if (wholeSlice(begin, end, size)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size),
        resolveEnd(end, size)
      );
    };

    List.prototype.__iterator = function(type, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      return new Iterator(function()  {
        var value = values();
        return value === DONE ?
          iteratorDone() :
          iteratorValue(type, index++, value);
      });
    };

    List.prototype.__iterate = function(fn, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      var value;
      while ((value = values()) !== DONE) {
        if (fn(value, index++, this) === false) {
          break;
        }
      }
      return index;
    };

    List.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        return this;
      }
      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
    };


  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn =
  ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;



    function VNode(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    }

    // TODO: seems like these methods are very similar

    VNode.prototype.removeBefore = function(ownerID, level, index) {
      if (index === level ? 1 << level : 0 || this.array.length === 0) {
        return this;
      }
      var originIndex = (index >>> level) & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii = 0; ii < originIndex; ii++) {
          editable.array[ii] = undefined;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };

    VNode.prototype.removeAfter = function(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = ((index - 1) >>> level) & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }

      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }

      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };



  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ?
        iterateLeaf(node, offset) :
        iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : (left - offset) >> level;
      var to = ((right - offset) >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(
            array && array[idx], level - SHIFT, offset + (idx << level)
          );
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function(list ) {
        index < 0 ?
          setListBounds(list, index).set(0, value) :
          setListBounds(list, 0, index + 1).set(index, value)
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = (index >>> level) & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << (list._level + SHIFT)) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[(rawIndex >>> level) & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    // If it's going to end after it starts, it's empty.
    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    // New origin might need creating a higher root.
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    // New size might need creating a higher root.
    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    // Locate or create the new tail.
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ?
      listNodeFor(list, newCapacity - 1) :
      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    // Merge Tail into tree.
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = (oldTailOffset >>> level) & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
    }

    // If the size has been reduced, there's a chance the tail needs to be trimmed.
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    // If the new origin is within the tail, then we do not need a root.
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

    // Otherwise, if the root has been trimmed, garbage collect.
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      // Identify the new top root node of the subtree of the old root.
      while (newRoot) {
        var beginIndex = (newOrigin >>> newLevel) & MASK;
        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      // Trim the new sides of the new root.
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
  }

  createClass(OrderedMap, Map);

    // @pragma Construction

    function OrderedMap(value) {
      return value === null || value === undefined ? emptyOrderedMap() :
        isOrderedMap(value) ? value :
        emptyOrderedMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    OrderedMap.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedMap.prototype.toString = function() {
      return this.__toString('OrderedMap {', '}');
    };

    // @pragma Access

    OrderedMap.prototype.get = function(k, notSetValue) {
      var index = this._map.get(k);
      return index !== undefined ? this._list.get(index)[1] : notSetValue;
    };

    // @pragma Modification

    OrderedMap.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap();
    };

    OrderedMap.prototype.set = function(k, v) {
      return updateOrderedMap(this, k, v);
    };

    OrderedMap.prototype.remove = function(k) {
      return updateOrderedMap(this, k, NOT_SET);
    };

    OrderedMap.prototype.wasAltered = function() {
      return this._map.wasAltered() || this._list.wasAltered();
    };

    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._list.__iterate(
        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
        reverse
      );
    };

    OrderedMap.prototype.__iterator = function(type, reverse) {
      return this._list.fromEntrySeq().__iterator(type, reverse);
    };

    OrderedMap.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };


  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) { // removed
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
    function ToKeyedSequence(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }

    ToKeyedSequence.prototype.get = function(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };

    ToKeyedSequence.prototype.has = function(key) {
      return this._iter.has(key);
    };

    ToKeyedSequence.prototype.valueSeq = function() {
      return this._iter.valueSeq();
    };

    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
      }
      return reversedSequence;
    };

    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
      }
      return mappedSequence;
    };

    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var ii;
      return this._iter.__iterate(
        this._useKeys ?
          function(v, k)  {return fn(v, k, this$0)} :
          ((ii = reverse ? resolveSize(this) : 0),
            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
        reverse
      );
    };

    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
      if (this._useKeys) {
        return this._iter.__iterator(type, reverse);
      }
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var ii = reverse ? resolveSize(this) : 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
      });
    };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(ToIndexedSequence, IndexedSeq);
    function ToIndexedSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToIndexedSequence.prototype.includes = function(value) {
      return this._iter.includes(value);
    };

    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
    };

    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, iterations++, step.value, step)
      });
    };



  createClass(ToSetSequence, SetSeq);
    function ToSetSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToSetSequence.prototype.has = function(key) {
      return this._iter.includes(key);
    };

    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
    };

    ToSetSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, step.value, step.value, step);
      });
    };



  createClass(FromEntriesSequence, KeyedSeq);
    function FromEntriesSequence(entries) {
      this._iter = entries;
      this.size = entries.size;
    }

    FromEntriesSequence.prototype.entrySeq = function() {
      return this._iter.toSeq();
    };

    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(entry ) {
        // Check if entry exists first so array access doesn't throw for holes
        // in the parent iteration.
        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return fn(
            indexedIterable ? entry.get(1) : entry[1],
            indexedIterable ? entry.get(0) : entry[0],
            this$0
          );
        }
      }, reverse);
    };

    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          // Check if entry exists first so array access doesn't throw for holes
          // in the parent iteration.
          if (entry) {
            validateEntry(entry);
            var indexedIterable = isIterable(entry);
            return iteratorValue(
              type,
              indexedIterable ? entry.get(0) : entry[0],
              indexedIterable ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };


  ToIndexedSequence.prototype.cacheResult =
  ToKeyedSequence.prototype.cacheResult =
  ToSetSequence.prototype.cacheResult =
  FromEntriesSequence.prototype.cacheResult =
    cacheResultThrough;


  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function()  {return iterable};
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
      reversedSequence.flip = function()  {return iterable.reverse()};
      return reversedSequence;
    };
    flipSequence.has = function(key ) {return iterable.includes(key)};
    flipSequence.includes = function(key ) {return iterable.has(key)};
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
    }
    flipSequence.__iteratorUncached = function(type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function()  {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(
        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse
      );
    }
    return flipSequence;
  }


  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function(key ) {return iterable.has(key)};
    mappedSequence.get = function(key, notSetValue)  {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ?
        notSetValue :
        mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(
        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
        reverse
      );
    }
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type,
          key,
          mapper.call(context, entry[1], key, iterable),
          step
        );
      });
    }
    return mappedSequence;
  }


  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function()  {return iterable};
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function()  {return iterable.flip()};
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) 
      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
    reversedSequence.has = function(key )
      {return iterable.has(useKeys ? key : -1 - key)};
    reversedSequence.includes = function(value ) {return iterable.includes(value)};
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
    };
    reversedSequence.__iterator =
      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
    return reversedSequence;
  }


  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function(key ) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function(key, notSetValue)  {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
          v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    }
    return filterSequence;
  }


  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        0,
        function(a ) {return a + 1}
      );
    });
    return groups.asImmutable();
  }


  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
      );
    });
    var coerce = iterableClass(iterable);
    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
  }


  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      if (end === Infinity) {
        end = originalSize;
      } else {
        end = end | 0;
      }
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    // begin or end will be NaN if they were provided as negative numbers and
    // this iterable's size is unknown. In that case, cache first so there is
    // a known size and these do not resolve to NaN.
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    // Note: resolvedEnd is undefined when the original sequence's length is
    // unknown and this slice did not supply an end and should contain all
    // elements after resolvedBegin.
    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    // If iterable.size is undefined, the size of the realized sliceSeq is
    // unknown at this point unless the number of items to slice is 0
    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ?
          iterable.get(index + resolvedBegin, notSetValue) :
          notSetValue;
      }
    }

    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k)  {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                 iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function(type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      // Don't bother instantiating parent iterator if taking 0.
      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function()  {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    }

    return sliceSeq;
  }


  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function(v, k, c) 
        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function()  {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }


  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function()  {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }


  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function(v ) {
      if (!isIterable(v)) {
        v = isKeyedIterable ?
          keyedSeqFromValue(v) :
          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function(v ) {return v.size !== 0});

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable ||
          isKeyedIterable && isKeyed(singleton) ||
          isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(
      function(sum, seq)  {
        if (sum !== undefined) {
          var size = seq.size;
          if (size !== undefined) {
            return sum + size;
          }
        }
      },
      0
    );
    return concatSeq;
  }


  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function(fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {var this$0 = this;
        iter.__iterate(function(v, k)  {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    }
    flatSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function()  {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    }
    return flatSequence;
  }


  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(
      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
    ).flatten(true);
  }


  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 -1;
    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k) 
        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
        fn(v, iterations++, this$0) !== false},
        reverse
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function()  {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ?
          iteratorValue(type, iterations++, separator) :
          iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }


  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(
      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
    ).toArray();
    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
      isKeyedIterable ?
      function(v, i)  { entries[i].length = 2; } :
      function(v, i)  { entries[i] = v[1]; }
    );
    return isKeyedIterable ? KeyedSeq(entries) :
      isIndexed(iterable) ? IndexedSeq(entries) :
      SetSeq(entries);
  }


  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq()
        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
      return entry && entry[0];
    } else {
      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);
    // b is considered the new max if the comparator declares them equal, but
    // they are not equal and b is in fact a nullish value.
    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
  }


  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
    // Note: this a generic base implementation of __iterate in terms of
    // __iterator which may be more generically useful in the future.
    zipSequence.__iterate = function(fn, reverse) {
      /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
      // indexed:
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type, reverse) {
      var iterators = iters.map(function(i )
        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator(function()  {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i ) {return i.next()});
          isDone = steps.some(function(s ) {return s.done});
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type,
          iterations++,
          zipper.apply(null, steps.map(function(s ) {return s.value}))
        );
      });
    };
    return zipSequence
  }


  // #pragma Helper Functions

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable :
      isIndexed(iterable) ? IndexedIterable :
      SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create(
      (
        isKeyed(iterable) ? KeyedSeq :
        isIndexed(iterable) ? IndexedSeq :
        SetSeq
      ).prototype
    );
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      // Array might not be iterable in this environment, so we need a fallback
      // to our wrapped type.
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

    function Record(defaultValues, name) {
      var hasInitialized;

      var RecordType = function Record(values) {
        if (values instanceof RecordType) {
          return values;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys = Object.keys(defaultValues);
          setProps(RecordTypePrototype, keys);
          RecordTypePrototype.size = keys.length;
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys;
          RecordTypePrototype._defaultValues = defaultValues;
        }
        this._map = Map(values);
      };

      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;

      return RecordType;
    }

    Record.prototype.toString = function() {
      return this.__toString(recordName(this) + ' {', '}');
    };

    // @pragma Access

    Record.prototype.has = function(k) {
      return this._defaultValues.hasOwnProperty(k);
    };

    Record.prototype.get = function(k, notSetValue) {
      if (!this.has(k)) {
        return notSetValue;
      }
      var defaultVal = this._defaultValues[k];
      return this._map ? this._map.get(k, defaultVal) : defaultVal;
    };

    // @pragma Modification

    Record.prototype.clear = function() {
      if (this.__ownerID) {
        this._map && this._map.clear();
        return this;
      }
      var RecordType = this.constructor;
      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
    };

    Record.prototype.set = function(k, v) {
      if (!this.has(k)) {
        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
      }
      if (this._map && !this._map.has(k)) {
        var defaultVal = this._defaultValues[k];
        if (v === defaultVal) {
          return this;
        }
      }
      var newMap = this._map && this._map.set(k, v);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.remove = function(k) {
      if (!this.has(k)) {
        return this;
      }
      var newMap = this._map && this._map.remove(k);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
    };

    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
    };

    Record.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map && this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return makeRecord(this, newMap, ownerID);
    };


  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn =
  RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;


  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {
      // Object.defineProperty failed. Probably IE8.
    }
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

    // @pragma Construction

    function Set(value) {
      return value === null || value === undefined ? emptySet() :
        isSet(value) && !isOrdered(value) ? value :
        emptySet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    Set.of = function(/*...values*/) {
      return this(arguments);
    };

    Set.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    Set.prototype.toString = function() {
      return this.__toString('Set {', '}');
    };

    // @pragma Access

    Set.prototype.has = function(value) {
      return this._map.has(value);
    };

    // @pragma Modification

    Set.prototype.add = function(value) {
      return updateSet(this, this._map.set(value, true));
    };

    Set.prototype.remove = function(value) {
      return updateSet(this, this._map.remove(value));
    };

    Set.prototype.clear = function() {
      return updateSet(this, this._map.clear());
    };

    // @pragma Composition

    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
      iters = iters.filter(function(x ) {return x.size !== 0});
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set ) {
        for (var ii = 0; ii < iters.length; ii++) {
          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
        }
      });
    };

    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (!iters.every(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (iters.some(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.merge = function() {
      return this.union.apply(this, arguments);
    };

    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return this.union.apply(this, iters);
    };

    Set.prototype.sort = function(comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator));
    };

    Set.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator, mapper));
    };

    Set.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
    };

    Set.prototype.__iterator = function(type, reverse) {
      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
    };

    Set.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };


  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set :
      newMap.size === 0 ? set.__empty() :
      set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

    // @pragma Construction

    function OrderedSet(value) {
      return value === null || value === undefined ? emptyOrderedSet() :
        isOrderedSet(value) ? value :
        emptyOrderedSet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    OrderedSet.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedSet.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    OrderedSet.prototype.toString = function() {
      return this.__toString('OrderedSet {', '}');
    };


  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

    // @pragma Construction

    function Stack(value) {
      return value === null || value === undefined ? emptyStack() :
        isStack(value) ? value :
        emptyStack().unshiftAll(value);
    }

    Stack.of = function(/*...values*/) {
      return this(arguments);
    };

    Stack.prototype.toString = function() {
      return this.__toString('Stack [', ']');
    };

    // @pragma Access

    Stack.prototype.get = function(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };

    Stack.prototype.peek = function() {
      return this._head && this._head.value;
    };

    // @pragma Modification

    Stack.prototype.push = function(/*...values*/) {
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pushAll = function(iter) {
      iter = IndexedIterable(iter);
      if (iter.size === 0) {
        return this;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.reverse().forEach(function(value ) {
        newSize++;
        head = {
          value: value,
          next: head
        };
      });
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pop = function() {
      return this.slice(1);
    };

    Stack.prototype.unshift = function(/*...values*/) {
      return this.push.apply(this, arguments);
    };

    Stack.prototype.unshiftAll = function(iter) {
      return this.pushAll(iter);
    };

    Stack.prototype.shift = function() {
      return this.pop.apply(this, arguments);
    };

    Stack.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = undefined;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };

    Stack.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        // super.slice(begin, end);
        return IndexedCollection.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    // @pragma Mutability

    Stack.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };

    // @pragma Iteration

    Stack.prototype.__iterate = function(fn, reverse) {
      if (reverse) {
        return this.reverse().__iterate(fn);
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };

    Stack.prototype.__iterator = function(type, reverse) {
      if (reverse) {
        return this.reverse().__iterator(type);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator(function()  {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type, iterations++, value);
        }
        return iteratorDone();
      });
    };


  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;


  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  /**
   * Contributes additional methods to a constructor
   */
  function mixin(ctor, methods) {
    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols &&
      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    // ### Conversion to other types

    toArray: function() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
      return array;
    },

    toIndexedSeq: function() {
      return new ToIndexedSequence(this);
    },

    toJS: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
      ).__toJS();
    },

    toJSON: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
      ).__toJS();
    },

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return Map(this.toKeyedSeq());
    },

    toObject: function() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function(v, k)  { object[k] = v; });
      return object;
    },

    toOrderedMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function() {
      return new ToSetSequence(this);
    },

    toSeq: function() {
      return isIndexed(this) ? this.toIndexedSeq() :
        isKeyed(this) ? this.toKeyedSeq() :
        this.toSetSeq();
    },

    toStack: function() {
      // Use Late Binding here to solve the circular dependency.
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function() {
      // Use Late Binding here to solve the circular dependency.
      return List(isKeyed(this) ? this.valueSeq() : this);
    },


    // ### Common JavaScript methods and properties

    toString: function() {
      return '[Iterable]';
    },

    __toString: function(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    concat: function() {var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function(searchValue) {
      return this.some(function(value ) {return is(value, searchValue)});
    },

    entries: function() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v, k, c)  {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    forEach: function(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function(v ) {
        isFirst ? (isFirst = false) : (joined += separator);
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function(v, k, c)  {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function() {
      return this.__iterator(ITERATE_VALUES);
    },


    // ### More sequential methods

    butLast: function() {
      return this.slice(0, -1);
    },

    isEmpty: function() {
      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
    },

    count: function(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },

    countBy: function(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function(other) {
      return deepEqual(this, other);
    },

    entrySeq: function() {
      var iterable = this;
      if (iterable._cache) {
        // We cache as an entries array, so we can just return the cache!
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
      return entriesSequence;
    },

    filterNot: function(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findEntry: function(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findKey: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLast: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    findLastEntry: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },

    findLastKey: function(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },

    first: function() {
      return this.find(returnTrue);
    },

    flatMap: function(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function() {
      return new FromEntriesSequence(this);
    },

    get: function(searchKey, notSetValue) {
      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
    },

    getIn: function(searchKeyPath, notSetValue) {
      var nested = this;
      // Note: in an ES6 environment, we would prefer:
      // for (var key of searchKeyPath) {
      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function(value ) {return iter.includes(value)});
    },

    isSuperset: function(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keyOf: function(searchValue) {
      return this.findKey(function(value ) {return is(value, searchValue)});
    },

    keySeq: function() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function() {
      return this.toSeq().reverse().first();
    },

    lastKeyOf: function(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },

    max: function(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function() {
      return this.slice(1);
    },

    skip: function(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function() {
      return this.toIndexedSeq();
    },


    // ### Hashable Object

    hashCode: function() {
      return this.__hash || (this.__hash = hashIterable(this));
    }


    // ### Internal

    // abstract __iterate(fn, reverse)

    // abstract __iterator(type, reverse)
  });

  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect =
  IterablePrototype.toSource = function() { return this.toString(); };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  mixin(KeyedIterable, {

    // ### More sequential methods

    flip: function() {
      return reify(this, flipFactory(this));
    },

    mapEntries: function(mapper, context) {var this$0 = this;
      var iterations = 0;
      return reify(this,
        this.toSeq().map(
          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
        ).fromEntrySeq()
      );
    },

    mapKeys: function(mapper, context) {var this$0 = this;
      return reify(this,
        this.toSeq().flip().map(
          function(k, v)  {return mapper.call(context, k, v, this$0)}
        ).flip()
      );
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



  mixin(IndexedIterable, {

    // ### Conversion to other types

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, false);
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function(searchValue) {
      var key = this.keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function(index, removeNum /*, ...values*/) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
        return this;
      }
      // If index is negative, it should resolve relative to the size of the
      // collection. However size may be expensive to compute if not cached, so
      // only call count() if the number is in fact negative.
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ?
          spliced :
          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },


    // ### More collection methods

    findLastIndex: function(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    first: function() {
      return this.get(0);
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function(index, notSetValue) {
      index = wrapIndex(this, index);
      return (index < 0 || (this.size === Infinity ||
          (this.size !== undefined && index > this.size))) ?
        notSetValue :
        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
    },

    has: function(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ?
        this.size === Infinity || index < this.size :
        this.indexOf(index) !== -1
      );
    },

    interpose: function(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function(/*...iterables*/) {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    keySeq: function() {
      return Range(0, this.size);
    },

    last: function() {
      return this.get(-1);
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function(/*, ...iterables */) {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function(zipper/*, ...iterables */) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



  mixin(SetIterable, {

    // ### ES6 Collection methods (ES6 Array and Map)

    get: function(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function(value) {
      return this.has(value);
    },


    // ### More sequential methods

    keySeq: function() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;
  SetIterable.prototype.contains = SetIterable.prototype.includes;


  // Mixin subclasses

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);


  // #pragma Helper functions

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    }
  }

  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    }
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : String(value);
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(
      keyed ?
        ordered ?
          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
        ordered ?
          function(v ) { h = 31 * h + hash(v) | 0; } :
          function(v ) { h = h + hash(v) | 0; }
    );
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;

}));
},{}],45:[function(require,module,exports){
module.exports = require('util').inherits

},{"util":undefined}],46:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],47:[function(require,module,exports){
module.exports = require('./lib/isemail');

},{"./lib/isemail":48}],48:[function(require,module,exports){
/**
 * To validate an email address according to RFCs 5321, 5322 and others
 *
 * Copyright © 2008-2011, Dominic Sayers
 * Test schema documentation Copyright © 2011, Daniel Marschall
 * Port for Node.js Copyright © 2013-2014, GlobeSherpa
 *              and Copyright © 2014-2015, Eli Skeggs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   - Neither the name of Dominic Sayers nor the names of its contributors may
 *     be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @author      Dominic Sayers <dominic@sayers.cc>
 * @author      Eli Skeggs <skeggse@gmail.com>
 * @copyright   2008-2011 Dominic Sayers
 * @copyright   2013-2014 GlobeSherpa
 * @copyright   2014-2015 Eli Skeggs
 * @license     http://www.opensource.org/licenses/bsd-license.php BSD License
 * @link        http://www.dominicsayers.com/isemail
 * @link        https://github.com/hapijs/isemail
 * @version     1.2.0 Drop Node 0.8, fix style, switch to lab/code
 */

var Dns = require('dns');

var internals = {
    defaultThreshold: 16,
    maxIPv6Groups: 8,
    categories: {
        valid: 1,
        dnsWarn: 7,
        rfc5321: 15,
        cfws: 31,
        deprecated: 63,
        rfc5322: 127,
        error: 255
    },

    diagnoses: {
        // Address is valid
        valid: 0,

        // Address is valid, but the DNS check failed
        dnsWarnNoMXRecord: 5,
        dnsWarnNoRecord: 6,

        // Address is valid for SMTP but has unusual elements
        rfc5321TLD: 9,
        rfc5321TLDNumeric: 10,
        rfc5321QuotedString: 11,
        rfc5321AddressLiteral: 12,

        // Address is valid for message, but must be modified for envelope
        cfwsComment: 17,
        cfwsFWS: 18,

        // Address contains deprecated elements, but may still be valid in some contexts
        deprecatedLocalPart: 33,
        deprecatedFWS: 34,
        deprecatedQTEXT: 35,
        deprecatedQP: 36,
        deprecatedComment: 37,
        deprecatedCTEXT: 38,
        deprecatedIPv6: 39,
        deprecatedCFWSNearAt: 49,

        // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid
        rfc5322Domain: 65,
        rfc5322TooLong: 66,
        rfc5322LocalTooLong: 67,
        rfc5322DomainTooLong: 68,
        rfc5322LabelTooLong: 69,
        rfc5322DomainLiteral: 70,
        rfc5322DomainLiteralOBSDText: 71,
        rfc5322IPv6GroupCount: 72,
        rfc5322IPv62x2xColon: 73,
        rfc5322IPv6BadCharacter: 74,
        rfc5322IPv6MaxGroups: 75,
        rfc5322IPv6ColonStart: 76,
        rfc5322IPv6ColonEnd: 77,

        // Address is invalid for any purpose
        errExpectingDTEXT: 129,
        errNoLocalPart: 130,
        errNoDomain: 131,
        errConsecutiveDots: 132,
        errATEXTAfterCFWS: 133,
        errATEXTAfterQS: 134,
        errATEXTAfterDomainLiteral: 135,
        errExpectingQPair: 136,
        errExpectingATEXT: 137,
        errExpectingQTEXT: 138,
        errExpectingCTEXT: 139,
        errBackslashEnd: 140,
        errDotStart: 141,
        errDotEnd: 142,
        errDomainHyphenStart: 143,
        errDomainHyphenEnd: 144,
        errUnclosedQuotedString: 145,
        errUnclosedComment: 146,
        errUnclosedDomainLiteral: 147,
        errFWSCRLFx2: 148,
        errFWSCRLFEnd: 149,
        errCRNoLF: 150,
        errUnknownTLD: 160,
        errDomainTooShort: 161
    },

    components: {
        localpart: 0,
        domain: 1,
        literal: 2,
        contextComment: 3,
        contextFWS: 4,
        contextQuotedString: 5,
        contextQuotedPair: 6
    }
};

// $lab:coverage:off$
internals.defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ?
    process.nextTick.bind(process) :
    function (callback) {

        return setTimeout(callback, 0);
    };
// $lab:coverage:on$


// US-ASCII visible characters not valid for atext
// (http://tools.ietf.org/html/rfc5322#section-3.2.3)
var SPECIALS = '()<>[]:;@\\,."';

// A silly little optimized function generator
var optimizeLookup = function optimizeLookup (string) {

    var lookup = new Array(0x100);

    for (var i = 0xff; i >= 0; --i) {
        lookup[i] = false;
    }

    for (var il = string.length; i < il; ++i) {
        lookup[string.charCodeAt(i)] = true;
    }

    var body = 'return function (code) {\n';
    body += '  return lookup[code];\n';
    body += '}';
    return (new Function('lookup', body))(lookup);
};


var specialsLookup = optimizeLookup(SPECIALS);

// This matches valid IPv4 addresses from the end of a string
var IPv4_REGEX =
    /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
var IPv6_REGEX = /^[a-fA-F\d]{0,4}$/;
var IPv6_REGEX_TEST = IPv6_REGEX.test.bind(IPv6_REGEX);

var hasOwn = Object.prototype.hasOwnProperty;

/**
 * Check that an email address conforms to RFCs 5321, 5322 and others
 *
 * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
 * addr-spec as defined by RFC 5322. Depending on the context, either can be
 * regarded as a valid email address. The RFC 5321 Mailbox specification is
 * more restrictive (comments, white space and obsolete forms are not allowed).
 *
 * @param {string} email The email address to check.
 * @param {Object} options The (optional) options:
 *   {boolean} checkDNS If true then will check DNS for MX records. If
 *     true this call to isEmail _will_ be asynchronous.
 *   {*} errorLevel Determines the boundary between valid and invalid
 *     addresses. Status codes above this number will be returned as-is, status
 *     codes below will be returned as valid. Thus the calling program can
 *     simply look for diagnoses.valid if it is only interested in whether an
 *     address is valid or not. The errorLevel will determine how "picky"
 *     isEmail() is about the address. If omitted or passed as false then
 *     isEmail() will return true or false rather than an integer error or
 *     warning. NB Note the difference between errorLevel = false and
 *     errorLevel = 0.
 * @param {function(number|boolean)} callback The (optional) callback handler.
 * @return {*}
 */
var isEmail = function isEmail (email, options, callback) {

    if (typeof options === 'function') {
        callback = options;
        options = {};
    }

    if (!options) {
        options = {};
    }

    if (typeof callback !== 'function') {
        if (options.checkDNS) {
            throw new TypeError('expected callback function for checkDNS option');
        }

        callback = null;
    }

    var diagnose;
    var threshold;

    if (typeof options.errorLevel === 'number') {
        diagnose = true;
        threshold = options.errorLevel;
    }
    else {
        diagnose = !!options.errorLevel;
        threshold = internals.diagnoses.valid;
    }

    if (options.tldWhitelist) {
        if (typeof options.tldWhitelist === 'string') {
            options.tldWhitelist = [options.tldWhitelist];
        } else if (typeof options.tldWhitelist !== 'object') {
            throw new TypeError('expected array or object tldWhitelist');
        }
    }

    if (options.minDomainAtoms && (options.minDomainAtoms !== ((+options.minDomainAtoms) | 0) || options.minDomainAtoms < 0)) {
        throw new TypeError('expected positive integer minDomainAtoms');
    }

    var maxResult = internals.diagnoses.valid;

    var updateResult = function updateResult (value) {

        if (value > maxResult) {
            maxResult = value;
        }
    };

    var context = {
        now: internals.components.localpart,
        prev: internals.components.localpart,
        stack: [internals.components.localpart]
    };

    var token;
    var prevToken = '';
    var charCode = 0;

    var parseData = {
        local: '',
        domain: ''
    };
    var atomData = {
        locals: [''],
        domains: ['']
    };

    var elementCount = 0;
    var elementLength = 0;
    var crlfCount = 0;

    var hyphenFlag = false;
    var assertEnd = false;

    var emailLength = email.length;

    for (var i = 0, il = emailLength; i < il; ++i) {
        // Token is used outside the loop, must declare similarly
        token = email[i];

        switch (context.now) {
            // Local-part
            case internals.components.localpart:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   local-part      =   dot-atom / quoted-string / obs-local-part
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   quoted-string   =   [CFWS]
                //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                       [CFWS]
                //
                //   obs-local-part  =   word *("." word)
                //
                //   word            =   atom / quoted-string
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments are OK at the beginning of an element
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
                        }
                        else {
                            updateResult(internals.diagnoses.cfwsComment);
                             // Cannot start a comment in an element, should be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        if (elementLength === 0) {
                            // Another dot, already?
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        }
                        else {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            if (assertEnd) {
                                updateResult(internals.diagnoses.deprecatedLocalPart);
                            }

                            // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)
                            assertEnd = false;
                            elementLength = 0;
                            ++elementCount;
                            parseData.local += token;
                            atomData.locals[elementCount] = '';
                        }

                        break;

                    // Quoted string
                    case '"':
                        if (elementLength === 0) {
                            // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                            updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            ++elementLength;

                            // Quoted string must be the entire element
                            assertEnd = true;
                            context.stack.push(context.now);
                            context.now = internals.components.contextQuotedString;
                        }
                        else {
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
                        }
                        else {
                            // We can't start FWS in the middle of an element, better be end
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    case '@':
                        // At this point we should have a valid local-part
                        // $lab:coverage:off$
                        if (context.stack.length !== 1) {
                            throw new Error('unexpected item on context stack');
                        }
                        // $lab:coverage:on$

                        if (parseData.local.length === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errNoLocalPart);
                        }
                        else if (elementLength === 0) {
                            // Fatal error
                            updateResult(internals.diagnoses.errDotEnd);
                        }
                        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                        //    octets
                        else if (parseData.local.length > 64) {
                            updateResult(internals.diagnoses.rfc5322LocalTooLong);
                        }
                        // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                        //    addr-spec
                        //
                        // http://tools.ietf.org/html/rfc2119
                        // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                        //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                        //    and the case carefully weighed before implementing any behavior described with this label.
                        else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
                            updateResult(internals.diagnoses.deprecatedCFWSNearAt);
                        }

                        // Clear everything down for the domain parsing
                        context.now = internals.components.domain;
                        context.stack[0] = internals.components.domain;
                        elementCount = 0;
                        elementLength = 0;
                        assertEnd = false; // CFWS can only appear at the end of the element
                        break;

                    // ATEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"
                        if (assertEnd) {
                            // We have encountered atext where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.contextQuotedString:
                                    updateResult(internals.diagnoses.errATEXTAfterQS);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        }
                        else {
                            context.prev = context.now;
                            charCode = token.charCodeAt(0);

                            // Especially if charCode == 10
                            if (charCode < 33 || charCode > 126 || specialsLookup(charCode)) {

                                // Fatal error
                                updateResult(internals.diagnoses.errExpectingATEXT);
                            }

                            parseData.local += token;
                            atomData.locals[elementCount] += token;
                            ++elementLength;
                        }
                }

                break;

            case internals.components.domain:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain          =   dot-atom / domain-literal / obs-domain
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-domain      =   atom *("." atom)
                //
                //   atom            =   [CFWS] 1*atext [CFWS]

                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Mailbox        = Local-part "@" ( Domain / address-literal )
                //
                //   Domain         = sub-domain *("." sub-domain)
                //
                //   address-literal  = "[" ( IPv4-address-literal /
                //                    IPv6-address-literal /
                //                    General-address-literal ) "]"
                //                    ; See Section 4.1.3

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //      Note: A liberal syntax for the domain portion of addr-spec is
                //      given here.  However, the domain portion contains addressing
                //      information specified by and used in other protocols (e.g.,
                //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                //      incumbent upon implementations to conform to the syntax of
                //      addresses for the context in which they are used.
                //
                // is_email() author's note: it's not clear how to interpret this in
                // he context of a general email address validator. The conclusion I
                // have reached is this: "addressing information" must comply with
                // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                // invisible" must comply only with RFC 5322.
                switch (token) {
                    // Comment
                    case '(':
                        if (elementLength === 0) {
                            // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                            // http://tools.ietf.org/html/rfc5322#section-3.4.1
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
                        }
                        else {
                            // We can't start a comment mid-element, better be at the end
                            assertEnd = true;
                            updateResult(internals.diagnoses.cfwsComment);
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // Next dot-atom element
                    case '.':
                        if (elementLength === 0) {
                            // Another dot, already? Fatal error.
                            updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                        }
                        else if (hyphenFlag) {
                            // Previous subdomain ended in a hyphen. Fatal error.
                            updateResult(internals.diagnoses.errDomainHyphenEnd);
                        }
                        else if (elementLength > 63) {
                            // Nowhere in RFC 5321 does it say explicitly that the domain part of a Mailbox must be a valid domain according to the
                            // DNS standards set out in RFC 1035, but this *is* implied in several places. For instance, wherever the idea of host
                            // routing is discussed the RFC says that the domain must be looked up in the DNS. This would be nonsense unless the
                            // domain was designed to be a valid DNS domain. Hence we must conclude that the RFC 1035 restriction on label length
                            // also applies to RFC 5321 domains.
                            //
                            // http://tools.ietf.org/html/rfc1035#section-2.3.4
                            // labels          63 octets or less

                            updateResult(internals.diagnoses.rfc5322LabelTooLong);
                        }

                        // CFWS is OK again now we're at the beginning of an element (although
                        // it may be obsolete CFWS)
                        assertEnd = false;
                        elementLength = 0;
                        ++elementCount;
                        atomData.domains[elementCount] = '';
                        parseData.domain += token;

                        break;

                    // Domain literal
                    case '[':
                        if (parseData.domain.length === 0) {
                            // Domain literal must be the only component
                            assertEnd = true;
                            ++elementLength;
                            context.stack.push(context.now);
                            context.now = internals.components.literal;
                            parseData.domain += token;
                            atomData.domains[elementCount] += token;
                            parseData.literal = '';
                        }
                        else {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }

                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        if (elementLength === 0) {
                            updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
                        }
                        else {
                            // We can't start FWS in the middle of an element, so this better be the end
                            updateResult(internals.diagnoses.cfwsFWS);
                            assertEnd = true;
                        }

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // This must be ATEXT
                    default:
                        // RFC 5322 allows any atext...
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                        //            "!" / "#" /     ;  characters not including
                        //            "$" / "%" /     ;  specials.  Used for atoms.
                        //            "&" / "'" /
                        //            "*" / "+" /
                        //            "-" / "/" /
                        //            "=" / "?" /
                        //            "^" / "_" /
                        //            "`" / "{" /
                        //            "|" / "}" /
                        //            "~"

                        // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                        //   (RFCs 1034 & 1123)
                        // http://tools.ietf.org/html/rfc5321#section-4.1.2
                        //   sub-domain     = Let-dig [Ldh-str]
                        //
                        //   Let-dig        = ALPHA / DIGIT
                        //
                        //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                        //
                        if (assertEnd) {
                            // We have encountered ATEXT where it is no longer valid
                            switch (context.prev) {
                                case internals.components.contextComment:
                                case internals.components.contextFWS:
                                    updateResult(internals.diagnoses.errATEXTAfterCFWS);
                                    break;

                                case internals.components.literal:
                                    updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
                                    break;

                                // $lab:coverage:off$
                                default:
                                    throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                                // $lab:coverage:on$
                            }
                        }

                        charCode = token.charCodeAt(0);
                        // Assume this token isn't a hyphen unless we discover it is
                        hyphenFlag = false;

                        if (charCode < 33 || charCode > 126 || specialsLookup(charCode)) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingATEXT);
                        }
                        else if (token === '-') {
                            if (elementLength === 0) {
                                // Hyphens cannot be at the beginning of a subdomain, fatal error
                                updateResult(internals.diagnoses.errDomainHyphenStart);
                            }

                            hyphenFlag = true;
                        }
                        // Check if it's a neither a number nor a latin letter
                        else if (charCode < 48 || charCode > 122 || (charCode > 57 && charCode < 65) || (charCode > 90 && charCode < 97)) {
                            // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                            updateResult(internals.diagnoses.rfc5322Domain);
                        }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                }

                break;

            // Domain literal
            case internals.components.literal:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                switch (token) {
                    // End of domain literal
                    case ']':
                        if (maxResult < internals.categories.deprecated) {
                            // Could be a valid RFC 5321 address literal, so let's check

                            // http://tools.ietf.org/html/rfc5321#section-4.1.2
                            //   address-literal  = "[" ( IPv4-address-literal /
                            //                    IPv6-address-literal /
                            //                    General-address-literal ) "]"
                            //                    ; See Section 4.1.3
                            //
                            // http://tools.ietf.org/html/rfc5321#section-4.1.3
                            //   IPv4-address-literal  = Snum 3("."  Snum)
                            //
                            //   IPv6-address-literal  = "IPv6:" IPv6-addr
                            //
                            //   General-address-literal  = Standardized-tag ":" 1*dcontent
                            //
                            //   Standardized-tag  = Ldh-str
                            //                     ; Standardized-tag MUST be specified in a
                            //                     ; Standards-Track RFC and registered with IANA
                            //
                            //   dcontent      = %d33-90 / ; Printable US-ASCII
                            //                 %d94-126 ; excl. "[", "\", "]"
                            //
                            //   Snum          = 1*3DIGIT
                            //                 ; representing a decimal integer
                            //                 ; value in the range 0 through 255
                            //
                            //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                            //
                            //   IPv6-hex      = 1*4HEXDIG
                            //
                            //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                            //
                            //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *5(":" IPv6-hex)]
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 6 groups in addition to the
                            //                 ; "::" may be present.
                            //
                            //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                            //
                            //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                            //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                            //                 IPv4-address-literal
                            //                 ; The "::" represents at least 2 16-bit groups of
                            //                 ; zeros.  No more than 4 groups in addition to the
                            //                 ; "::" and IPv4-address-literal may be present.

                            var index = -1;
                            var addressLiteral = parseData.literal;
                            var matchesIP = IPv4_REGEX.exec(addressLiteral);

                            // Maybe extract IPv4 part from the end of the address-literal
                            if (matchesIP) {
                                index = matchesIP.index;
                                if (index !== 0) {
                                    // Convert IPv4 part to IPv6 format for futher testing
                                    addressLiteral = addressLiteral.slice(0, index) + '0:0';
                                }
                            }

                            if (index === 0) {
                                // Nothing there except a valid IPv4 address, so...
                                updateResult(internals.diagnoses.rfc5321AddressLiteral);
                            }
                            else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
                                updateResult(internals.diagnoses.rfc5322DomainLiteral);
                            }
                            else {
                                var match = addressLiteral.slice(5);
                                var maxGroups = internals.maxIPv6Groups;
                                var groups = match.split(':');
                                index = match.indexOf('::');

                                if (!~index) {
                                    // Need exactly the right number of groups
                                    if (groups.length !== maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
                                    }
                                }
                                else if (index !== match.lastIndexOf('::')) {
                                    updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
                                }
                                else {
                                    if (index === 0 || index === match.length - 2) {
                                        // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                                        ++maxGroups;
                                    }

                                    if (groups.length > maxGroups) {
                                        updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
                                    }
                                    else if (groups.length === maxGroups) {
                                        // Eliding a single "::"
                                        updateResult(internals.diagnoses.deprecatedIPv6);
                                    }
                                }

                                // IPv6 testing strategy
                                if (match[0] === ':' && match[1] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
                                }
                                else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
                                    updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
                                }
                                else if (groups.every(IPv6_REGEX_TEST)) {
                                    updateResult(internals.diagnoses.rfc5321AddressLiteral);
                                }
                                else {
                                    updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
                                }
                            }
                        }
                        else {
                            updateResult(internals.diagnoses.rfc5322DomainLiteral);
                        }

                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    case '\\':
                        updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // DTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.4.1
                        //   dtext         =   %d33-90 /  ; Printable US-ASCII
                        //                     %d94-126 / ;  characters not including
                        //                     obs-dtext  ;  "[", "]", or "\"
                        //
                        //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                        //
                        //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                        //                     %d11 /     ;  characters that do not
                        //                     %d12 /     ;  include the carriage
                        //                     %d14-31 /  ;  return, line feed, and
                        //                     %d127      ;  white space characters
                        charCode = token.charCodeAt(0);

                        // '\r', '\n', ' ', and '\t' have already been parsed above
                        if (charCode > 127 || charCode === 0 || token === '[') {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingDTEXT);
                            break;
                        }
                        else if (charCode < 33 || charCode === 127) {
                            updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                        }

                        parseData.literal += token;
                        parseData.domain += token;
                        atomData.domains[elementCount] += token;
                        ++elementLength;
                }

                break;

            // Quoted string
            case internals.components.contextQuotedString:
                // http://tools.ietf.org/html/rfc5322#section-3.2.4
                //   quoted-string = [CFWS]
                //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                   [CFWS]
                //
                //   qcontent      = qtext / quoted-pair
                switch (token) {
                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case '\t':
                        // http://tools.ietf.org/html/rfc5322#section-3.2.2
                        //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                        //   a structured header field are semantically interpreted as a single
                        //   space character.

                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                        //   semantically "invisible" and therefore not part of the
                        //   quoted-string

                        parseData.local += ' ';
                        atomData.locals[elementCount] += ' ';
                        ++elementLength;

                        updateResult(internals.diagnoses.cfwsFWS);
                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // End of quoted string
                    case '"':
                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        ++elementLength;
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // QTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.4
                        //   qtext          =   %d33 /             ; Printable US-ASCII
                        //                      %d35-91 /          ;  characters not including
                        //                      %d93-126 /         ;  "\" or the quote character
                        //                      obs-qtext
                        //
                        //   obs-qtext      =   obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                        //                      %d11 /             ;  characters that do not
                        //                      %d12 /             ;  include the carriage
                        //                      %d14-31 /          ;  return, line feed, and
                        //                      %d127              ;  white space characters
                        charCode = token.charCodeAt(0);

                        if (charCode > 127 || charCode === 0 || charCode === 10) {
                            updateResult(internals.diagnoses.errExpectingQTEXT);
                        }
                        else if (charCode < 32 || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedQTEXT);
                        }

                        parseData.local += token;
                        atomData.locals[elementCount] += token;
                        ++elementLength;
                }

                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   If the string can be represented as a dot-atom (that is, it contains
                //   no characters other than atext characters or "." surrounded by atext
                //   characters), then the dot-atom form SHOULD be used and the quoted-
                //   string form SHOULD NOT be used.

                break;
            // Quoted pair
            case internals.components.contextQuotedPair:
                // http://tools.ietf.org/html/rfc5322#section-3.2.1
                //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                //
                //   VCHAR           =  %d33-126   ; visible (printing) characters
                //   WSP             =  SP / HTAB  ; white space
                //
                //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                //
                //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                //                       %d11 /    ;  characters that do not
                //                       %d12 /    ;  include the carriage
                //                       %d14-31 / ;  return, line feed, and
                //                       %d127     ;  white space characters
                //
                // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                charCode = token.charCodeAt(0);

                if (charCode > 127) {
                    // Fatal error
                    updateResult(internals.diagnoses.errExpectingQPair);
                }
                else if ((charCode < 31 && charCode !== 9) || charCode === 127) {
                    // ' ' and '\t' are allowed
                    updateResult(internals.diagnoses.deprecatedQP);
                }

                // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   the sending system SHOULD transmit the form that uses the minimum quoting possible.

                context.prev = context.now;
                // End of qpair
                context.now = context.stack.pop();
                token = '\\' + token;

                switch (context.now) {
                    case internals.components.contextComment:
                        break;

                    case internals.components.contextQuotedString:
                        parseData.local += token;
                        atomData.locals[elementCount] += token;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    case internals.components.literal:
                        parseData.domain += token;
                        atomData.domains[elementCount] += token;

                        // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                        elementLength += 2;
                        break;

                    // $lab:coverage:off$
                    default:
                        throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
                    // $lab:coverage:on$
                }
                break;

            // Comment
            case internals.components.contextComment:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                //
                //   ccontent = ctext / quoted-pair / comment
                switch (token) {
                    // Nested comment
                    case '(':
                        // Nested comments are ok
                        context.stack.push(context.now);
                        context.now = internals.components.contextComment;
                        break;

                    // End of comment
                    case ')':
                        context.prev = context.now;
                        context.now = context.stack.pop();
                        break;

                    // Quoted pair
                    case '\\':
                        context.stack.push(context.now);
                        context.now = internals.components.contextQuotedPair;
                        break;

                    // Folding white space
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                            break;
                        }

                        // Fallthrough

                    case ' ':
                    case '\t':
                        updateResult(internals.diagnoses.cfwsFWS);

                        context.stack.push(context.now);
                        context.now = internals.components.contextFWS;
                        prevToken = token;
                        break;

                    // CTEXT
                    default:
                        // http://tools.ietf.org/html/rfc5322#section-3.2.3
                        //   ctext         = %d33-39 /  ; Printable US-ASCII
                        //                   %d42-91 /  ;  characters not including
                        //                   %d93-126 / ;  "(", ")", or "\"
                        //                   obs-ctext
                        //
                        //   obs-ctext     = obs-NO-WS-CTL
                        //
                        //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                        //                   %d11 /     ;  characters that do not
                        //                   %d12 /     ;  include the carriage
                        //                   %d14-31 /  ;  return, line feed, and
                        //                   %d127      ;  white space characters
                        charCode = token.charCodeAt(0);

                        if (charCode > 127 || charCode === 0 || charCode === 10) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingCTEXT);
                            break;
                        }
                        else if (charCode < 32 || charCode === 127) {
                            updateResult(internals.diagnoses.deprecatedCTEXT);
                        }
                }

                break;

            // Folding white space
            case internals.components.contextFWS:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                //                                   ; Folding white space

                // But note the erratum:
                // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                //   In the obsolete syntax, any amount of folding white space MAY be
                //   inserted where the obs-FWS rule is allowed.  This creates the
                //   possibility of having two consecutive "folds" in a line, and
                //   therefore the possibility that a line which makes up a folded header
                //   field could be composed entirely of white space.
                //
                //   obs-FWS =   1*([CRLF] WSP)

                if (prevToken === '\r') {
                    if (token === '\r') {
                        // Fatal error
                        updateResult(internals.diagnoses.errFWSCRLFx2);
                        break;
                    }

                    if (++crlfCount > 1) {
                        // Multiple folds => obsolete FWS
                        updateResult(internals.diagnoses.deprecatedFWS);
                    }
                    else {
                        crlfCount = 1;
                    }
                }

                switch (token) {
                    case '\r':
                        if (emailLength === ++i || email[i] !== '\n') {
                            // Fatal error
                            updateResult(internals.diagnoses.errCRNoLF);
                        }

                        break;

                    case ' ':
                    case '\t':
                        break;

                    default:
                        if (prevToken === '\r') {
                            // Fatal error
                            updateResult(internals.diagnoses.errFWSCRLFEnd);
                        }

                        crlfCount = 0;

                        // End of FWS
                        context.prev = context.now;
                        context.now = context.stack.pop();

                        // Look at this token again in the parent context
                        --i;
                }

                prevToken = token;
                break;

            // Unexpected context
            // $lab:coverage:off$
            default:
                throw new Error('unknown context: ' + context.now);
            // $lab:coverage:on$
        } // Primary state machine

        if (maxResult > internals.categories.rfc5322) {
            // Fatal error, no point continuing
            break;
        }
    } // Token loop

    // Check for errors
    if (maxResult < internals.categories.rfc5322) {
        // Fatal errors
        if (context.now === internals.components.contextQuotedString) {
            updateResult(internals.diagnoses.errUnclosedQuotedString);
        }
        else if (context.now === internals.components.contextQuotedPair) {
            updateResult(internals.diagnoses.errBackslashEnd);
        }
        else if (context.now === internals.components.contextComment) {
            updateResult(internals.diagnoses.errUnclosedComment);
        }
        else if (context.now === internals.components.literal) {
            updateResult(internals.diagnoses.errUnclosedDomainLiteral);
        }
        else if (token === '\r') {
            updateResult(internals.diagnoses.errFWSCRLFEnd);
        }
        else if (parseData.domain.length === 0) {
            updateResult(internals.diagnoses.errNoDomain);
        }
        else if (elementLength === 0) {
            updateResult(internals.diagnoses.errDotEnd);
        }
        else if (hyphenFlag) {
            updateResult(internals.diagnoses.errDomainHyphenEnd);
        }

        // Other errors
        else if (parseData.domain.length > 255) {
            // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
            //   The maximum total length of a domain name or number is 255 octets.
            updateResult(internals.diagnoses.rfc5322DomainTooLong);
        }
        else if (parseData.local.length + parseData.domain.length + /* '@' */ 1 > 254) {
            // http://tools.ietf.org/html/rfc5321#section-4.1.2
            //   Forward-path   = Path
            //
            //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
            //
            // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
            //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
            //
            // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
            // erratum to RFC 3696:
            //
            // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
            //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
            //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
            //   to be 254.
            updateResult(internals.diagnoses.rfc5322TooLong);
        }
        else if (elementLength > 63) {
            // http://tools.ietf.org/html/rfc1035#section-2.3.4
            // labels   63 octets or less
            updateResult(internals.diagnoses.rfc5322LabelTooLong);
        }
        else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
            updateResult(internals.diagnoses.errDomainTooShort);
        }
        else if (options.tldWhitelist) {
            var tldAtom = atomData.domains[elementCount];
            if (Array.isArray(options.tldWhitelist)) {
                var tldValid = false;
                for (i = 0, il = options.tldWhitelist.length; i < il; ++i) {
                    if (tldAtom === options.tldWhitelist[i]) {
                        tldValid = true;
                        break;
                    }
                }

                if (!tldValid) {
                    updateResult(internals.diagnoses.errUnknownTLD);
                }
            }
            else if (!hasOwn.call(options.tldWhitelist, tldAtom)) {
                updateResult(internals.diagnoses.errUnknownTLD);
            }
        }
    } // Check for errors

    var dnsPositive = false;
    var finishImmediately = false;

    var finish = function finish () {

        if (!dnsPositive && maxResult < internals.categories.dnsWarn) {
            // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
            var code = atomData.domains[elementCount].charCodeAt(0);
            if (code <= 57) {
                updateResult(internals.diagnoses.rfc5321TLDNumeric);
            }
            else if (elementCount === 0) {
                updateResult(internals.diagnoses.rfc5321TLD);
            }
        }

        if (maxResult < threshold) {
            maxResult = internals.diagnoses.valid;
        }

        var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold;

        if (callback) {
            if (finishImmediately) {
                callback(finishResult);
            } else {
                internals.defer(callback.bind(null, finishResult));
            }
        }

        return finishResult;
    }; // Finish

    if (options.checkDNS && maxResult < internals.categories.dnsWarn) {
        // http://tools.ietf.org/html/rfc5321#section-2.3.5
        //   Names that can be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed in Section 5) are permitted, as are CNAME RRs whose
        //   targets can be resolved, in turn, to MX or address RRs.
        //
        // http://tools.ietf.org/html/rfc5321#section-5.1
        //   The lookup first attempts to locate an MX record associated with the name.  If a CNAME record is found, the resulting name is processed
        //   as if it were the initial name. ... If an empty list of MXs is returned, the address is treated as if it was associated with an implicit
        //   MX RR, with a preference of 0, pointing to that host.
        //
        // isEmail() author's note: We will regard the existence of a CNAME to be sufficient evidence of the domain's existence. For performance
        // reasons we will not repeat the DNS lookup for the CNAME's target, but we will raise a warning because we didn't immediately find an MX
        // record.
        if (elementCount === 0) {
            // Checking TLD DNS only works if you explicitly check from the root
            parseData.domain += '.';
        }

        var dnsDomain = parseData.domain;
        Dns.resolveMx(dnsDomain, function resolveDNS (err, mxRecords) {

            // If we have a fatal error, then we must assume that there are no records
            if (err && err.code !== Dns.NODATA) {
                updateResult(internals.diagnoses.dnsWarnNoRecord);
                return finish();
            }

            if (mxRecords && mxRecords.length) {
                dnsPositive = true;
                return finish();
            }

            var count = 3;
            var done = false;
            updateResult(internals.diagnoses.dnsWarnNoMXRecord);

            var handleRecords = function handleRecords (err, records) {

                if (done) {
                    return;
                }

                --count;

                if (records && records.length) {
                    done = true;
                    return finish();
                }

                if (count === 0) {
                    // No usable records for the domain can be found
                    updateResult(internals.diagnoses.dnsWarnNoRecord);
                    done = true;
                    finish();
                }
            };

            Dns.resolveCname(dnsDomain, handleRecords);
            Dns.resolve4(dnsDomain, handleRecords);
            Dns.resolve6(dnsDomain, handleRecords);
        });

        finishImmediately = true;
    }
    else {
        var result = finish();
        finishImmediately = true;
        return result;
    } // CheckDNS
};


isEmail.diagnoses = (function exportDiagnoses () {

    var diag = {};
    for (var key in internals.diagnoses) {
        diag[key] = internals.diagnoses[key];
    }
    return diag;
})();

module.exports = isEmail;

},{"dns":undefined}],49:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Any = require('./any');
var Cast = require('./cast');
var Ref = require('./ref');
var Errors = require('./errors');


// Declare internals

var internals = {};


internals.Alternatives = function () {

    Any.call(this);
    this._type = 'alternatives';
    this._invalids.remove(null);

    this._inner.matches = [];
};

Hoek.inherits(internals.Alternatives, Any);


internals.Alternatives.prototype._base = function (value, state, options) {

    var errors = [];
    for (var i = 0, il = this._inner.matches.length; i < il; ++i) {
        var item = this._inner.matches[i];
        var schema = item.schema;
        if (!schema) {
            var failed = item.is._validate(item.ref(state.parent, options), null, options, state.parent).errors;
            schema = failed ? item.otherwise : item.then;
            if (!schema) {
                continue;
            }
        }

        var result = schema._validate(value, state, options);
        if (!result.errors) {     // Found a valid match
            return result;
        }

        errors = errors.concat(result.errors);
    }

    return { errors: errors.length ? errors : Errors.create('alternatives.base', null, state, options) };
};


internals.Alternatives.prototype.try = function (/* schemas */) {


    var schemas = Hoek.flatten(Array.prototype.slice.call(arguments));
    Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');

    var obj = this.clone();

    for (var i = 0, il = schemas.length; i < il; ++i) {
        var cast = Cast.schema(schemas[i]);
        if (cast._refs.length) {
            obj._refs = obj._refs.concat(cast._refs);
        }
        obj._inner.matches.push({ schema: cast });
    }

    return obj;
};


internals.Alternatives.prototype.when = function (ref, options) {

    Hoek.assert(Ref.isRef(ref) || typeof ref === 'string', 'Invalid reference:', ref);
    Hoek.assert(options, 'Missing options');
    Hoek.assert(typeof options === 'object', 'Invalid options');
    Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
    Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

    var obj = this.clone();
    var is = Cast.schema(options.is);

    if (options.is === null || !options.is.isJoi) {

        // Only apply required if this wasn't already a schema, we'll suppose people know what they're doing
        is = is.required();
    }

    var item = {
        ref: Cast.ref(ref),
        is: is,
        then: options.then !== undefined ? Cast.schema(options.then) : undefined,
        otherwise: options.otherwise !== undefined ? Cast.schema(options.otherwise) : undefined
    };

    Ref.push(obj._refs, item.ref);
    obj._refs = obj._refs.concat(item.is._refs);

    if (item.then && item.then._refs) {
        obj._refs = obj._refs.concat(item.then._refs);
    }

    if (item.otherwise && item.otherwise._refs) {
        obj._refs = obj._refs.concat(item.otherwise._refs);
    }

    obj._inner.matches.push(item);

    return obj;
};


internals.Alternatives.prototype.describe = function () {

    var description = Any.prototype.describe.call(this);
    var alternatives = [];
    for (var i = 0, il = this._inner.matches.length; i < il; ++i) {
        var item = this._inner.matches[i];
        if (item.schema) {

            // try()

            alternatives.push(item.schema.describe());
        }
        else {

            // when()

            var when = {
                ref: item.ref.toString(),
                is: item.is.describe()
            };

            if (item.then) {
                when.then = item.then.describe();
            }

            if (item.otherwise) {
                when.otherwise = item.otherwise.describe();
            }

            alternatives.push(when);
        }
    }

    description.alternatives = alternatives;
    return description;
};


module.exports = new internals.Alternatives();

},{"./any":50,"./cast":54,"./errors":56,"./ref":62,"hoek":43}],50:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Ref = require('./ref');
var Errors = require('./errors');
var Alternatives = null;                // Delay-loaded to prevent circular dependencies
var Cast = null;


// Declare internals

var internals = {};


internals.defaults = {
    abortEarly: true,
    convert: true,
    allowUnknown: false,
    skipFunctions: false,
    stripUnknown: false,
    language: {},
    presence: 'optional',
    raw: false,
    strip: false

    // context: null
};


internals.checkOptions = function (options) {

    var optionType = {
        abortEarly: 'boolean',
        convert: 'boolean',
        allowUnknown: 'boolean',
        skipFunctions: 'boolean',
        stripUnknown: 'boolean',
        language: 'object',
        presence: ['string', 'required', 'optional', 'forbidden', 'ignore'],
        raw: 'boolean',
        context: 'object',
        strip: 'boolean'
    };

    var keys = Object.keys(options);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var opt = optionType[key];
        var type = opt;
        var values = null;

        if (Array.isArray(opt)) {
            type = opt[0];
            values = opt.slice(1);
        }

        Hoek.assert(type, 'unknown key ' + key);
        Hoek.assert(typeof options[key] === type, key + ' should be of type ' + type);
        if (values) {
            Hoek.assert(values.indexOf(options[key]) >= 0, key + ' should be one of ' + values.join(', '));
        }
    }
};


module.exports = internals.Any = function () {

    Cast = Cast || require('./cast');

    this.isJoi = true;
    this._type = 'any';
    this._settings = null;
    this._valids = new internals.Set();
    this._invalids = new internals.Set();
    this._tests = [];
    this._refs = [];
    this._flags = { /*
        presence: 'optional',                   // optional, required, forbidden, ignore
        allowOnly: false,
        allowUnknown: undefined,
        default: undefined,
        forbidden: false,
        encoding: undefined,
        insensitive: false,
        trim: false,
        case: undefined,                        // upper, lower
        empty: undefined
    */ };

    this._description = null;
    this._unit = null;
    this._notes = [];
    this._tags = [];
    this._examples = [];
    this._meta = [];

    this._inner = {};                           // Hash of arrays of immutable objects
};


internals.Any.prototype.isImmutable = true;     // Prevents Hoek from deep cloning schema objects


internals.Any.prototype.clone = function () {

    var obj = Object.create(Object.getPrototypeOf(this));

    obj.isJoi = true;
    obj._type = this._type;
    obj._settings = internals.concatSettings(this._settings);
    obj._valids = Hoek.clone(this._valids);
    obj._invalids = Hoek.clone(this._invalids);
    obj._tests = this._tests.slice();
    obj._refs = this._refs.slice();
    obj._flags = Hoek.clone(this._flags);

    obj._description = this._description;
    obj._unit = this._unit;
    obj._notes = this._notes.slice();
    obj._tags = this._tags.slice();
    obj._examples = this._examples.slice();
    obj._meta = this._meta.slice();

    obj._inner = {};
    var inners = Object.keys(this._inner);
    for (var i = 0, il = inners.length; i < il; ++i) {
        var key = inners[i];
        obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
    }

    return obj;
};


internals.Any.prototype.concat = function (schema) {

    Hoek.assert(schema && schema.isJoi, 'Invalid schema object');
    Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);

    var obj = this.clone();

    if (this._type === 'any' && schema._type !== 'any') {

        // Reset values as if we were "this"
        var tmpObj = schema.clone();
        var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit',
            '_notes', '_tags', '_examples', '_meta', '_inner'];

        for (var j = 0, jl = keysToRestore.length; j < jl; ++j) {
            tmpObj[keysToRestore[j]] = obj[keysToRestore[j]];
        }

        obj = tmpObj;
    }

    obj._settings = obj._settings ? internals.concatSettings(obj._settings, schema._settings) : schema._settings;
    obj._valids.merge(schema._valids, schema._invalids);
    obj._invalids.merge(schema._invalids, schema._valids);
    obj._tests = obj._tests.concat(schema._tests);
    obj._refs = obj._refs.concat(schema._refs);
    Hoek.merge(obj._flags, schema._flags);

    obj._description = schema._description || obj._description;
    obj._unit = schema._unit || obj._unit;
    obj._notes = obj._notes.concat(schema._notes);
    obj._tags = obj._tags.concat(schema._tags);
    obj._examples = obj._examples.concat(schema._examples);
    obj._meta = obj._meta.concat(schema._meta);

    var inners = Object.keys(schema._inner);
    var isObject = obj._type === 'object';
    for (var i = 0, il = inners.length; i < il; ++i) {
        var key = inners[i];
        var source = schema._inner[key];
        if (source) {
            var target = obj._inner[key];
            if (target) {
                if (isObject && key === 'children') {
                    var keys = {};

                    for (var k = 0, kl = target.length; k < kl; ++k) {
                        keys[target[k].key] = k;
                    }

                    for (k = 0, kl = source.length; k < kl; ++k) {
                        var sourceKey = source[k].key;
                        if (keys[sourceKey] >= 0) {
                            target[keys[sourceKey]] = {
                                key: sourceKey,
                                schema: target[keys[sourceKey]].schema.concat(source[k].schema)
                            };
                        }
                        else {
                            target.push(source[k]);
                        }
                    }
                }
                else {
                    obj._inner[key] = obj._inner[key].concat(source);
                }
            }
            else {
                obj._inner[key] = source.slice();
            }
        }
    }

    return obj;
};


internals.Any.prototype._test = function (name, arg, func) {

    Hoek.assert(!this._flags.allowOnly, 'Cannot define rules when valid values specified');

    var obj = this.clone();
    obj._tests.push({ func: func, name: name, arg: arg });
    return obj;
};


internals.Any.prototype.options = function (options) {

    Hoek.assert(!options.context, 'Cannot override context');
    internals.checkOptions(options);

    var obj = this.clone();
    obj._settings = internals.concatSettings(obj._settings, options);
    return obj;
};


internals.Any.prototype.strict = function (isStrict) {

    var obj = this.clone();
    obj._settings = obj._settings || {};
    obj._settings.convert = isStrict === undefined ? false : !isStrict;
    return obj;
};


internals.Any.prototype.raw = function (isRaw) {

    var obj = this.clone();
    obj._settings = obj._settings || {};
    obj._settings.raw = isRaw === undefined ? true : isRaw;
    return obj;
};


internals.Any.prototype._allow = function () {

    var values = Hoek.flatten(Array.prototype.slice.call(arguments));
    for (var i = 0, il = values.length; i < il; ++i) {
        var value = values[i];
        this._invalids.remove(value);
        this._valids.add(value, this._refs);
    }
};


internals.Any.prototype.allow = function () {

    var obj = this.clone();
    obj._allow.apply(obj, arguments);
    return obj;
};


internals.Any.prototype.valid = internals.Any.prototype.only = internals.Any.prototype.equal = function () {

    Hoek.assert(!this._tests.length, 'Cannot set valid values when rules specified');

    var obj = this.allow.apply(this, arguments);
    obj._flags.allowOnly = true;
    return obj;
};


internals.Any.prototype.invalid = internals.Any.prototype.disallow = internals.Any.prototype.not = function (value) {

    var obj = this.clone();
    var values = Hoek.flatten(Array.prototype.slice.call(arguments));
    for (var i = 0, il = values.length; i < il; ++i) {
        value = values[i];
        obj._valids.remove(value);
        obj._invalids.add(value, this._refs);
    }

    return obj;
};


internals.Any.prototype.required = internals.Any.prototype.exist = function () {

    var obj = this.clone();
    obj._flags.presence = 'required';
    return obj;
};


internals.Any.prototype.optional = function () {

    var obj = this.clone();
    obj._flags.presence = 'optional';
    return obj;
};


internals.Any.prototype.forbidden = function () {

    var obj = this.clone();
    obj._flags.presence = 'forbidden';
    return obj;
};


internals.Any.prototype.strip = function () {

    var obj = this.clone();
    obj._flags.strip = true;
    return obj;
};


internals.Any.prototype.applyFunctionToChildren = function (children, fn, args, root) {

    children = [].concat(children);

    if (children.length !== 1 || children[0] !== '') {
        root = root ? (root + '.') : '';

        var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {

            return root + child;
        });

        throw new Error('unknown key(s) ' + extraChildren.join(', '));
    }

    return this[fn].apply(this, args);
};


internals.Any.prototype.default = function (value, description) {

    if (typeof value === 'function' &&
        !Ref.isRef(value)) {

        if (!value.description &&
            description) {

            value.description = description;
        }

        if (this._type !== 'func') {
            Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');
        }
    }

    var obj = this.clone();
    obj._flags.default = value;
    Ref.push(obj._refs, value);
    return obj;
};


internals.Any.prototype.empty = function (schema) {

    var obj;
    if (schema === undefined) {
        obj = this.clone();
        obj._flags.empty = undefined;
    }
    else {
        schema = Cast.schema(schema);

        obj = this.clone();
        obj._flags.empty = schema;
    }

    return obj;
};


internals.Any.prototype.when = function (ref, options) {

    Hoek.assert(options && typeof options === 'object', 'Invalid options');
    Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

    var then = options.then ? this.concat(Cast.schema(options.then)) : this;
    var otherwise = options.otherwise ? this.concat(Cast.schema(options.otherwise)) : this;

    Alternatives = Alternatives || require('./alternatives');
    var obj = Alternatives.when(ref, { is: options.is, then: then, otherwise: otherwise });
    obj._flags.presence = 'ignore';
    return obj;
};


internals.Any.prototype.description = function (desc) {

    Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');

    var obj = this.clone();
    obj._description = desc;
    return obj;
};


internals.Any.prototype.notes = function (notes) {

    Hoek.assert(notes && (typeof notes === 'string' || Array.isArray(notes)), 'Notes must be a non-empty string or array');

    var obj = this.clone();
    obj._notes = obj._notes.concat(notes);
    return obj;
};


internals.Any.prototype.tags = function (tags) {

    Hoek.assert(tags && (typeof tags === 'string' || Array.isArray(tags)), 'Tags must be a non-empty string or array');

    var obj = this.clone();
    obj._tags = obj._tags.concat(tags);
    return obj;
};

internals.Any.prototype.meta = function (meta) {

    Hoek.assert(meta !== undefined, 'Meta cannot be undefined');

    var obj = this.clone();
    obj._meta = obj._meta.concat(meta);
    return obj;
};


internals.Any.prototype.example = function (value) {

    Hoek.assert(arguments.length, 'Missing example');
    var result = this._validate(value, null, internals.defaults);
    Hoek.assert(!result.errors, 'Bad example:', result.errors && Errors.process(result.errors, value));

    var obj = this.clone();
    obj._examples = obj._examples.concat(value);
    return obj;
};


internals.Any.prototype.unit = function (name) {

    Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');

    var obj = this.clone();
    obj._unit = name;
    return obj;
};


internals._try = function (fn, arg) {

    var err;
    var result;

    try {
        result = fn.call(null, arg);
    } catch (e) {
        err = e;
    }

    return {
        value: result,
        error: err
    };
};


internals.Any.prototype._validate = function (value, state, options, reference) {

    var self = this;
    var originalValue = value;

    // Setup state and settings

    state = state || { key: '', path: '', parent: null, reference: reference };

    if (this._settings) {
        options = internals.concatSettings(options, this._settings);
    }

    var errors = [];
    var finish = function () {

        var finalValue;

        if (!self._flags.strip) {
            if (value !== undefined) {
                finalValue = options.raw ? originalValue : value;
            }
            else if (Ref.isRef(self._flags.default)) {
                finalValue = self._flags.default(state.parent, options);
            }
            else if (typeof self._flags.default === 'function' &&
                    !(self._type === 'func' && !self._flags.default.description)) {

                var arg;

                if (state.parent !== null &&
                    self._flags.default.length > 0) {

                    arg = Hoek.clone(state.parent);
                }

                var defaultValue = internals._try(self._flags.default, arg);
                finalValue = defaultValue.value;
                if (defaultValue.error) {
                    errors.push(Errors.create('any.default', defaultValue.error, state, options));
                }
            }
            else {
                finalValue = self._flags.default;
            }
        }

        return {
            value: finalValue,
            errors: errors.length ? errors : null
        };
    };

    // Check presence requirements

    var presence = this._flags.presence || options.presence;
    if (presence === 'optional') {
        if (value === undefined) {
            var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;
            if (isDeepDefault && this._type === 'object') {
                value = {};
            }
            else {
                return finish();
            }
        }
    }
    else if (presence === 'required' &&
            value === undefined) {

        errors.push(Errors.create('any.required', null, state, options));
        return finish();
    }
    else if (presence === 'forbidden') {
        if (value === undefined) {
            return finish();
        }

        errors.push(Errors.create('any.unknown', null, state, options));
        return finish();
    }

    if (this._flags.empty && !this._flags.empty._validate(value, null, internals.defaults).errors) {
        value = undefined;
        return finish();
    }

    // Check allowed and denied values using the original value

    if (this._valids.has(value, state, options, this._flags.insensitive)) {
        return finish();
    }

    if (this._invalids.has(value, state, options, this._flags.insensitive)) {
        errors.push(Errors.create(value === '' ? 'any.empty' : 'any.invalid', null, state, options));
        if (options.abortEarly ||
            value === undefined) {          // No reason to keep validating missing value

            return finish();
        }
    }

    // Convert value and validate type

    if (this._base) {
        var base = this._base.call(this, value, state, options);
        if (base.errors) {
            value = base.value;
            errors = errors.concat(base.errors);
            return finish();                            // Base error always aborts early
        }

        if (base.value !== value) {
            value = base.value;

            // Check allowed and denied values using the converted value

            if (this._valids.has(value, state, options, this._flags.insensitive)) {
                return finish();
            }

            if (this._invalids.has(value, state, options, this._flags.insensitive)) {
                errors.push(Errors.create('any.invalid', null, state, options));
                if (options.abortEarly) {
                    return finish();
                }
            }
        }
    }

    // Required values did not match

    if (this._flags.allowOnly) {
        errors.push(Errors.create('any.allowOnly', { valids: this._valids.values({ stripUndefined: true }) }, state, options));
        if (options.abortEarly) {
            return finish();
        }
    }

    // Helper.validate tests

    for (var i = 0, il = this._tests.length; i < il; ++i) {
        var test = this._tests[i];
        var err = test.func.call(this, value, state, options);
        if (err) {
            errors.push(err);
            if (options.abortEarly) {
                return finish();
            }
        }
    }

    return finish();
};


internals.Any.prototype._validateWithOptions = function (value, options, callback) {

    if (options) {
        internals.checkOptions(options);
    }

    var settings = internals.concatSettings(internals.defaults, options);
    var result = this._validate(value, null, settings);
    var errors = Errors.process(result.errors, value);

    if (callback) {
        return callback(errors, result.value);
    }

    return { error: errors, value: result.value };
};


internals.Any.prototype.validate = function (value, callback) {

    var result = this._validate(value, null, internals.defaults);
    var errors = Errors.process(result.errors, value);

    if (callback) {
        return callback(errors, result.value);
    }

    return { error: errors, value: result.value };
};


internals.Any.prototype.describe = function () {

    var description = {
        type: this._type
    };

    var flags = Object.keys(this._flags);
    if (flags.length) {
        if (this._flags.empty) {
            description.flags = {};
            for (var f = 0, fl = flags.length; f < fl; ++f) {
                var flag = flags[f];
                description.flags[flag] = flag === 'empty' ? this._flags[flag].describe() : this._flags[flag];
            }
        }
        else {
            description.flags = this._flags;
        }
    }

    if (this._description) {
        description.description = this._description;
    }

    if (this._notes.length) {
        description.notes = this._notes;
    }

    if (this._tags.length) {
        description.tags = this._tags;
    }

    if (this._meta.length) {
        description.meta = this._meta;
    }

    if (this._examples.length) {
        description.examples = this._examples;
    }

    if (this._unit) {
        description.unit = this._unit;
    }

    var valids = this._valids.values();
    if (valids.length) {
        description.valids = valids;
    }

    var invalids = this._invalids.values();
    if (invalids.length) {
        description.invalids = invalids;
    }

    description.rules = [];

    for (var i = 0, il = this._tests.length; i < il; ++i) {
        var validator = this._tests[i];
        var item = { name: validator.name };
        if (validator.arg !== void 0) {
            item.arg = validator.arg;
        }
        description.rules.push(item);
    }

    if (!description.rules.length) {
        delete description.rules;
    }

    var label = Hoek.reach(this._settings, 'language.label');
    if (label) {
        description.label = label;
    }

    return description;
};

internals.Any.prototype.label = function (name) {

    Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');

    var obj = this.clone();
    var options = { language: { label: name } };

    // If language.label is set, it should override this label
    obj._settings = internals.concatSettings(options, obj._settings);
    return obj;
};


// Set

internals.Set = function () {

    this._set = [];
};


internals.Set.prototype.add = function (value, refs) {

    Hoek.assert(value === null || value === undefined || value instanceof Date || Buffer.isBuffer(value) || Ref.isRef(value) || (typeof value !== 'function' && typeof value !== 'object'), 'Value cannot be an object or function');

    if (typeof value !== 'function' &&
        this.has(value, null, null, false)) {

        return;
    }

    Ref.push(refs, value);
    this._set.push(value);
};


internals.Set.prototype.merge = function (add, remove) {

    for (var i = 0, il = add._set.length; i < il; ++i) {
        this.add(add._set[i]);
    }

    for (i = 0, il = remove._set.length; i < il; ++i) {
        this.remove(remove._set[i]);
    }
};


internals.Set.prototype.remove = function (value) {

    this._set = this._set.filter(function (item) {

        return value !== item;
    });
};


internals.Set.prototype.has = function (value, state, options, insensitive) {

    for (var i = 0, il = this._set.length; i < il; ++i) {
        var items = this._set[i];

        if (Ref.isRef(items)) {
            items = items(state.reference || state.parent, options);
        }

        if (!Array.isArray(items)) {
            items = [items];
        }

        for (var j = 0, jl = items.length; j < jl; ++j) {
            var item = items[j];
            if (typeof value !== typeof item) {
                continue;
            }

            if (value === item ||
                (value instanceof Date && item instanceof Date && value.getTime() === item.getTime()) ||
                (insensitive && typeof value === 'string' && value.toLowerCase() === item.toLowerCase()) ||
                (Buffer.isBuffer(value) && Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary'))) {

                return true;
            }
        }
    }

    return false;
};


internals.Set.prototype.values = function (options) {

    if (options && options.stripUndefined) {
        var values = [];

        for (var i = 0, il = this._set.length; i < il; ++i) {
            var item = this._set[i];
            if (item !== undefined) {
                values.push(item);
            }
        }

        return values;
    }

    return this._set.slice();
};


internals.concatSettings = function (target, source) {

    // Used to avoid cloning context

    if (!target &&
        !source) {

        return null;
    }

    var key, obj = {};

    if (target) {
        var tKeys = Object.keys(target);
        for (var i = 0, il = tKeys.length; i < il; ++i) {
            key = tKeys[i];
            obj[key] = target[key];
        }
    }

    if (source) {
        var sKeys = Object.keys(source);
        for (var j = 0, jl = sKeys.length; j < jl; ++j) {
            key = sKeys[j];
            if (key !== 'language' ||
                !obj.hasOwnProperty(key)) {

                obj[key] = source[key];
            }
            else {
                obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
            }
        }
    }

    return obj;
};

},{"./alternatives":49,"./cast":54,"./errors":56,"./ref":62,"hoek":43}],51:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Cast = require('./cast');
var Errors = require('./errors');
var Hoek = require('hoek');


// Declare internals

var internals = {};


internals.fastSplice = function (arr, i) {

    var il = arr.length;
    var pos = i;

    while (pos < il) {
        arr[pos++] = arr[pos];
    }

    --arr.length;
};


internals.Array = function () {

    Any.call(this);
    this._type = 'array';
    this._inner.items = [];
    this._inner.inclusions = [];
    this._inner.exclusions = [];
    this._inner.requireds = [];
    this._flags.sparse = false;
};

Hoek.inherits(internals.Array, Any);


internals.Array.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            var converted = JSON.parse(value);
            if (Array.isArray(converted)) {
                result.value = converted;
            }
        }
        catch (e) { }
    }

    var isArray = Array.isArray(result.value);
    var wasArray = isArray;
    if (options.convert && this._flags.single && !isArray) {
        result.value = [result.value];
        isArray = true;
    }

    if (!isArray) {
        result.errors = Errors.create('array.base', null, state, options);
        return result;
    }

    if (this._inner.inclusions.length ||
        this._inner.exclusions.length ||
        !this._flags.sparse) {

        // Clone the array so that we don't modify the original
        if (wasArray) {
            result.value = result.value.slice(0);
        }

        result.errors = internals.checkItems.call(this, result.value, wasArray, state, options);

        if (result.errors && wasArray && options.convert && this._flags.single) {

            // Attempt a 2nd pass by putting the array inside one.
            var previousErrors = result.errors;

            result.value = [result.value];
            result.errors = internals.checkItems.call(this, result.value, wasArray, state, options);

            if (result.errors) {

                // Restore previous errors and value since this didn't validate either.
                result.errors = previousErrors;
                result.value = result.value[0];
            }
        }
    }

    return result;
};


internals.checkItems = function (items, wasArray, state, options) {

    var errors = [];
    var errored;

    var requireds = this._inner.requireds.slice();
    var inclusions = this._inner.inclusions.concat(requireds);

    for (var v = 0, vl = items.length; v < vl; ++v) {
        errored = false;
        var item = items[v];
        var isValid = false;
        var localState = { key: v, path: (state.path ? state.path + '.' : '') + v, parent: items, reference: state.reference };
        var res;

        // Sparse

        if (!this._flags.sparse && item === undefined) {
            errors.push(Errors.create('array.sparse', null, { key: state.key, path: localState.path }, options));

            if (options.abortEarly) {
                return errors;
            }

            continue;
        }

        // Exclusions

        for (var i = 0, il = this._inner.exclusions.length; i < il; ++i) {
            res = this._inner.exclusions[i]._validate(item, localState, {});                // Not passing options to use defaults
            if (!res.errors) {
                errors.push(Errors.create(wasArray ? 'array.excludes' : 'array.excludesSingle', { pos: v, value: item }, { key: state.key, path: localState.path }, options));
                errored = true;

                if (options.abortEarly) {
                    return errors;
                }

                break;
            }
        }

        if (errored) {
            continue;
        }

        // Requireds

        var requiredChecks = [];
        for (i = 0, il = requireds.length; i < il; ++i) {
            res = requiredChecks[i] = requireds[i]._validate(item, localState, options);
            if (!res.errors) {
                items[v] = res.value;
                isValid = true;
                internals.fastSplice(requireds, i);
                --i;
                --il;
                break;
            }
        }

        if (isValid) {
            continue;
        }

        // Inclusions

        for (i = 0, il = inclusions.length; i < il; ++i) {
            var inclusion = inclusions[i];

            // Avoid re-running requireds that already didn't match in the previous loop
            var previousCheck = requireds.indexOf(inclusion);
            if (previousCheck !== -1) {
                res = requiredChecks[previousCheck];
            }
            else {
                res = inclusion._validate(item, localState, options);

                if (!res.errors) {
                    if (inclusion._flags.strip) {
                        internals.fastSplice(items, v);
                        --v;
                        --vl;
                    }
                    else {
                        items[v] = res.value;
                    }
                    isValid = true;
                    break;
                }
            }

            // Return the actual error if only one inclusion defined
            if (il === 1) {
                if (options.stripUnknown) {
                    internals.fastSplice(items, v);
                    --v;
                    --vl;
                    isValid = true;
                    break;
                }

                errors.push(Errors.create(wasArray ? 'array.includesOne' : 'array.includesOneSingle', { pos: v, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));
                errored = true;

                if (options.abortEarly) {
                    return errors;
                }

                break;
            }
        }

        if (errored) {
            continue;
        }

        if (this._inner.inclusions.length && !isValid) {
            if (options.stripUnknown) {
                internals.fastSplice(items, v);
                --v;
                --vl;
                continue;
            }

            errors.push(Errors.create(wasArray ? 'array.includes' : 'array.includesSingle', { pos: v, value: item }, { key: state.key, path: localState.path }, options));

            if (options.abortEarly) {
                return errors;
            }
        }
    }

    if (requireds.length) {
        internals.fillMissedErrors(errors, requireds, state, options);
    }

    return errors.length ? errors : null;
};


internals.fillMissedErrors = function (errors, requireds, state, options) {

    var knownMisses = [];
    var unknownMisses = 0;
    for (var i = 0, il = requireds.length; i < il; ++i) {
        var label = Hoek.reach(requireds[i], '_settings.language.label');
        if (label) {
            knownMisses.push(label);
        }
        else {
            ++unknownMisses;
        }
    }

    if (knownMisses.length) {
        if (unknownMisses) {
            errors.push(Errors.create('array.includesRequiredBoth', { knownMisses: knownMisses, unknownMisses: unknownMisses }, { key: state.key, path: state.patk }, options));
        }
        else {
            errors.push(Errors.create('array.includesRequiredKnowns', { knownMisses: knownMisses }, { key: state.key, path: state.path }, options));
        }
    }
    else {
        errors.push(Errors.create('array.includesRequiredUnknowns', { unknownMisses: unknownMisses }, { key: state.key, path: state.path }, options));
    }
};


internals.Array.prototype.describe = function () {

    var description = Any.prototype.describe.call(this);

    if (this._inner.items.length) {
        description.items = [];

        for (var i = 0, il = this._inner.items.length; i < il; ++i) {
            description.items.push(this._inner.items[i].describe());
        }
    }

    return description;
};


internals.Array.prototype.items = function () {

    var obj = this.clone();

    Hoek.flatten(Array.prototype.slice.call(arguments)).forEach(function (type) {

        type = Cast.schema(type);
        obj._inner.items.push(type);

        if (type._flags.presence === 'required') {
            obj._inner.requireds.push(type);
        }
        else if (type._flags.presence === 'forbidden') {
            obj._inner.exclusions.push(type.optional());
        }
        else {
            obj._inner.inclusions.push(type);
        }
    });

    return obj;
};


internals.Array.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (value.length >= limit) {
            return null;
        }

        return Errors.create('array.min', { limit: limit, value: value }, state, options);
    });
};


internals.Array.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (value.length <= limit) {
            return null;
        }

        return Errors.create('array.max', { limit: limit, value: value }, state, options);
    });
};


internals.Array.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (value.length === limit) {
            return null;
        }

        return Errors.create('array.length', { limit: limit, value: value }, state, options);
    });
};


internals.Array.prototype.unique = function () {

    return this._test('unique', undefined, function (value, state, options) {

        var found = {
            string: {},
            number: {},
            undefined: {},
            boolean: {},
            object: [],
            function: []
        };

        for (var i = 0, il = value.length; i < il; ++i) {
            var item = value[i];
            var type = typeof item;
            var records = found[type];

            // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
            // I still want to keep the test for future js versions with new types (eg. Symbol).
            if (/* $lab:coverage:off$ */ records /* $lab:coverage:on$ */) {
                if (Array.isArray(records)) {
                    for (var r = 0, rl = records.length; r < rl; ++r) {
                        if (Hoek.deepEqual(records[r], item)) {
                            return Errors.create('array.unique', { pos: i, value: item }, state, options);
                        }
                    }

                    records.push(item);
                }
                else {
                    if (records[item]) {
                        return Errors.create('array.unique', { pos: i, value: item }, state, options);
                    }

                    records[item] = true;
                }
            }
        }
    });
};


internals.Array.prototype.sparse = function (enabled) {

    var obj = this.clone();
    obj._flags.sparse = enabled === undefined ? true : !!enabled;
    return obj;
};


internals.Array.prototype.single = function (enabled) {

    var obj = this.clone();
    obj._flags.single = enabled === undefined ? true : !!enabled;
    return obj;
};


module.exports = new internals.Array();

},{"./any":50,"./cast":54,"./errors":56,"hoek":43}],52:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Errors = require('./errors');
var Hoek = require('hoek');


// Declare internals

var internals = {};


internals.Binary = function () {

    Any.call(this);
    this._type = 'binary';
};

Hoek.inherits(internals.Binary, Any);


internals.Binary.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            var converted = new Buffer(value, this._flags.encoding);
            result.value = converted;
        }
        catch (e) { }
    }

    result.errors = Buffer.isBuffer(result.value) ? null : Errors.create('binary.base', null, state, options);
    return result;
};


internals.Binary.prototype.encoding = function (encoding) {

    Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

    var obj = this.clone();
    obj._flags.encoding = encoding;
    return obj;
};


internals.Binary.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (value.length >= limit) {
            return null;
        }

        return Errors.create('binary.min', { limit: limit, value: value }, state, options);
    });
};


internals.Binary.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (value.length <= limit) {
            return null;
        }

        return Errors.create('binary.max', { limit: limit, value: value }, state, options);
    });
};


internals.Binary.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (value.length === limit) {
            return null;
        }

        return Errors.create('binary.length', { limit: limit, value: value }, state, options);
    });
};


module.exports = new internals.Binary();

},{"./any":50,"./errors":56,"hoek":43}],53:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Errors = require('./errors');
var Hoek = require('hoek');


// Declare internals

var internals = {};


internals.Boolean = function () {

    Any.call(this);
    this._type = 'boolean';
};

Hoek.inherits(internals.Boolean, Any);


internals.Boolean.prototype._base = function (value, state, options) {

    var result = {
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        var lower = value.toLowerCase();
        result.value = (lower === 'true' || lower === 'yes' || lower === 'on' ? true
                                                                              : (lower === 'false' || lower === 'no' || lower === 'off' ? false : value));
    }

    result.errors = (typeof result.value === 'boolean') ? null : Errors.create('boolean.base', null, state, options);
    return result;
};


module.exports = new internals.Boolean();

},{"./any":50,"./errors":56,"hoek":43}],54:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Ref = require('./ref');

// Type modules are delay-loaded to prevent circular dependencies


// Declare internals

var internals = {
    any: null,
    date: require('./date'),
    string: require('./string'),
    number: require('./number'),
    boolean: require('./boolean'),
    alt: null,
    object: null
};


exports.schema = function (config) {

    internals.any = internals.any || new (require('./any'))();
    internals.alt = internals.alt || require('./alternatives');
    internals.object = internals.object || require('./object');

    if (config &&
        typeof config === 'object') {

        if (config.isJoi) {
            return config;
        }

        if (Array.isArray(config)) {
            return internals.alt.try(config);
        }

        if (config instanceof RegExp) {
            return internals.string.regex(config);
        }

        if (config instanceof Date) {
            return internals.date.valid(config);
        }

        return internals.object.keys(config);
    }

    if (typeof config === 'string') {
        return internals.string.valid(config);
    }

    if (typeof config === 'number') {
        return internals.number.valid(config);
    }

    if (typeof config === 'boolean') {
        return internals.boolean.valid(config);
    }

    if (Ref.isRef(config)) {
        return internals.any.valid(config);
    }

    Hoek.assert(config === null, 'Invalid schema content:', config);

    return internals.any.valid(null);
};


exports.ref = function (id) {

    return Ref.isRef(id) ? id : Ref.create(id);
};

},{"./alternatives":49,"./any":50,"./boolean":53,"./date":55,"./number":60,"./object":61,"./ref":62,"./string":63,"hoek":43}],55:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Errors = require('./errors');
var Ref = require('./ref');
var Hoek = require('hoek');
var Moment = require('moment');


// Declare internals

var internals = {};

internals.isoDate = /^(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
internals.invalidDate = new Date('');
internals.isIsoDate = (function () {

    var isoString = internals.isoDate.toString();

    return function (date) {

        return date && (date.toString() === isoString);
    };
})();

internals.Date = function () {

    Any.call(this);
    this._type = 'date';
};

Hoek.inherits(internals.Date, Any);


internals.Date.prototype._base = function (value, state, options) {

    var result = {
        value: (options.convert && internals.toDate(value, this._flags.format)) || value
    };

    if (result.value instanceof Date && !isNaN(result.value.getTime())) {
        result.errors = null;
    }
    else {
        result.errors = Errors.create(internals.isIsoDate(this._flags.format) ? 'date.isoDate' : 'date.base', null, state, options);
    }

    return result;
};


internals.toDate = function (value, format) {

    if (value instanceof Date) {
        return value;
    }

    if (typeof value === 'string' ||
        Hoek.isInteger(value)) {

        if (typeof value === 'string' &&
            /^[+-]?\d+$/.test(value)) {

            value = parseInt(value, 10);
        }

        var date;
        if (format) {
            if (internals.isIsoDate(format)) {
                date = format.test(value) ? new Date(value) : internals.invalidDate;
            }
            else {
                date = Moment(value, format, true);
                date = date.isValid() ? date.toDate() : internals.invalidDate;
            }
        }
        else {
            date = new Date(value);
        }

        if (!isNaN(date.getTime())) {
            return date;
        }
    }

    return null;
};


internals.compare = function (type, compare) {

    return function (date) {

        var isNow = date === 'now';
        var isRef = Ref.isRef(date);

        if (!isNow && !isRef) {
            date = internals.toDate(date);
        }

        Hoek.assert(date, 'Invalid date format');

        return this._test(type, date, function (value, state, options) {

            var compareTo;
            if (isNow) {
                compareTo = Date.now();
            }
            else if (isRef) {
                compareTo = internals.toDate(date(state.parent, options));

                if (!compareTo) {
                    return Errors.create('date.ref', { ref: date.key }, state, options);
                }

                compareTo = compareTo.getTime();
            }
            else {
                compareTo = date.getTime();
            }

            if (compare(value.getTime(), compareTo)) {
                return null;
            }

            return Errors.create('date.' + type, { limit: new Date(compareTo) }, state, options);
        });
    };
};


internals.Date.prototype.min = internals.compare('min', function (value, date) {

    return value >= date;
});


internals.Date.prototype.max = internals.compare('max', function (value, date) {

    return value <= date;
});


internals.Date.prototype.format = function (format) {

    Hoek.assert(typeof format === 'string' || (Array.isArray(format) && format.every(function (f) {

        return typeof f === 'string';
    })), 'Invalid format.');

    var obj = this.clone();
    obj._flags.format = format;
    return obj;
};

internals.Date.prototype.iso = function () {

    var obj = this.clone();
    obj._flags.format = internals.isoDate;
    return obj;
};

internals.Date.prototype._isIsoDate = function (value) {

    return internals.isoDate.test(value);
};

module.exports = new internals.Date();

},{"./any":50,"./errors":56,"./ref":62,"hoek":43,"moment":97}],56:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Language = require('./language');


// Declare internals

var internals = {};

internals.stringify = function (value, wrapArrays) {

    var type = typeof value;

    if (value === null) {
        return 'null';
    }

    if (type === 'string') {
        return value;
    }

    if (value instanceof internals.Err || type === 'function') {
        return value.toString();
    }

    if (type === 'object') {
        if (Array.isArray(value)) {
            var partial = '';

            for (var i = 0, il = value.length; i < il; ++i) {
                partial += (partial.length ? ', ' : '') + internals.stringify(value[i], wrapArrays);
            }

            return wrapArrays ? '[' + partial + ']' : partial;
        }

        return value.toString();
    }

    return JSON.stringify(value);
};

internals.Err = function (type, context, state, options) {

    this.type = type;
    this.context = context || {};
    this.context.key = state.key;
    this.path = state.path;
    this.options = options;
};


internals.Err.prototype.toString = function () {

    var self = this;

    var localized = this.options.language;

    if (localized.label) {
        this.context.key = localized.label;
    }
    else if (this.context.key === '' || this.context.key === null) {
        this.context.key = localized.root || Language.errors.root;
    }

    var format = Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);
    var hasKey = /\{\{\!?key\}\}/.test(format);
    var skipKey = format.length > 2 && format[0] === '!' && format[1] === '!';

    if (skipKey) {
        format = format.slice(2);
    }

    if (!hasKey && !skipKey) {
        format = (Hoek.reach(localized, 'key') || Hoek.reach(Language.errors, 'key')) + format;
    }

    var wrapArrays = Hoek.reach(localized, 'messages.wrapArrays');
    if (typeof wrapArrays !== 'boolean') {
        wrapArrays = Language.errors.messages.wrapArrays;
    }

    var message = format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {

        var value = Hoek.reach(self.context, name);
        var normalized = internals.stringify(value, wrapArrays);
        return (isSecure ? Hoek.escapeHtml(normalized) : normalized);
    });

    return message;
};


exports.create = function (type, context, state, options) {

    return new internals.Err(type, context, state, options);
};


exports.process = function (errors, object) {

    if (!errors || !errors.length) {
        return null;
    }

    // Construct error

    var message = '';
    var details = [];

    var processErrors = function (errors, parent) {

        for (var i = 0, il = errors.length; i < il; ++i) {
            var item = errors[i];

            var detail = {
                message: item.toString(),
                path: internals.getPath(item),
                type: item.type,
                context: item.context
            };

            if (!parent) {
                message += (message ? '. ' : '') + detail.message;
            }

            // Do not push intermediate errors, we're only interested in leafs
            if (item.context.reason && item.context.reason.length) {
                processErrors(item.context.reason, item.path);
            }
            else {
                details.push(detail);
            }
        }
    };

    processErrors(errors);

    var error = new Error(message);
    error.name = 'ValidationError';
    error.details = details;
    error._object = object;
    error.annotate = internals.annotate;
    return error;
};


internals.getPath = function (item) {

    var recursePath = function (it) {

        var reachedItem = Hoek.reach(it, 'context.reason.0');
        if (reachedItem && reachedItem.context) {
            return recursePath(reachedItem);
        }

        return it.path;
    };

    return recursePath(item) || item.context.key;
};


// Inspired by json-stringify-safe
internals.safeStringify = function (obj, spaces) {

    return JSON.stringify(obj, internals.serializer(), spaces);
};

internals.serializer = function () {

    var cycleReplacer = function (key, value) {

        if (stack[0] === value) {
            return '[Circular ~]';
        }

        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
    };

    var keys = [], stack = [];

    return function (key, value) {

        if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            if (~thisPos) {
                stack.length = thisPos + 1;
                keys.length = thisPos + 1;
                keys[thisPos] = key;
            }
            else {
                stack.push(this);
                keys.push(key);
            }

            if (~stack.indexOf(value)) {
                value = cycleReplacer.call(this, key, value);
            }
        }
        else {
            stack.push(value);
        }

        return value;
    };
};


internals.annotate = function () {

    var obj = Hoek.clone(this._object || {});

    var lookup = {};
    var el = this.details.length;
    for (var e = el - 1; e >= 0; --e) {        // Reverse order to process deepest child first
        var pos = el - e;
        var error = this.details[e];
        var path = error.path.split('.');
        var ref = obj;
        for (var i = 0, il = path.length; i < il && ref; ++i) {
            var seg = path[i];
            if (i + 1 < il) {
                ref = ref[seg];
            }
            else {
                var value = ref[seg];
                if (value !== undefined) {
                    delete ref[seg];
                    var label = seg + '_$key$_' + pos + '_$end$_';
                    ref[label] = value;
                    lookup[error.path] = label;
                }
                else if (lookup[error.path]) {
                    var replacement = lookup[error.path];
                    var appended = replacement.replace('_$end$_', ', ' + pos + '_$end$_');
                    ref[appended] = ref[replacement];
                    lookup[error.path] = appended;
                    delete ref[replacement];
                }
                else {
                    ref['_$miss$_' + seg + '|' + pos + '_$end$_'] = '__missing__';
                }
            }
        }
    }

    var message = internals.safeStringify(obj, 2)
        .replace(/\[Circular (.*?)_\$key\$_([, \d]+)_\$end\$_\]/g, function ($0, $1) {

            return '[Circular ' + $1 + ']';
        }).replace(/_\$key\$_([, \d]+)_\$end\$_\"/g, function ($0, $1) {

            return '" \u001b[31m[' + $1 + ']\u001b[0m';
        }).replace(/\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g, function ($0, $1, $2) {

            return '\u001b[41m"' + $1 + '"\u001b[0m\u001b[31m [' + $2 + ']: -- missing --\u001b[0m';
        });

    message += '\n\u001b[31m';

    for (e = 0; e < el; ++e) {
        message += '\n[' + (e + 1) + '] ' + this.details[e].message;
    }

    message += '\u001b[0m';

    return message;
};

},{"./language":59,"hoek":43}],57:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Errors = require('./errors');
var Hoek = require('hoek');


// Declare internals

var internals = {};


internals.Function = function () {

    Any.call(this);
    this._type = 'func';
};

Hoek.inherits(internals.Function, Any);


internals.Function.prototype._base = function (value, state, options) {

    return {
        value: value,
        errors: (typeof value === 'function') ? null : Errors.create('function.base', null, state, options)
    };
};


module.exports = new internals.Function();

},{"./any":50,"./errors":56,"hoek":43}],58:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Any = require('./any');
var Cast = require('./cast');
var Ref = require('./ref');


// Declare internals

var internals = {
    alternatives: require('./alternatives'),
    array: require('./array'),
    boolean: require('./boolean'),
    binary: require('./binary'),
    date: require('./date'),
    func: require('./function'),
    number: require('./number'),
    object: require('./object'),
    string: require('./string')
};


internals.root = function () {

    var any = new Any();

    var root = any.clone();
    root.any = function () {

        return any;
    };

    root.alternatives = root.alt = function () {

        return arguments.length ? internals.alternatives.try.apply(internals.alternatives, arguments) : internals.alternatives;
    };

    root.array = function () {

        return internals.array;
    };

    root.boolean = root.bool = function () {

        return internals.boolean;
    };

    root.binary = function () {

        return internals.binary;
    };

    root.date = function () {

        return internals.date;
    };

    root.func = function () {

        return internals.func;
    };

    root.number = function () {

        return internals.number;
    };

    root.object = function () {

        return arguments.length ? internals.object.keys.apply(internals.object, arguments) : internals.object;
    };

    root.string = function () {

        return internals.string;
    };

    root.ref = function () {

        return Ref.create.apply(null, arguments);
    };

    root.isRef = function (ref) {

        return Ref.isRef(ref);
    };

    root.validate = function (value /*, [schema], [options], callback */) {

        var last = arguments[arguments.length - 1];
        var callback = typeof last === 'function' ? last : null;

        var count = arguments.length - (callback ? 1 : 0);
        if (count === 1) {
            return any.validate(value, callback);
        }

        var options = count === 3 ? arguments[2] : {};
        var schema = Cast.schema(arguments[1]);

        return schema._validateWithOptions(value, options, callback);
    };

    root.describe = function () {

        var schema = arguments.length ? Cast.schema(arguments[0]) : any;
        return schema.describe();
    };

    root.compile = function (schema) {

        return Cast.schema(schema);
    };

    root.assert = function (value, schema, message) {

        var error = root.validate(value, schema).error;
        if (error) {
            if (!message) {
                throw new Error(error.annotate());
            }

            if (!(message instanceof Error)) {
                throw new Error(message + ' ' + error.annotate());
            }

            throw message;
        }
    };

    return root;
};


module.exports = internals.root();

},{"./alternatives":49,"./any":50,"./array":51,"./binary":52,"./boolean":53,"./cast":54,"./date":55,"./function":57,"./number":60,"./object":61,"./ref":62,"./string":63,"hoek":43}],59:[function(require,module,exports){
// Load modules


// Declare internals

var internals = {};


exports.errors = {
    root: 'value',
    key: '"{{!key}}" ',
    messages: {
        wrapArrays: true
    },
    any: {
        unknown: 'is not allowed',
        invalid: 'contains an invalid value',
        empty: 'is not allowed to be empty',
        required: 'is required',
        allowOnly: 'must be one of {{valids}}',
        default: 'threw an error when running default method'
    },
    alternatives: {
        base: 'not matching any of the allowed alternatives'
    },
    array: {
        base: 'must be an array',
        includes: 'at position {{pos}} does not match any of the allowed types',
        includesSingle: 'single value of "{{!key}}" does not match any of the allowed types',
        includesOne: 'at position {{pos}} fails because {{reason}}',
        includesOneSingle: 'single value of "{{!key}}" fails because {{reason}}',
        includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',
        includesRequiredKnowns: 'does not contain {{knownMisses}}',
        includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',
        excludes: 'at position {{pos}} contains an excluded value',
        excludesSingle: 'single value of "{{!key}}" contains an excluded value',
        min: 'must contain at least {{limit}} items',
        max: 'must contain less than or equal to {{limit}} items',
        length: 'must contain {{limit}} items',
        sparse: 'must not be a sparse array',
        unique: 'position {{pos}} contains a duplicate value'
    },
    boolean: {
        base: 'must be a boolean'
    },
    binary: {
        base: 'must be a buffer or a string',
        min: 'must be at least {{limit}} bytes',
        max: 'must be less than or equal to {{limit}} bytes',
        length: 'must be {{limit}} bytes'
    },
    date: {
        base: 'must be a number of milliseconds or valid date string',
        min: 'must be larger than or equal to "{{limit}}"',
        max: 'must be less than or equal to "{{limit}}"',
        isoDate: 'must be a valid ISO 8601 date',
        ref: 'references "{{ref}}" which is not a date'
    },
    function: {
        base: 'must be a Function'
    },
    object: {
        base: 'must be an object',
        child: 'child "{{!key}}" fails because {{reason}}',
        min: 'must have at least {{limit}} children',
        max: 'must have less than or equal to {{limit}} children',
        length: 'must have {{limit}} children',
        allowUnknown: 'is not allowed',
        with: 'missing required peer "{{peer}}"',
        without: 'conflict with forbidden peer "{{peer}}"',
        missing: 'must contain at least one of {{peers}}',
        xor: 'contains a conflict between exclusive peers {{peers}}',
        or: 'must contain at least one of {{peers}}',
        and: 'contains {{present}} without its required peers {{missing}}',
        nand: '!!"{{main}}" must not exist simultaneously with {{peers}}',
        assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
        rename: {
            multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
            override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists'
        },
        type: 'must be an instance of "{{type}}"'
    },
    number: {
        base: 'must be a number',
        min: 'must be larger than or equal to {{limit}}',
        max: 'must be less than or equal to {{limit}}',
        less: 'must be less than {{limit}}',
        greater: 'must be greater than {{limit}}',
        float: 'must be a float or double',
        integer: 'must be an integer',
        negative: 'must be a negative number',
        positive: 'must be a positive number',
        precision: 'must have no more than {{limit}} decimal places',
        ref: 'references "{{ref}}" which is not a number',
        multiple: 'must be a multiple of {{multiple}}'
    },
    string: {
        base: 'must be a string',
        min: 'length must be at least {{limit}} characters long',
        max: 'length must be less than or equal to {{limit}} characters long',
        length: 'length must be {{limit}} characters long',
        alphanum: 'must only contain alpha-numeric characters',
        token: 'must only contain alpha-numeric and underscore characters',
        regex: {
            base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
            name: 'with value "{{!value}}" fails to match the {{name}} pattern'
        },
        email: 'must be a valid email',
        uri: 'must be a valid uri',
        uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
        isoDate: 'must be a valid ISO 8601 date',
        guid: 'must be a valid GUID',
        hex: 'must only contain hexadecimal characters',
        hostname: 'must be a valid hostname',
        lowercase: 'must only contain lowercase characters',
        uppercase: 'must only contain uppercase characters',
        trim: 'must not have leading or trailing whitespace',
        creditCard: 'must be a credit card',
        ref: 'references "{{ref}}" which is not a number',
        ip: 'must be a valid ip address with a {{cidr}} CIDR',
        ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'
    }
};

},{}],60:[function(require,module,exports){
// Load modules

var Any = require('./any');
var Ref = require('./ref');
var Errors = require('./errors');
var Hoek = require('hoek');


// Declare internals

var internals = {};


internals.Number = function () {

    Any.call(this);
    this._type = 'number';
    this._invalids.add(Infinity);
    this._invalids.add(-Infinity);
};

Hoek.inherits(internals.Number, Any);

internals.compare = function (type, compare) {

    return function (limit) {

        var isRef = Ref.isRef(limit);
        var isNumber = typeof limit === 'number' && !isNaN(limit);

        Hoek.assert(isNumber || isRef, 'limit must be a number or reference');

        return this._test(type, limit, function (value, state, options) {

            var compareTo;
            if (isRef) {
                compareTo = limit(state.parent, options);

                if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {
                    return Errors.create('number.ref', { ref: limit.key }, state, options);
                }
            }
            else {
                compareTo = limit;
            }

            if (compare(value, compareTo)) {
                return null;
            }

            return Errors.create('number.' + type, { limit: compareTo, value: value }, state, options);
        });
    };
};


internals.Number.prototype._base = function (value, state, options) {

    var result = {
        errors: null,
        value: value
    };

    if (typeof value === 'string' &&
        options.convert) {

        var number = parseFloat(value);
        result.value = (isNaN(number) || !isFinite(value)) ? NaN : number;
    }

    var isNumber = typeof result.value === 'number' && !isNaN(result.value);

    if (options.convert && 'precision' in this._flags && isNumber) {

        // This is conceptually equivalent to using toFixed but it should be much faster
        var precision = Math.pow(10, this._flags.precision);
        result.value = Math.round(result.value * precision) / precision;
    }

    result.errors = isNumber ? null : Errors.create('number.base', null, state, options);
    return result;
};


internals.Number.prototype.min = internals.compare('min', function (value, limit) {

    return value >= limit;
});


internals.Number.prototype.max = internals.compare('max', function (value, limit) {

    return value <= limit;
});


internals.Number.prototype.greater = internals.compare('greater', function (value, limit) {

    return value > limit;
});


internals.Number.prototype.less = internals.compare('less', function (value, limit) {

    return value < limit;
});


internals.Number.prototype.multiple = function (base) {

    Hoek.assert(Hoek.isInteger(base), 'multiple must be an integer');
    Hoek.assert(base > 0, 'multiple must be greater than 0');

    return this._test('multiple', base, function (value, state, options) {

        if (value % base === 0) {
            return null;
        }

        return Errors.create('number.multiple', { multiple: base, value: value }, state, options);
    });
};


internals.Number.prototype.integer = function () {

    return this._test('integer', undefined, function (value, state, options) {

        return Hoek.isInteger(value) ? null : Errors.create('number.integer', { value: value }, state, options);
    });
};


internals.Number.prototype.negative = function () {

    return this._test('negative', undefined, function (value, state, options) {

        if (value < 0) {
            return null;
        }

        return Errors.create('number.negative', { value: value }, state, options);
    });
};


internals.Number.prototype.positive = function () {

    return this._test('positive', undefined, function (value, state, options) {

        if (value > 0) {
            return null;
        }

        return Errors.create('number.positive', { value: value }, state, options);
    });
};


internals.precisionRx = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/;


internals.Number.prototype.precision = function (limit) {

    Hoek.assert(Hoek.isInteger(limit), 'limit must be an integer');
    Hoek.assert(!('precision' in this._flags), 'precision already set');

    var obj = this._test('precision', limit, function (value, state, options){

        var places = value.toString().match(internals.precisionRx);
        var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);
        if (decimals <= limit) {
            return null;
        }

        return Errors.create('number.precision', { limit: limit, value: value }, state, options);
    });

    obj._flags.precision = limit;
    return obj;
};


module.exports = new internals.Number();

},{"./any":50,"./errors":56,"./ref":62,"hoek":43}],61:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');
var Topo = require('topo');
var Any = require('./any');
var Cast = require('./cast');
var Errors = require('./errors');


// Declare internals

var internals = {};


internals.Object = function () {

    Any.call(this);
    this._type = 'object';
    this._inner.children = null;
    this._inner.renames = [];
    this._inner.dependencies = [];
    this._inner.patterns = [];
};

Hoek.inherits(internals.Object, Any);


internals.Object.prototype._base = function (value, state, options) {

    var item, key, localState, result;
    var target = value;
    var errors = [];
    var finish = function () {

        return {
            value: target,
            errors: errors.length ? errors : null
        };
    };

    if (typeof value === 'string' &&
        options.convert) {

        try {
            value = JSON.parse(value);
        }
        catch (parseErr) { }
    }

    if (!value ||
        typeof value !== 'object' ||
        Array.isArray(value)) {

        errors.push(Errors.create('object.base', null, state, options));
        return finish();
    }

    // Skip if there are no other rules to test

    if (!this._inner.renames.length &&
        !this._inner.dependencies.length &&
        !this._inner.children &&                    // null allows any keys
        !this._inner.patterns.length) {

        target = value;
        return finish();
    }

    // Ensure target is a local copy (parsed) or shallow copy

    if (target === value) {
        target = Object.create(Object.getPrototypeOf(value));
        var valueKeys = Object.keys(value);
        for (var t = 0, tl = valueKeys.length; t < tl; ++t) {
            target[valueKeys[t]] = value[valueKeys[t]];
        }
    }
    else {
        target = value;
    }

    // Rename keys

    var renamed = {};
    for (var r = 0, rl = this._inner.renames.length; r < rl; ++r) {
        item = this._inner.renames[r];

        if (item.options.ignoreUndefined && target[item.from] === undefined) {
            continue;
        }

        if (!item.options.multiple &&
            renamed[item.to]) {

            errors.push(Errors.create('object.rename.multiple', { from: item.from, to: item.to }, state, options));
            if (options.abortEarly) {
                return finish();
            }
        }

        if (target.hasOwnProperty(item.to) &&
            !item.options.override &&
            !renamed[item.to]) {

            errors.push(Errors.create('object.rename.override', { from: item.from, to: item.to }, state, options));
            if (options.abortEarly) {
                return finish();
            }
        }

        if (target[item.from] === undefined) {
            delete target[item.to];
        }
        else {
            target[item.to] = target[item.from];
        }

        renamed[item.to] = true;

        if (!item.options.alias) {
            delete target[item.from];
        }
    }

    // Validate schema

    if (!this._inner.children &&            // null allows any keys
        !this._inner.patterns.length &&
        !this._inner.dependencies.length) {

        return finish();
    }

    var unprocessed = Hoek.mapToObject(Object.keys(target));

    if (this._inner.children) {
        for (var i = 0, il = this._inner.children.length; i < il; ++i) {
            var child = this._inner.children[i];
            key = child.key;
            item = target[key];

            delete unprocessed[key];

            localState = { key: key, path: (state.path ? state.path + '.' : '') + key, parent: target, reference: state.reference };
            result = child.schema._validate(item, localState, options);
            if (result.errors) {
                errors.push(Errors.create('object.child', { key: key, reason: result.errors }, localState, options));

                if (options.abortEarly) {
                    return finish();
                }
            }

            if (child.schema._flags.strip || (result.value === undefined && result.value !== item)) {
                delete target[key];
            }
            else if (result.value !== undefined) {
                target[key] = result.value;
            }
        }
    }

    // Unknown keys

    var unprocessedKeys = Object.keys(unprocessed);
    if (unprocessedKeys.length &&
        this._inner.patterns.length) {

        for (i = 0, il = unprocessedKeys.length; i < il; ++i) {
            key = unprocessedKeys[i];

            for (var p = 0, pl = this._inner.patterns.length; p < pl; ++p) {
                var pattern = this._inner.patterns[p];

                if (pattern.regex.test(key)) {
                    delete unprocessed[key];

                    item = target[key];
                    localState = { key: key, path: (state.path ? state.path + '.' : '') + key, parent: target, reference: state.reference };
                    result = pattern.rule._validate(item, localState, options);
                    if (result.errors) {
                        errors.push(Errors.create('object.child', { key: key, reason: result.errors }, localState, options));

                        if (options.abortEarly) {
                            return finish();
                        }
                    }

                    if (result.value !== undefined) {
                        target[key] = result.value;
                    }
                }
            }
        }

        unprocessedKeys = Object.keys(unprocessed);
    }

    if ((this._inner.children || this._inner.patterns.length) && unprocessedKeys.length) {
        if (options.stripUnknown ||
            options.skipFunctions) {

            var hasFunctions = false;
            for (var k = 0, kl = unprocessedKeys.length; k < kl; ++k) {
                key = unprocessedKeys[k];

                if (options.stripUnknown) {
                    delete target[key];
                }
                else if (typeof target[key] === 'function') {
                    delete unprocessed[key];
                    hasFunctions = true;
                }
            }

            if (options.stripUnknown) {
                return finish();
            }

            if (hasFunctions) {
                unprocessedKeys = Object.keys(unprocessed);
            }
        }

        if (unprocessedKeys.length &&
            (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown)) {

            for (var e = 0, el = unprocessedKeys.length; e < el; ++e) {
                errors.push(Errors.create('object.allowUnknown', null, { key: unprocessedKeys[e], path: state.path }, options));
            }
        }
    }

    // Validate dependencies

    for (var d = 0, dl = this._inner.dependencies.length; d < dl; ++d) {
        var dep = this._inner.dependencies[d];
        var err = internals[dep.type](dep.key !== null && value[dep.key], dep.peers, target, { key: dep.key, path: (state.path ? state.path + '.' : '') + (dep.key || '') }, options);
        if (err) {
            errors.push(err);
            if (options.abortEarly) {
                return finish();
            }
        }
    }

    return finish();
};


internals.Object.prototype.keys = function (schema) {

    Hoek.assert(schema === null || schema === undefined || typeof schema === 'object', 'Object schema must be a valid object');
    Hoek.assert(!schema || !schema.isJoi, 'Object schema cannot be a joi schema');

    var obj = this.clone();

    if (!schema) {
        obj._inner.children = null;
        return obj;
    }

    var children = Object.keys(schema);

    if (!children.length) {
        obj._inner.children = [];
        return obj;
    }

    var topo = new Topo();
    var child;
    if (obj._inner.children) {
        for (var i = 0, il = obj._inner.children.length; i < il; ++i) {
            child = obj._inner.children[i];
            topo.add(child, { after: child._refs, group: child.key });
        }
    }

    for (var c = 0, cl = children.length; c < cl; ++c) {
        var key = children[c];
        child = schema[key];
        var cast = Cast.schema(child);
        topo.add({ key: key, schema: cast }, { after: cast._refs, group: key });
    }

    obj._inner.children = topo.nodes;

    return obj;
};


internals.Object.prototype.unknown = function (allow) {

    var obj = this.clone();
    obj._flags.allowUnknown = (allow !== false);
    return obj;
};


internals.Object.prototype.length = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('length', limit, function (value, state, options) {

        if (Object.keys(value).length === limit) {
            return null;
        }

        return Errors.create('object.length', { limit: limit }, state, options);
    });
};


internals.Object.prototype.min = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('min', limit, function (value, state, options) {

        if (Object.keys(value).length >= limit) {
            return null;
        }

        return Errors.create('object.min', { limit: limit }, state, options);
    });
};


internals.Object.prototype.max = function (limit) {

    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');

    return this._test('max', limit, function (value, state, options) {

        if (Object.keys(value).length <= limit) {
            return null;
        }

        return Errors.create('object.max', { limit: limit }, state, options);
    });
};


internals.Object.prototype.pattern = function (pattern, schema) {

    Hoek.assert(pattern instanceof RegExp, 'Invalid regular expression');
    Hoek.assert(schema !== undefined, 'Invalid rule');

    pattern = new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined);         // Future version should break this and forbid unsupported regex flags

    var obj = this.clone();
    obj._inner.patterns.push({ regex: pattern, rule: Cast.schema(schema) });
    return obj;
};


internals.Object.prototype.with = function (key, peers) {

    return this._dependency('with', key, peers);
};


internals.Object.prototype.without = function (key, peers) {

    return this._dependency('without', key, peers);
};


internals.Object.prototype.xor = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('xor', null, peers);
};


internals.Object.prototype.or = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('or', null, peers);
};


internals.Object.prototype.and = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('and', null, peers);
};


internals.Object.prototype.nand = function () {

    var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this._dependency('nand', null, peers);
};


internals.Object.prototype.requiredKeys = function (children) {

    children = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this.applyFunctionToChildren(children, 'required');
};


internals.Object.prototype.optionalKeys = function (children) {

    children = Hoek.flatten(Array.prototype.slice.call(arguments));
    return this.applyFunctionToChildren(children, 'optional');
};


internals.renameDefaults = {
    alias: false,                   // Keep old value in place
    multiple: false,                // Allow renaming multiple keys into the same target
    override: false                 // Overrides an existing key
};


internals.Object.prototype.rename = function (from, to, options) {

    Hoek.assert(typeof from === 'string', 'Rename missing the from argument');
    Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
    Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

    for (var i = 0, il = this._inner.renames.length; i < il; ++i) {
        Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
    }

    var obj = this.clone();

    obj._inner.renames.push({
        from: from,
        to: to,
        options: Hoek.applyToDefaults(internals.renameDefaults, options || {})
    });

    return obj;
};


internals.groupChildren = function (children) {

    children.sort();

    var grouped = {};

    for (var c = 0, lc = children.length; c < lc; c++) {
        var child = children[c];
        Hoek.assert(typeof child === 'string', 'children must be strings');
        var group = child.split('.')[0];
        var childGroup = grouped[group] = (grouped[group] || []);
        childGroup.push(child.substring(group.length + 1));
    }

    return grouped;
};


internals.Object.prototype.applyFunctionToChildren = function (children, fn, args, root) {

    children = [].concat(children);
    Hoek.assert(children.length > 0, 'expected at least one children');

    var groupedChildren = internals.groupChildren(children);
    var obj;

    if ('' in groupedChildren) {
        obj = this[fn].apply(this, args);
        delete groupedChildren[''];
    }
    else {
        obj = this.clone();
    }

    if (obj._inner.children) {
        root = root ? (root + '.') : '';

        for (var i = 0, il = obj._inner.children.length; i < il; ++i) {
            var child = obj._inner.children[i];
            var group = groupedChildren[child.key];

            if (group) {
                obj._inner.children[i] = {
                    key: child.key,
                    _refs: child._refs,
                    schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
                };

                delete groupedChildren[child.key];
            }
        }
    }

    var remaining = Object.keys(groupedChildren);
    Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));

    return obj;
};


internals.Object.prototype._dependency = function (type, key, peers) {

    peers = [].concat(peers);
    for (var i = 0, li = peers.length; i < li; i++) {
        Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
    }

    var obj = this.clone();
    obj._inner.dependencies.push({ type: type, key: key, peers: peers });
    return obj;
};


internals.with = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return null;
    }

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (!parent.hasOwnProperty(peer) ||
            parent[peer] === undefined) {

            return Errors.create('object.with', { peer: peer }, state, options);
        }
    }

    return null;
};


internals.without = function (value, peers, parent, state, options) {

    if (value === undefined) {
        return null;
    }

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            return Errors.create('object.without', { peer: peer }, state, options);
        }
    }

    return null;
};


internals.xor = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    if (present.length === 1) {
        return null;
    }

    if (present.length === 0) {
        return Errors.create('object.missing', { peers: peers }, state, options);
    }

    return Errors.create('object.xor', { peers: peers }, state, options);
};


internals.or = function (value, peers, parent, state, options) {

    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {
            return null;
        }
    }

    return Errors.create('object.missing', { peers: peers }, state, options);
};


internals.and = function (value, peers, parent, state, options) {

    var missing = [];
    var present = [];
    var count = peers.length;
    for (var i = 0; i < count; ++i) {
        var peer = peers[i];
        if (!parent.hasOwnProperty(peer) ||
            parent[peer] === undefined) {

            missing.push(peer);
        }
        else {
            present.push(peer);
        }
    }

    var aon = (missing.length === count || present.length === count);
    return !aon ? Errors.create('object.and', { present: present, missing: missing }, state, options) : null;
};


internals.nand = function (value, peers, parent, state, options) {

    var present = [];
    for (var i = 0, il = peers.length; i < il; ++i) {
        var peer = peers[i];
        if (parent.hasOwnProperty(peer) &&
            parent[peer] !== undefined) {

            present.push(peer);
        }
    }

    var values = Hoek.clone(peers);
    var main = values.splice(0, 1)[0];
    var allPresent = (present.length === peers.length);
    return allPresent ? Errors.create('object.nand', { main: main, peers: values }, state, options) : null;
};


internals.Object.prototype.describe = function (shallow) {

    var description = Any.prototype.describe.call(this);

    if (this._inner.children &&
        !shallow) {

        description.children = {};
        for (var i = 0, il = this._inner.children.length; i < il; ++i) {
            var child = this._inner.children[i];
            description.children[child.key] = child.schema.describe();
        }
    }

    if (this._inner.dependencies.length) {
        description.dependencies = Hoek.clone(this._inner.dependencies);
    }

    if (this._inner.patterns.length) {
        description.patterns = [];

        for (var p = 0, pl = this._inner.patterns.length; p < pl; ++p) {
            var pattern = this._inner.patterns[p];
            description.patterns.push({ regex: pattern.regex.toString(), rule: pattern.rule.describe() });
        }
    }

    return description;
};


internals.Object.prototype.assert = function (ref, schema, message) {

    ref = Cast.ref(ref);
    Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
    message = message || 'pass the assertion test';

    var cast = Cast.schema(schema);
    var key = ref.path[ref.path.length - 1];
    var path = ref.path.join('.');

    return this._test('assert', { cast: cast, ref: ref }, function (value, state, options) {

        var result = cast._validate(ref(value), null, options, value);
        if (!result.errors) {
            return null;
        }

        var localState = Hoek.merge({}, state);
        localState.key = key;
        localState.path = path;
        return Errors.create('object.assert', { ref: localState.path, message: message }, localState, options);
    });
};


internals.Object.prototype.type = function (constructor, name) {

    Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
    name = name || constructor.name;

    return this._test('type', name, function (value, state, options) {

        if (value instanceof constructor) {
            return null;
        }

        return Errors.create('object.type', { type: name }, state, options);
    });
};


module.exports = new internals.Object();

},{"./any":50,"./cast":54,"./errors":56,"hoek":43,"topo":149}],62:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');


// Declare internals

var internals = {};


exports.create = function (key, options) {

    Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);

    var settings = Hoek.clone(options);         // options can be reused and modified

    var ref = function (value, validationOptions) {

        return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
    };

    ref.isContext = (key[0] === ((settings && settings.contextPrefix) || '$'));
    ref.key = (ref.isContext ? key.slice(1) : key);
    ref.path = ref.key.split((settings && settings.separator) || '.');
    ref.depth = ref.path.length;
    ref.root = ref.path[0];
    ref.isJoi = true;

    ref.toString = function () {

        return (ref.isContext ? 'context:' : 'ref:') + ref.key;
    };

    return ref;
};


exports.isRef = function (ref) {

    return typeof ref === 'function' && ref.isJoi;
};


exports.push = function (array, ref) {

    if (exports.isRef(ref) &&
        !ref.isContext) {

        array.push(ref.root);
    }
};

},{"hoek":43}],63:[function(require,module,exports){
// Load modules

var Net = require('net');
var Hoek = require('hoek');
var Isemail = require('isemail');
var Any = require('./any');
var Ref = require('./ref');
var JoiDate = require('./date');
var Errors = require('./errors');
var Uri = require('./string/uri');
var Ip = require('./string/ip');

// Declare internals

var internals = {
    uriRegex: Uri.createUriRegex(),
    ipRegex: Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], 'optional')
};

internals.String = function () {

    Any.call(this);
    this._type = 'string';
    this._invalids.add('');
};

Hoek.inherits(internals.String, Any);

internals.compare = function (type, compare) {

    return function (limit, encoding) {

        var isRef = Ref.isRef(limit);

        Hoek.assert((Hoek.isInteger(limit) && limit >= 0) || isRef, 'limit must be a positive integer or reference');
        Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

        return this._test(type, limit, function (value, state, options) {

            var compareTo;
            if (isRef) {
                compareTo = limit(state.parent, options);

                if (!Hoek.isInteger(compareTo)) {
                    return Errors.create('string.ref', { ref: limit.key }, state, options);
                }
            }
            else {
                compareTo = limit;
            }

            if (compare(value, compareTo, encoding)) {
                return null;
            }

            return Errors.create('string.' + type, { limit: compareTo, value: value, encoding: encoding }, state, options);
        });
    };
};

internals.String.prototype._base = function (value, state, options) {

    if (typeof value === 'string' &&
        options.convert) {

        if (this._flags.case) {
            value = (this._flags.case === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase());
        }

        if (this._flags.trim) {
            value = value.trim();
        }

        if (this._inner.replacements) {

            for (var r = 0, rl = this._inner.replacements.length; r < rl; ++r) {
                var replacement = this._inner.replacements[r];
                value = value.replace(replacement.pattern, replacement.replacement);
            }
        }
    }

    return {
        value: value,
        errors: (typeof value === 'string') ? null : Errors.create('string.base', { value: value }, state, options)
    };
};


internals.String.prototype.insensitive = function () {

    var obj = this.clone();
    obj._flags.insensitive = true;
    return obj;
};


internals.String.prototype.min = internals.compare('min', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length >= limit;
});


internals.String.prototype.max = internals.compare('max', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length <= limit;
});


internals.String.prototype.creditCard = function () {

    return this._test('creditCard', undefined, function (value, state, options) {

        var i = value.length;
        var sum = 0;
        var mul = 1;
        var char;

        while (i--) {
            char = value.charAt(i) * mul;
            sum += char - (char > 9) * 9;
            mul ^= 3;
        }

        var check = (sum % 10 === 0) && (sum > 0);
        return check ? null : Errors.create('string.creditCard', { value: value }, state, options);
    });
};

internals.String.prototype.length = internals.compare('length', function (value, limit, encoding) {

    var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
    return length === limit;
});


internals.String.prototype.regex = function (pattern, name) {

    Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');

    pattern = new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined);         // Future version should break this and forbid unsupported regex flags

    return this._test('regex', pattern, function (value, state, options) {

        if (pattern.test(value)) {
            return null;
        }

        return Errors.create((name ? 'string.regex.name' : 'string.regex.base'), { name: name, pattern: pattern, value: value }, state, options);
    });
};


internals.String.prototype.alphanum = function () {

    return this._test('alphanum', undefined, function (value, state, options) {

        if (/^[a-zA-Z0-9]+$/.test(value)) {
            return null;
        }

        return Errors.create('string.alphanum', { value: value }, state, options);
    });
};


internals.String.prototype.token = function () {

    return this._test('token', undefined, function (value, state, options) {

        if (/^\w+$/.test(value)) {
            return null;
        }

        return Errors.create('string.token', { value: value }, state, options);
    });
};


internals.String.prototype.email = function (isEmailOptions) {

    if (isEmailOptions) {
        Hoek.assert(typeof isEmailOptions === 'object', 'email options must be an object');
        Hoek.assert(typeof isEmailOptions.checkDNS === 'undefined', 'checkDNS option is not supported');
        Hoek.assert(typeof isEmailOptions.tldWhitelist === 'undefined' ||
            typeof isEmailOptions.tldWhitelist === 'object', 'tldWhitelist must be an array or object');
        Hoek.assert(typeof isEmailOptions.minDomainAtoms === 'undefined' ||
            Hoek.isInteger(isEmailOptions.minDomainAtoms) && isEmailOptions.minDomainAtoms > 0,
            'minDomainAtoms must be a positive integer');
        Hoek.assert(typeof isEmailOptions.errorLevel === 'undefined' || typeof isEmailOptions.errorLevel === 'boolean' ||
            (Hoek.isInteger(isEmailOptions.errorLevel) && isEmailOptions.errorLevel >= 0),
            'errorLevel must be a non-negative integer or boolean');
    }

    return this._test('email', isEmailOptions, function (value, state, options) {

        try {
            var result = Isemail(value, isEmailOptions);
            if (result === true || result === 0) {
                return null;
            }
        }
        catch (e) {}

        return Errors.create('string.email', { value: value }, state, options);
    });
};


internals.String.prototype.ip = function (ipOptions) {

    var regex = internals.ipRegex;
    ipOptions = ipOptions || {};
    Hoek.assert(typeof ipOptions === 'object', 'options must be an object');

    if (ipOptions.cidr) {
        Hoek.assert(typeof ipOptions.cidr === 'string', 'cidr must be a string');
        ipOptions.cidr = ipOptions.cidr.toLowerCase();

        Hoek.assert(ipOptions.cidr in Ip.cidrs, 'cidr must be one of ' + Object.keys(Ip.cidrs).join(', '));

        // If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default
        if (!ipOptions.version && ipOptions.cidr !== 'optional') {
            regex = Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], ipOptions.cidr);
        }
    }
    else {

        // Set our default cidr strategy
        ipOptions.cidr = 'optional';
    }

    if (ipOptions.version) {
        if (!Array.isArray(ipOptions.version)) {
            ipOptions.version = [ipOptions.version];
        }

        Hoek.assert(ipOptions.version.length >= 1, 'version must have at least 1 version specified');

        var versions = [];
        for (var i = 0, il = ipOptions.version.length; i < il; ++i) {
            var version = ipOptions.version[i];
            Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
            version = version.toLowerCase();
            Hoek.assert(Ip.versions[version], 'version at position ' + i + ' must be one of ' + Object.keys(Ip.versions).join(', '));
            versions.push(version);
        }

        // Make sure we have a set of versions
        versions = Hoek.unique(versions);

        regex = Ip.createIpRegex(versions, ipOptions.cidr);
    }

    return this._test('ip', ipOptions, function (value, state, options) {

        if (regex.test(value)) {
            return null;
        }

        if (versions) {
            return Errors.create('string.ipVersion', { value: value, cidr: ipOptions.cidr, version: versions }, state, options);
        }

        return Errors.create('string.ip', { value: value, cidr: ipOptions.cidr }, state, options);
    });
};


internals.String.prototype.uri = function (uriOptions) {

    var customScheme = '',
        regex = internals.uriRegex;

    if (uriOptions) {
        Hoek.assert(typeof uriOptions === 'object', 'options must be an object');

        if (uriOptions.scheme) {
            Hoek.assert(uriOptions.scheme instanceof RegExp || typeof uriOptions.scheme === 'string' || Array.isArray(uriOptions.scheme), 'scheme must be a RegExp, String, or Array');

            if (!Array.isArray(uriOptions.scheme)) {
                uriOptions.scheme = [uriOptions.scheme];
            }

            Hoek.assert(uriOptions.scheme.length >= 1, 'scheme must have at least 1 scheme specified');

            // Flatten the array into a string to be used to match the schemes.
            for (var i = 0, il = uriOptions.scheme.length; i < il; ++i) {
                var scheme = uriOptions.scheme[i];
                Hoek.assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');

                // Add OR separators if a value already exists
                customScheme += customScheme ? '|' : '';

                // If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.
                if (scheme instanceof RegExp) {
                    customScheme += scheme.source;
                }
                else {
                    Hoek.assert(/[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');
                    customScheme += Hoek.escapeRegex(scheme);
                }
            }
        }
    }

    if (customScheme) {
        regex = Uri.createUriRegex(customScheme);
    }

    return this._test('uri', uriOptions, function (value, state, options) {

        if (regex.test(value)) {
            return null;
        }

        if (customScheme) {
            return Errors.create('string.uriCustomScheme', { scheme: customScheme, value: value }, state, options);
        }

        return Errors.create('string.uri', { value: value }, state, options);
    });
};


internals.String.prototype.isoDate = function () {

    return this._test('isoDate', undefined, function (value, state, options) {

        if (JoiDate._isIsoDate(value)) {
            return null;
        }

        return Errors.create('string.isoDate', { value: value }, state, options);
    });
};


internals.String.prototype.guid = function () {

    var regex = /^[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}$/i;
    var regex2 = /^\{[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}\}$/i;

    return this._test('guid', undefined, function (value, state, options) {

        if (regex.test(value) || regex2.test(value)) {
            return null;
        }

        return Errors.create('string.guid', { value: value }, state, options);
    });
};


internals.String.prototype.hex = function () {

    var regex = /^[a-f0-9]+$/i;

    return this._test('hex', regex, function (value, state, options) {

        if (regex.test(value)) {
            return null;
        }

        return Errors.create('string.hex', { value: value }, state, options);
    });
};


internals.String.prototype.hostname = function () {

    var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;

    return this._test('hostname', undefined, function (value, state, options) {

        if ((value.length <= 255 && regex.test(value)) ||
            Net.isIPv6(value)) {

            return null;
        }

        return Errors.create('string.hostname', { value: value }, state, options);
    });
};


internals.String.prototype.lowercase = function () {

    var obj = this._test('lowercase', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.toLocaleLowerCase()) {

            return null;
        }

        return Errors.create('string.lowercase', { value: value }, state, options);
    });

    obj._flags.case = 'lower';
    return obj;
};


internals.String.prototype.uppercase = function (options) {

    var obj = this._test('uppercase', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.toLocaleUpperCase()) {

            return null;
        }

        return Errors.create('string.uppercase', { value: value }, state, options);
    });

    obj._flags.case = 'upper';
    return obj;
};


internals.String.prototype.trim = function () {

    var obj = this._test('trim', undefined, function (value, state, options) {

        if (options.convert ||
            value === value.trim()) {

            return null;
        }

        return Errors.create('string.trim', { value: value }, state, options);
    });

    obj._flags.trim = true;
    return obj;
};


internals.String.prototype.replace = function (pattern, replacement) {

    if (typeof pattern === 'string') {
        pattern = new RegExp(Hoek.escapeRegex(pattern), 'g');
    }

    Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
    Hoek.assert(typeof replacement === 'string', 'replacement must be a String');

    // This can not be considere a test like trim, we can't "reject"
    // anything from this rule, so just clone the current object
    var obj = this.clone();

    if (!obj._inner.replacements) {
        obj._inner.replacements = [];
    }

    obj._inner.replacements.push({
        pattern: pattern,
        replacement: replacement
    });

    return obj;
};

module.exports = new internals.String();

},{"./any":50,"./date":55,"./errors":56,"./ref":62,"./string/ip":64,"./string/uri":66,"hoek":43,"isemail":47,"net":undefined}],64:[function(require,module,exports){
var RFC3986 = require('./rfc3986');

var internals = {
    Ip: {
        cidrs: {
            required: '\\/(?:' + RFC3986.cidr + ')',
            optional: '(?:\\/(?:' + RFC3986.cidr + '))?',
            forbidden: ''
        },
        versions: {
            ipv4: RFC3986.IPv4address,
            ipv6: RFC3986.IPv6address,
            ipvfuture: RFC3986.IPvFuture
        }
    }
};

internals.Ip.createIpRegex = function (versions, cidr) {

    var regex;
    for (var i = 0, il = versions.length; i < il; ++i) {
        var version = versions[i];
        if (!regex) {
            regex = '^(?:' + internals.Ip.versions[version];
        }
        regex += '|' + internals.Ip.versions[version];
    }

    return new RegExp(regex + ')' + internals.Ip.cidrs[cidr] + '$');
};

module.exports = internals.Ip;

},{"./rfc3986":65}],65:[function(require,module,exports){
var internals = {
    rfc3986: {}
};

/**
 * elements separated by forward slash ("/") are alternatives.
 */
var or = '|';

/**
 * DIGIT = %x30-39 ; 0-9
 */
var digit = '0-9';
var digitOnly = '[' + digit + ']';

/**
 * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
 */
var alpha = 'a-zA-Z';
var alphaOnly = '[' + alpha + ']';

/**
 * cidr       = DIGIT                ; 0-9
 *            / %x31-32 DIGIT         ; 10-29
 *            / "3" %x30-32           ; 30-32
 */
internals.rfc3986.cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';

/**
 * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
 */
var hexDigit = digit + 'A-Fa-f',
    hexDigitOnly = '[' + hexDigit + ']';

/**
 * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
 */
var unreserved = alpha + digit + '-\\._~';

/**
 * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
 */
var subDelims = '!\\$&\'\\(\\)\\*\\+,;=';

/**
 * pct-encoded = "%" HEXDIG HEXDIG
 */
var pctEncoded = '%' + hexDigit;

/**
 * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
 */
var pchar = unreserved + pctEncoded + subDelims + ':@';
var pcharOnly = '[' + pchar + ']';

/**
 * Rule to support zero-padded addresses.
 */
var zeroPad = '0?';

/**
 * dec-octet   = DIGIT                 ; 0-9
 *            / %x31-39 DIGIT         ; 10-99
 *            / "1" 2DIGIT            ; 100-199
 *            / "2" %x30-34 DIGIT     ; 200-249
 *            / "25" %x30-35          ; 250-255
 */
var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';

/**
 * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
 */
internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;

/**
 * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
 * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
 * IPv6address =                            6( h16 ":" ) ls32
 *             /                       "::" 5( h16 ":" ) ls32
 *             / [               h16 ] "::" 4( h16 ":" ) ls32
 *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
 *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
 *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
 *             / [ *4( h16 ":" ) h16 ] "::"              ls32
 *             / [ *5( h16 ":" ) h16 ] "::"              h16
 *             / [ *6( h16 ":" ) h16 ] "::"
 */
var h16 = hexDigitOnly + '{1,4}';
var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
var IPv6FourHex = h16 + '::(?:' + h16 + ':){4}' + ls32;
var IPv6ThreeHex = '(?:' + h16 + ':){0,1}' + h16 + '::(?:' + h16 + ':){3}' + ls32;
var IPv6TwoHex = '(?:' + h16 + ':){0,2}' + h16 + '::(?:' + h16 + ':){2}' + ls32;
var IPv6OneHex = '(?:' + h16 + ':){0,3}' + h16 + '::' + h16 + ':' + ls32;
var IPv6NoneHex = '(?:' + h16 + ':){0,4}' + h16 + '::' + ls32;
var IPv6NoneHex2 = '(?:' + h16 + ':){0,5}' + h16 + '::' + h16;
var IPv6NoneHex3 = '(?:' + h16 + ':){0,6}' + h16 + '::';
internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';

/**
 * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
 */
internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';

/**
 * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 */
internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';

/**
 * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
 */
var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';

/**
 * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
 */
var IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';

/**
 * reg-name = *( unreserved / pct-encoded / sub-delims )
 */
var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';

/**
 * host = IP-literal / IPv4address / reg-name
 */
var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';

/**
 * port = *DIGIT
 */
var port = digitOnly + '*';

/**
 * authority   = [ userinfo "@" ] host [ ":" port ]
 */
var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';

/**
 * segment       = *pchar
 * segment-nz    = 1*pchar
 * path          = path-abempty    ; begins with "/" or is empty
 *               / path-absolute   ; begins with "/" but not "//"
 *               / path-noscheme   ; begins with a non-colon segment
 *               / path-rootless   ; begins with a segment
 *               / path-empty      ; zero characters
 * path-abempty  = *( "/" segment )
 * path-absolute = "/" [ segment-nz *( "/" segment ) ]
 * path-rootless = segment-nz *( "/" segment )
 */
var segment = pcharOnly + '*';
var segmentNz = pcharOnly + '+';
var pathAbEmpty = '(?:\\/' + segment + ')*';
var pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
var pathRootless = segmentNz + pathAbEmpty;

/**
 * hier-part = "//" authority path
 */
internals.rfc3986.hierPart = '(?:\\/\\/' + authority + pathAbEmpty + or + pathAbsolute + or + pathRootless + ')';

/**
 * query = *( pchar / "/" / "?" )
 */
internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

/**
 * fragment = *( pchar / "/" / "?" )
 */
internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';

module.exports = internals.rfc3986;

},{}],66:[function(require,module,exports){
var RFC3986 = require('./rfc3986');

var internals = {
    Uri: {
        createUriRegex: function (optionalScheme) {

            var scheme = RFC3986.scheme;

            // If we were passed a scheme, use it instead of the generic one
            if (optionalScheme) {

                // Have to put this in a non-capturing group to handle the OR statements
                scheme = '(?:' + optionalScheme + ')';
            }

            /**
             * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
             */
            return new RegExp('^' + scheme + ':' + RFC3986.hierPart + '(?:\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');
        }
    }
};

module.exports = internals.Uri;

},{"./rfc3986":65}],67:[function(require,module,exports){
'use strict';
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


// public method for encoding
exports.encode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

    }

    return output;
};

// public method for decoding
exports.decode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    return output;

};

},{}],68:[function(require,module,exports){
'use strict';
function CompressedObject() {
    this.compressedSize = 0;
    this.uncompressedSize = 0;
    this.crc32 = 0;
    this.compressionMethod = null;
    this.compressedContent = null;
}

CompressedObject.prototype = {
    /**
     * Return the decompressed content in an unspecified format.
     * The format will depend on the decompressor.
     * @return {Object} the decompressed content.
     */
    getContent: function() {
        return null; // see implementation
    },
    /**
     * Return the compressed content in an unspecified format.
     * The format will depend on the compressed conten source.
     * @return {Object} the compressed content.
     */
    getCompressedContent: function() {
        return null; // see implementation
    }
};
module.exports = CompressedObject;

},{}],69:[function(require,module,exports){
'use strict';
exports.STORE = {
    magic: "\x00\x00",
    compress: function(content) {
        return content; // no compression
    },
    uncompress: function(content) {
        return content; // no compression
    },
    compressInputType: null,
    uncompressInputType: null
};
exports.DEFLATE = require('./flate');

},{"./flate":74}],70:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var table = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
];

/**
 *
 *  Javascript crc32
 *  http://www.webtoolkit.info/
 *
 */
module.exports = function crc32(input, crc) {
    if (typeof input === "undefined" || !input.length) {
        return 0;
    }

    var isArray = utils.getTypeOf(input) !== "string";

    if (typeof(crc) == "undefined") {
        crc = 0;
    }
    var x = 0;
    var y = 0;
    var b = 0;

    crc = crc ^ (-1);
    for (var i = 0, iTop = input.length; i < iTop; i++) {
        b = isArray ? input[i] : input.charCodeAt(i);
        y = (crc ^ b) & 0xFF;
        x = table[y];
        crc = (crc >>> 8) ^ x;
    }

    return crc ^ (-1);
};
// vim: set shiftwidth=4 softtabstop=4:

},{"./utils":87}],71:[function(require,module,exports){
'use strict';
var utils = require('./utils');

function DataReader(data) {
    this.data = null; // type : see implementation
    this.length = 0;
    this.index = 0;
}
DataReader.prototype = {
    /**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
    checkOffset: function(offset) {
        this.checkIndex(this.index + offset);
    },
    /**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
    checkIndex: function(newIndex) {
        if (this.length < newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
        }
    },
    /**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
    setIndex: function(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
    },
    /**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
    skip: function(n) {
        this.setIndex(this.index + n);
    },
    /**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
    byteAt: function(i) {
        // see implementations
    },
    /**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
    readInt: function(size) {
        var result = 0,
            i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
        }
        this.index += size;
        return result;
    },
    /**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
    readString: function(size) {
        return utils.transformTo("string", this.readData(size));
    },
    /**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
    readData: function(size) {
        // see implementations
    },
    /**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
    lastIndexOfSignature: function(sig) {
        // see implementations
    },
    /**
     * Get the next date.
     * @return {Date} the date.
     */
    readDate: function() {
        var dostime = this.readInt(4);
        return new Date(
        ((dostime >> 25) & 0x7f) + 1980, // year
        ((dostime >> 21) & 0x0f) - 1, // month
        (dostime >> 16) & 0x1f, // day
        (dostime >> 11) & 0x1f, // hour
        (dostime >> 5) & 0x3f, // minute
        (dostime & 0x1f) << 1); // second
    }
};
module.exports = DataReader;

},{"./utils":87}],72:[function(require,module,exports){
'use strict';
exports.base64 = false;
exports.binary = false;
exports.dir = false;
exports.createFolders = false;
exports.date = null;
exports.compression = null;
exports.comment = null;

},{}],73:[function(require,module,exports){
'use strict';
var utils = require('./utils');

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2binary = function(str) {
    return utils.string2binary(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Uint8Array = function(str) {
    return utils.transformTo("uint8array", str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.uint8Array2String = function(array) {
    return utils.transformTo("string", array);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Blob = function(str) {
    var buffer = utils.transformTo("arraybuffer", str);
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.arrayBuffer2Blob = function(buffer) {
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.transformTo = function(outputType, input) {
    return utils.transformTo(outputType, input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.getTypeOf = function(input) {
    return utils.getTypeOf(input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.checkSupport = function(type) {
    return utils.checkSupport(type);
};

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.pretty = function(str) {
    return utils.pretty(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.findCompression = function(compressionMethod) {
    return utils.findCompression(compressionMethod);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.isRegExp = function (object) {
    return utils.isRegExp(object);
};


},{"./utils":87}],74:[function(require,module,exports){
'use strict';
var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

var pako = require("pako");
exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

exports.magic = "\x08\x00";
exports.compress = function(input) {
    return pako.deflateRaw(input);
};
exports.uncompress =  function(input) {
    return pako.inflateRaw(input);
};

},{"pako":100}],75:[function(require,module,exports){
'use strict';

var base64 = require('./base64');

/**
Usage:
   zip = new JSZip();
   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
   zip.folder("images").file("smile.gif", base64Data, {base64: true});
   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
   zip.remove("tempfile");

   base64zip = zip.generate();

**/

/**
 * Representation a of zip file in js
 * @constructor
 * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
 * @param {Object=} options the options for creating this objects (optional).
 */
function JSZip(data, options) {
    // if this constructor is used without `new`, it adds `new` before itself:
    if(!(this instanceof JSZip)) return new JSZip(data, options);
    
    // object containing the files :
    // {
    //   "folder/" : {...},
    //   "folder/data.txt" : {...}
    // }
    this.files = {};

    this.comment = null;

    // Where we are in the hierarchy
    this.root = "";
    if (data) {
        this.load(data, options);
    }
    this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) {
            if (typeof this[i] !== "function") {
                newObj[i] = this[i];
            }
        }
        return newObj;
    };
}
JSZip.prototype = require('./object');
JSZip.prototype.load = require('./load');
JSZip.support = require('./support');
JSZip.defaults = require('./defaults');

/**
 * @deprecated
 * This namespace will be removed in a future version without replacement.
 */
JSZip.utils = require('./deprecatedPublicUtils');

JSZip.base64 = {
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    encode : function(input) {
        return base64.encode(input);
    },
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    decode : function(input) {
        return base64.decode(input);
    }
};
JSZip.compressions = require('./compressions');
module.exports = JSZip;

},{"./base64":67,"./compressions":69,"./defaults":72,"./deprecatedPublicUtils":73,"./load":76,"./object":79,"./support":83}],76:[function(require,module,exports){
'use strict';
var base64 = require('./base64');
var ZipEntries = require('./zipEntries');
module.exports = function(data, options) {
    var files, zipEntries, i, input;
    options = options || {};
    if (options.base64) {
        data = base64.decode(data);
    }

    zipEntries = new ZipEntries(data, options);
    files = zipEntries.files;
    for (i = 0; i < files.length; i++) {
        input = files[i];
        this.file(input.fileName, input.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: input.date,
            dir: input.dir,
            comment : input.fileComment.length ? input.fileComment : null,
            createFolders: options.createFolders
        });
    }
    if (zipEntries.zipComment.length) {
        this.comment = zipEntries.zipComment;
    }

    return this;
};

},{"./base64":67,"./zipEntries":88}],77:[function(require,module,exports){
'use strict';
module.exports = function(data, encoding){
    return new Buffer(data, encoding);   
};
module.exports.test = function(b){
    return Buffer.isBuffer(b);
};
},{}],78:[function(require,module,exports){
'use strict';
var Uint8ArrayReader = require('./uint8ArrayReader');

function NodeBufferReader(data) {
    this.data = data;
    this.length = this.data.length;
    this.index = 0;
}
NodeBufferReader.prototype = new Uint8ArrayReader();

/**
 * @see DataReader.readData
 */
NodeBufferReader.prototype.readData = function(size) {
    this.checkOffset(size);
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = NodeBufferReader;

},{"./uint8ArrayReader":84}],79:[function(require,module,exports){
'use strict';
var support = require('./support');
var utils = require('./utils');
var crc32 = require('./crc32');
var signature = require('./signature');
var defaults = require('./defaults');
var base64 = require('./base64');
var compressions = require('./compressions');
var CompressedObject = require('./compressedObject');
var nodeBuffer = require('./nodeBuffer');
var utf8 = require('./utf8');
var StringWriter = require('./stringWriter');
var Uint8ArrayWriter = require('./uint8ArrayWriter');

/**
 * Returns the raw data of a ZipObject, decompress the content if necessary.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getRawData = function(file) {
    if (file._data instanceof CompressedObject) {
        file._data = file._data.getContent();
        file.options.binary = true;
        file.options.base64 = false;

        if (utils.getTypeOf(file._data) === "uint8array") {
            var copy = file._data;
            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
            file._data = new Uint8Array(copy.length);
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            if (copy.length !== 0) {
                file._data.set(copy, 0);
            }
        }
    }
    return file._data;
};

/**
 * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getBinaryData = function(file) {
    var result = getRawData(file),
        type = utils.getTypeOf(result);
    if (type === "string") {
        if (!file.options.binary) {
            // unicode text !
            // unicode string => binary string is a painful process, check if we can avoid it.
            if (support.nodebuffer) {
                return nodeBuffer(result, "utf-8");
            }
        }
        return file.asBinary();
    }
    return result;
};

/**
 * Transform this._data into a string.
 * @param {function} filter a function String -> String, applied if not null on the result.
 * @return {String} the string representing this._data.
 */
var dataToString = function(asUTF8) {
    var result = getRawData(this);
    if (result === null || typeof result === "undefined") {
        return "";
    }
    // if the data is a base64 string, we decode it before checking the encoding !
    if (this.options.base64) {
        result = base64.decode(result);
    }
    if (asUTF8 && this.options.binary) {
        // JSZip.prototype.utf8decode supports arrays as input
        // skip to array => string step, utf8decode will do it.
        result = out.utf8decode(result);
    }
    else {
        // no utf8 transformation, do the array => string step.
        result = utils.transformTo("string", result);
    }

    if (!asUTF8 && !this.options.binary) {
        result = utils.transformTo("string", out.utf8encode(result));
    }
    return result;
};
/**
 * A simple object representing a file in the zip file.
 * @constructor
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
 * @param {Object} options the options of the file
 */
var ZipObject = function(name, data, options) {
    this.name = name;
    this.dir = options.dir;
    this.date = options.date;
    this.comment = options.comment;

    this._data = data;
    this.options = options;

    /*
     * This object contains initial values for dir and date.
     * With them, we can check if the user changed the deprecated metadata in
     * `ZipObject#options` or not.
     */
    this._initialMetadata = {
      dir : options.dir,
      date : options.date
    };
};

ZipObject.prototype = {
    /**
     * Return the content as UTF8 string.
     * @return {string} the UTF8 string.
     */
    asText: function() {
        return dataToString.call(this, true);
    },
    /**
     * Returns the binary content.
     * @return {string} the content as binary.
     */
    asBinary: function() {
        return dataToString.call(this, false);
    },
    /**
     * Returns the content as a nodejs Buffer.
     * @return {Buffer} the content as a Buffer.
     */
    asNodeBuffer: function() {
        var result = getBinaryData(this);
        return utils.transformTo("nodebuffer", result);
    },
    /**
     * Returns the content as an Uint8Array.
     * @return {Uint8Array} the content as an Uint8Array.
     */
    asUint8Array: function() {
        var result = getBinaryData(this);
        return utils.transformTo("uint8array", result);
    },
    /**
     * Returns the content as an ArrayBuffer.
     * @return {ArrayBuffer} the content as an ArrayBufer.
     */
    asArrayBuffer: function() {
        return this.asUint8Array().buffer;
    }
};

/**
 * Transform an integer into a string in hexadecimal.
 * @private
 * @param {number} dec the number to convert.
 * @param {number} bytes the number of bytes to generate.
 * @returns {string} the result.
 */
var decToHex = function(dec, bytes) {
    var hex = "",
        i;
    for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(dec & 0xff);
        dec = dec >>> 8;
    }
    return hex;
};

/**
 * Merge the objects passed as parameters into a new one.
 * @private
 * @param {...Object} var_args All objects to merge.
 * @return {Object} a new object with the data of the others.
 */
var extend = function() {
    var result = {}, i, attr;
    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
        for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
            }
        }
    }
    return result;
};

/**
 * Transforms the (incomplete) options from the user into the complete
 * set of options to create a file.
 * @private
 * @param {Object} o the options from the user.
 * @return {Object} the complete set of options.
 */
var prepareFileAttrs = function(o) {
    o = o || {};
    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
        o.binary = true;
    }
    o = extend(o, defaults);
    o.date = o.date || new Date();
    if (o.compression !== null) o.compression = o.compression.toUpperCase();

    return o;
};

/**
 * Add a file in the current folder.
 * @private
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
 * @param {Object} o the options of the file
 * @return {Object} the new file.
 */
var fileAdd = function(name, data, o) {
    // be sure sub folders exist
    var dataType = utils.getTypeOf(data),
        parent;

    o = prepareFileAttrs(o);

    if (o.createFolders && (parent = parentFolder(name))) {
        folderAdd.call(this, parent, true);
    }

    if (o.dir || data === null || typeof data === "undefined") {
        o.base64 = false;
        o.binary = false;
        data = null;
    }
    else if (dataType === "string") {
        if (o.binary && !o.base64) {
            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
            if (o.optimizedBinaryString !== true) {
                // this is a string, not in a base64 format.
                // Be sure that this is a correct "binary string"
                data = utils.string2binary(data);
            }
        }
    }
    else { // arraybuffer, uint8array, ...
        o.base64 = false;
        o.binary = true;

        if (!dataType && !(data instanceof CompressedObject)) {
            throw new Error("The data of '" + name + "' is in an unsupported format !");
        }

        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
        if (dataType === "arraybuffer") {
            data = utils.transformTo("uint8array", data);
        }
    }

    var object = new ZipObject(name, data, o);
    this.files[name] = object;
    return object;
};

/**
 * Find the parent folder of the path.
 * @private
 * @param {string} path the path to use
 * @return {string} the parent folder, or ""
 */
var parentFolder = function (path) {
    if (path.slice(-1) == '/') {
        path = path.substring(0, path.length - 1);
    }
    var lastSlash = path.lastIndexOf('/');
    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
};

/**
 * Add a (sub) folder in the current folder.
 * @private
 * @param {string} name the folder's name
 * @param {boolean=} [createFolders] If true, automatically create sub 
 *  folders. Defaults to false.
 * @return {Object} the new folder.
 */
var folderAdd = function(name, createFolders) {
    // Check the name ends with a /
    if (name.slice(-1) != "/") {
        name += "/"; // IE doesn't like substr(-1)
    }

    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

    // Does this folder already exist?
    if (!this.files[name]) {
        fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
        });
    }
    return this.files[name];
};

/**
 * Generate a JSZip.CompressedObject for a given zipOject.
 * @param {ZipObject} file the object to read.
 * @param {JSZip.compression} compression the compression to use.
 * @return {JSZip.CompressedObject} the compressed result.
 */
var generateCompressedObjectFrom = function(file, compression) {
    var result = new CompressedObject(),
        content;

    // the data has not been decompressed, we might reuse things !
    if (file._data instanceof CompressedObject) {
        result.uncompressedSize = file._data.uncompressedSize;
        result.crc32 = file._data.crc32;

        if (result.uncompressedSize === 0 || file.dir) {
            compression = compressions['STORE'];
            result.compressedContent = "";
            result.crc32 = 0;
        }
        else if (file._data.compressionMethod === compression.magic) {
            result.compressedContent = file._data.getCompressedContent();
        }
        else {
            content = file._data.getContent();
            // need to decompress / recompress
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
        }
    }
    else {
        // have uncompressed data
        content = getBinaryData(file);
        if (!content || content.length === 0 || file.dir) {
            compression = compressions['STORE'];
            content = "";
        }
        result.uncompressedSize = content.length;
        result.crc32 = crc32(content);
        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
    }

    result.compressedSize = result.compressedContent.length;
    result.compressionMethod = compression.magic;

    return result;
};

/**
 * Generate the various parts used in the construction of the final zip file.
 * @param {string} name the file name.
 * @param {ZipObject} file the file content.
 * @param {JSZip.CompressedObject} compressedObject the compressed object.
 * @param {number} offset the current offset from the start of the zip file.
 * @return {object} the zip parts.
 */
var generateZipParts = function(name, file, compressedObject, offset) {
    var data = compressedObject.compressedContent,
        utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
        comment = file.comment || "",
        utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
        useUTF8ForComment = utfEncodedComment.length !== comment.length,
        o = file.options,
        dosTime,
        dosDate,
        extraFields = "",
        unicodePathExtraField = "",
        unicodeCommentExtraField = "",
        dir, date;


    // handle the deprecated options.dir
    if (file._initialMetadata.dir !== file.dir) {
        dir = file.dir;
    } else {
        dir = o.dir;
    }

    // handle the deprecated options.date
    if(file._initialMetadata.date !== file.date) {
        date = file.date;
    } else {
        date = o.date;
    }

    // date
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

    dosTime = date.getHours();
    dosTime = dosTime << 6;
    dosTime = dosTime | date.getMinutes();
    dosTime = dosTime << 5;
    dosTime = dosTime | date.getSeconds() / 2;

    dosDate = date.getFullYear() - 1980;
    dosDate = dosDate << 4;
    dosDate = dosDate | (date.getMonth() + 1);
    dosDate = dosDate << 5;
    dosDate = dosDate | date.getDate();

    if (useUTF8ForFileName) {
        // set the unicode path extra field. unzip needs at least one extra
        // field to correctly handle unicode path, so using the path is as good
        // as any other information. This could improve the situation with
        // other archive managers too.
        // This field is usually used without the utf8 flag, with a non
        // unicode path in the header (winrar, winzip). This helps (a bit)
        // with the messy Windows' default compressed folders feature but
        // breaks on p7zip which doesn't seek the unicode path extra field.
        // So for now, UTF-8 everywhere !
        unicodePathExtraField =
            // Version
            decToHex(1, 1) +
            // NameCRC32
            decToHex(crc32(utfEncodedFileName), 4) +
            // UnicodeName
            utfEncodedFileName;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x70" +
            // size
            decToHex(unicodePathExtraField.length, 2) +
            // content
            unicodePathExtraField;
    }

    if(useUTF8ForComment) {

        unicodeCommentExtraField =
            // Version
            decToHex(1, 1) +
            // CommentCRC32
            decToHex(this.crc32(utfEncodedComment), 4) +
            // UnicodeName
            utfEncodedComment;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x63" +
            // size
            decToHex(unicodeCommentExtraField.length, 2) +
            // content
            unicodeCommentExtraField;
    }

    var header = "";

    // version needed to extract
    header += "\x0A\x00";
    // general purpose bit flag
    // set bit 11 if utf8
    header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
    // compression method
    header += compressedObject.compressionMethod;
    // last mod file time
    header += decToHex(dosTime, 2);
    // last mod file date
    header += decToHex(dosDate, 2);
    // crc-32
    header += decToHex(compressedObject.crc32, 4);
    // compressed size
    header += decToHex(compressedObject.compressedSize, 4);
    // uncompressed size
    header += decToHex(compressedObject.uncompressedSize, 4);
    // file name length
    header += decToHex(utfEncodedFileName.length, 2);
    // extra field length
    header += decToHex(extraFields.length, 2);


    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

    var dirRecord = signature.CENTRAL_FILE_HEADER +
    // version made by (00: DOS)
    "\x14\x00" +
    // file header (common to file and central directory)
    header +
    // file comment length
    decToHex(utfEncodedComment.length, 2) +
    // disk number start
    "\x00\x00" +
    // internal file attributes TODO
    "\x00\x00" +
    // external file attributes
    (dir === true ? "\x10\x00\x00\x00" : "\x00\x00\x00\x00") +
    // relative offset of local header
    decToHex(offset, 4) +
    // file name
    utfEncodedFileName +
    // extra field
    extraFields +
    // file comment
    utfEncodedComment;

    return {
        fileRecord: fileRecord,
        dirRecord: dirRecord,
        compressedObject: compressedObject
    };
};


// return the actual prototype of JSZip
var out = {
    /**
     * Read an existing zip and merge the data in the current JSZip object.
     * The implementation is in jszip-load.js, don't forget to include it.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
     * @param {Object} options Options for loading the stream.
     *  options.base64 : is the stream in base64 ? default : false
     * @return {JSZip} the current JSZip object
     */
    load: function(stream, options) {
        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
    },

    /**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
    filter: function(search) {
        var result = [],
            filename, relativePath, file, fileClone;
        for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
                continue;
            }
            file = this.files[filename];
            // return a new object, don't let the user mess with our internal objects :)
            fileClone = new ZipObject(file.name, file._data, extend(file.options));
            relativePath = filename.slice(this.root.length, filename.length);
            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
            search(relativePath, fileClone)) { // and the file matches the function
                result.push(fileClone);
            }
        }
        return result;
    },

    /**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
    file: function(name, data, o) {
        if (arguments.length === 1) {
            if (utils.isRegExp(name)) {
                var regexp = name;
                return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                });
            }
            else { // text
                return this.filter(function(relativePath, file) {
                    return !file.dir && relativePath === name;
                })[0] || null;
            }
        }
        else { // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
        }
        return this;
    },

    /**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
    folder: function(arg) {
        if (!arg) {
            return this;
        }

        if (utils.isRegExp(arg)) {
            return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
            });
        }

        // else, name is a new folder
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);

        // Allow chaining by returning a new object with this folder as the root
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
    },

    /**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
    remove: function(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
            // Look for any folders
            if (name.slice(-1) != "/") {
                name += "/";
            }
            file = this.files[name];
        }

        if (file && !file.dir) {
            // file
            delete this.files[name];
        } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function(relativePath, file) {
                return file.name.slice(0, name.length) === name;
            });
            for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
            }
        }

        return this;
    },

    /**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
    generate: function(options) {
        options = extend(options || {}, {
            base64: true,
            compression: "STORE",
            type: "base64",
            comment: null
        });

        utils.checkSupport(options.type);

        var zipData = [],
            localDirLength = 0,
            centralDirLength = 0,
            writer, i,
            utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

        // first, generate all the zip parts.
        for (var name in this.files) {
            if (!this.files.hasOwnProperty(name)) {
                continue;
            }
            var file = this.files[name];

            var compressionName = file.options.compression || options.compression.toUpperCase();
            var compression = compressions[compressionName];
            if (!compression) {
                throw new Error(compressionName + " is not a valid compression method !");
            }

            var compressedObject = generateCompressedObjectFrom.call(this, file, compression);

            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
            centralDirLength += zipPart.dirRecord.length;
            zipData.push(zipPart);
        }

        var dirEnd = "";

        // end of central dir signature
        dirEnd = signature.CENTRAL_DIRECTORY_END +
        // number of this disk
        "\x00\x00" +
        // number of the disk with the start of the central directory
        "\x00\x00" +
        // total number of entries in the central directory on this disk
        decToHex(zipData.length, 2) +
        // total number of entries in the central directory
        decToHex(zipData.length, 2) +
        // size of the central directory   4 bytes
        decToHex(centralDirLength, 4) +
        // offset of start of central directory with respect to the starting disk number
        decToHex(localDirLength, 4) +
        // .ZIP file comment length
        decToHex(utfEncodedComment.length, 2) +
        // .ZIP file comment
        utfEncodedComment;


        // we have all the parts (and the total length)
        // time to create a writer !
        var typeName = options.type.toLowerCase();
        if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
        }else{
            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
        }

        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].fileRecord);
            writer.append(zipData[i].compressedObject.compressedContent);
        }
        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].dirRecord);
        }

        writer.append(dirEnd);

        var zip = writer.finalize();



        switch(options.type.toLowerCase()) {
            // case "zip is an Uint8Array"
            case "uint8array" :
            case "arraybuffer" :
            case "nodebuffer" :
               return utils.transformTo(options.type.toLowerCase(), zip);
            case "blob" :
               return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip));
            // case "zip is a string"
            case "base64" :
               return (options.base64) ? base64.encode(zip) : zip;
            default : // case "string" :
               return zip;
         }
      
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    crc32: function (input, crc) {
        return crc32(input, crc);
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8encode: function (string) {
        return utils.transformTo("string", utf8.utf8encode(string));
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8decode: function (input) {
        return utf8.utf8decode(input);
    }
};
module.exports = out;

},{"./base64":67,"./compressedObject":68,"./compressions":69,"./crc32":70,"./defaults":72,"./nodeBuffer":77,"./signature":80,"./stringWriter":82,"./support":83,"./uint8ArrayWriter":85,"./utf8":86,"./utils":87}],80:[function(require,module,exports){
'use strict';
exports.LOCAL_FILE_HEADER = "PK\x03\x04";
exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
exports.DATA_DESCRIPTOR = "PK\x07\x08";

},{}],81:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');
var utils = require('./utils');

function StringReader(data, optimizedBinaryString) {
    this.data = data;
    if (!optimizedBinaryString) {
        this.data = utils.string2binary(this.data);
    }
    this.length = this.data.length;
    this.index = 0;
}
StringReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
StringReader.prototype.byteAt = function(i) {
    return this.data.charCodeAt(i);
};
/**
 * @see DataReader.lastIndexOfSignature
 */
StringReader.prototype.lastIndexOfSignature = function(sig) {
    return this.data.lastIndexOf(sig);
};
/**
 * @see DataReader.readData
 */
StringReader.prototype.readData = function(size) {
    this.checkOffset(size);
    // this will work because the constructor applied the "& 0xff" mask.
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = StringReader;

},{"./dataReader":71,"./utils":87}],82:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to a string.
 * @constructor
 */
var StringWriter = function() {
    this.data = [];
};
StringWriter.prototype = {
    /**
     * Append any content to the current string.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        input = utils.transformTo("string", input);
        this.data.push(input);
    },
    /**
     * Finalize the construction an return the result.
     * @return {string} the generated string.
     */
    finalize: function() {
        return this.data.join("");
    }
};

module.exports = StringWriter;

},{"./utils":87}],83:[function(require,module,exports){
'use strict';
exports.base64 = true;
exports.array = true;
exports.string = true;
exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
// contains true if JSZip can read/generate nodejs Buffer, false otherwise.
// Browserify will provide a Buffer implementation for browsers, which is
// an augmented Uint8Array (i.e., can be used as either Buffer or U8).
exports.nodebuffer = typeof Buffer !== "undefined";
// contains true if JSZip can read/generate Uint8Array, false otherwise.
exports.uint8array = typeof Uint8Array !== "undefined";

if (typeof ArrayBuffer === "undefined") {
    exports.blob = false;
}
else {
    var buffer = new ArrayBuffer(0);
    try {
        exports.blob = new Blob([buffer], {
            type: "application/zip"
        }).size === 0;
    }
    catch (e) {
        try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = builder.getBlob('application/zip').size === 0;
        }
        catch (e) {
            exports.blob = false;
        }
    }
}

},{}],84:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');

function Uint8ArrayReader(data) {
    if (data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
}
Uint8ArrayReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
Uint8ArrayReader.prototype.byteAt = function(i) {
    return this.data[i];
};
/**
 * @see DataReader.lastIndexOfSignature
 */
Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3);
    for (var i = this.length - 4; i >= 0; --i) {
        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i;
        }
    }

    return -1;
};
/**
 * @see DataReader.readData
 */
Uint8ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
        return new Uint8Array(0);
    }
    var result = this.data.subarray(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = Uint8ArrayReader;

},{"./dataReader":71}],85:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to an Uint8Array.
 * @constructor
 * @param {number} length The length of the array.
 */
var Uint8ArrayWriter = function(length) {
    this.data = new Uint8Array(length);
    this.index = 0;
};
Uint8ArrayWriter.prototype = {
    /**
     * Append any content to the current array.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        if (input.length !== 0) {
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            input = utils.transformTo("uint8array", input);
            this.data.set(input, this.index);
            this.index += input.length;
        }
    },
    /**
     * Finalize the construction an return the result.
     * @return {Uint8Array} the generated array.
     */
    finalize: function() {
        return this.data;
    }
};

module.exports = Uint8ArrayWriter;

},{"./utils":87}],86:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var support = require('./support');
var nodeBuffer = require('./nodeBuffer');

/**
 * The following functions come from pako, from pako/lib/utils/strings
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Array(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

// convert string to array (typed, when possible)
var string2buf = function (str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    if (support.uint8array) {
        buf = new Uint8Array(buf_len);
    } else {
        buf = new Array(buf_len);
    }

    // convert
    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
        } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | (c >>> 6);
            buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | (c >>> 12);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        } else {
            /* four bytes */
            buf[i++] = 0xf0 | (c >>> 18);
            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        }
    }

    return buf;
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max-1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

// convert array to string
var buf2string = function (buf) {
    var str, i, out, c, c_len;
    var len = buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len*2);

    for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
            c = (c << 6) | (buf[i++] & 0x3f);
            c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
            utf16buf[out++] = c;
        } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
    }

    // shrinkBuf(utf16buf, out)
    if (utf16buf.length !== out) {
        if(utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
        } else {
            utf16buf.length = out;
        }
    }

    // return String.fromCharCode.apply(null, utf16buf);
    return utils.applyFromCharCode(utf16buf);
};


// That's all for the pako functions.


/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
exports.utf8encode = function utf8encode(str) {
    if (support.nodebuffer) {
        return nodeBuffer(str, "utf-8");
    }

    return string2buf(str);
};


/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
exports.utf8decode = function utf8decode(buf) {
    if (support.nodebuffer) {
        return utils.transformTo("nodebuffer", buf).toString("utf-8");
    }

    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

    // return buf2string(buf);
    // Chrome prefers to work with "small" chunks of data
    // for the method buf2string.
    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
    var result = [], k = 0, len = buf.length, chunk = 65536;
    while (k < len) {
        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
        if (support.uint8array) {
            result.push(buf2string(buf.subarray(k, nextBoundary)));
        } else {
            result.push(buf2string(buf.slice(k, nextBoundary)));
        }
        k = nextBoundary;
    }
    return result.join("");

};
// vim: set shiftwidth=4 softtabstop=4:

},{"./nodeBuffer":77,"./support":83,"./utils":87}],87:[function(require,module,exports){
'use strict';
var support = require('./support');
var compressions = require('./compressions');
var nodeBuffer = require('./nodeBuffer');
/**
 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
 * @param {string} str the string to transform.
 * @return {String} the binary string.
 */
exports.string2binary = function(str) {
    var result = "";
    for (var i = 0; i < str.length; i++) {
        result += String.fromCharCode(str.charCodeAt(i) & 0xff);
    }
    return result;
};
exports.arrayBuffer2Blob = function(buffer) {
    exports.checkSupport("blob");

    try {
        // Blob constructor
        return new Blob([buffer], {
            type: "application/zip"
        });
    }
    catch (e) {

        try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            return builder.getBlob('application/zip');
        }
        catch (e) {

            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        }
    }


};
/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function identity(input) {
    return input;
}

/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function stringToArrayLike(str, array) {
    for (var i = 0; i < str.length; ++i) {
        array[i] = str.charCodeAt(i) & 0xFF;
    }
    return array;
}

/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function arrayLikeToString(array) {
    // Performances notes :
    // --------------------
    // String.fromCharCode.apply(null, array) is the fastest, see
    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
    // but the stack is limited (and we can get huge arrays !).
    //
    // result += String.fromCharCode(array[i]); generate too many strings !
    //
    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
    var chunk = 65536;
    var result = [],
        len = array.length,
        type = exports.getTypeOf(array),
        k = 0,
        canUseApply = true;
      try {
         switch(type) {
            case "uint8array":
               String.fromCharCode.apply(null, new Uint8Array(0));
               break;
            case "nodebuffer":
               String.fromCharCode.apply(null, nodeBuffer(0));
               break;
         }
      } catch(e) {
         canUseApply = false;
      }

      // no apply : slow and painful algorithm
      // default browser on android 4.*
      if (!canUseApply) {
         var resultStr = "";
         for(var i = 0; i < array.length;i++) {
            resultStr += String.fromCharCode(array[i]);
         }
    return resultStr;
    }
    while (k < len && chunk > 1) {
        try {
            if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            }
            else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }
            k += chunk;
        }
        catch (e) {
            chunk = Math.floor(chunk / 2);
        }
    }
    return result.join("");
}

exports.applyFromCharCode = arrayLikeToString;


/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    for (var i = 0; i < arrayFrom.length; i++) {
        arrayTo[i] = arrayFrom[i];
    }
    return arrayTo;
}

// a matrix containing functions to transform everything into everything.
var transform = {};

// string to ?
transform["string"] = {
    "string": identity,
    "array": function(input) {
        return stringToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["string"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": function(input) {
        return stringToArrayLike(input, nodeBuffer(input.length));
    }
};

// array to ?
transform["array"] = {
    "string": arrayLikeToString,
    "array": identity,
    "arraybuffer": function(input) {
        return (new Uint8Array(input)).buffer;
    },
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// arraybuffer to ?
transform["arraybuffer"] = {
    "string": function(input) {
        return arrayLikeToString(new Uint8Array(input));
    },
    "array": function(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
    },
    "arraybuffer": identity,
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(new Uint8Array(input));
    }
};

// uint8array to ?
transform["uint8array"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return input.buffer;
    },
    "uint8array": identity,
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// nodebuffer to ?
transform["nodebuffer"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": identity
};

/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
exports.transformTo = function(outputType, input) {
    if (!input) {
        // undefined, null, etc
        // an empty string won't harm.
        input = "";
    }
    if (!outputType) {
        return input;
    }
    exports.checkSupport(outputType);
    var inputType = exports.getTypeOf(input);
    var result = transform[inputType][outputType](input);
    return result;
};

/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
exports.getTypeOf = function(input) {
    if (typeof input === "string") {
        return "string";
    }
    if (Object.prototype.toString.call(input) === "[object Array]") {
        return "array";
    }
    if (support.nodebuffer && nodeBuffer.test(input)) {
        return "nodebuffer";
    }
    if (support.uint8array && input instanceof Uint8Array) {
        return "uint8array";
    }
    if (support.arraybuffer && input instanceof ArrayBuffer) {
        return "arraybuffer";
    }
};

/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
exports.checkSupport = function(type) {
    var supported = support[type.toLowerCase()];
    if (!supported) {
        throw new Error(type + " is not supported by this browser");
    }
};
exports.MAX_VALUE_16BITS = 65535;
exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
exports.pretty = function(str) {
    var res = '',
        code, i;
    for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
    }
    return res;
};

/**
 * Find a compression registered in JSZip.
 * @param {string} compressionMethod the method magic to find.
 * @return {Object|null} the JSZip compression object, null if none found.
 */
exports.findCompression = function(compressionMethod) {
    for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) {
            continue;
        }
        if (compressions[method].magic === compressionMethod) {
            return compressions[method];
        }
    }
    return null;
};
/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
exports.isRegExp = function (object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
};


},{"./compressions":69,"./nodeBuffer":77,"./support":83}],88:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var NodeBufferReader = require('./nodeBufferReader');
var Uint8ArrayReader = require('./uint8ArrayReader');
var utils = require('./utils');
var sig = require('./signature');
var ZipEntry = require('./zipEntry');
var support = require('./support');
var jszipProto = require('./object');
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntries(data, loadOptions) {
    this.files = [];
    this.loadOptions = loadOptions;
    if (data) {
        this.load(data);
    }
}
ZipEntries.prototype = {
    /**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
    checkSignature: function(expectedSignature) {
        var signature = this.reader.readString(4);
        if (signature !== expectedSignature) {
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
        }
    },
    /**
     * Read the end of the central directory.
     */
    readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);

        this.zipCommentLength = this.reader.readInt(2);
        // warning : the encoding depends of the system locale
        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
        // On a windows machine, this field is encoded with the localized windows code page.
        this.zipComment = this.reader.readString(this.zipCommentLength);
        // To get consistent behavior with the generation part, we will assume that
        // this is utf8 encoded.
        this.zipComment = jszipProto.utf8decode(this.zipComment);
    },
    /**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
    readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.versionMadeBy = this.reader.readString(2);
        this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);

        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44,
            index = 0,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;
        while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readString(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Read the end of the Zip 64 central directory locator.
     */
    readBlockZip64EndOfCentralLocator: function() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
        }
    },
    /**
     * Read the local files, based on the offset read in the central part.
     */
    readLocalFiles: function() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
        }
    },
    /**
     * Read the central directory.
     */
    readCentralDir: function() {
        var file;

        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
            file = new ZipEntry({
                zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
        }
    },
    /**
     * Read the end of central directory.
     */
    readEndOfCentral: function() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (offset === -1) {
            throw new Error("Corrupted zip : can't find end of central directory");
        }
        this.reader.setIndex(offset);
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();


        /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;

            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */

            // should look for a zip64 EOCD locator
            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();

            // now the zip64 EOCD record
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
        }
    },
    prepareReader: function(data) {
        var type = utils.getTypeOf(data);
        if (type === "string" && !support.uint8array) {
            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
        }
        else if (type === "nodebuffer") {
            this.reader = new NodeBufferReader(data);
        }
        else {
            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
        }
    },
    /**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
    load: function(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
    }
};
// }}} end of ZipEntries
module.exports = ZipEntries;

},{"./nodeBufferReader":78,"./object":79,"./signature":80,"./stringReader":81,"./support":83,"./uint8ArrayReader":84,"./utils":87,"./zipEntry":89}],89:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var utils = require('./utils');
var CompressedObject = require('./compressedObject');
var jszipProto = require('./object');
// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntry(options, loadOptions) {
    this.options = options;
    this.loadOptions = loadOptions;
}
ZipEntry.prototype = {
    /**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
    isEncrypted: function() {
        // bit 1 is set
        return (this.bitFlag & 0x0001) === 0x0001;
    },
    /**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
    useUTF8: function() {
        // bit 11 is set
        return (this.bitFlag & 0x0800) === 0x0800;
    },
    /**
     * Prepare the function used to generate the compressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
     */
    prepareCompressedContent: function(reader, from, length) {
        return function() {
            var previousIndex = reader.index;
            reader.setIndex(from);
            var compressedFileData = reader.readData(length);
            reader.setIndex(previousIndex);

            return compressedFileData;
        };
    },
    /**
     * Prepare the function used to generate the uncompressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @param {JSZip.compression} compression the compression used on this file.
     * @param {number} uncompressedSize the uncompressed size to expect.
     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
     */
    prepareContent: function(reader, from, length, compression, uncompressedSize) {
        return function() {

            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
            var uncompressedFileData = compression.uncompress(compressedFileData);

            if (uncompressedFileData.length !== uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
            }

            return uncompressedFileData;
        };
    },
    /**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readLocalPart: function(reader) {
        var compression, localExtraFieldsLength;

        // we already know everything from the central dir !
        // If the central dir data are false, we are doomed.
        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
        // The less data we get here, the more reliable this should be.
        // Let's skip the whole header and dash to the data !
        reader.skip(22);
        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
        // Strangely, the filename here is OK.
        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
        // the internet.
        //
        // I think I see the logic here : the central directory is used to display
        // content and the local directory is used to extract the files. Mixing / and \
        // may be used to display \ to windows users and use / when extracting the files.
        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
        this.fileName = reader.readString(this.fileNameLength);
        reader.skip(localExtraFieldsLength);

        if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
        }

        compression = utils.findCompression(this.compressionMethod);
        if (compression === null) { // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
        }
        this.decompressed = new CompressedObject();
        this.decompressed.compressedSize = this.compressedSize;
        this.decompressed.uncompressedSize = this.uncompressedSize;
        this.decompressed.crc32 = this.crc32;
        this.decompressed.compressionMethod = this.compressionMethod;
        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

        // we need to compute the crc32...
        if (this.loadOptions.checkCRC32) {
            this.decompressed = utils.transformTo("string", this.decompressed.getContent());
            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                throw new Error("Corrupted zip : CRC32 mismatch");
            }
        }
    },

    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readCentralPart: function(reader) {
        this.versionMadeBy = reader.readString(2);
        this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        this.fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);

        if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
        }

        this.fileName = reader.readString(this.fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readString(this.fileCommentLength);

        // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)
        this.dir = this.externalFileAttributes & 0x00000010 ? true : false;
    },
    /**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
    parseZIP64ExtraField: function(reader) {

        if (!this.extraFields[0x0001]) {
            return;
        }

        // should be something, preparing the extra reader
        var extraReader = new StringReader(this.extraFields[0x0001].value);

        // I really hope that these 64bits integer can fit in 32 bits integer, because js
        // won't let us have more.
        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
        }
        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
        }
        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
        }
        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
        }
    },
    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readExtraFields: function(reader) {
        var start = reader.index,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;

        this.extraFields = this.extraFields || {};

        while (reader.index < start + this.extraFieldsLength) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readString(extraFieldLength);

            this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Apply an UTF8 transformation if needed.
     */
    handleUTF8: function() {
        if (this.useUTF8()) {
            this.fileName = jszipProto.utf8decode(this.fileName);
            this.fileComment = jszipProto.utf8decode(this.fileComment);
        } else {
            var upath = this.findExtraFieldUnicodePath();
            if (upath !== null) {
                this.fileName = upath;
            }
            var ucomment = this.findExtraFieldUnicodeComment();
            if (ucomment !== null) {
                this.fileComment = ucomment;
            }
        }
    },

    /**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
    findExtraFieldUnicodePath: function() {
        var upathField = this.extraFields[0x7075];
        if (upathField) {
            var extraReader = new StringReader(upathField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the filename changed, this field is out of date.
            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
        }
        return null;
    },

    /**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
    findExtraFieldUnicodeComment: function() {
        var ucommentField = this.extraFields[0x6375];
        if (ucommentField) {
            var extraReader = new StringReader(ucommentField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the comment changed, this field is out of date.
            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
        }
        return null;
    }
};
module.exports = ZipEntry;

},{"./compressedObject":68,"./object":79,"./stringReader":81,"./utils":87}],90:[function(require,module,exports){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.2';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      value = Object(value);
      return (symToStringTag && symToStringTag in value)
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      object = Object(object);
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

},{}],91:[function(require,module,exports){
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */

var http = require('http');

/**
 * Module exports.
 * @public
 */

module.exports = getCurrentNodeMethods() || getBasicNodeMethods();

/**
 * Get the current Node.js methods.
 * @private
 */

function getCurrentNodeMethods() {
  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
    return method.toLowerCase();
  });
}

/**
 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
 * @private
 */

function getBasicNodeMethods() {
  return [
    'get',
    'post',
    'put',
    'head',
    'delete',
    'options',
    'trace',
    'copy',
    'lock',
    'mkcol',
    'move',
    'purge',
    'propfind',
    'proppatch',
    'unlock',
    'report',
    'mkactivity',
    'checkout',
    'merge',
    'm-search',
    'notify',
    'subscribe',
    'unsubscribe',
    'patch',
    'search',
    'connect'
  ];
}

},{"http":undefined}],92:[function(require,module,exports){
module.exports={
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana"
  },
  "application/3gpp-ims+xml": {
    "source": "iana"
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana"
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "extensions": ["atomsvc"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana"
  },
  "application/bacnet-xdd+zip": {
    "source": "iana"
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana"
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana"
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana"
  },
  "application/ccxml+xml": {
    "source": "iana",
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana"
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana"
  },
  "application/cellml+xml": {
    "source": "iana"
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/clue_info+xml": {
    "source": "iana"
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana"
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana"
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana"
  },
  "application/cstadata+xml": {
    "source": "iana"
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "extensions": ["mpd"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana"
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana"
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "extensions": ["dbk"]
  },
  "application/dskpp+xml": {
    "source": "iana"
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana"
  },
  "application/emma+xml": {
    "source": "iana",
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana"
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana"
  },
  "application/epub+zip": {
    "source": "iana",
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana"
  },
  "application/fits": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["woff"]
  },
  "application/font-woff2": {
    "compressible": false,
    "extensions": ["woff2"]
  },
  "application/framework-attributes+xml": {
    "source": "iana"
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/gml+xml": {
    "source": "apache",
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana"
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana"
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana"
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana"
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana"
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js"]
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana"
  },
  "application/kpml-response+xml": {
    "source": "iana"
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana"
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana"
  },
  "application/lost+xml": {
    "source": "iana",
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana"
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana"
  },
  "application/mathml-presentation+xml": {
    "source": "iana"
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana"
  },
  "application/mbms-deregister+xml": {
    "source": "iana"
  },
  "application/mbms-envelope+xml": {
    "source": "iana"
  },
  "application/mbms-msk+xml": {
    "source": "iana"
  },
  "application/mbms-msk-response+xml": {
    "source": "iana"
  },
  "application/mbms-protection-description+xml": {
    "source": "iana"
  },
  "application/mbms-reception-report+xml": {
    "source": "iana"
  },
  "application/mbms-register+xml": {
    "source": "iana"
  },
  "application/mbms-register-response+xml": {
    "source": "iana"
  },
  "application/mbms-schedule+xml": {
    "source": "iana"
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana"
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana"
  },
  "application/media_control+xml": {
    "source": "iana"
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mods+xml": {
    "source": "iana",
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana"
  },
  "application/mrb-publish+xml": {
    "source": "iana"
  },
  "application/msc-ivr+xml": {
    "source": "iana"
  },
  "application/msc-mixer+xml": {
    "source": "iana"
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana"
  },
  "application/news-groupinfo": {
    "source": "iana"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana"
  },
  "application/nss": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p2p-overlay+xml": {
    "source": "iana"
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana"
  },
  "application/pidf-diff+xml": {
    "source": "iana"
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana"
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana"
  },
  "application/provenance+xml": {
    "source": "iana"
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.hpub+zip": {
    "source": "iana"
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana"
  },
  "application/pskc+xml": {
    "source": "iana",
    "extensions": ["pskcxml"]
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana"
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana"
  },
  "application/rls-services+xml": {
    "source": "iana",
    "extensions": ["rs"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana"
  },
  "application/samlmetadata+xml": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana"
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/sep+xml": {
    "source": "iana"
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana"
  },
  "application/simple-filter+xml": {
    "source": "iana"
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana"
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "extensions": ["ssml"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "extensions": ["tei","teicorpus"]
  },
  "application/thraud+xml": {
    "source": "iana",
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/ttml+xml": {
    "source": "iana"
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana"
  },
  "application/urc-ressheet+xml": {
    "source": "iana"
  },
  "application/urc-targetdesc+xml": {
    "source": "iana"
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana"
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana"
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avistar+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana"
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "extensions": ["wbs"]
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana"
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana"
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume-movie": {
    "source": "iana"
  },
  "application/vnd.desmume.movie": {
    "source": "apache"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana"
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana"
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana"
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana"
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana"
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana"
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana"
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana"
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana"
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana"
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana"
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "extensions": ["lasxml"]
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana"
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "extensions": ["lbe"]
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana"
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana"
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana"
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache"
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana"
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana"
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana"
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana"
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana"
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana"
  },
  "application/vnd.omads-email+xml": {
    "source": "iana"
  },
  "application/vnd.omads-file+xml": {
    "source": "iana"
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana"
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana"
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "apache",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "apache",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "apache",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana"
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana"
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos+xml": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "apache"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana"
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana"
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana"
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana"
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana"
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana"
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana"
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana"
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana"
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "extensions": ["vxml"]
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/watcherinfo+xml": {
    "source": "iana"
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-otf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["otf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-ttf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ttf","ttc"]
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "apache",
    "extensions": ["der","crt","pem"]
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana"
  },
  "application/xaml+xml": {
    "source": "apache",
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana"
  },
  "application/xcap-caps+xml": {
    "source": "iana"
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana"
  },
  "application/xcap-error+xml": {
    "source": "iana"
  },
  "application/xcap-ns+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana"
  },
  "application/xenc+xml": {
    "source": "iana",
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache"
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana"
  },
  "application/xmpp+xml": {
    "source": "iana"
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "extensions": ["xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana"
  },
  "application/yin+xml": {
    "source": "iana",
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana"
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana"
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/opentype": {
    "compressible": true,
    "extensions": ["otf"]
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana"
  },
  "image/emf": {
    "source": "iana"
  },
  "image/fits": {
    "source": "iana"
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana"
  },
  "image/jp2": {
    "source": "iana"
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jpm": {
    "source": "iana"
  },
  "image/jpx": {
    "source": "iana"
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana"
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana"
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tiff","tif"]
  },
  "image/tiff-fx": {
    "source": "iana"
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana"
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana"
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana"
  },
  "image/vnd.valve.source.texture": {
    "source": "iana"
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana"
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana"
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana"
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana"
  },
  "message/global-delivery-status": {
    "source": "iana"
  },
  "message/global-disposition-notification": {
    "source": "iana"
  },
  "message/global-headers": {
    "source": "iana"
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana"
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana"
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana"
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana"
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana"
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana"
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/css": {
    "source": "iana",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/hjson": {
    "extensions": ["hjson"]
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana"
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["markdown","md","mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "apache"
  },
  "video/3gpp": {
    "source": "apache",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "apache"
  },
  "video/3gpp2": {
    "source": "apache",
    "extensions": ["3g2"]
  },
  "video/bmpeg": {
    "source": "apache"
  },
  "video/bt656": {
    "source": "apache"
  },
  "video/celb": {
    "source": "apache"
  },
  "video/dv": {
    "source": "apache"
  },
  "video/encaprtp": {
    "source": "apache"
  },
  "video/h261": {
    "source": "apache",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "apache",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "apache"
  },
  "video/h263-2000": {
    "source": "apache"
  },
  "video/h264": {
    "source": "apache",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "apache"
  },
  "video/h264-svc": {
    "source": "apache"
  },
  "video/h265": {
    "source": "apache"
  },
  "video/iso.segment": {
    "source": "apache"
  },
  "video/jpeg": {
    "source": "apache",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "apache"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "apache",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "apache"
  },
  "video/mp2p": {
    "source": "apache"
  },
  "video/mp2t": {
    "source": "apache",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "apache"
  },
  "video/mpeg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "apache"
  },
  "video/mpv": {
    "source": "apache"
  },
  "video/nv": {
    "source": "apache"
  },
  "video/ogg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "apache"
  },
  "video/pointer": {
    "source": "apache"
  },
  "video/quicktime": {
    "source": "apache",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "apache"
  },
  "video/raw": {
    "source": "apache"
  },
  "video/rtp-enc-aescm128": {
    "source": "apache"
  },
  "video/rtploopback": {
    "source": "apache"
  },
  "video/rtx": {
    "source": "apache"
  },
  "video/smpte292m": {
    "source": "apache"
  },
  "video/ulpfec": {
    "source": "apache"
  },
  "video/vc1": {
    "source": "apache"
  },
  "video/vnd.cctv": {
    "source": "apache"
  },
  "video/vnd.dece.hd": {
    "source": "apache",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "apache",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "apache"
  },
  "video/vnd.dece.pd": {
    "source": "apache",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "apache",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "apache",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "apache"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dvb.file": {
    "source": "apache",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "apache",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "apache"
  },
  "video/vnd.motorola.video": {
    "source": "apache"
  },
  "video/vnd.motorola.videop": {
    "source": "apache"
  },
  "video/vnd.mpegurl": {
    "source": "apache",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "apache",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "apache"
  },
  "video/vnd.nokia.videovoip": {
    "source": "apache"
  },
  "video/vnd.objectvideo": {
    "source": "apache"
  },
  "video/vnd.radgamettools.bink": {
    "source": "apache"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "apache"
  },
  "video/vnd.sealed.swf": {
    "source": "apache"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "apache"
  },
  "video/vnd.uvvu.mp4": {
    "source": "apache",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "apache",
    "extensions": ["viv"]
  },
  "video/vp8": {
    "source": "apache"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}

},{}],93:[function(require,module,exports){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = require('./db.json')

},{"./db.json":92}],94:[function(require,module,exports){
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var db = require('mime-db')
var extname = require('path').extname

/**
 * Module variables.
 * @private
 */

var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/
var textTypeRegExp = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = extractTypeRegExp.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && textTypeRegExp.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = extractTypeRegExp.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}

},{"mime-db":93,"path":undefined}],95:[function(require,module,exports){
var path = require('path');
var fs = require('fs');

function Mime() {
  // Map of extension -> mime type
  this.types = Object.create(null);

  // Map of mime type -> extension
  this.extensions = Object.create(null);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * @param map (Object) type definitions
 */
Mime.prototype.define = function (map) {
  for (var type in map) {
    var exts = map[type];
    for (var i = 0; i < exts.length; i++) {
      if (process.env.DEBUG_MIME && this.types[exts]) {
        console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
          this.types[exts] + ' to ' + type);
      }

      this.types[exts[i]] = type;
    }

    // Default extension is the first one we encounter
    if (!this.extensions[type]) {
      this.extensions[type] = exts[0];
    }
  }
};

/**
 * Load an Apache2-style ".types" file
 *
 * This may be called multiple times (it's expected).  Where files declare
 * overlapping types/extensions, the last file wins.
 *
 * @param file (String) path of file to load.
 */
Mime.prototype.load = function(file) {
  this._loading = file;
  // Read file and split into lines
  var map = {},
      content = fs.readFileSync(file, 'ascii'),
      lines = content.split(/[\r\n]+/);

  lines.forEach(function(line) {
    // Clean up whitespace/comments, and split into fields
    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
    map[fields.shift()] = fields;
  });

  this.define(map);

  this._loading = null;
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.lookup = function(path, fallback) {
  var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();

  return this.types[ext] || fallback || this.default_type;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.extension = function(mimeType) {
  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
  return this.extensions[type];
};

// Default instance
var mime = new Mime();

// Define built-in types
mime.define(require('./types.json'));

// Default type
mime.default_type = mime.lookup('bin');

//
// Additional API specific to the default instance
//

mime.Mime = Mime;

/**
 * Lookup a charset based on mime type.
 */
mime.charsets = {
  lookup: function(mimeType, fallback) {
    // Assume text types are utf8
    return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
  }
};

module.exports = mime;

},{"./types.json":96,"fs":undefined,"path":undefined}],96:[function(require,module,exports){
module.exports={"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mdp"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-nzb":["nzb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-research-info-systems":["ris"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp4":["mp4a","m4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/opentype":["otf"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-mrsid-image":["sid"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/sgml":["sgml","sgm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["markdown","md","mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-pascal":["p","pas"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}

},{}],97:[function(require,module,exports){
//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

},{}],98:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

},{}],99:[function(require,module,exports){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return numeral;
        });
    }
}).call(this);

},{}],100:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":101,"./lib/inflate":102,"./lib/utils/common":103,"./lib/zlib/constants":106}],101:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":103,"./utils/strings":104,"./zlib/deflate":108,"./zlib/messages":113,"./zlib/zstream":115}],102:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":103,"./utils/strings":104,"./zlib/constants":106,"./zlib/gzheader":109,"./zlib/inflate":111,"./zlib/messages":113,"./zlib/zstream":115}],103:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],104:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":103}],105:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],106:[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],107:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],108:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":103,"./adler32":105,"./crc32":107,"./messages":113,"./trees":114}],109:[function(require,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],110:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],111:[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":103,"./adler32":105,"./crc32":107,"./inffast":110,"./inftrees":112}],112:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":103}],113:[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],114:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":103}],115:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],116:[function(require,module,exports){
var CommitMode = {
    SINGLE: "single",
    DEFERRED: "multi"
};

var Direction = {
    UP: "Up",
    RIGHT: "Right",
    DOWN: "Down",
    LEFT: "Left"
};

var TextInput = {
    PLACEHOLDER: "\x01\x01"
};

exports.CommitMode = CommitMode;
exports.Direction = Direction;
exports.TextInput = TextInput;
},{}],117:[function(require,module,exports){
/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2010, Ajax.org B.V.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

"use strict";

exports.inherits = (function() {
    var tempCtor = function() {};
    return function(ctor, superCtor) {
        tempCtor.prototype = superCtor.prototype;
        ctor.super_ = superCtor.prototype;
        ctor.prototype = new tempCtor();
        ctor.prototype.constructor = ctor;
    };
}());

exports.mixin = function(obj, mixin) {
    for (var key in mixin) {
        obj[key] = mixin[key];
    }
    return obj;
};

exports.implement = function(proto, mixin) {
    exports.mixin(proto, mixin);
};

},{}],118:[function(require,module,exports){
module.exports = function () {
  var time = process.hrtime();
  return time[0] * 1e3 + time[1] / 1e6;
};

},{}],119:[function(require,module,exports){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

},{}],120:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

},{}],121:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats":120,"./parse":122,"./stringify":123}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseValues(str, options) {
    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos));
            val = options.decoder(part.slice(pos + 1));
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function parseObject(chain, val, options) {
    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj;
    if (root === '[]') {
        obj = [];
        obj = obj.concat(parseObject(chain, val, options));
    } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        if (
            !isNaN(index) &&
            root !== cleanRoot &&
            String(index) === cleanRoot &&
            index >= 0 &&
            (options.parseArrays && index <= options.arrayLimit)
        ) {
            obj = [];
            obj[index] = parseObject(chain, val, options);
        } else {
            obj[cleanRoot] = parseObject(chain, val, options);
        }
    }

    return obj;
};

var parseKeys = function parseKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, segment[1])) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].replace(/\[|\]/g, ''))) {
            if (!options.allowPrototypes) {
                continue;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts || {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

},{"./utils":124}],123:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var formats = require('./formats');

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder ? encoder(prefix) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            return [formatter(encoder(prefix)) + '=' + formatter(encoder(obj))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter
            ));
        } else {
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter
            ));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    if (typeof options.format === 'undefined') {
        options.format = formats.default;
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter
        ));
    }

    return keys.join(delimiter);
};

},{"./formats":120,"./utils":124}],124:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

exports.arrayToObject = function (source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function (target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            target[source] = true;
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (Object.prototype.hasOwnProperty.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function (str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D || // -
            c === 0x2E || // .
            c === 0x5F || // _
            c === 0x7E || // ~
            (c >= 0x30 && c <= 0x39) || // 0-9
            (c >= 0x41 && c <= 0x5A) || // a-z
            (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function (obj, references) {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    var refs = references || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0; i < obj.length; ++i) {
            if (obj[i] && typeof obj[i] === 'object') {
                compacted.push(exports.compact(obj[i], refs));
            } else if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    keys.forEach(function (key) {
        obj[key] = exports.compact(obj[key], refs);
    });

    return obj;
};

exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function (obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

},{}],125:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":127,"./_stream_writable":129,"core-util-is":6,"inherits":45,"process-nextick-args":119}],126:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":128,"core-util-is":6,"inherits":45}],127:[function(require,module,exports){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"./_stream_duplex":125,"./internal/streams/BufferList":130,"buffer":undefined,"buffer-shims":3,"core-util-is":6,"events":undefined,"inherits":45,"isarray":46,"process-nextick-args":119,"string_decoder/":132,"util":undefined}],128:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":125,"core-util-is":6,"inherits":45}],129:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
},{"./_stream_duplex":125,"buffer":undefined,"buffer-shims":3,"core-util-is":6,"events":undefined,"inherits":45,"process-nextick-args":119,"util-deprecate":151}],130:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};
},{"buffer":undefined,"buffer-shims":3}],131:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":126}],132:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":undefined}],133:[function(require,module,exports){
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],134:[function(require,module,exports){

/**
 * Module dependencies.
 */

var CookieJar = require('cookiejar').CookieJar;
var CookieAccess = require('cookiejar').CookieAccessInfo;
var parse = require('url').parse;
var request = require('../..');
var methods = require('methods');

/**
 * Expose `Agent`.
 */

module.exports = Agent;

/**
 * Initialize a new `Agent`.
 *
 * @api public
 */

function Agent(options) {
  if (!(this instanceof Agent)) return new Agent(options);
  if (options) {
    this._ca = options.ca;
    this._key = options.key;
    this._cert = options.cert;
  }
  this.jar = new CookieJar;
}

/**
 * Save the cookies in the given `res` to
 * the agent's cookie jar for persistence.
 *
 * @param {Response} res
 * @api private
 */

Agent.prototype._saveCookies = function(res){
  var cookies = res.headers['set-cookie'];
  if (cookies) this.jar.setCookies(cookies);
};

/**
 * Attach cookies when available to the given `req`.
 *
 * @param {Request} req
 * @api private
 */

Agent.prototype._attachCookies = function(req){
  var url = parse(req.url);
  var access = CookieAccess(url.hostname, url.pathname, 'https:' == url.protocol);
  var cookies = this.jar.getCookies(access).toValueString();
  req.cookies = cookies;
};

// generate HTTP verb methods
if (methods.indexOf('del') == -1) {
  // create a copy so we don't cause conflicts with
  // other packages using the methods package and
  // npm 3.x
  methods = methods.slice(0);
  methods.push('del');
}
methods.forEach(function(method){
  var name = method;
  method = 'del' == method ? 'delete' : method;

  method = method.toUpperCase();
  Agent.prototype[name] = function(url, fn){
    var req = request(method, url);
    req.ca(this._ca);
    req.key(this._key);
    req.cert(this._cert);

    req.on('response', this._saveCookies.bind(this));
    req.on('redirect', this._saveCookies.bind(this));
    req.on('redirect', this._attachCookies.bind(this, req));
    this._attachCookies(req);

    fn && req.end(fn);
    return req;
  };
});

},{"../..":135,"cookiejar":5,"methods":91,"url":undefined}],135:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('superagent');
var formidable = require('formidable');
var FormData = require('form-data');
var Response = require('./response');
var parse = require('url').parse;
var format = require('url').format;
var resolve = require('url').resolve;
var methods = require('methods');
var Stream = require('stream');
var utils = require('./utils');
var extend = require('extend');
var Part = require('./part');
var mime = require('mime');
var https = require('https');
var http = require('http');
var fs = require('fs');
var qs = require('qs');
var zlib = require('zlib');
var util = require('util');
var pkg = require('../../package.json');
var requestBase = require('../request-base');
var isObject = require('../is-object');

/**
 * Expose the request function.
 */

var request = exports = module.exports = require('../request').bind(null, Request);

/**
 * Expose the agent function
 */

exports.agent = require('./agent');

/**
 * Expose `Part`.
 */

exports.Part = Part;

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `Response`.
 */

exports.Response = Response;

/**
 * Define "form" mime type.
 */

mime.define({
  'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']
});

/**
 * Protocol map.
 */

exports.protocols = {
  'http:': http,
  'https:': https
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

exports.serialize = {
  'application/x-www-form-urlencoded': qs.stringify,
  'application/json': JSON.stringify
};

/**
 * Default parsers.
 *
 *     superagent.parse['application/xml'] = function(res, fn){
 *       fn(null, res);
 *     };
 *
 */

exports.parse = require('./parsers');

/**
 * Initialize internal header tracking properties on a request instance.
 *
 * @param {Object} req the instance
 * @api private
 */
function _initHeaders(req) {
  var ua = 'node-superagent/' + pkg.version;
  req._header = { // coerces header names to lowercase
    'user-agent': ua
  };
  req.header = { // preserves header name case
    'User-Agent': ua
  };
}

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String|Object} url
 * @api public
 */

function Request(method, url) {
  Stream.call(this);
  var self = this;
  if ('string' != typeof url) url = format(url);
  this._agent = false;
  this._formData = null;
  this.method = method;
  this.url = url;
  _initHeaders(this);
  this.writable = true;
  this._redirects = 0;
  this.redirects(method === 'HEAD' ? 0 : 5);
  this.cookies = '';
  this.qs = {};
  this.qsRaw = [];
  this._redirectList = [];
  this._streamRequest = false;
  this.on('end', this.clearTimeout.bind(this));
}

/**
 * Inherit from `Stream` (which inherits from `EventEmitter`).
 * Mixin `requestBase`.
 */
util.inherits(Request, Stream);
for (var key in requestBase) {
  Request.prototype[key] = requestBase[key];
}

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `filename`.
 *
 * ``` js
 * request.post('http://localhost/upload')
 *   .attach(new Buffer('<b>Hello world</b>'), 'hello.html')
 *   .end(callback);
 * ```
 *
 * A filename may also be used:
 *
 * ``` js
 * request.post('http://localhost/upload')
 *   .attach('files', 'image.jpg')
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {String|fs.ReadStream|Buffer} file
 * @param {String} filename
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, filename){
  if ('string' == typeof file) {
    if (!filename) filename = file;
    debug('creating `fs.ReadStream` instance for file: %s', file);
    file = fs.createReadStream(file);
  } else if (!filename && file.path) {
    filename = file.path;
  }
  this._getFormData().append(field, file, { filename: filename });
  return this;
};

Request.prototype._getFormData = function() {
  if (!this._formData) {
    this._formData = new FormData();
    this._formData.on('error', function(err) {
      this.emit('error', err);
      this.abort();
    }.bind(this));
  }
  return this._formData;
};

/**
 * Return a new `Part` for this request.
 *
 * @return {Part}
 * @api public
 * @deprecated pass a readable stream in to `Request#attach()` instead
 */

Request.prototype.part = util.deprecate(function(){
  return new Part(this);
}, '`Request#part()` is deprecated. ' +
   'Pass a readable stream in to `Request#attach()` instead.');

/**
 * Gets/sets the `Agent` to use for this HTTP request. The default (if this
 * function is not called) is to opt out of connection pooling (`agent: false`).
 *
 * @param {http.Agent} agent
 * @return {http.Agent}
 * @api public
 */

Request.prototype.agent = function(agent){
  if (!arguments.length) return this._agent;
  this._agent = agent;
  return this;
};

/**
 * Set _Content-Type_ response header passed through `mime.lookup()`.
 *
 * Examples:
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('json')
 *        .send(jsonstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/json')
 *        .send(jsonstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  return this.set('Content-Type', ~type.indexOf('/')
    ? type
    : mime.lookup(type));
};

/**
 * Set _Accept_ response header passed through `mime.lookup()`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  return this.set('Accept', ~type.indexOf('/')
    ? type
    : mime.lookup(type));
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' == typeof val) {
    this.qsRaw.push(val);
    return this;
  }

  extend(this.qs, val);
  return this;
};

/**
 * Write raw `data` / `encoding` to the socket.
 *
 * @param {Buffer|String} data
 * @param {String} encoding
 * @return {Boolean}
 * @api public
 */

Request.prototype.write = function(data, encoding){
  var req = this.request();
  if (!this._streamRequest) {
    this._streamRequest = true;
    try {
      // ensure querystring is appended before headers are sent
      this._appendQueryString(req);
    } catch (e) {
      return this.emit('error', e);
    }
  }
  return req.write(data, encoding);
};

/**
 * Pipe the request body to `stream`.
 *
 * @param {Stream} stream
 * @param {Object} options
 * @return {Stream}
 * @api public
 */

Request.prototype.pipe = function(stream, options){
  this.piped = true; // HACK...
  this.buffer(false);
  var self = this;
  this.end().req.on('response', function(res){
    // redirect
    var redirect = isRedirect(res.statusCode);
    if (redirect && self._redirects++ != self._maxRedirects) {
      return self._redirect(res).pipe(stream, options);
    }

    self.res = res;
    self._emitResponse();
    if (self._aborted) return;

    if (self._shouldUnzip(res)) {
      res.pipe(zlib.createUnzip()).pipe(stream, options);
    } else {
      res.pipe(stream, options);
    }
    res.on('end', function(){
      self.emit('end');
    });
  });
  return stream;
};

/**
 * Enable / disable buffering.
 *
 * @return {Boolean} [val]
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.buffer = function(val){
  this._buffer = (false !== val);
  return this;
};

/**
 * Redirect to `url
 *
 * @param {IncomingMessage} res
 * @return {Request} for chaining
 * @api private
 */

Request.prototype._redirect = function(res){
  var url = res.headers.location;
  if (!url) {
    return this.callback(new Error('No location header for redirect'), res);
  }

  debug('redirect %s -> %s', this.url, url);

  // location
  url = resolve(this.url, url);

  // ensure the response is being consumed
  // this is required for Node v0.10+
  res.resume();

  var headers = this.req._headers;

  var shouldStripCookie = parse(url).host !== parse(this.url).host;

  // implementation of 302 following defacto standard
  if (res.statusCode == 301 || res.statusCode == 302){
    // strip Content-* related fields
    // in case of POST etc
    headers = utils.cleanHeader(this.req._headers, shouldStripCookie);

    // force GET
    this.method = 'HEAD' == this.method
      ? 'HEAD'
      : 'GET';

    // clear data
    this._data = null;
  }
  // 303 is always GET
  if (res.statusCode == 303) {
    // strip Content-* related fields
    // in case of POST etc
    headers = utils.cleanHeader(this.req._headers, shouldStripCookie);

    // force method
    this.method = 'GET';

    // clear data
    this._data = null;
  }
  // 307 preserves method
  // 308 preserves method
  delete headers.host;

  delete this.req;
  delete this._formData;

  // remove all add header except User-Agent
  _initHeaders(this)

  // redirect
  this.url = url;
  this.qs = {};
  this.qsRaw = [];
  this.set(headers);
  this.emit('redirect', res);
  this._redirectList.push(this.url);
  this.end(this._callback);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * Examples:
 *
 *   .auth('tobi', 'learnboost')
 *   .auth('tobi:learnboost')
 *   .auth('tobi')
 *
 * @param {String} user
 * @param {String} pass
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass){
  if (1 === arguments.length) pass = '';
  if (!~user.indexOf(':')) user = user + ':';
  var str = new Buffer(user + pass).toString('base64');
  return this.set('Authorization', 'Basic ' + str);
};

/**
 * Set the certificate authority option for https request.
 *
 * @param {Buffer | Array} cert
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.ca = function(cert){
  this._ca = cert;
  return this;
};

/**
 * Set the client certificate key option for https request.
 *
 * @param {Buffer | String} cert
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.key = function(cert){
  this._key = cert;
  return this;
};

/**
 * Set the client certificate option for https request.
 *
 * @param {Buffer | String} cert
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.cert = function(cert){
  this._cert = cert;
  return this;
};

/**
 * Return an http[s] request.
 *
 * @return {OutgoingMessage}
 * @api private
 */

Request.prototype.request = function(){
  if (this.req) return this.req;

  var self = this;
  var options = {};
  var data = this._data;
  var url = this.url;

  // default to http://
  if (0 != url.indexOf('http')) url = 'http://' + url;
  url = parse(url);

  // options
  options.method = this.method;
  options.port = url.port;
  options.path = url.pathname;
  options.host = url.hostname;
  options.ca = this._ca;
  options.key = this._key;
  options.cert = this._cert;
  options.agent = this._agent;

  // initiate request
  var mod = exports.protocols[url.protocol];

  // request
  var req = this.req = mod.request(options);
  if ('HEAD' != options.method) req.setHeader('Accept-Encoding', 'gzip, deflate');
  this.protocol = url.protocol;
  this.host = url.host;

  // expose events
  req.on('drain', function(){ self.emit('drain'); });

  req.on('error', function(err){
    // flag abortion here for out timeouts
    // because node will emit a faux-error "socket hang up"
    // when request is aborted before a connection is made
    if (self._aborted) return;
    // if we've recieved a response then we don't want to let
    // an error in the request blow up the response
    if (self.response) return;
    self.callback(err);
  });

  // auth
  if (url.auth) {
    var auth = url.auth.split(':');
    this.auth(auth[0], auth[1]);
  }

  // query
  if (url.search)
    this.query(url.search.substr(1));

  // add cookies
  if (this.cookies) req.setHeader('Cookie', this.cookies);

  for (var key in this.header) {
    req.setHeader(key, this.header[key]);
  }

  return req;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.
  var fn = this._callback || noop;
  this.clearTimeout();
  if (this.called) return console.warn('double callback!');
  this.called = true;

  if (err) {
    err.response = res;
  }

  // only emit error event if there is a listener
  // otherwise we assume the callback to `.end()` will get the error
  if (err && this.listeners('error').length > 0) this.emit('error', err);

  if (err) {
    return fn(err, res);
  }

  if (res && res.status >= 200 && res.status < 300) {
    return fn(err, res);
  }

  var msg = 'Unsuccessful HTTP response';
  if (res) {
    msg = http.STATUS_CODES[res.status] || msg;
  }
  var new_err = new Error(msg);
  new_err.original = err;
  new_err.response = res;
  new_err.status = (res) ? res.status : undefined;

  fn(err || new_err, res);
};

/**
 * Compose querystring to append to req.path
 *
 * @return {String} querystring
 * @api private
 */

Request.prototype._appendQueryString = function(req){
  var querystring = qs.stringify(this.qs, { indices: false, strictNullHandling: true });
  querystring += ((querystring.length && this.qsRaw.length) ? '&' : '') + this.qsRaw.join('&');
  req.path += querystring.length
    ? (~req.path.indexOf('?') ? '&' : '?') + querystring
    : '';
};

/**
 * Initiate request, invoking callback `fn(err, res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype._emitResponse = function(body, files){
    var response = new Response(this);
    this.response = response;
    response.redirects = this._redirectList;
    if (undefined !== body) {
      response.body = body;
    }
    response.files = files;
    this.emit('response', response);
    return response;
};

Request.prototype.end = function(fn){
  var self = this;
  var data = this._data;
  var req = this.request();
  var buffer = this._buffer;
  var method = this.method;
  var timeout = this._timeout;
  debug('%s %s', this.method, this.url);

  // store callback
  this._callback = fn || noop;

  // querystring
  try {
    this._appendQueryString(req);
  } catch (e) {
    return this.callback(e);
  }

  // timeout
  if (timeout && !this._timer) {
    debug('timeout %sms %s %s', timeout, this.method, this.url);
    this._timer = setTimeout(function(){
      var err = new Error('timeout of ' + timeout + 'ms exceeded');
      err.timeout = timeout;
      err.code = 'ECONNABORTED';
      self.timedout = true;
      self.abort();
      self.callback(err);
    }, timeout);
  }

  // body
  if ('HEAD' != method && !req._headerSent) {
    // serialize stuff
    if ('string' != typeof data) {
      var contentType = req.getHeader('Content-Type')
      // Parse out just the content type from the header (ignore the charset)
      if (contentType) contentType = contentType.split(';')[0]
      var serialize = exports.serialize[contentType];
      if (!serialize && isJSON(contentType)) serialize = exports.serialize['application/json'];
      if (serialize) data = serialize(data);
    }

    // content-length
    if (data && !req.getHeader('Content-Length')) {
      req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));
    }
  }

  // response
  req.on('response', function(res){
    debug('%s %s -> %s', self.method, self.url, res.statusCode);

    if (self.piped) {
      return;
    }

    var max = self._maxRedirects;
    var mime = utils.type(res.headers['content-type'] || '') || 'text/plain';
    var type = mime.split('/')[0];
    var multipart = 'multipart' == type;
    var redirect = isRedirect(res.statusCode);
    var parser = self._parser;

    self.res = res;

    // redirect
    if (redirect && self._redirects++ != max) {
      return self._redirect(res);
    }

    if ('HEAD' == self.method) {
      self.emit('end');
      self.callback(null, self._emitResponse());
      return;
    }

    // zlib support
    if (self._shouldUnzip(res)) {
      utils.unzip(req, res);
    }

    if (!parser) {
      if (multipart) {
        var form = new formidable.IncomingForm();
        parser = form.parse.bind(form);
        buffer = true;
      } else if (isImage(mime)) {
        parser = exports.parse.image;
        buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent
      } else if ('text' == type) {
        parser = exports.parse.text;
        buffer = (buffer !== false);
      } else if (exports.parse[mime]) {
        parser = exports.parse[mime];

        // everyone wants their own white-labeled json
      } else if (isJSON(mime)) {
        parser = exports.parse['application/json'];
        buffer = (buffer !== false);
      } else if (buffer) {
        parser = exports.parse.text;
      }
    }

    // by default only buffer text/*, json and messed up thing from hell
    if (undefined === buffer && isText(mime) || isJSON(mime)) buffer = true;

    var parserHandlesEnd = false;
    if (parser) {
      try {
        // Unbuffered parsers are supposed to emit response early,
        // which is weird BTW, because response.body won't be there.
        parserHandlesEnd = buffer;

        parser(res, function(err, obj, files) {
          if (err && !self._aborted) {
            return self.callback(err);
          }

          res.body = obj; // Deprecated. For backwards compat only. It's not the response object user sees.

          if (parserHandlesEnd) {
            self.emit('end');
            self.callback(null, self._emitResponse(obj, files));
          }
        });
      } catch (err) {
        self.callback(err);
        return;
      }
    }

    self.res = res;

    // unbuffered
    if (!buffer) {
      debug('unbuffered %s %s', self.method, self.url);
      self.callback(null, self._emitResponse());
      if (multipart) return // allow multipart to handle end event
      res.on('end', function(){
        debug('end %s %s', self.method, self.url);
        self.emit('end');
      })
      return;
    }

    // terminating events
    res.on('error', function(err){
      self.callback(err, null);
    });
    if (!parserHandlesEnd) res.on('end', function(){
      debug('end %s %s', self.method, self.url);
      // TODO: unless buffering emit earlier to stream
      self.emit('end');
      self.callback(null, self._emitResponse());
    });
  });

  this.emit('request', this);

  // if a FormData instance got created, then we send that as the request body
  var formData = this._formData;
  if (formData) {

    // set headers
    var headers = formData.getHeaders();
    for (var i in headers) {
      debug('setting FormData header: "%s: %s"', i, headers[i]);
      req.setHeader(i, headers[i]);
    }

    // attempt to get "Content-Length" header
    formData.getLength(function(err, length) {
      // TODO: Add chunked encoding when no length (if err)

      debug('got FormData Content-Length: %s', length);
      if ('number' == typeof length) {
        req.setHeader('Content-Length', length);
      }

      var getProgressMonitor = function () {
        var lengthComputable = true;
        var total = req.getHeader('Content-Length');
        var loaded = 0;

        var progress = new Stream.Transform();
        progress._transform = function (chunk, encoding, cb) {
          loaded += chunk.length;
          self.emit('progress', {
            direction: 'upload',
            lengthComputable: lengthComputable,
            loaded: loaded,
            total: total
          });
          cb(null, chunk);
        };
        return progress;
      };
      formData.pipe(getProgressMonitor()).pipe(req);
    });
  } else {
    req.end(data);
  }

  return this;
};

/**
 * Check whether response has a non-0-sized gzip-encoded body
 */
Request.prototype._shouldUnzip = function(res){
  if (res.statusCode === 204 || res.statusCode === 304) {
    // These aren't supposed to have any body
    return false;
  }

  // header content is a string, and distinction between 0 and no information is crucial
  if ('0' === res.headers['content-length']) {
    // We know that the body is empty (unfortunately, this check does not cover chunked encoding)
    return false;
  }

  // console.log(res);
  return /^\s*(?:deflate|gzip)\s*$/.test(res.headers['content-encoding']);
};

/**
 * Expose `Request`.
 */

exports.Request = Request;

// generate HTTP verb methods
if (methods.indexOf('del') == -1) {
  // create a copy so we don't cause conflicts with
  // other packages using the methods package and
  // npm 3.x
  methods = methods.slice(0);
  methods.push('del');
}
methods.forEach(function(method){
  var name = method;
  method = 'del' == method ? 'delete' : method;

  method = method.toUpperCase();
  request[name] = function(url, data, fn){
    var req = request(method, url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    fn && req.end(fn);
    return req;
  };
});

/**
 * Check if `mime` is text and should be buffered.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api public
 */

function isText(mime) {
  var parts = mime.split('/');
  var type = parts[0];
  var subtype = parts[1];

  return 'text' == type
    || 'x-www-form-urlencoded' == subtype;
}

/**
 * Check if `mime` is image
 *
 * @param {String} mime
 * @return {Boolean}
 * @api public
 */

function isImage(mime) {
  var parts = mime.split('/');
  var type = parts[0];
  var subtype = parts[1];

  return 'image' == type;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Check if we should follow the redirect `code`.
 *
 * @param {Number} code
 * @return {Boolean}
 * @api private
 */

function isRedirect(code) {
  return ~[301, 302, 303, 305, 307, 308].indexOf(code);
}

},{"../../package.json":146,"../is-object":133,"../request":145,"../request-base":144,"./agent":134,"./parsers":137,"./part":141,"./response":142,"./utils":143,"debug":9,"extend":31,"form-data":32,"formidable":37,"fs":undefined,"http":undefined,"https":undefined,"methods":91,"mime":95,"qs":121,"stream":undefined,"url":undefined,"util":undefined,"zlib":undefined}],136:[function(require,module,exports){
module.exports = function(res, fn){
  var data = []; // Binary data needs binary storage

  res.on('data', function(chunk){
      data.push(chunk);
  });
  res.on('end', function () {
      fn(null, Buffer.concat(data));
  });
};
},{}],137:[function(require,module,exports){

exports['application/x-www-form-urlencoded'] = require('./urlencoded');
exports['application/json'] = require('./json');
exports.text = require('./text');
exports.image = require('./image');

},{"./image":136,"./json":138,"./text":139,"./urlencoded":140}],138:[function(require,module,exports){

module.exports = function parseJSON(res, fn){
  res.text = '';
  res.setEncoding('utf8');
  res.on('data', function(chunk){ res.text += chunk;});
  res.on('end', function(){
    try {
      var body = res.text && JSON.parse(res.text);
    } catch (e) {
      var err = e;
      // issue #675: return the raw response if the response parsing fails
      err.rawResponse = res.text || null;
      // issue #876: return the http status code if the response parsing fails
      err.statusCode = res.statusCode;
    } finally {
      fn(err, body);
    }
  });
};

},{}],139:[function(require,module,exports){

module.exports = function(res, fn){
  res.text = '';
  res.setEncoding('utf8');
  res.on('data', function(chunk){ res.text += chunk; });
  res.on('end', fn);
};
},{}],140:[function(require,module,exports){

/**
 * Module dependencies.
 */

var qs = require('qs');

module.exports = function(res, fn){
  res.text = '';
  res.setEncoding('ascii');
  res.on('data', function(chunk){ res.text += chunk; });
  res.on('end', function(){
    try {
      fn(null, qs.parse(res.text));
    } catch (err) {
      fn(err);
    }
  });
};
},{"qs":121}],141:[function(require,module,exports){

/**
 * Module dependencies.
 */

var util = require('util');
var mime = require('mime');
var FormData = require('form-data');
var PassThrough = require('readable-stream/passthrough');

/**
 * Initialize a new `Part` for the given `req`.
 *
 * @param {Request} req
 * @api public
 * @deprecated pass a readable stream in to `Request#attach()` instead
 */

var Part = function (req) {
  PassThrough.call(this);
  this._req = req;
  this._attached = false;
  this._name = null;
  this._type = null;
  this._header = null;
  this._filename = null;

  this.once('pipe', this._attach.bind(this));
};
Part = util.deprecate(Part, 'The `Part()` constructor is deprecated. ' +
   'Pass a readable stream in to `Request#attach()` instead.');

/**
 * Inherit from `PassThrough`.
 */

util.inherits(Part, PassThrough);

/**
 * Expose `Part`.
 */

module.exports = Part;

/**
 * Set header `field` to `val`.
 *
 * @param {String} field
 * @param {String} val
 * @return {Part} for chaining
 * @api public
 */

Part.prototype.set = function(field, val){
  //if (!this._header) this._header = {};
  //this._header[field] = val;
  //return this;
  throw new TypeError('setting custom form-data part headers is unsupported');
};

/**
 * Set _Content-Type_ response header passed through `mime.lookup()`.
 *
 * Examples:
 *
 *     res.type('html');
 *     res.type('.html');
 *
 * @param {String} type
 * @return {Part} for chaining
 * @api public
 */

Part.prototype.type = function(type){
  var lookup = mime.lookup(type);
  this._type = lookup;
  //this.set('Content-Type', lookup);
  return this;
};

/**
 * Set the "name" portion for the _Content-Disposition_ header field.
 *
 * @param {String} name
 * @return {Part} for chaining
 * @api public
 */

Part.prototype.name = function(name){
  this._name = name;
  return this;
};

/**
 * Set _Content-Disposition_ header field to _attachment_ with `filename`
 * and field `name`.
 *
 * @param {String} name
 * @param {String} filename
 * @return {Part} for chaining
 * @api public
 */

Part.prototype.attachment = function(name, filename){
  this.name(name);
  if (filename) {
    this.type(filename);
    this._filename = filename;
  }
  return this;
};

/**
 * Calls `FormData#append()` on the Request instance's FormData object.
 *
 * Gets called implicitly upon the first `write()` call, or the "pipe" event.
 *
 * @api private
 */

Part.prototype._attach = function(){
  if (this._attached) return;
  this._attached = true;

  if (!this._name) throw new Error('must call `Part#name()` first!');

  // add `this` Stream's readable side as a stream for this Part
  this._req._getFormData().append(this._name, this, {
    contentType: this._type,
    filename: this._filename
  });

  // restore PassThrough's default `write()` function now that we're setup
  this.write = PassThrough.prototype.write;
};

/**
 * Write `data` with `encoding`.
 *
 * @param {Buffer|String} data
 * @param {String} encoding
 * @return {Boolean}
 * @api public
 */

Part.prototype.write = function(){
  this._attach();
  return this.write.apply(this, arguments);
};

},{"form-data":32,"mime":95,"readable-stream/passthrough":131,"util":undefined}],142:[function(require,module,exports){

/**
 * Module dependencies.
 */

var util = require('util');
var utils = require('./utils');
var Stream = require('stream');

/**
 * Expose `Response`.
 */

module.exports = Response;

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * @param {Request} req
 * @param {Object} options
 * @constructor
 * @extends {Stream}
 * @implements {ReadableStream}
 * @api private
 */

function Response(req, options) {
  Stream.call(this);
  options = options || {};
  var res = this.res = req.res;
  this.request = req;
  this.req = req.req;
  this.links = {};
  this.text = res.text;
  this.body = res.body !== undefined ? res.body : {};
  this.files = res.files || {};
  this.buffered = 'string' == typeof this.text;
  this.header = this.headers = res.headers;
  this._setStatusProperties(res.statusCode);
  this._setHeaderProperties(this.header);
  this.setEncoding = res.setEncoding.bind(res);
  res.on('data', this.emit.bind(this, 'data'));
  res.on('end', this.emit.bind(this, 'end'));
  res.on('close', this.emit.bind(this, 'close'));
  res.on('error', this.emit.bind(this, 'error'));
}

/**
 * Inherit from `Stream`.
 */

util.inherits(Response, Stream);

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Implements methods of a `ReadableStream`
 */

Response.prototype.destroy = function(err){
  this.res.destroy(err);
};

/**
 * Pause.
 */

Response.prototype.pause = function(){
  this.res.pause();
};

/**
 * Resume.
 */

Response.prototype.resume = function(){
  this.res.resume();
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var path = req.path;

  var msg = 'cannot ' + method + ' ' + path + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.text = this.text;
  err.method = method;
  err.path = path;

  return err;
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype._setHeaderProperties = function(header){
  // TODO: moar!
  // TODO: make this a util

  // content-type
  var ct = this.header['content-type'] || '';

  // params
  var params = utils.params(ct);
  for (var key in params) this[key] = params[key];

  this.type = utils.type(ct);

  // links
  try {
    if (header.link) this.links = utils.parseLinks(header.link);
  } catch (err) {
    // ignore
  }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype._setStatusProperties = function(status){
  var type = status / 100 | 0;

  // status / class
  this.status = this.statusCode = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.redirect = 3 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.forbidden = 403 == status;
  this.notFound = 404 == status;
};

Response.prototype.setStatusProperties = function(status){
  console.warn("In superagent 2.x setStatusProperties is a private method");
  return this._setStatusProperties(status);
};

/**
 * To json.
 *
 * @return {Object}
 * @api public
 */

Response.prototype.toJSON = function(){
  return {
    req: this.request.toJSON(),
    header: this.header,
    status: this.status,
    text: this.text
  };
};

},{"./utils":143,"stream":undefined,"util":undefined}],143:[function(require,module,exports){

/**
 * Module dependencies.
 */

var StringDecoder = require('string_decoder').StringDecoder;
var Stream = require('stream');
var zlib;

/**
 * Require zlib module for Node 0.6+
 */

try {
  zlib = require('zlib');
} catch (e) { }

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Buffers response data events and re-emits when they're unzipped.
 *
 * @param {Request} req
 * @param {Response} res
 * @api private
 */

exports.unzip = function(req, res){
  if (!zlib) return;

  var unzip = zlib.createUnzip();
  var stream = new Stream;
  var decoder;

  // make node responseOnEnd() happy
  stream.req = req;

  unzip.on('error', function(err){
    if (err && err.code === 'Z_BUF_ERROR') { // unexpected end of file is ignored by browsers and curl
      stream.emit('end');
      return;
    }
    stream.emit('error', err);
  });

  // pipe to unzip
  res.pipe(unzip);

  // override `setEncoding` to capture encoding
  res.setEncoding = function(type){
    decoder = new StringDecoder(type);
  };

  // decode upon decompressing with captured encoding
  unzip.on('data', function(buf){
    if (decoder) {
      var str = decoder.write(buf);
      if (str.length) stream.emit('data', str);
    } else {
      stream.emit('data', buf);
    }
  });

  unzip.on('end', function(){
    stream.emit('end');
  });

  // override `on` to capture data listeners
  var _on = res.on;
  res.on = function(type, fn){
    if ('data' == type || 'end' == type) {
      stream.on(type, fn);
    } else if ('error' == type) {
      stream.on(type, fn);
      _on.call(res, type, fn);
    } else {
      _on.call(res, type, fn);
    }
    return this;
  };
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};

},{"stream":undefined,"string_decoder":undefined,"zlib":undefined}],144:[function(require,module,exports){
/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = require('./is-object');

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

exports.clearTimeout = function _clearTimeout(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

exports.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

exports.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

exports.timeout = function timeout(ms){
  this._timeout = ms;
  return this;
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} reject
 * @return {Request}
 */

exports.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

exports.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

exports.use = function use(fn) {
  fn(this);
  return this;
}


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

exports.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

exports.getHeader = exports.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

exports.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
exports.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
exports.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
exports.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

exports.withCredentials = function(){
  // This is browser-only functionality. Node side is no-op.
  this._withCredentials = true;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

exports.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

exports.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

exports._isHost = function _isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

exports.send = function(data){
  var obj = isObject(data);
  var type = this._header['content-type'];

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj || this._isHost(data)) return this;

  // default to json
  if (!type) this.type('json');
  return this;
};

},{"./is-object":133}],145:[function(require,module,exports){
// The node and browser modules expose versions of this with the
// appropriate constructor function bound as first argument
/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(RequestConstructor, method, url) {
  // callback
  if ('function' == typeof url) {
    return new RequestConstructor('GET', method).end(url);
  }

  // url first
  if (2 == arguments.length) {
    return new RequestConstructor('GET', method);
  }

  return new RequestConstructor(method, url);
}

module.exports = request;

},{}],146:[function(require,module,exports){
module.exports={"name":"superagent","version":"2.3.0","description":"elegant & feature rich browser / node HTTP with a fluent API","scripts":{"prepublish":"make all","test":"make test"},"keywords":["http","ajax","request","agent"],"license":"MIT","author":"TJ Holowaychuk <tj@vision-media.ca>","contributors":["Kornel Lesiński <kornel@geekhood.net>","Peter Lyons <pete@peterlyons.com>","Hunter Loftis <hunter@hunterloftis.com>"],"repository":{"type":"git","url":"git://github.com/visionmedia/superagent.git"},"dependencies":{"qs":"^6.1.0","formidable":"^1.0.17","mime":"^1.3.4","component-emitter":"^1.2.0","methods":"^1.1.1","cookiejar":"^2.0.6","debug":"^2.2.0","extend":"^3.0.0","form-data":"1.0.0-rc4","readable-stream":"^2.0.5"},"devDependencies":{"Base64":"^0.3.0","basic-auth-connect":"^1.0.0","better-assert":"^1.0.1","body-parser":"^1.15.0","browserify":"^13.0.0","cookie-parser":"^1.4.1","express":"^4.13.4","express-session":"^1.13.0","marked":"^0.3.5","mocha":"^2.4.5","should":"^8.2.2","should-http":"^0.0.4","zuul":"^3.10.1"},"browser":{"./lib/node/index.js":"./lib/client.js","emitter":"component-emitter","./test/support/server.js":"./test/support/blank.js"},"component":{"scripts":{"superagent":"lib/client.js"}},"main":"./lib/node/index.js","engines":{"node":">= 0.10"}}
},{}],147:[function(require,module,exports){
/****
 * The MIT License
 *
 * Copyright (c) 2015 Marco Ziccardi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 ****/
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    define('timsort', ['exports'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.timsort = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  exports.__esModule = true;
  exports.sort = sort;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var DEFAULT_MIN_MERGE = 32;

  var DEFAULT_MIN_GALLOPING = 7;

  var DEFAULT_TMP_STORAGE_LENGTH = 256;

  function alphabeticalCompare(a, b) {
    if (a === b) {
      return 0;
    } else {
      var aStr = String(a);
      var bStr = String(b);

      if (aStr === bStr) {
        return 0;
      } else {
        return aStr < bStr ? -1 : 1;
      }
    }
  }

  function minRunLength(n) {
    var r = 0;

    while (n >= DEFAULT_MIN_MERGE) {
      r |= n & 1;
      n >>= 1;
    }

    return n + r;
  }

  function makeAscendingRun(array, lo, hi, compare) {
    var runHi = lo + 1;

    if (runHi === hi) {
      return 1;
    }

    if (compare(array[runHi++], array[lo]) < 0) {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
        runHi++;
      }

      reverseRun(array, lo, runHi);
    } else {
      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
        runHi++;
      }
    }

    return runHi - lo;
  }

  function reverseRun(array, lo, hi) {
    hi--;

    while (lo < hi) {
      var t = array[lo];
      array[lo++] = array[hi];
      array[hi--] = t;
    }
  }

  function binaryInsertionSort(array, lo, hi, start, compare) {
    if (start === lo) {
      start++;
    }

    for (; start < hi; start++) {
      var pivot = array[start];

      var left = lo;
      var right = start;

      while (left < right) {
        var mid = left + right >>> 1;

        if (compare(pivot, array[mid]) < 0) {
          right = mid;
        } else {
          left = mid + 1;
        }
      }

      var n = start - left;

      switch (n) {
        case 3:
          array[left + 3] = array[left + 2];

        case 2:
          array[left + 2] = array[left + 1];

        case 1:
          array[left + 1] = array[left];
          break;
        default:
          while (n > 0) {
            array[left + n] = array[left + n - 1];
            n--;
          }
      }

      array[left] = pivot;
    }
  }

  function gallopLeft(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) > 0) {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    } else {
      maxOffset = hint + 1;
      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }
      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    }

    lastOffset++;
    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) > 0) {
        lastOffset = m + 1;
      } else {
        offset = m;
      }
    }
    return offset;
  }

  function gallopRight(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;

    if (compare(value, array[start + hint]) < 0) {
      maxOffset = hint + 1;

      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      var tmp = lastOffset;
      lastOffset = hint - offset;
      offset = hint - tmp;
    } else {
      maxOffset = length - hint;

      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
        lastOffset = offset;
        offset = (offset << 1) + 1;

        if (offset <= 0) {
          offset = maxOffset;
        }
      }

      if (offset > maxOffset) {
        offset = maxOffset;
      }

      lastOffset += hint;
      offset += hint;
    }

    lastOffset++;

    while (lastOffset < offset) {
      var m = lastOffset + (offset - lastOffset >>> 1);

      if (compare(value, array[start + m]) < 0) {
        offset = m;
      } else {
        lastOffset = m + 1;
      }
    }

    return offset;
  }

  var TimSort = (function () {
    function TimSort(array, compare) {
      _classCallCheck(this, TimSort);

      this.array = null;
      this.compare = null;
      this.minGallop = DEFAULT_MIN_GALLOPING;
      this.length = 0;
      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
      this.stackLength = 0;
      this.runStart = null;
      this.runLength = null;
      this.stackSize = 0;

      this.array = array;
      this.compare = compare;

      this.length = array.length;

      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
        this.tmpStorageLength = this.length >>> 1;
      }

      this.tmp = new Array(this.tmpStorageLength);

      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;

      this.runStart = new Array(this.stackLength);
      this.runLength = new Array(this.stackLength);
    }

    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {
      this.runStart[this.stackSize] = runStart;
      this.runLength[this.stackSize] = runLength;
      this.stackSize += 1;
    };

    TimSort.prototype.mergeRuns = function mergeRuns() {
      while (this.stackSize > 1) {
        var n = this.stackSize - 2;

        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {

          if (this.runLength[n - 1] < this.runLength[n + 1]) {
            n--;
          }
        } else if (this.runLength[n] > this.runLength[n + 1]) {
          break;
        }
        this.mergeAt(n);
      }
    };

    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {
      while (this.stackSize > 1) {
        var n = this.stackSize - 2;

        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {
          n--;
        }

        this.mergeAt(n);
      }
    };

    TimSort.prototype.mergeAt = function mergeAt(i) {
      var compare = this.compare;
      var array = this.array;

      var start1 = this.runStart[i];
      var length1 = this.runLength[i];
      var start2 = this.runStart[i + 1];
      var length2 = this.runLength[i + 1];

      this.runLength[i] = length1 + length2;

      if (i === this.stackSize - 3) {
        this.runStart[i + 1] = this.runStart[i + 2];
        this.runLength[i + 1] = this.runLength[i + 2];
      }

      this.stackSize--;

      var k = gallopRight(array[start2], array, start1, length1, 0, compare);
      start1 += k;
      length1 -= k;

      if (length1 === 0) {
        return;
      }

      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

      if (length2 === 0) {
        return;
      }

      if (length1 <= length2) {
        this.mergeLow(start1, length1, start2, length2);
      } else {
        this.mergeHigh(start1, length1, start2, length2);
      }
    };

    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {

      var compare = this.compare;
      var array = this.array;
      var tmp = this.tmp;
      var i = 0;

      for (i = 0; i < length1; i++) {
        tmp[i] = array[start1 + i];
      }

      var cursor1 = 0;
      var cursor2 = start2;
      var dest = start1;

      array[dest++] = array[cursor2++];

      if (--length2 === 0) {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }
        return;
      }

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }
        array[dest + length2] = tmp[cursor1];
        return;
      }

      var minGallop = this.minGallop;

      while (true) {
        var count1 = 0;
        var count2 = 0;
        var exit = false;

        do {
          if (compare(array[cursor2], tmp[cursor1]) < 0) {
            array[dest++] = array[cursor2++];
            count2++;
            count1 = 0;

            if (--length2 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest++] = tmp[cursor1++];
            count1++;
            count2 = 0;
            if (--length1 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

          if (count1 !== 0) {
            for (i = 0; i < count1; i++) {
              array[dest + i] = tmp[cursor1 + i];
            }

            dest += count1;
            cursor1 += count1;
            length1 -= count1;
            if (length1 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest++] = array[cursor2++];

          if (--length2 === 0) {
            exit = true;
            break;
          }

          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

          if (count2 !== 0) {
            for (i = 0; i < count2; i++) {
              array[dest + i] = array[cursor2 + i];
            }

            dest += count2;
            cursor2 += count2;
            length2 -= count2;

            if (length2 === 0) {
              exit = true;
              break;
            }
          }
          array[dest++] = tmp[cursor1++];

          if (--length1 === 1) {
            exit = true;
            break;
          }

          minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (minGallop < 0) {
          minGallop = 0;
        }

        minGallop += 2;
      }

      this.minGallop = minGallop;

      if (minGallop < 1) {
        this.minGallop = 1;
      }

      if (length1 === 1) {
        for (i = 0; i < length2; i++) {
          array[dest + i] = array[cursor2 + i];
        }
        array[dest + length2] = tmp[cursor1];
      } else if (length1 === 0) {
        throw new Error('mergeLow preconditions were not respected');
      } else {
        for (i = 0; i < length1; i++) {
          array[dest + i] = tmp[cursor1 + i];
        }
      }
    };

    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {
      var compare = this.compare;
      var array = this.array;
      var tmp = this.tmp;
      var i = 0;

      for (i = 0; i < length2; i++) {
        tmp[i] = array[start2 + i];
      }

      var cursor1 = start1 + length1 - 1;
      var cursor2 = length2 - 1;
      var dest = start2 + length2 - 1;
      var customCursor = 0;
      var customDest = 0;

      array[dest--] = array[cursor1--];

      if (--length1 === 0) {
        customCursor = dest - (length2 - 1);

        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }

        return;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
        return;
      }

      var minGallop = this.minGallop;

      while (true) {
        var count1 = 0;
        var count2 = 0;
        var exit = false;

        do {
          if (compare(tmp[cursor2], array[cursor1]) < 0) {
            array[dest--] = array[cursor1--];
            count1++;
            count2 = 0;
            if (--length1 === 0) {
              exit = true;
              break;
            }
          } else {
            array[dest--] = tmp[cursor2--];
            count2++;
            count1 = 0;
            if (--length2 === 1) {
              exit = true;
              break;
            }
          }
        } while ((count1 | count2) < minGallop);

        if (exit) {
          break;
        }

        do {
          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

          if (count1 !== 0) {
            dest -= count1;
            cursor1 -= count1;
            length1 -= count1;
            customDest = dest + 1;
            customCursor = cursor1 + 1;

            for (i = count1 - 1; i >= 0; i--) {
              array[customDest + i] = array[customCursor + i];
            }

            if (length1 === 0) {
              exit = true;
              break;
            }
          }

          array[dest--] = tmp[cursor2--];

          if (--length2 === 1) {
            exit = true;
            break;
          }

          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

          if (count2 !== 0) {
            dest -= count2;
            cursor2 -= count2;
            length2 -= count2;
            customDest = dest + 1;
            customCursor = cursor2 + 1;

            for (i = 0; i < count2; i++) {
              array[customDest + i] = tmp[customCursor + i];
            }

            if (length2 <= 1) {
              exit = true;
              break;
            }
          }

          array[dest--] = array[cursor1--];

          if (--length1 === 0) {
            exit = true;
            break;
          }

          minGallop--;
        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

        if (exit) {
          break;
        }

        if (minGallop < 0) {
          minGallop = 0;
        }

        minGallop += 2;
      }

      this.minGallop = minGallop;

      if (minGallop < 1) {
        this.minGallop = 1;
      }

      if (length2 === 1) {
        dest -= length1;
        cursor1 -= length1;
        customDest = dest + 1;
        customCursor = cursor1 + 1;

        for (i = length1 - 1; i >= 0; i--) {
          array[customDest + i] = array[customCursor + i];
        }

        array[dest] = tmp[cursor2];
      } else if (length2 === 0) {
        throw new Error('mergeHigh preconditions were not respected');
      } else {
        customCursor = dest - (length2 - 1);
        for (i = 0; i < length2; i++) {
          array[customCursor + i] = tmp[i];
        }
      }
    };

    return TimSort;
  })();

  function sort(array, compare, lo, hi) {
    if (!Array.isArray(array)) {
      throw new TypeError('Can only sort arrays');
    }

    if (!compare) {
      compare = alphabeticalCompare;
    } else if (typeof compare !== 'function') {
      hi = lo;
      lo = compare;
      compare = alphabeticalCompare;
    }

    if (!lo) {
      lo = 0;
    }
    if (!hi) {
      hi = array.length;
    }

    var remaining = hi - lo;

    if (remaining < 2) {
      return;
    }

    var runLength = 0;

    if (remaining < DEFAULT_MIN_MERGE) {
      runLength = makeAscendingRun(array, lo, hi, compare);
      binaryInsertionSort(array, lo, hi, lo + runLength, compare);
      return;
    }

    var ts = new TimSort(array, compare);

    var minRun = minRunLength(remaining);

    do {
      runLength = makeAscendingRun(array, lo, hi, compare);
      if (runLength < minRun) {
        var force = remaining;
        if (force > minRun) {
          force = minRun;
        }

        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
        runLength = force;
      }

      ts.pushRun(lo, runLength);
      ts.mergeRuns();

      remaining -= runLength;
      lo += runLength;
    } while (remaining !== 0);

    ts.forceMergeRuns();
  }
});

},{}],148:[function(require,module,exports){
module.exports = require('./build/timsort.js');
},{"./build/timsort.js":147}],149:[function(require,module,exports){
// Load modules

var Hoek = require('hoek');


// Declare internals

var internals = {};


exports = module.exports = internals.Topo = function () {

    this._items = [];
    this.nodes = [];
};


internals.Topo.prototype.add = function (nodes, options) {

    var self = this;

    options = options || {};

    // Validate rules

    var before = [].concat(options.before || []);
    var after = [].concat(options.after || []);
    var group = options.group || '?';
    var sort = options.sort || 0;                   // Used for merging only

    Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
    Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
    Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
    Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');

    ([].concat(nodes)).forEach(function (node, i) {

        var item = {
            seq: self._items.length,
            sort: sort,
            before: before,
            after: after,
            group: group,
            node: node
        };

        self._items.push(item);
    });

    // Insert event

    var error = this._sort();
    Hoek.assert(!error, 'item', (group !== '?' ? 'added into group ' + group : ''), 'created a dependencies error');

    return this.nodes;
};


internals.Topo.prototype.merge = function (others) {

    others = [].concat(others);
    for (var o = 0, ol = others.length; o < ol; ++o) {
        var other = others[o];
        if (other) {
            for (var i = 0, il = other._items.length; i < il; ++i) {
                var item = Hoek.shallow(other._items[i]);
                this._items.push(item);
            }
        }
    }

    // Sort items

    this._items.sort(internals.mergeSort);
    for (i = 0, il = this._items.length; i < il; ++i) {
        this._items[i].seq = i;
    }

    var error = this._sort();
    Hoek.assert(!error, 'merge created a dependencies error');

    return this.nodes;
};


internals.mergeSort = function (a, b) {

    return a.sort === b.sort ? 0 : (a.sort < b.sort ? -1 : 1);
};


internals.Topo.prototype._sort = function () {

    // Construct graph

    var groups = {};
    var graph = {};
    var graphAfters = {};

    for (var i = 0, il = this._items.length; i < il; ++i) {
        var item = this._items[i];
        var seq = item.seq;                         // Unique across all items
        var group = item.group;

        // Determine Groups

        groups[group] = groups[group] || [];
        groups[group].push(seq);

        // Build intermediary graph using 'before'

        graph[seq] = item.before;

        // Build second intermediary graph with 'after'

        var after = item.after;
        for (var j = 0, jl = after.length; j < jl; ++j) {
            graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
        }
    }

    // Expand intermediary graph

    var graphNodes = Object.keys(graph);
    for (i = 0, il = graphNodes.length; i < il; ++i) {
        var node = graphNodes[i];
        var expandedGroups = [];

        var graphNodeItems = Object.keys(graph[node]);
        for (j = 0, jl = graphNodeItems.length; j < jl; ++j) {
            group = graph[node][graphNodeItems[j]];
            groups[group] = groups[group] || [];

            for (var k = 0, kl = groups[group].length; k < kl; ++k) {

                expandedGroups.push(groups[group][k]);
            }
        }
        graph[node] = expandedGroups;
    }

    // Merge intermediary graph using graphAfters into final graph

    var afterNodes = Object.keys(graphAfters);
    for (i = 0, il = afterNodes.length; i < il; ++i) {
        group = afterNodes[i];

        if (groups[group]) {
            for (j = 0, jl = groups[group].length; j < jl; ++j) {
                node = groups[group][j];
                graph[node] = graph[node].concat(graphAfters[group]);
            }
        }
    }

    // Compile ancestors

    var children;
    var ancestors = {};
    graphNodes = Object.keys(graph);
    for (i = 0, il = graphNodes.length; i < il; ++i) {
        node = graphNodes[i];
        children = graph[node];

        for (j = 0, jl = children.length; j < jl; ++j) {
            ancestors[children[j]] = (ancestors[children[j]] || []).concat(node);
        }
    }

    // Topo sort

    var visited = {};
    var sorted = [];

    for (i = 0, il = this._items.length; i < il; ++i) {
        var next = i;

        if (ancestors[i]) {
            next = null;
            for (j = 0, jl = this._items.length; j < jl; ++j) {
                if (visited[j] === true) {
                    continue;
                }

                if (!ancestors[j]) {
                    ancestors[j] = [];
                }

                var shouldSeeCount = ancestors[j].length;
                var seenCount = 0;
                for (var l = 0, ll = shouldSeeCount; l < ll; ++l) {
                    if (sorted.indexOf(ancestors[j][l]) >= 0) {
                        ++seenCount;
                    }
                }

                if (seenCount === shouldSeeCount) {
                    next = j;
                    break;
                }
            }
        }

        if (next !== null) {
            next = next.toString();         // Normalize to string TODO: replace with seq
            visited[next] = true;
            sorted.push(next);
        }
    }

    if (sorted.length !== this._items.length) {
        return new Error('Invalid dependencies');
    }

    var seqIndex = {};
    for (i = 0, il = this._items.length; i < il; ++i) {

        item = this._items[i];
        seqIndex[item.seq] = item;
    }

    var sortedNodes = [];
    this._items = sorted.map(function (value) {

        var sortedItem = seqIndex[value];
        sortedNodes.push(sortedItem.node);
        return sortedItem;
    });

    this.nodes = sortedNodes;
};

},{"hoek":43}],150:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],151:[function(require,module,exports){

/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */

module.exports = require('util').deprecate;

},{"util":undefined}],152:[function(require,module,exports){
function DOMParser(options){
	this.options = options ||{locator:{}};
	
}
DOMParser.prototype.parseFromString = function(source,mimeType){
	var options = this.options;
	var sax =  new XMLReader();
	var domBuilder = options.domBuilder || new DOMHandler();//contentHandler and LexicalHandler
	var errorHandler = options.errorHandler;
	var locator = options.locator;
	var defaultNSMap = options.xmlns||{};
	var entityMap = {'lt':'<','gt':'>','amp':'&','quot':'"','apos':"'"}
	if(locator){
		domBuilder.setDocumentLocator(locator)
	}
	
	sax.errorHandler = buildErrorHandler(errorHandler,domBuilder,locator);
	sax.domBuilder = options.domBuilder || domBuilder;
	if(/\/x?html?$/.test(mimeType)){
		entityMap.nbsp = '\xa0';
		entityMap.copy = '\xa9';
		defaultNSMap['']= 'http://www.w3.org/1999/xhtml';
	}
	defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
	if(source){
		sax.parse(source,defaultNSMap,entityMap);
	}else{
		sax.errorHandler.error("invalid doc source");
	}
	return domBuilder.doc;
}
function buildErrorHandler(errorImpl,domBuilder,locator){
	if(!errorImpl){
		if(domBuilder instanceof DOMHandler){
			return domBuilder;
		}
		errorImpl = domBuilder ;
	}
	var errorHandler = {}
	var isCallback = errorImpl instanceof Function;
	locator = locator||{}
	function build(key){
		var fn = errorImpl[key];
		if(!fn && isCallback){
			fn = errorImpl.length == 2?function(msg){errorImpl(key,msg)}:errorImpl;
		}
		errorHandler[key] = fn && function(msg){
			fn('[xmldom '+key+']\t'+msg+_locator(locator));
		}||function(){};
	}
	build('warning');
	build('error');
	build('fatalError');
	return errorHandler;
}

//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */
function DOMHandler() {
    this.cdata = false;
}
function position(locator,node){
	node.lineNumber = locator.lineNumber;
	node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ 
DOMHandler.prototype = {
	startDocument : function() {
    	this.doc = new DOMImplementation().createDocument(null, null, null);
    	if (this.locator) {
        	this.doc.documentURI = this.locator.systemId;
    	}
	},
	startElement:function(namespaceURI, localName, qName, attrs) {
		var doc = this.doc;
	    var el = doc.createElementNS(namespaceURI, qName||localName);
	    var len = attrs.length;
	    appendElement(this, el);
	    this.currentElement = el;
	    
		this.locator && position(this.locator,el)
	    for (var i = 0 ; i < len; i++) {
	        var namespaceURI = attrs.getURI(i);
	        var value = attrs.getValue(i);
	        var qName = attrs.getQName(i);
			var attr = doc.createAttributeNS(namespaceURI, qName);
			this.locator &&position(attrs.getLocator(i),attr);
			attr.value = attr.nodeValue = value;
			el.setAttributeNode(attr)
	    }
	},
	endElement:function(namespaceURI, localName, qName) {
		var current = this.currentElement
		var tagName = current.tagName;
		this.currentElement = current.parentNode;
	},
	startPrefixMapping:function(prefix, uri) {
	},
	endPrefixMapping:function(prefix) {
	},
	processingInstruction:function(target, data) {
	    var ins = this.doc.createProcessingInstruction(target, data);
	    this.locator && position(this.locator,ins)
	    appendElement(this, ins);
	},
	ignorableWhitespace:function(ch, start, length) {
	},
	characters:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
		//console.log(chars)
		if(chars){
			if (this.cdata) {
				var charNode = this.doc.createCDATASection(chars);
			} else {
				var charNode = this.doc.createTextNode(chars);
			}
			if(this.currentElement){
				this.currentElement.appendChild(charNode);
			}else if(/^\s*$/.test(chars)){
				this.doc.appendChild(charNode);
				//process xml
			}
			this.locator && position(this.locator,charNode)
		}
	},
	skippedEntity:function(name) {
	},
	endDocument:function() {
		this.doc.normalize();
	},
	setDocumentLocator:function (locator) {
	    if(this.locator = locator){// && !('lineNumber' in locator)){
	    	locator.lineNumber = 0;
	    }
	},
	//LexicalHandler
	comment:function(chars, start, length) {
		chars = _toString.apply(this,arguments)
	    var comm = this.doc.createComment(chars);
	    this.locator && position(this.locator,comm)
	    appendElement(this, comm);
	},
	
	startCDATA:function() {
	    //used in characters() methods
	    this.cdata = true;
	},
	endCDATA:function() {
	    this.cdata = false;
	},
	
	startDTD:function(name, publicId, systemId) {
		var impl = this.doc.implementation;
	    if (impl && impl.createDocumentType) {
	        var dt = impl.createDocumentType(name, publicId, systemId);
	        this.locator && position(this.locator,dt)
	        appendElement(this, dt);
	    }
	},
	/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */
	warning:function(error) {
		console.warn('[xmldom warning]\t'+error,_locator(this.locator));
	},
	error:function(error) {
		console.error('[xmldom error]\t'+error,_locator(this.locator));
	},
	fatalError:function(error) {
		console.error('[xmldom fatalError]\t'+error,_locator(this.locator));
	    throw error;
	}
}
function _locator(l){
	if(l){
		return '\n@'+(l.systemId ||'')+'#[line:'+l.lineNumber+',col:'+l.columnNumber+']'
	}
}
function _toString(chars,start,length){
	if(typeof chars == 'string'){
		return chars.substr(start,length)
	}else{//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
		if(chars.length >= start+length || start){
			return new java.lang.String(chars,start,length)+'';
		}
		return chars;
	}
}

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */
"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(key){
	DOMHandler.prototype[key] = function(){return null}
})

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
function appendElement (hander,node) {
    if (!hander.currentElement) {
        hander.doc.appendChild(node);
    } else {
        hander.currentElement.appendChild(node);
    }
}//appendChild and setAttributeNS are preformance key

//if(typeof require == 'function'){
	var XMLReader = require('./sax').XMLReader;
	var DOMImplementation = exports.DOMImplementation = require('./dom').DOMImplementation;
	exports.XMLSerializer = require('./dom').XMLSerializer ;
	exports.DOMParser = DOMParser;
//}

},{"./dom":153,"./sax":154}],153:[function(require,module,exports){
/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy(src,dest){
	for(var p in src){
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends(Class,Super){
	var pt = Class.prototype;
	if(Object.create){
		var ppt = Object.create(Super.prototype)
		pt.__proto__ = ppt;
	}
	if(!(pt instanceof Super)){
		function t(){};
		t.prototype = Super.prototype;
		t = new t();
		copy(pt,t);
		Class.prototype = pt = t;
	}
	if(pt.constructor != Class){
		if(typeof Class != 'function'){
			console.error("unknow Class:"+Class)
		}
		pt.constructor = Class
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml' ;
// Node Types
var NodeType = {}
var ELEMENT_NODE                = NodeType.ELEMENT_NODE                = 1;
var ATTRIBUTE_NODE              = NodeType.ATTRIBUTE_NODE              = 2;
var TEXT_NODE                   = NodeType.TEXT_NODE                   = 3;
var CDATA_SECTION_NODE          = NodeType.CDATA_SECTION_NODE          = 4;
var ENTITY_REFERENCE_NODE       = NodeType.ENTITY_REFERENCE_NODE       = 5;
var ENTITY_NODE                 = NodeType.ENTITY_NODE                 = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE                = NodeType.COMMENT_NODE                = 8;
var DOCUMENT_NODE               = NodeType.DOCUMENT_NODE               = 9;
var DOCUMENT_TYPE_NODE          = NodeType.DOCUMENT_TYPE_NODE          = 10;
var DOCUMENT_FRAGMENT_NODE      = NodeType.DOCUMENT_FRAGMENT_NODE      = 11;
var NOTATION_NODE               = NodeType.NOTATION_NODE               = 12;

// ExceptionCode
var ExceptionCode = {}
var ExceptionMessage = {};
var INDEX_SIZE_ERR              = ExceptionCode.INDEX_SIZE_ERR              = ((ExceptionMessage[1]="Index size error"),1);
var DOMSTRING_SIZE_ERR          = ExceptionCode.DOMSTRING_SIZE_ERR          = ((ExceptionMessage[2]="DOMString size error"),2);
var HIERARCHY_REQUEST_ERR       = ExceptionCode.HIERARCHY_REQUEST_ERR       = ((ExceptionMessage[3]="Hierarchy request error"),3);
var WRONG_DOCUMENT_ERR          = ExceptionCode.WRONG_DOCUMENT_ERR          = ((ExceptionMessage[4]="Wrong document"),4);
var INVALID_CHARACTER_ERR       = ExceptionCode.INVALID_CHARACTER_ERR       = ((ExceptionMessage[5]="Invalid character"),5);
var NO_DATA_ALLOWED_ERR         = ExceptionCode.NO_DATA_ALLOWED_ERR         = ((ExceptionMessage[6]="No data allowed"),6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ((ExceptionMessage[7]="No modification allowed"),7);
var NOT_FOUND_ERR               = ExceptionCode.NOT_FOUND_ERR               = ((ExceptionMessage[8]="Not found"),8);
var NOT_SUPPORTED_ERR           = ExceptionCode.NOT_SUPPORTED_ERR           = ((ExceptionMessage[9]="Not supported"),9);
var INUSE_ATTRIBUTE_ERR         = ExceptionCode.INUSE_ATTRIBUTE_ERR         = ((ExceptionMessage[10]="Attribute in use"),10);
//level2
var INVALID_STATE_ERR        	= ExceptionCode.INVALID_STATE_ERR        	= ((ExceptionMessage[11]="Invalid state"),11);
var SYNTAX_ERR               	= ExceptionCode.SYNTAX_ERR               	= ((ExceptionMessage[12]="Syntax error"),12);
var INVALID_MODIFICATION_ERR 	= ExceptionCode.INVALID_MODIFICATION_ERR 	= ((ExceptionMessage[13]="Invalid modification"),13);
var NAMESPACE_ERR            	= ExceptionCode.NAMESPACE_ERR           	= ((ExceptionMessage[14]="Invalid namespace"),14);
var INVALID_ACCESS_ERR       	= ExceptionCode.INVALID_ACCESS_ERR      	= ((ExceptionMessage[15]="Invalid access"),15);


function DOMException(code, message) {
	if(message instanceof Error){
		var error = message;
	}else{
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if(Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if(message) this.message = this.message + ": " + message;
	return error;
};
DOMException.prototype = Error.prototype;
copy(ExceptionCode,DOMException)
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {
};
NodeList.prototype = {
	/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */
	length:0, 
	/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */
	item: function(index) {
		return this[index] || null;
	},
	toString:function(isHTML,nodeFilter){
		for(var buf = [], i = 0;i<this.length;i++){
			serializeToString(this[i],buf,isHTML,nodeFilter);
		}
		return buf.join('');
	}
};
function LiveNodeList(node,refresh){
	this._node = node;
	this._refresh = refresh
	_updateLiveList(this);
}
function _updateLiveList(list){
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if(list._inc != inc){
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list,'length',ls.length);
		copy(ls,list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function(i){
	_updateLiveList(this);
	return this[i];
}

_extends(LiveNodeList,NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {
};

function _findNodeIndex(list,node){
	var i = list.length;
	while(i--){
		if(list[i] === node){return i}
	}
}

function _addNamedNode(el,list,newAttr,oldAttr){
	if(oldAttr){
		list[_findNodeIndex(list,oldAttr)] = newAttr;
	}else{
		list[list.length++] = newAttr;
	}
	if(el){
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if(doc){
			oldAttr && _onRemoveAttribute(doc,el,oldAttr);
			_onAddAttribute(doc,el,newAttr);
		}
	}
}
function _removeNamedNode(el,list,attr){
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list,attr);
	if(i>=0){
		var lastIndex = list.length-1
		while(i<lastIndex){
			list[i] = list[++i]
		}
		list.length = lastIndex;
		if(el){
			var doc = el.ownerDocument;
			if(doc){
				_onRemoveAttribute(doc,el,attr);
				attr.ownerElement = null;
			}
		}
	}else{
		throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+'@'+attr))
	}
}
NamedNodeMap.prototype = {
	length:0,
	item:NodeList.prototype.item,
	getNamedItem: function(key) {
//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
		//console.log()
		var i = this.length;
		while(i--){
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if(attr.nodeName == key){
				return attr;
			}
		}
	},
	setNamedItem: function(attr) {
		var el = attr.ownerElement;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement, oldAttr;
		if(el && el!=this._ownerElement){
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI,attr.localName);
		_addNamedNode(this._ownerElement,this,attr,oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
		
		
	},// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
	
	//for level2
	removeNamedItemNS:function(namespaceURI,localName){
		var attr = this.getNamedItemNS(namespaceURI,localName);
		_removeNamedNode(this._ownerElement,this,attr);
		return attr;
	},
	getNamedItemNS: function(namespaceURI, localName) {
		var i = this.length;
		while(i--){
			var node = this[i];
			if(node.localName == localName && node.namespaceURI == namespaceURI){
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation(/* Object */ features) {
	this._features = {};
	if (features) {
		for (var feature in features) {
			 this._features = features[feature];
		}
	}
};

DOMImplementation.prototype = {
	hasFeature: function(/* string */ feature, /* string */ version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument:function(namespaceURI,  qualifiedName, doctype){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype;
		if(doctype){
			doc.appendChild(doctype);
		}
		if(qualifiedName){
			var root = doc.createElementNS(namespaceURI,qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType:function(qualifiedName, publicId, systemId){// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;
		
		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};


/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {
};

Node.prototype = {
	firstChild : null,
	lastChild : null,
	previousSibling : null,
	nextSibling : null,
	attributes : null,
	parentNode : null,
	childNodes : null,
	ownerDocument : null,
	nodeValue : null,
	namespaceURI : null,
	prefix : null,
	localName : null,
	// Modified in DOM Level 2:
	insertBefore:function(newChild, refChild){//raises 
		return _insertBefore(this,newChild,refChild);
	},
	replaceChild:function(newChild, oldChild){//raises 
		this.insertBefore(newChild,oldChild);
		if(oldChild){
			this.removeChild(oldChild);
		}
	},
	removeChild:function(oldChild){
		return _removeChild(this,oldChild);
	},
	appendChild:function(newChild){
		return this.insertBefore(newChild,null);
	},
	hasChildNodes:function(){
		return this.firstChild != null;
	},
	cloneNode:function(deep){
		return cloneNode(this.ownerDocument||this,this,deep);
	},
	// Modified in DOM Level 2:
	normalize:function(){
		var child = this.firstChild;
		while(child){
			var next = child.nextSibling;
			if(next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE){
				this.removeChild(next);
				child.appendData(next.data);
			}else{
				child.normalize();
				child = next;
			}
		}
	},
  	// Introduced in DOM Level 2:
	isSupported:function(feature, version){
		return this.ownerDocument.implementation.hasFeature(feature,version);
	},
    // Introduced in DOM Level 2:
    hasAttributes:function(){
    	return this.attributes.length>0;
    },
    lookupPrefix:function(namespaceURI){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			for(var n in map){
    				if(map[n] == namespaceURI){
    					return n;
    				}
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI:function(prefix){
    	var el = this;
    	while(el){
    		var map = el._nsMap;
    		//console.dir(map)
    		if(map){
    			if(prefix in map){
    				return map[prefix] ;
    			}
    		}
    		el = el.nodeType == ATTRIBUTE_NODE?el.ownerDocument : el.parentNode;
    	}
    	return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace:function(namespaceURI){
    	var prefix = this.lookupPrefix(namespaceURI);
    	return prefix == null;
    }
};


function _xmlEncoder(c){
	return c == '<' && '&lt;' ||
         c == '>' && '&gt;' ||
         c == '&' && '&amp;' ||
         c == '"' && '&quot;' ||
         '&#'+c.charCodeAt()+';'
}


copy(NodeType,Node);
copy(NodeType,Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node,callback){
	if(callback(node)){
		return true;
	}
	if(node = node.firstChild){
		do{
			if(_visitNode(node,callback)){return true}
        }while(node=node.nextSibling)
    }
}



function Document(){
}
function _onAddAttribute(doc,el,newAttr){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		el._nsMap[newAttr.prefix?newAttr.localName:''] = newAttr.value
	}
}
function _onRemoveAttribute(doc,el,newAttr,remove){
	doc && doc._inc++;
	var ns = newAttr.namespaceURI ;
	if(ns == 'http://www.w3.org/2000/xmlns/'){
		//update namespace
		delete el._nsMap[newAttr.prefix?newAttr.localName:'']
	}
}
function _onUpdateChild(doc,el,newChild){
	if(doc && doc._inc){
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if(newChild){
			cs[cs.length++] = newChild;
		}else{
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while(child){
				cs[i++] = child;
				child =child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode,child){
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if(previous){
		previous.nextSibling = next;
	}else{
		parentNode.firstChild = next
	}
	if(next){
		next.previousSibling = previous;
	}else{
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument,parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode,newChild,nextChild){
	var cp = newChild.parentNode;
	if(cp){
		cp.removeChild(newChild);//remove and update
	}
	if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	}else{
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;
	
	
	if(pre){
		pre.nextSibling = newFirst;
	}else{
		parentNode.firstChild = newFirst;
	}
	if(nextChild == null){
		parentNode.lastChild = newLast;
	}else{
		nextChild.previousSibling = newLast;
	}
	do{
		newFirst.parentNode = parentNode;
	}while(newFirst !== newLast && (newFirst= newFirst.nextSibling))
	_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode,newChild){
	var cp = newChild.parentNode;
	if(cp){
		var pre = parentNode.lastChild;
		cp.removeChild(newChild);//remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if(pre){
		pre.nextSibling = newChild;
	}else{
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName :  '#document',
	nodeType :  DOCUMENT_NODE,
	doctype :  null,
	documentElement :  null,
	_inc : 1,
	
	insertBefore :  function(newChild, refChild){//raises 
		if(newChild.nodeType == DOCUMENT_FRAGMENT_NODE){
			var child = newChild.firstChild;
			while(child){
				var next = child.nextSibling;
				this.insertBefore(child,refChild);
				child = next;
			}
			return newChild;
		}
		if(this.documentElement == null && newChild.nodeType == ELEMENT_NODE){
			this.documentElement = newChild;
		}
		
		return _insertBefore(this,newChild,refChild),(newChild.ownerDocument = this),newChild;
	},
	removeChild :  function(oldChild){
		if(this.documentElement == oldChild){
			this.documentElement = null;
		}
		return _removeChild(this,oldChild);
	},
	// Introduced in DOM Level 2:
	importNode : function(importedNode,deep){
		return importNode(this,importedNode,deep);
	},
	// Introduced in DOM Level 2:
	getElementById :	function(id){
		var rtv = null;
		_visitNode(this.documentElement,function(node){
			if(node.nodeType == ELEMENT_NODE){
				if(node.getAttribute('id') == id){
					rtv = node;
					return true;
				}
			}
		})
		return rtv;
	},
	
	//document factory method:
	createElement :	function(tagName){
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs	= node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment :	function(){
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode :	function(data){
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createComment :	function(data){
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createCDATASection :	function(data){
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data)
		return node;
	},
	createProcessingInstruction :	function(target,data){
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue= node.data = data;
		return node;
	},
	createAttribute :	function(name){
		var node = new Attr();
		node.ownerDocument	= this;
		node.name = name;
		node.nodeName	= name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference :	function(name){
		var node = new EntityReference();
		node.ownerDocument	= this;
		node.nodeName	= name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS :	function(namespaceURI,qualifiedName){
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs	= node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS :	function(namespaceURI,qualifiedName){
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if(pl.length == 2){
			node.prefix = pl[0];
			node.localName = pl[1];
		}else{
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends(Document,Node);


function Element() {
	this._nsMap = {};
};
Element.prototype = {
	nodeType : ELEMENT_NODE,
	hasAttribute : function(name){
		return this.getAttributeNode(name)!=null;
	},
	getAttribute : function(name){
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode : function(name){
		return this.attributes.getNamedItem(name);
	},
	setAttribute : function(name, value){
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	removeAttribute : function(name){
		var attr = this.getAttributeNode(name)
		attr && this.removeAttributeNode(attr);
	},
	
	//four real opeartion method
	appendChild:function(newChild){
		if(newChild.nodeType === DOCUMENT_FRAGMENT_NODE){
			return this.insertBefore(newChild,null);
		}else{
			return _appendSingleChild(this,newChild);
		}
	},
	setAttributeNode : function(newAttr){
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS : function(newAttr){
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode : function(oldAttr){
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS : function(namespaceURI, localName){
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},
	
	hasAttributeNS : function(namespaceURI, localName){
		return this.getAttributeNodeNS(namespaceURI, localName)!=null;
	},
	getAttributeNS : function(namespaceURI, localName){
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS : function(namespaceURI, qualifiedName, value){
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr)
	},
	getAttributeNodeNS : function(namespaceURI, localName){
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},
	
	getElementsByTagName : function(tagName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)){
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS : function(namespaceURI, localName){
		return new LiveNodeList(this,function(base){
			var ls = [];
			_visitNode(base,function(node){
				if(node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)){
					ls.push(node);
				}
			});
			return ls;
			
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;


_extends(Element,Node);
function Attr() {
};
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends(Attr,Node);


function CharacterData() {
};
CharacterData.prototype = {
	data : '',
	substringData : function(offset, count) {
		return this.data.substring(offset, offset+count);
	},
	appendData: function(text) {
		text = this.data+text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function(offset,text) {
		this.replaceData(offset,0,text);
	
	},
	appendChild:function(newChild){
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])
	},
	deleteData: function(offset, count) {
		this.replaceData(offset,count,"");
	},
	replaceData: function(offset, count, text) {
		var start = this.data.substring(0,offset);
		var end = this.data.substring(offset+count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
}
_extends(CharacterData,Node);
function Text() {
};
Text.prototype = {
	nodeName : "#text",
	nodeType : TEXT_NODE,
	splitText : function(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if(this.parentNode){
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
}
_extends(Text,CharacterData);
function Comment() {
};
Comment.prototype = {
	nodeName : "#comment",
	nodeType : COMMENT_NODE
}
_extends(Comment,CharacterData);

function CDATASection() {
};
CDATASection.prototype = {
	nodeName : "#cdata-section",
	nodeType : CDATA_SECTION_NODE
}
_extends(CDATASection,CharacterData);


function DocumentType() {
};
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends(DocumentType,Node);

function Notation() {
};
Notation.prototype.nodeType = NOTATION_NODE;
_extends(Notation,Node);

function Entity() {
};
Entity.prototype.nodeType = ENTITY_NODE;
_extends(Entity,Node);

function EntityReference() {
};
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends(EntityReference,Node);

function DocumentFragment() {
};
DocumentFragment.prototype.nodeName =	"#document-fragment";
DocumentFragment.prototype.nodeType =	DOCUMENT_FRAGMENT_NODE;
_extends(DocumentFragment,Node);


function ProcessingInstruction() {
}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends(ProcessingInstruction,Node);
function XMLSerializer(){}
XMLSerializer.prototype.serializeToString = function(node,isHtml,nodeFilter){
	return nodeSerializeToString.call(node,isHtml,nodeFilter);
}
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml,nodeFilter){
	var buf = [];
	var refNode = this.nodeType == 9?this.documentElement:this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;
	
	if(uri && prefix == null){
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if(prefix == null){
			//isHTML = true;
			var visibleNamespaces=[
			{namespace:uri,prefix:null}
			//{namespace:uri,prefix:''}
			]
		}
	}
	serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}
function needNamespaceDefine(node,isHTML, visibleNamespaces) {
	var prefix = node.prefix||'';
	var uri = node.namespaceURI;
	if (!prefix && !uri){
		return false;
	}
	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" 
		|| uri == 'http://www.w3.org/2000/xmlns/'){
		return false;
	}
	
	var i = visibleNamespaces.length 
	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
		if (ns.prefix == prefix){
			return ns.namespace != uri;
		}
	}
	//console.log(isHTML,uri,prefix=='')
	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
	//	return false;
	//}
	//node.flag = '11111'
	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
	return true;
}
function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){
	if(nodeFilter){
		node = nodeFilter(node);
		if(node){
			if(typeof node == 'string'){
				buf.push(node);
				return;
			}
		}else{
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}
	switch(node.nodeType){
	case ELEMENT_NODE:
		if (!visibleNamespaces) visibleNamespaces = [];
		var startVisibleNamespaces = visibleNamespaces.length;
		var attrs = node.attributes;
		var len = attrs.length;
		var child = node.firstChild;
		var nodeName = node.tagName;
		
		isHTML =  (htmlns === node.namespaceURI) ||isHTML 
		buf.push('<',nodeName);
		
		
		
		for(var i=0;i<len;i++){
			// add namespaces for attributes
			var attr = attrs.item(i);
			if (attr.prefix == 'xmlns') {
				visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
			}else if(attr.nodeName == 'xmlns'){
				visibleNamespaces.push({ prefix: '', namespace: attr.value });
			}
		}
		for(var i=0;i<len;i++){
			var attr = attrs.item(i);
			if (needNamespaceDefine(attr,isHTML, visibleNamespaces)) {
				var prefix = attr.prefix||'';
				var uri = attr.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="' , uri , '"');
				visibleNamespaces.push({ prefix: prefix, namespace:uri });
			}
			serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces);
		}
		// add namespace for current node		
		if (needNamespaceDefine(node,isHTML, visibleNamespaces)) {
			var prefix = node.prefix||'';
			var uri = node.namespaceURI;
			var ns = prefix ? ' xmlns:' + prefix : " xmlns";
			buf.push(ns, '="' , uri , '"');
			visibleNamespaces.push({ prefix: prefix, namespace:uri });
		}
		
		if(child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){
			buf.push('>');
			//if is cdata child node
			if(isHTML && /^script$/i.test(nodeName)){
				while(child){
					if(child.data){
						buf.push(child.data);
					}else{
						serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					}
					child = child.nextSibling;
				}
			}else
			{
				while(child){
					serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
					child = child.nextSibling;
				}
			}
			buf.push('</',nodeName,'>');
		}else{
			buf.push('/>');
		}
		// remove added visible namespaces
		//visibleNamespaces.length = startVisibleNamespaces;
		return;
	case DOCUMENT_NODE:
	case DOCUMENT_FRAGMENT_NODE:
		var child = node.firstChild;
		while(child){
			serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);
			child = child.nextSibling;
		}
		return;
	case ATTRIBUTE_NODE:
		return buf.push(' ',node.name,'="',node.value.replace(/[<&"]/g,_xmlEncoder),'"');
	case TEXT_NODE:
		return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));
	case CDATA_SECTION_NODE:
		return buf.push( '<![CDATA[',node.data,']]>');
	case COMMENT_NODE:
		return buf.push( "<!--",node.data,"-->");
	case DOCUMENT_TYPE_NODE:
		var pubid = node.publicId;
		var sysid = node.systemId;
		buf.push('<!DOCTYPE ',node.name);
		if(pubid){
			buf.push(' PUBLIC "',pubid);
			if (sysid && sysid!='.') {
				buf.push( '" "',sysid);
			}
			buf.push('">');
		}else if(sysid && sysid!='.'){
			buf.push(' SYSTEM "',sysid,'">');
		}else{
			var sub = node.internalSubset;
			if(sub){
				buf.push(" [",sub,"]");
			}
			buf.push(">");
		}
		return;
	case PROCESSING_INSTRUCTION_NODE:
		return buf.push( "<?",node.target," ",node.data,"?>");
	case ENTITY_REFERENCE_NODE:
		return buf.push( '&',node.nodeName,';');
	//case ENTITY_NODE:
	//case NOTATION_NODE:
	default:
		buf.push('??',node.nodeName);
	}
}
function importNode(doc,node,deep){
	var node2;
	switch (node.nodeType) {
	case ELEMENT_NODE:
		node2 = node.cloneNode(false);
		node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
			//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
	case DOCUMENT_FRAGMENT_NODE:
		break;
	case ATTRIBUTE_NODE:
		deep = true;
		break;
	//case ENTITY_REFERENCE_NODE:
	//case PROCESSING_INSTRUCTION_NODE:
	////case TEXT_NODE:
	//case CDATA_SECTION_NODE:
	//case COMMENT_NODE:
	//	deep = false;
	//	break;
	//case DOCUMENT_NODE:
	//case DOCUMENT_TYPE_NODE:
	//cannot be imported.
	//case ENTITY_NODE:
	//case NOTATION_NODE：
	//can not hit in level3
	//default:throw e;
	}
	if(!node2){
		node2 = node.cloneNode(false);//false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(importNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function cloneNode(doc,node,deep){
	var node2 = new node.constructor();
	for(var n in node){
		var v = node[n];
		if(typeof v != 'object' ){
			if(v != node2[n]){
				node2[n] = v;
			}
		}
	}
	if(node.childNodes){
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
	case ELEMENT_NODE:
		var attrs	= node.attributes;
		var attrs2	= node2.attributes = new NamedNodeMap();
		var len = attrs.length
		attrs2._ownerElement = node2;
		for(var i=0;i<len;i++){
			node2.setAttributeNode(cloneNode(doc,attrs.item(i),true));
		}
		break;;
	case ATTRIBUTE_NODE:
		deep = true;
	}
	if(deep){
		var child = node.firstChild;
		while(child){
			node2.appendChild(cloneNode(doc,child,deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object,key,value){
	object[key] = value
}
//do dynamic
try{
	if(Object.defineProperty){
		Object.defineProperty(LiveNodeList.prototype,'length',{
			get:function(){
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype,'textContent',{
			get:function(){
				return getTextContent(this);
			},
			set:function(data){
				switch(this.nodeType){
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					while(this.firstChild){
						this.removeChild(this.firstChild);
					}
					if(data || String(data)){
						this.appendChild(this.ownerDocument.createTextNode(data));
					}
					break;
				default:
					//TODO:
					this.data = data;
					this.value = data;
					this.nodeValue = data;
				}
			}
		})
		
		function getTextContent(node){
			switch(node.nodeType){
			case ELEMENT_NODE:
			case DOCUMENT_FRAGMENT_NODE:
				var buf = [];
				node = node.firstChild;
				while(node){
					if(node.nodeType!==7 && node.nodeType !==8){
						buf.push(getTextContent(node));
					}
					node = node.nextSibling;
				}
				return buf.join('');
			default:
				return node.nodeValue;
			}
		}
		__set__ = function(object,key,value){
			//console.log(value)
			object['$$'+key] = value
		}
	}
}catch(e){//ie8
}

//if(typeof require == 'function'){
	exports.DOMImplementation = DOMImplementation;
	exports.XMLSerializer = XMLSerializer;
//}

},{}],154:[function(require,module,exports){
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9"+nameStartChar.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^'+nameStartChar.source+nameChar.source+'*(?:\:'+nameStartChar.source+nameChar.source+'*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0;//tag name offerring
var S_ATTR = 1;//attr name offerring 
var S_ATTR_SPACE=2;//attr name end and space offer
var S_EQ = 3;//=space?
var S_ATTR_NOQUOT_VALUE = 4;//attr value(no quot value only)
var S_ATTR_END = 5;//attr value end and no space(quot end)
var S_TAG_SPACE = 6;//(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7;//closed el<el />

function XMLReader(){
	
}

XMLReader.prototype = {
	parse:function(source,defaultNSMap,entityMap){
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap ,defaultNSMap = {})
		parse(source,defaultNSMap,entityMap,
				domBuilder,this.errorHandler);
		domBuilder.endDocument();
	}
}
function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10)
				, surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a){
		var k = a.slice(1,-1);
		if(k in entityMap){
			return entityMap[k]; 
		}else if(k.charAt(0) === '#'){
			return fixedFromCharCode(parseInt(k.substr(1).replace('x','0x')))
		}else{
			errorHandler.error('entity not found:'+a);
			return a;
		}
	}
	function appendText(end){//has some bugs
		if(end>start){
			var xt = source.substring(start,end).replace(/&#?\w+;/g,entityReplacer);
			locator&&position(start);
			domBuilder.characters(xt,0,end-start);
			start = end
		}
	}
	function position(p,m){
		while(p>=lineEnd && (m = linePattern.exec(source))){
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p-lineStart+1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g
	var locator = domBuilder.locator;
	
	var parseStack = [{currentNSMap:defaultNSMapCopy}]
	var closeMap = {};
	var start = 0;
	while(true){
		try{
			var tagStart = source.indexOf('<',start);
			if(tagStart<0){
				if(!source.substr(start).match(/^\s*$/)){
					var doc = domBuilder.doc;
	    			var text = doc.createTextNode(source.substr(start));
	    			doc.appendChild(text);
	    			domBuilder.currentElement = text;
				}
				return;
			}
			if(tagStart>start){
				appendText(tagStart);
			}
			switch(source.charAt(tagStart+1)){
			case '/':
				var end = source.indexOf('>',tagStart+3);
				var tagName = source.substring(tagStart+2,end);
				var config = parseStack.pop();
				if(end<0){
					
	        		tagName = source.substring(tagStart+2).replace(/[\s<].*/,'');
	        		//console.error('#@@@@@@'+tagName)
	        		errorHandler.error("end tag name: "+tagName+' is not complete:'+config.tagName);
	        		end = tagStart+1+tagName.length;
	        	}else if(tagName.match(/\s</)){
	        		tagName = tagName.replace(/[\s<].*/,'');
	        		errorHandler.error("end tag name: "+tagName+' maybe not complete');
	        		end = tagStart+1+tagName.length;
				}
				//console.error(parseStack.length,parseStack)
				//console.error(config);
				var localNSMap = config.localNSMap;
				var endMatch = config.tagName == tagName;
				var endIgnoreCaseMach = endMatch || config.tagName&&config.tagName.toLowerCase() == tagName.toLowerCase()
		        if(endIgnoreCaseMach){
		        	domBuilder.endElement(config.uri,config.localName,tagName);
					if(localNSMap){
						for(var prefix in localNSMap){
							domBuilder.endPrefixMapping(prefix) ;
						}
					}
					if(!endMatch){
		            	errorHandler.fatalError("end tag name: "+tagName+' is not match the current start tagName:'+config.tagName );
					}
		        }else{
		        	parseStack.push(config)
		        }
				
				end++;
				break;
				// end elment
			case '?':// <?...?>
				locator&&position(tagStart);
				end = parseInstruction(source,tagStart,domBuilder);
				break;
			case '!':// <!doctype,<![CDATA,<!--
				locator&&position(tagStart);
				end = parseDCC(source,tagStart,domBuilder,errorHandler);
				break;
			default:
				locator&&position(tagStart);
				var el = new ElementAttributes();
				var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
				//elStartEnd
				var end = parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);
				var len = el.length;
				
				
				if(!el.closed && fixSelfClosed(source,end,el.tagName,closeMap)){
					el.closed = true;
					if(!entityMap.nbsp){
						errorHandler.warning('unclosed xml attribute');
					}
				}
				if(locator && len){
					var locator2 = copyLocator(locator,{});
					//try{//attribute position fixed
					for(var i = 0;i<len;i++){
						var a = el[i];
						position(a.offset);
						a.locator = copyLocator(locator,{});
					}
					//}catch(e){console.error('@@@@@'+e)}
					domBuilder.locator = locator2
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
					domBuilder.locator = locator;
				}else{
					if(appendElement(el,domBuilder,currentNSMap)){
						parseStack.push(el)
					}
				}
				
				
				
				if(el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed){
					end = parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)
				}else{
					end++;
				}
			}
		}catch(e){
			errorHandler.error('element parse error: '+e)
			//errorHandler.error('element parse error: '+e);
			end = -1;
			//throw e;
		}
		if(end>start){
			start = end;
		}else{
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart,start)+1);
		}
	}
}
function copyLocator(f,t){
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG;//status
	while(true){
		var c = source.charAt(p);
		switch(c){
		case '=':
			if(s === S_ATTR){//attrName
				attrName = source.slice(start,p);
				s = S_EQ;
			}else if(s === S_ATTR_SPACE){
				s = S_EQ;
			}else{
				//fatalError: equal must after attrName or space after attrName
				throw new Error('attribute equal must after attrName');
			}
			break;
		case '\'':
		case '"':
			if(s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				){//equal
				if(s === S_ATTR){
					errorHandler.warning('attribute value must after "="')
					attrName = source.slice(start,p)
				}
				start = p+1;
				p = source.indexOf(c,start)
				if(p>0){
					value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					el.add(attrName,value,start-1);
					s = S_ATTR_END;
				}else{
					//fatalError: no end quot match
					throw new Error('attribute value no end \''+c+'\' match');
				}
			}else if(s == S_ATTR_NOQUOT_VALUE){
				value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
				//console.log(attrName,value,start,p)
				el.add(attrName,value,start);
				//console.dir(el)
				errorHandler.warning('attribute "'+attrName+'" missed start quot('+c+')!!');
				start = p+1;
				s = S_ATTR_END
			}else{
				//fatalError: no equal before
				throw new Error('attribute value must after "="');
			}
			break;
		case '/':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				s =S_TAG_CLOSE;
				el.closed = true;
			case S_ATTR_NOQUOT_VALUE:
			case S_ATTR:
			case S_ATTR_SPACE:
				break;
			//case S_EQ:
			default:
				throw new Error("attribute invalid close char('/')")
			}
			break;
		case ''://end document
			//throw new Error('unexpected end of input')
			errorHandler.error('unexpected end of input');
			if(s == S_TAG){
				el.setTagName(source.slice(start,p));
			}
			return p;
		case '>':
			switch(s){
			case S_TAG:
				el.setTagName(source.slice(start,p));
			case S_ATTR_END:
			case S_TAG_SPACE:
			case S_TAG_CLOSE:
				break;//normal
			case S_ATTR_NOQUOT_VALUE://Compatible state
			case S_ATTR:
				value = source.slice(start,p);
				if(value.slice(-1) === '/'){
					el.closed  = true;
					value = value.slice(0,-1)
				}
			case S_ATTR_SPACE:
				if(s === S_ATTR_SPACE){
					value = attrName;
				}
				if(s == S_ATTR_NOQUOT_VALUE){
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value.replace(/&#?\w+;/g,entityReplacer),start)
				}else{
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+value+'" missed value!! "'+value+'" instead!!')
					}
					el.add(value,value,start)
				}
				break;
			case S_EQ:
				throw new Error('attribute value missed!!');
			}
//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
			return p;
		/*xml space '\x20' | #x9 | #xD | #xA; */
		case '\u0080':
			c = ' ';
		default:
			if(c<= ' '){//space
				switch(s){
				case S_TAG:
					el.setTagName(source.slice(start,p));//tagName
					s = S_TAG_SPACE;
					break;
				case S_ATTR:
					attrName = source.slice(start,p)
					s = S_ATTR_SPACE;
					break;
				case S_ATTR_NOQUOT_VALUE:
					var value = source.slice(start,p).replace(/&#?\w+;/g,entityReplacer);
					errorHandler.warning('attribute "'+value+'" missed quot(")!!');
					el.add(attrName,value,start)
				case S_ATTR_END:
					s = S_TAG_SPACE;
					break;
				//case S_TAG_SPACE:
				//case S_EQ:
				//case S_ATTR_SPACE:
				//	void();break;
				//case S_TAG_CLOSE:
					//ignore warning
				}
			}else{//not space
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
				switch(s){
				//case S_TAG:void();break;
				//case S_ATTR:void();break;
				//case S_ATTR_NOQUOT_VALUE:void();break;
				case S_ATTR_SPACE:
					var tagName =  el.tagName;
					if(currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)){
						errorHandler.warning('attribute "'+attrName+'" missed value!! "'+attrName+'" instead2!!')
					}
					el.add(attrName,attrName,start);
					start = p;
					s = S_ATTR;
					break;
				case S_ATTR_END:
					errorHandler.warning('attribute space is required"'+attrName+'"!!')
				case S_TAG_SPACE:
					s = S_ATTR;
					start = p;
					break;
				case S_EQ:
					s = S_ATTR_NOQUOT_VALUE;
					start = p;
					break;
				case S_TAG_CLOSE:
					throw new Error("elements closed character '/' and '>' must be connected to");
				}
			}
		}//end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el,domBuilder,currentNSMap){
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while(i--){
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if(nsp>0){
			var prefix = a.prefix = qName.slice(0,nsp);
			var localName = qName.slice(nsp+1);
			var nsPrefix = prefix === 'xmlns' && localName
		}else{
			localName = qName;
			prefix = null
			nsPrefix = qName === 'xmlns' && ''
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName ;
		//prefix == null for no ns prefix attribute 
		if(nsPrefix !== false){//hack!!
			if(localNSMap == null){
				localNSMap = {}
				//console.log(currentNSMap,0)
				_copy(currentNSMap,currentNSMap={})
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/'
			domBuilder.startPrefixMapping(nsPrefix, value) 
		}
	}
	var i = el.length;
	while(i--){
		a = el[i];
		var prefix = a.prefix;
		if(prefix){//no prefix attribute has no namespace
			if(prefix === 'xml'){
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if(prefix !== 'xmlns'){
				a.uri = currentNSMap[prefix || '']
				
				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if(nsp>0){
		prefix = el.prefix = tagName.slice(0,nsp);
		localName = el.localName = tagName.slice(nsp+1);
	}else{
		prefix = null;//important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns,localName,tagName,el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if(el.closed){
		domBuilder.endElement(ns,localName,tagName);
		if(localNSMap){
			for(prefix in localNSMap){
				domBuilder.endPrefixMapping(prefix) 
			}
		}
	}else{
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){
	if(/^(?:script|textarea)$/i.test(tagName)){
		var elEndStart =  source.indexOf('</'+tagName+'>',elStartEnd);
		var text = source.substring(elStartEnd+1,elEndStart);
		if(/[&<]/.test(text)){
			if(/^script$/i.test(tagName)){
				//if(!/\]\]>/.test(text)){
					//lexHandler.startCDATA();
					domBuilder.characters(text,0,text.length);
					//lexHandler.endCDATA();
					return elEndStart;
				//}
			}//}else{//text area
				text = text.replace(/&#?\w+;/g,entityReplacer);
				domBuilder.characters(text,0,text.length);
				return elEndStart;
			//}
			
		}
	}
	return elStartEnd+1;
}
function fixSelfClosed(source,elStartEnd,tagName,closeMap){
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if(pos == null){
		//console.log(tagName)
		pos =  source.lastIndexOf('</'+tagName+'>')
		if(pos<elStartEnd){//忘记闭合
			pos = source.lastIndexOf('</'+tagName)
		}
		closeMap[tagName] =pos
	}
	return pos<elStartEnd;
	//} 
}
function _copy(source,target){
	for(var n in source){target[n] = source[n]}
}
function parseDCC(source,start,domBuilder,errorHandler){//sure start with '<!'
	var next= source.charAt(start+2)
	switch(next){
	case '-':
		if(source.charAt(start + 3) === '-'){
			var end = source.indexOf('-->',start+4);
			//append comment source.substring(4,end)//<!--
			if(end>start){
				domBuilder.comment(source,start+4,end-start-4);
				return end+3;
			}else{
				errorHandler.error("Unclosed comment");
				return -1;
			}
		}else{
			//error
			return -1;
		}
	default:
		if(source.substr(start+3,6) == 'CDATA['){
			var end = source.indexOf(']]>',start+9);
			domBuilder.startCDATA();
			domBuilder.characters(source,start+9,end-start-9);
			domBuilder.endCDATA() 
			return end+3;
		}
		//<!DOCTYPE
		//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
		var matchs = split(source,start);
		var len = matchs.length;
		if(len>1 && /!doctype/i.test(matchs[0][0])){
			var name = matchs[1][0];
			var pubid = len>3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
			var sysid = len>4 && matchs[4][0];
			var lastMatch = matchs[len-1]
			domBuilder.startDTD(name,pubid && pubid.replace(/^(['"])(.*?)\1$/,'$2'),
					sysid && sysid.replace(/^(['"])(.*?)\1$/,'$2'));
			domBuilder.endDTD();
			
			return lastMatch.index+lastMatch[0].length
		}
	}
	return -1;
}



function parseInstruction(source,start,domBuilder){
	var end = source.indexOf('?>',start);
	if(end){
		var match = source.substring(start,end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if(match){
			var len = match[0].length;
			domBuilder.processingInstruction(match[1], match[2]) ;
			return end+2;
		}else{//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source){
	
}
ElementAttributes.prototype = {
	setTagName:function(tagName){
		if(!tagNamePattern.test(tagName)){
			throw new Error('invalid tagName:'+tagName)
		}
		this.tagName = tagName
	},
	add:function(qName,value,offset){
		if(!tagNamePattern.test(qName)){
			throw new Error('invalid attribute:'+qName)
		}
		this[this.length++] = {qName:qName,value:value,offset:offset}
	},
	length:0,
	getLocalName:function(i){return this[i].localName},
	getLocator:function(i){return this[i].locator},
	getQName:function(i){return this[i].qName},
	getURI:function(i){return this[i].uri},
	getValue:function(i){return this[i].value}
//	,getIndex:function(uri, localName)){
//		if(localName){
//			
//		}else{
//			var qName = uri
//		}
//	},
//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
//	getType:function(uri,localName){}
//	getType:function(i){},
}




function _set_proto_(thiz,parent){
	thiz.__proto__ = parent;
	return thiz;
}
if(!(_set_proto_({},_set_proto_.prototype) instanceof _set_proto_)){
	_set_proto_ = function(thiz,parent){
		function p(){};
		p.prototype = parent;
		p = new p();
		for(parent in thiz){
			p[parent] = thiz[parent];
		}
		return p;
	}
}

function split(source,start){
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source);//skip <
	while(match = reg.exec(source)){
		buf.push(match);
		if(match[1])return buf;
	}
}

exports.XMLReader = XMLReader;


},{}],155:[function(require,module,exports){
/*global jQuery, define */
    "use strict";

    var assert = require("assert");
    var HttpHelper = require("../logicblox.core/network").HttpHelper;

    /**
     * @param {Object} _urls
     * @param {String} _workspace
     * @param {Network?} _http - optional network module. If not provided will build new one
     */
    function ConnectBlox(_urls, _workspace, _http) {
        assert(_urls && _workspace, "Invalid arguments to ConnectBlox constructor: urls and workspace are required.");

        var http = _http || new HttpHelper(),
            addBlockUrl = _urls.addBlockUrl,
            execBlockUrl = _urls.execBlockUrl, 
            listPredicatesUrl = _urls.listPredicatesUrl, 
            measureServiceUrl = _urls.measureUrl, 
            closeBranchUrl = _urls.closeBranchUrl,
            createBranchUrl = _urls.createBranchUrl,
            replaceDefaultBranchUrl = _urls.replaceDefaultBranchUrl,
            workspace = _workspace; 

        /**
         * Adds a block using connectblox addBlock command
         * 
         * @param {string} logic
         * @return {Promise<result>}
         */
        this.addBlock = function(logic) {
            var data = JSON.stringify({
                "add_block": {
                    "logic": logic
                },
                "workspace_name": workspace
            });

            return http.post(addBlockUrl, data);
        };

        /**
        * Executes a block using connectblox addBlock command
        * 
        * @param {string} logic
        * @return {Promise<result>}
        */
        this.execBlock = function(logic) {
            var data = JSON.stringify({
                "execute": {
                    "logic": logic
                },
                "workspace_name": workspace
            });

            return http.post(execBlockUrl, data);  
        };

        /**
         * Closes a named branch on the given workspace
         * @param  {String} workspace  the name of the workspace
         * @param  {String} branchName the name of the branch to close
         * @return {Promise<result>}
         */
        this.closeBranch = function(workspace, branchName) {
            var data = {
                request: { 
                    workspace: workspace,
                    branch: branchName
                }
            };

            return http.post(closeBranchUrl, data);  
        };


        /**
         * Creates a named branch on the given workspace
         * @param  {String} workspace  the name of the workspace to branch
         * @param  {String} branchName the name of the branch to create
         * @param  {String} [fromBranch] optional branch to be branched off from
         * @return {Promise<result>}
         */
        this.createBranch = function(workspace, branchName, fromBranch) {
            var data = {
                request: { 
                    workspace: workspace,
                    branch: branchName,
                    from_branch: fromBranch,
                    overwrite: true
                }
            };

            return http.post(createBranchUrl, data);  
        };

        /**
         * Replaces the default branch with another branch
         * 
         * @param  {string} workspace
         * @param  {string} branchName
         * @return {Promise}
         */
        this.replaceDefaultBranch = function(workspace, branchName) {
            var data = {
                request: { 
                    workspace: workspace,
                    older_branch: branchName
                }
            };

            return http.post(replaceDefaultBranchUrl, data);  
        };

        /**
         * Perform a query
         * 
         * @param {string} logic
         * @return {Promise<result>}
         */
        this.query = function(logic) {
            var data = JSON.stringify({
                "execute": {
                    "logic": logic,
                    "return_local": "_"
                },
                "workspace_name": workspace
            });

            return http.post(execBlockUrl, data);
        };

        this.listPredicates = function() {
            return http.post(listPredicatesUrl, JSON.stringify({ "workspace_name": that.workspace }));
        };

        /**** Measure Service ****/
        this.restartMeasure = function() {
            return this.execBlock('^measure:admin:allowed[] = "enabled".').then(function() {
                return http.post(measureServiceUrl, {
                    "admin_request": {
                        "kind": "RESTART"
                    }
                });
            });
        };
    }
    
    exports.ConnectBlox = ConnectBlox;

},{"../logicblox.core/network":156,"assert":undefined}],156:[function(require,module,exports){
/* global Promise */
    "use strict";

    /**
     * @typedef {HttpResponse}
     *
     * @property {Object} error      a javascript error that cause the HTTP request to
     *                               end prematurely
     * @property {Object} response   the http response object that has the status code
     *                               and other information about the req / response
     * @property {Object|String} body - the body of the response, typically a JSON object
     */

    var assert = require("assert");
    var request = require("superagent");
    var querystring = require("querystring");

    var EventEmitter = require("../logicblox.pivot/event_emitter").EventEmitter;
    var lodash = require("lodash");

    /**
     * The HttpHelper is a stateful object used for performing http calls in the
     * modeler. It handles things such as checking for authentication and checking
     * for errors in one central location. 
     *
     * When used from NodeJS it can also be instructed to store cookies such
     * that you can hit authenticated services from within NodeJS. This feature
     * is not supported in the browser as the browser handles that for you.
     */
    function HttpHelper() {
        this.request = request;

        //Running in Node, need to initialize the agent to manage the cookies.
        if (typeof window === "undefined") {
            this.agent = request.agent();
        }
    }
    lodash.mixin(HttpHelper.prototype, EventEmitter.prototype);

    /**
     * Sends a request to the server and return a promise.
     * 
     * @param  {String} url     the url to hit
     * @param  {String} method  the HTTP method ("POST", "GET", etc.)
     * @param  {Object} options          additional options to add to the request
     * @param  {Object} options.headers  the additional http headers to add to the request
     * @param  {Object|String} data      the data to send in the request if it is a POST or PUT
     * @param  {Object} params           the parameter to pass in the query string if this is a GET
     * @return {Promise<Object|HttpResponse>} returns just the body of the response if successful and
     *                                        the full HttpResponse if there is an error
     */
    HttpHelper.prototype.$send = function(url, method, options, data, params) {
        var me = this,
            req,
            promise,
            isJson = true,
            headers = options && options.headers;

        if (!lodash.isEmpty(headers)) {
            // we check for these headers and remove them if necessary b/c if they
            // are set as well as setting json to true, then you will end up with
            // a header like this: 'Content-Type: application/json, application/json'
            // which lb-web does not properly parse
            if (headers.hasOwnProperty("Content-Type") && headers["Content-Type"] !== "application/json") {
                isJson = false;
            } else {
                delete options.headers["Content-Type"];
            }

            if (headers.hasOwnProperty("Accept") && headers.Accept !== "application/json") {
                isJson = false;
            } else {
                delete options.headers.Accept;
            }
        }
        
        if (isJson && lodash.isString(data)) {
            // this is required b/c the request module expects to receive a JSON
            // object. However, legacy action configurations configured there messages
            // as escaped JSON strings so we convert them to proper JSON here for
            // backwards compatibility
            data = JSON.parse(data);
        }

        if (method === "GET" && params) {
            url = url + "?" + querystring.stringify(params);
        }

        promise = new Promise(function(resolve, reject) {
            req = me.request(method, url);

            isJson && req.set("Accept", "application/json");

            if (!lodash.isEmpty(headers)) {
                for (var property in headers) {
                    if (headers.hasOwnProperty(property)) {
                        req.set(property, headers[property]);
                    }
                }
            }

            data && req.send(data);
            me.agent && me.agent._attachCookies(req);
            req.end(exports.$mkHandleResponse(url, method, resolve, reject, me.agent));

            me._emit("REQUEST_SENT", { url: url, method: method, data: data });
        });

        // Invalid requests will not create request objects and will instead
        // throw errors. This is used by the commands API but is generally useful
        // if we ever need some way to abort long running transactions.
        if (req && req.abort)
            promise.abort = req.abort.bind(req);

        return promise;
    };

    exports.$mkHandleResponse = function(url, method, resolve, reject, agent) {
        return function(error, response) {
            agent && agent._saveCookies(response);
            function buildNetworkError(response) {
                var e,
                    message,
                    body = response && (response.body || response.text),
                    errorObj = {
                        statusCode: response.statusCode,
                        statusMessage: response.statusMessage,
                        url: response.url,
                        method: response.method,
                        responseText: response.responseText,
                        body: body && JSON.stringify(body)
                    };

                message = "NetworkError url: " + url + ", method: " + method;
                lodash.map(errorObj, function(value, key) {
                    if (value) {
                        message += ", " + key + ": " + value;
                    }
                });
                
                e = new Error(message);
                e.response = response;
                e.body = body;

                return e;
            }

            var body = response && (response.body || response.text);

            // error in this case is typically a parse error or some other kind
            // of javascript error
            if (error) {
                // In the case of a 404, the error will be a SyntaxError from
                // the JSON.parse() call on the response. That is not what we want
                // to log. If there is a response, we want to log the response.
                if (response) {
                    reject(buildNetworkError(response));
                    return;
                }

                reject(error);
                return;
            }

            if (response.statusCode === 0 || response.statusCode >= 400) {
                reject(buildNetworkError(response));
                return;
            }

            // Some services will return a 200 OK with an error_code when
            // they have errors. We reject the promise but still return as
            // much info as possible to the caller.
            if (body && (body.hasOwnProperty("error_code") ||
                         (body.hasOwnProperty("problem") && body.problem.filter(function (problem) { return problem.severity === "ERROR"; }).length > 0))) {
                reject(buildNetworkError(response));
                return;
            }

            resolve(body);
        };
    };

    /**
     * Performs an HTTP POST to the given URL with the given data. Defaults
     * to sending JSON. This can be changed by changing the Content-Type of
     * the headers.
     *  
     * @param  {String} url     
     * @param  {String|Object} data    - a json object
     * @param  {Object} [headers] - additional HTTP headers to apply to the request
     * @return {Promise}
     */
    HttpHelper.prototype.post = function(url, data, headers) {
        assert(url, "Must specify a url to post.");
        assert(data, "Must specify data to post.");

        var promise;
        
        headers = headers || {};
        
        promise = this.$send(url, "POST", { headers: headers }, data);
        promise.catch(this.handleAuthError.bind(this));

        return promise;
    };
    
    /**
     * Performs an HTTP PUT to the given URL with the given data. Defaults
     * to sending JSON. This can be changed by changing the Content-Type of
     * the headers.
     *  
     * @param  {String} url     
     * @param  {String|Object} data    - a json object
     * @param  {Object} [headers] - additional HTTP headers to apply to the request
     * @return {Promise}
     */
    HttpHelper.prototype.put = function(url, data, headers) {
        assert(url, "Must specify a url to put.");
        assert(data, "Must specify data to put.");

        var promise;
        
        headers = headers || {};
        
        promise = this.$send(url, "PUT", { headers: headers }, data);
        promise.catch(this.handleAuthError.bind(this));

        return promise;
    };

    /**
     * Performs an HTTP GET to the given URL with the given data. 
     *  
     * @param  {String} url     
     * @param  {Object} [headers] - additional HTTP headers to apply to the request
     * @param  {Object} [params] - optional parameters to pass in the query string
     * @return {Promise<HttpResponse>}
     */
    HttpHelper.prototype.get = function(url, headers, params) {
        assert(url, "Must specify a url to get.");

        var promise;

        headers = headers || {};

        promise = this.$send(url, "GET", { headers: headers }, null, params);
        promise.catch(this.handleAuthError.bind(this));

        return promise;
    };

    /**
     * Given a response object, it will call the appropriate callback if 
     * there was an authentication or authorization failure.
     * 
     * @param  {HttpResponse} result 
     */
    HttpHelper.prototype.handleAuthError = function(result) {
        if (result.response && result.response.statusCode > 400) {
            if (result.response.statusCode === 401) {
                this._emit("AUTHENTICATION_FAILURE", result);
            }
            if (result.response.statusCode === 403) {
                this._emit("AUTHORIZATION_FAILURE", result);
            }
        }
    };

    /**
     * Submits a request to the login service.
     *
     * @param  {String} loginUrl the url of the login service
     * @param  {String} username the username to login with
     * @param  {String} password the password to login with
     * @param  {String} realm    the realm to login to
     * @return {Promise}         resolved with login response message
     */
    HttpHelper.prototype.login = function(loginUrl, username, password, realm) {
        return this.post(loginUrl, {
            username: username,
            password: password,
            realm: realm
        });
    };

    /**
     * Submits a request to logout the given user
     *
     * @param  {String} loginUrl the url of the login service
     * @param  {String} username the username to login with
     * @param  {String} realm    the realm to login to
     * 
     * @return {Promise}         resolved with the logout response message
     */
    HttpHelper.prototype.logout = function(loginUrl, username, realm) {
        return this.post(loginUrl, {
            username: username,
            realm: realm,
            logout: true
        });
    };
    
    /**
     * Submits a request to retrieve the current user
     *
     * @param {String} serviceUrl the url of the current_user service
     *
     * @return {Promise}  resolved with the current username 
     */
    HttpHelper.prototype.getCurrentUser = function(serviceUrl) {
        return this.post(serviceUrl, {}).then(function(resp) {
            return resp.username;
        });
    };

    exports.HttpHelper = HttpHelper;

},{"../logicblox.pivot/event_emitter":224,"assert":undefined,"lodash":90,"querystring":undefined,"superagent":135}],157:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");
    var EventEmitter = require("../logicblox.pivot/event_emitter").EventEmitter;

    function noop(param) {
        return param;
    }

    /**
     * Takes a modeler url and converts it into a URL that works with the 
     * surrounding applications routing. 
     * 
     * @callback toUrlFn
     *
     * @param  {String} modelerUrl a modeler relative URL
     * @return {String}            the full URL for the application
     */

    /**
     * Takes an application's URL and converts it into a relative modeler URL.
     * This function should always just reverse the results from toUrl.
     *
     * @callback fromUrlFn
     * 
     * @param  {String} appUrl a full URL from the application
     * @return {String}        a modeler relative URL
     */

    /**
     * A simple module to make the Modeler work together with other framework's
     * routing system. The basic principle is that the modeler has it's own urls,
     * for navigating to different views of the modeler, such as "/canvas/core-metrics".
     * Since the modeler will very often be embedded in a larger application, we
     * can't rely on having full control of the applications routing. Therefore, we
     * ask the calling application to provide functions for turning our URLs
     * into URLs that work with their routing. 
     *
     * For example, if we embed the modeler inside a planning application, the
     * planning application might want to show the modeler when the user navigates
     * to /planning/MyCustomer/modeler. Since the modeler itself can have many canvases,
     * we would want to create URLs for navigating the canvases like this: 
     * /planning/MyCustomer/modeler/canvas/core-metrics. So, the planning application
     * could pass us a toUrl function that looks like this:
     *
     * function toUrl(modelerUrl) {
     *     var customer = MyApp.currentCustomer();
     *     return "/planning/" + customer.name + modelerUrl;
     * }
     * 
     * @param {toUrlFn} toUrl     a function that will take a relative modeler URL and return
     *                            a URL that is compatible with the surrounding application. Defaults
     *                            to a noop function.
     * @param {fromUrlFn} fromUrl a function that will take an applications full URL and return
     *                            the modeler's relative URL. Defaults to a noop function.
     */
    function Router(toUrl, fromUrl) {
        this.$toUrl = toUrl || noop;
        this.$fromUrl = fromUrl || noop;
        this.$listeners = {
            hashchange: this.$onUrlChange.bind(this)
        };

        this.$addHashListener();
    }
    lodash.mixin(Router.prototype, EventEmitter.prototype);

    /**
     * Takes a modeler url and converts it into a URL that works with the 
     * surrounding applications routing. 
     * 
     * @param  {String} modelerUrl a modeler relative URL
     * @return {String}            the full URL for the application
     */
    Router.prototype.toUrl = function(modelerUrl) {
        return this.$toUrl(modelerUrl);
    };

    /**
     * Takes an application's URL and converts it into a relative modeler URL.
     * This function should always just reverse the results from toUrl.
     * 
     * @param  {String} appUrl a full URL from the application
     * @return {String}        a modeler relative URL
     */
    Router.prototype.fromUrl = function(appUrl) {
        return this.$fromUrl(appUrl);
    };

    /**
     * The event handler for window hash changes. Converts the URL from
     * the window using Router#fromUrl and then emits a "hashchange" event on
     * this object.
     *
     * @event hashchange - when the window's hash changes
     */
    Router.prototype.$onUrlChange = function() {
        this._emit("hashchange", {
            url: this.fromUrl(location.hash.replace(/^#/, "")),
            location: location
        });
    };

    Router.prototype.$addHashListener = function() {
        window.addEventListener("hashchange", this.$listeners.hashchange);
    };

    Router.prototype.$removeHashListener = function() {
        window.removeEventListener("hashchange", this.$listeners.hashchange);
    };
    
    exports.Router = Router;

},{"../logicblox.pivot/event_emitter":224,"lodash":90}],158:[function(require,module,exports){
/* globals Promise */
"use strict";

    var inherits = require("inherits");
    var ActionActions = require("../constant").ACTIONS.ActionActions;
    var ServiceCaller = require("../util/servicecaller");
    var ActionsDAO = require("../dao/actionsdao");
    var ActionHandler = require("./actionhandler");
    var lodash = require("lodash");
    var assert = require("assert");

    inherits(ActionActionHandler, ActionHandler);
    /**
    * @param {Object}  dependencies
    *                  dependencies.logActionHandler
    *                  dependencies.actionStore
    *                  dependencies.pivotDataActionHandler
    **/
    function ActionActionHandler(dispatcher, driver, getServiceUrl, getActionMessage, afterAction, dependencies) {
        ActionHandler.call(this, dispatcher);

        this.$serviceCaller = new ServiceCaller(driver);
        this.$actionsDAO = new ActionsDAO(driver);
        this.$actionStore = dependencies.actionStore;
        this.$logActionHandler = dependencies.logActionHandler;
        this.$pivotDataActionHandler = dependencies.pivotDataActionHandler;
        this.$afterAction = afterAction;

        if (getServiceUrl) {
            this.$getServiceUrl = getServiceUrl;
        }
        else {
            throw new Error("ActionHandler does not have a service url");
        }

        if (getActionMessage) {
            this.$getActionMessage = getActionMessage;
        }
    }
    
    ActionActionHandler.prototype.destroy = function() {
        this.$serviceCaller = null;
        this.$actionsDAO = null;
        this.$actionStore = null;
        this.$logActionHandler = null;
        this.$pivotDataActionHandler = null;
        this.$afterAction = null;
        this.$getServiceUrl = null;
        this.$getActionMessage = null;
    };

    /**
     * @param {string|Object} actionOrActionId
     * @return {Promise} promise containing the action
     */
    ActionActionHandler.prototype.$getAction = function(actionOrActionId) {
        var action,
            $me = this;
        if (lodash.isString(actionOrActionId)) {
            var actionId = actionOrActionId;
            action = this.$actionStore.getAction(actionId);
            if (action) {
                return Promise.resolve(action);
            }
            else {
                return this.loadActions().then(function() {
                    return $me.$actionStore.getAction(actionId);
                });
            }
        }
        else {
            action = actionOrActionId;
            return Promise.resolve(action);    
        }
    };

    /**
     * @param {string|Action} actionOrActionId - the id of the action or the actual action object
     * @return {Promise}
     */
    ActionActionHandler.prototype.callAction = function(actionOrActionId) {
        var me = this,
            afterAction = this.$afterAction,
            getServiceUrl = this.$getServiceUrl,
            response;

        var promise = this.$getAction(actionOrActionId).
            then(function(actionConfig) {
                assert(!lodash.isUndefined(actionConfig), "Action with id: " + actionOrActionId + " could not be found.");

                var actionId = actionConfig.id,
                    originalUrl = actionConfig.links && actionConfig.links.execute,
                    actionUrl = originalUrl && getServiceUrl(originalUrl),
                    actionMessage = me.$getActionMessage(actionConfig.message || {}, originalUrl);

                assert(actionUrl, "Action " + actionId + " does not have an execution url");

                return me.execute({
                    fn: function() {
                        var actionPromise = me.$serviceCaller.callService(actionUrl, { message: actionMessage });

                        actionPromise.then(function(resp) {
                            response = resp;
                            if (afterAction) {
                                afterAction(actionConfig, resp, getServiceUrl);
                            }
                        }).catch(function(err) {
                            console.error("Error running function after action ", actionId);
                            console.error(err.stack);
                        });
                        return actionPromise;
                    },
                    startAction: { actionType: ActionActions.START_ACTION, actionId: actionId },
                    successAction: { actionType: ActionActions.SUCCEED_ACTION, actionId: actionId },
                    failAction: { actionType: ActionActions.FAIL_ACTION, actionId: actionId }
                }).then(me.loadActions.bind(me)).then(function() {
                    return response;
                });
            });

        promise.catch(me.$logError.bind(me));

        return promise;
    };
    
    ActionActionHandler.prototype.$logError = function(obj) {
        this.$logActionHandler.error({message: typeof obj === "string" ? obj : JSON.stringify(obj)});
    };

    /**
     * Marks that action has started.
     * @param   {String}    actionId - id of the action.
     * @returns {Promise}
     * */
    ActionActionHandler.prototype.markActionStarted = function(actionId) {
        return this.dispatchPayload({ actionType: ActionActions.START_ACTION, actionId: actionId });
    };

    /**
     * Marks that action has completed successfully.
     * @param   {String}    actionId - id of the action.
     * @returns {Promise}
     * */
    ActionActionHandler.prototype.markActionSucceeded = function(actionId, sendQuery) {
        return this.dispatchPayload({ actionType: ActionActions.SUCCEED_ACTION, actionId: actionId, sendQuery: sendQuery });
    };

    /**
     * Marks that action has failed during execution.
     * @param   {String}    actionId - id of the action.
     * @returns {Promise}
     * */
    ActionActionHandler.prototype.markActionFailed = function(actionId) {
        return this.dispatchPayload({ actionType: ActionActions.FAIL_ACTION, actionId: actionId });
    };

    ActionActionHandler.prototype.loadActions = function() {
        var me = this,
            actionsDAO = this.$actionsDAO;

        return me.execute({
            fn: actionsDAO.getActions(),
            successAction: {
                actionType: ActionActions.LOAD_ACTIONS
            },
            successCallback: function(actionConfigList) {
                var actionConfigs = {};

                actionConfigList.forEach(function(action) {
                    actionConfigs[action.id] = action;
                });

                return {
                    actionConfigs: actionConfigs
                };
            }
        });
    };
    
    /**
     * Clears the status from the previous execution of the given actionId.
     * @param  {String} actionId the action id's status to clear
     * @returns {Promise} when the status has been cleared
     */
    ActionActionHandler.prototype.clearStatus = function(actionId) {
        return this.dispatchPayload({
            actionType: ActionActions.CLEAR_STATUS,
            actionId: actionId
        });
    };

    /**
     * is indentity by default, 
     * can be overridden by getServiceUrl from the modeler config
     */
    ActionActionHandler.prototype.$getServiceUrl = lodash.identity;

    module.exports = ActionActionHandler;

},{"../constant":191,"../dao/actionsdao":212,"../util/servicecaller":284,"./actionhandler":159,"assert":undefined,"inherits":45,"lodash":90}],159:[function(require,module,exports){
    "use strict";
    
    var PromiseBuilder = require("../promisebuilder");
    var lodash = require("lodash");

    /**
     * A base ActionHandler for action handlers
     * 
     * @param {Dispatcher} dispatcher
     */
    function ActionHandler(dispatcher) {
        this.$dispatcher = dispatcher;
    }
    
    /**
     * Dispatches a payload using the dispatcher.
     * 
     * IMPORTANT: dispatching payloads should chain the action because
     * actions rely on the dispatched action promise to get whatever was dispatched
     * to the store.
     * 
     * A seemingly possible alternative is to have the action promise resolve the
     * object that was set in the store. This isn't enough, however, since the store
     * could do more processing on that object.
     */
    ActionHandler.prototype.dispatchPayload = function(payload) {
        return PromiseBuilder.do(this.$dispatcher.handleViewAction(payload)).build();
    };

    /**
     * Implements the pattern of notifying of an action beginning prior to firing a function,
     * firing a promise upon that notification, and then properly notifying success or failure
     * of the underlying function.
     * 
     * @param {object} args
     * @prop {function|Promise|PromiseBuilder} args.fn
     * @prop {object} args.startAction
     * @prop {object} args.successAction
     * @prop {function} args.successCallback
     * @prop {object} args.failAction
     * @prop {boolean} args.logError
     * @return {Promise}
     */
    ActionHandler.prototype.execute = function(args) {
        var me = this,
            fn = args.fn || function() {},
            startAction = args.startAction,
            successAction = args.successAction,
            successCallback = args.successCallback,
            failAction = args.failAction,
            logError = args.logError;
        
        var startFn = function() {
            if (startAction) {
                me.dispatchPayload(startAction);
            }
        };
        
        var successFn = function(data) {
            if (successCallback) {
                data = successCallback(data);
            }

            if (successAction) {
                lodash.extend(successAction, data);
                me.dispatchPayload(successAction);
            }
        };
        
        var failFn = function(err) {
            if (failAction) {
                lodash.extend(failAction, {error: err});
                me.dispatchPayload(failAction);
            }
        };

        return PromiseBuilder.do(startFn, logError)
            .thenDo(fn, logError)
            .onSuccess(successFn)
            .onFailure(failFn)
            .build();
    };
   
    module.exports = ActionHandler;

},{"../promisebuilder":256,"lodash":90}],160:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var inherits = require("inherits");

var ActionHandler = require("./actionhandler");
var CollaborationDAO = require("../dao/collaborationdao");
var CollaborationActions = require("../constant").Collaboration.ACTIONS;
var ActionsStates = require("../constant").ACTIONS.STATES;
var UserActivity = require("../constant").UserActivity;
var USER_ACTIVITY_STATUS_VALUES = UserActivity.USER_ACTIVITY_STATUS;
var USER_ACTIVITY_STATUS = UserActivity.LOCAL_STORAGE_PROPERTY;


inherits(CollaborationActionHandler, ActionHandler);

function CollaborationActionHandler(dispatcher, webSocketDriver, driver, dependencies) {
    var me = this,
        minInterval = dependencies.modelerOptionStore.getMinUpdateInterval(),
        maxInterval = dependencies.modelerOptionStore.getMaxUpdateInterval();

    //set random throttle interval based on config
    this.$updateInterval = (Math.random() * (maxInterval - minInterval) + minInterval) * 1000;
    this.$multiAxisDataActionHandler = dependencies.multiAxisDataActionHandler;
    this.$actionsActionHandler = dependencies.actionsActionHandler;
    this.$notificationsActionHandler = dependencies.notificationsActionHandler;
    this.$userStore = dependencies.userStore;
    
    this.updateDataWithDelay = lodash.throttle(function() {
        var userActivityStatus = localStorage.getItem(USER_ACTIVITY_STATUS);

        if(userActivityStatus === USER_ACTIVITY_STATUS_VALUES.ACTIVE) {
            return me.$multiAxisDataActionHandler.markAllDataDirty();
        }
    }, this.$updateInterval, { leading: false, trailing: true });

    this.loadActionsWithDelay = lodash.throttle(function() {
        return me.$actionsActionHandler.loadActions();
    }, this.$updateInterval, { leading: false, trailing: true });

    this.$dispatcher = dispatcher;
    this.$webSocketDriver = webSocketDriver;
    
    this.$collaborationDAO = new CollaborationDAO(webSocketDriver, driver, {
        onOpenConnection: this.receiveOpenConnection.bind(this),
        onCloseConnection: this.receiveCloseConnection.bind(this),
        onFullUserList: this.receiveFullUserList.bind(this),
        onPeerOpenConnection: this.receivePeerOpenConnection.bind(this),
        onPeerCloseConnection: this.receivePeerCloseConnection.bind(this),
        onDataUpdated: this.updateDataWithDelay.bind(this),
        onActionStateChanged: this.changeActionState.bind(this)
    });
}

/**
 * A message to be sent via websocket.
 * @typedef     {Object}    WebsocketMessage
 * @property    {string}    msg - message body
 *
 * Sends message via websocket if the websocket driver is defined.
 * @param   {WebsocketMessage}    message object representing the message to be sent via websocket
 * */
CollaborationActionHandler.prototype.$sendMessageViaWebsocket = function(message) {
    if (!lodash.isUndefined(this.$webSocketDriver) && this.$webSocketDriver.isConnected()) {
        this.$webSocketDriver.getWebSocket().send(JSON.stringify(message));
    }
};

/**
 * Sends a message via websocket that other users made some data edits.
 * */
CollaborationActionHandler.prototype.broadcastEditsWereMade = function() {
    var message = {
        msg: {
            messageType: CollaborationActions.BROADCAST_EDITS_WERE_MADE
        }
    };

    this.$sendMessageViaWebsocket(message);
};

/**
 * Change action state and notify the user about the changes.
 *
 * @param   {Object}    message - contains information about the action and the user
 * @returns {Promise}
 */
CollaborationActionHandler.prototype.changeActionState = function(message) {
    var actionState = message.msg.actionState,
        actionId = message.msg.actionId,
        actionLabel = message.msg.actionLabel,
        user = message.username,
        userActivityStatus = localStorage.getItem(USER_ACTIVITY_STATUS),
        me = this,
        sendQuery = userActivityStatus === USER_ACTIVITY_STATUS_VALUES.ACTIVE;

    switch (actionState) {
        case ActionsStates.STARTED:
            //Mark that action has started and notify users about it.
            return Promise.all([this.$actionsActionHandler.markActionStarted(actionId),
                this.$notificationsActionHandler.info("User '" + user +  "' has called an action '" + actionLabel + "'.")]);
        case ActionsStates.SUCCEEDED:
            //Mark that action has run successfully and reload all actions to reflect their updated states.
            me.updateDataWithDelay();
            me.loadActionsWithDelay();
            return new Promise(function(resolve) {
                lodash.delay(function () {
                    me.$actionsActionHandler.markActionSucceeded(actionId, sendQuery).then(resolve);
                }, me.$updateInterval);
            });
        case ActionsStates.FAILED:
            //Mark that action has failed. Users will automatically receive the notification about the error.
            return this.$actionsActionHandler.markActionFailed(actionId);
        default:
            return Promise.resolve();
    }
};

/**
 * Sends a message via websocket that the action has changed its state.
 * @param {String} actionId - the id of the action
 * @param {String} actionLabel - the label of the action
 * @param {String} actionState - the state of the action
 */
CollaborationActionHandler.prototype.broadcastActionChangedState = function(actionId, actionLabel, actionState) {
    var websocketMessage = {
        msg: {
            messageType: CollaborationActions.BROADCAST_ACTION_CHANGED_STATE,
            actionId: actionId,
            actionLabel: actionLabel,
            actionState: actionState
        }
    };

    this.$sendMessageViaWebsocket(websocketMessage);
};

/**
 * Updates the current user status to connected
 */
CollaborationActionHandler.prototype.receiveOpenConnection = function() {
    return this.$dispatcher.handleViewAction({
        actionType: CollaborationActions.UPDATE_CURRENT_SOCKET,
        isConnection: true
    });
};

/**
 * Updates the current user status to disconnected
 */
CollaborationActionHandler.prototype.receiveCloseConnection = function() {
    return this.$dispatcher.handleViewAction({
        actionType: CollaborationActions.UPDATE_CURRENT_SOCKET,
        isConnection: false
    });
};

/**
 * Updates the whole user list (usually happens on connection)
 * @param     {Object} message          Parsed message from the message recieved from the websocket
 * @property  {Array}  message.sockets  List of {socket, username} couples for all available connected sockets
 *
 */
CollaborationActionHandler.prototype.receiveFullUserList = function(message) {
    return this.$dispatcher.handleViewAction({
        actionType: CollaborationActions.UPDATE_SOCKET_LIST,
        sockets: message.peers,
        usersInfo: lodash.uniq(lodash.map(message.peers, 'username')),
        currentUser: this.$userStore.getCurrentUserName()
    });
};

/**
 * Update a single user status
 * @param     {Object}   message             Parsed message: {id, username} couple
 * @property  {String}   message.id          Socket id
 * @property  {String}   message.username    Socket username
 */
CollaborationActionHandler.prototype.receivePeerOpenConnection = function(message) {
    return this.$dispatcher.handleViewAction({
        actionType: CollaborationActions.UPDATE_USER_STATUS,
        socket: message.id,
        user: message.username,
        isConnection: true
    });
};


/**
 * Update a single user status
 * @param     {Object}   message             Parsed message: {id, username} couple
 * @property  {String}   message.id          Socket id
 * @property  {String}   message.username    Socket username
 */
CollaborationActionHandler.prototype.receivePeerCloseConnection = function(message) {
    return this.$dispatcher.handleViewAction({
        actionType: CollaborationActions.UPDATE_USER_STATUS,
        socket: message.id,
        user: message.username,
        isConnection: false
    });
};

module.exports = CollaborationActionHandler;

},{"../constant":191,"../dao/collaborationdao":213,"./actionhandler":159,"inherits":45,"lodash":90}],161:[function(require,module,exports){
    "use strict";

    var inherits = require("inherits");
    var ActionHandler = require("./actionhandler");
    var ACTIONS = require("../constant").DND.ACTIONS;

    inherits(DragAndDropActionHandler, ActionHandler);
    
    function DragAndDropActionHandler(dispatcher) {
        ActionHandler.call(this, dispatcher);
        return this;
    }
    
    /**
     * Start data drag
     * 
     * @param {*} dragData - The data that is being dragged
     * @return {Promise}
     */
    DragAndDropActionHandler.prototype.startDrag = function(type, dragData) {
        return this.dispatchPayload({
            actionType: ACTIONS.DRAG,
            type: type,
            dragData: dragData
        });  
    };

    DragAndDropActionHandler.prototype.stopDrag = function() {
        return this.dispatchPayload({ 
            actionType: ACTIONS.DRAGEND 
        });
    };
    
    /**
     * Indicates that the drag is being dragged over something.
     * 
     * @param {*} dragOverData - The data that is being dragged over
     * @return {Promise}
     */
    DragAndDropActionHandler.prototype.dragOver = function(type, dragOverData) {
        return this.dispatchPayload({
            actionType: ACTIONS.DRAGOVER,
            type: type,
            dragOverData: dragOverData
        });  
    };

    DragAndDropActionHandler.prototype.drop = function(type, dropData) {
        return this.dispatchPayload({
            actionType: ACTIONS.DROP,
            type: type,
            dropData: dropData
        });  
    };
    
    module.exports = DragAndDropActionHandler; 

},{"../constant":191,"./actionhandler":159,"inherits":45}],162:[function(require,module,exports){
    "use strict";
    
    var LogActions = require("../store/logstore").LogActions;

    function LogActionHandler(dispatcher) {
        this.$dispatcher = dispatcher;
    }

    /**
     * Post an error to the LogStore
     * 
     * @param {object} error
     * @param {String} error.message - the message to be logged
     */
    LogActionHandler.prototype.error = function(error) {
        return this.$dispatcher.handleViewAction({
            actionType: LogActions.POST_ERROR,
            error: error
        });
    };

    /**
     * Post a warning to the LogStore
     * 
     * @param {object} config - the warning details
     * @param {DOM} placeholder - placeholder for where the notification will be displayed
     */
    LogActionHandler.prototype.warn = function(warningEvent, message, errorObject) {
        return this.$dispatcher.handleViewAction({
            actionType: LogActions.POST_WARN,
            warningEvent: warningEvent,
            message: message,
            errorObject: errorObject
        });
    };
    
    // other future actions will be `log`, `warn`, the other standard logging methods
    
    module.exports = LogActionHandler;

},{"../store/logstore":265}],163:[function(require,module,exports){
    "use strict";

    var MeasureLanguageActions = require("../store/measurelanguagestore").Actions;    
    var MeasureLanguageDAO = require("../dao/measurelanguagedao").MeasureLanguageDAO;
    
    var measurelanguage = require("../measurelanguage");

    function MeasureLanguageActionHandler(dispatcher, driver, measureLanguageStore) {
        this.dispatcher = dispatcher;
        this.$measureLanguageDAO = new MeasureLanguageDAO(driver);
        this.$measureLanguageStore = measureLanguageStore;
    }

    /**
     * Loads rules from data base and pushes them to store.
     */
    MeasureLanguageActionHandler.prototype.loadRules = function() {
        var me = this;

        return me.$measureLanguageDAO.fetchRules().then(function(rules) {
            return me.dispatcher.handleViewAction({
                actionType: MeasureLanguageActions.LOAD_RULES,
                rules: rules
            });            
        });
    };

    /**
     * Installs a measure language rule composed of a primary
     * formula an an array of inverse formulas.
     *
     * See the semantics of installing rules in MeasureLangaugeDAO.
     * 
     * @param  {String} editorId        
     * @param  {String} primaryFormula
     * @param  {Array<String>} inverseFormulas
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.installMeasureRule = function(editorId, primaryFormula, inverseFormulas) {
        var measureLanguageDAO = this.$measureLanguageDAO,
            dispatcher = this.dispatcher,
            loadRules = this.loadRules.bind(this),
            clearAllEdits = this.clearAllEdits.bind(this, editorId),
            rule = measurelanguage.RuleBuilder.newBuilder()
                .setPrimaryFormula(primaryFormula)
                .setInverseFormulas(inverseFormulas),
            ruleId = rule.getRuleId();

        return this.setRuleId(editorId, ruleId)
            .then(measureLanguageDAO.installRules.bind(measureLanguageDAO, rule.build()))
            .then(
                function onSuccess() {
                    return loadRules()
                        .then(clearAllEdits);
                },
                function onError(err) {
                    dispatcher.handleViewAction({
                        actionType: MeasureLanguageActions.RULE_INSTALL_ERROR,
                        ruleEditorId: editorId,
                        message: err.message
                    });
                    throw err;
                });        
    };

    /**
     * Add rule editor to the store to edit a particular rule.
     * @param {String} editorId
     * @param {String?} ruleId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.addRuleEditor = function(ruleEditorId, ruleId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.ADD_RULE_EDITOR,
            ruleEditorId: ruleEditorId,
            ruleId: ruleId
        });
    };

    /**
     * @param  {string} ruleEditorId
     * @param  {string} inverseEditorId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.enterEditMode = function(ruleEditorId, inverseEditorId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.ENTER_EDIT_MODE,
            ruleEditorId: ruleEditorId,
            inverseEditorId: inverseEditorId
        });
    };

    /**
     * @param {string} ruleEditorId
     * @param {string} ruleId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.setRuleId = function(ruleEditorId, ruleId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.SET_RULE_ID,
            ruleEditorId: ruleEditorId,
            ruleId: ruleId
        });
    };

    /**
     * @param {string} ruleEditorId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.clearAllEdits = function(ruleEditorId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.CLEAR_ALL_EDITS,
            ruleEditorId: ruleEditorId
        });
    };

    /**
     * @param {string} ruleEditorId
     * @param {string} inverseEditorId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.clearInverseFormulaEdits = function(ruleEditorId, inverseEditorId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.CLEAR_INVERSE_FORMULA_EDITS,
            ruleEditorId: ruleEditorId,
            inverseEditorId: inverseEditorId
        });
    };

    /**
     * @param {string} ruleEditorId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.addInverseEditor = function(ruleEditorId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.ADD_INVERSE_EDITOR,
            ruleEditorId: ruleEditorId
        });
    };

    /**
     * @param {string} ruleEditorId
     * @param {string} inverseEditorId
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.removeInverseEditor = function(ruleEditorId, inverseEditorId) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.REMOVE_INVERSE_EDITOR,
            ruleEditorId: ruleEditorId,
            editorId: inverseEditorId
        });
    };

    /**
     * @param  {string} ruleEditorId
     * @param  {string} value
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.editPrimaryFormula = function(ruleEditorId, value) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.EDIT_PRIMARY_FORMULA,
            ruleEditorId: ruleEditorId,
            value: value
        });
    };

    /**
     * @param  {string} ruleEditorId
     * @param  {string} inverseEditorId
     * @param  {string} value
     * @return {Promise}
     */
    MeasureLanguageActionHandler.prototype.editInverseFormula = function(ruleEditorId, inverseEditorId, value) {
        var dispatcher = this.dispatcher;
        return dispatcher.handleViewAction({
            actionType: MeasureLanguageActions.EDIT_INVERSE_FORMULA,
            ruleEditorId: ruleEditorId,
            inverseEditorId: inverseEditorId,
            value: value
        });
    };

    module.exports = MeasureLanguageActionHandler;

},{"../dao/measurelanguagedao":215,"../measurelanguage":235,"../store/measurelanguagestore":266}],164:[function(require,module,exports){
"use strict";

    var util = require("../util");
    var lodash = require("lodash");
    var ActionHandler = require("./actionhandler");
    var inherits = require("inherits");
    var PromiseBuilder = require("../promisebuilder");
    var PromiseCache = require("../util/promisecache");

    var MeasureServiceMetaModel = require("../measureservice-metamodel").MeasureServiceMetaModel;
    var MeasureModelActions = require("../store/measuremodelstore").MeasureModelActions;
    var MeasureModelDAO = require("../dao/measuremodeldao").MeasureModelDAO;

    inherits(MeasureModelActionHandler, ActionHandler);

    function MeasureModelActionHandler(dispatcher, driver, measureModelStore) {
        ActionHandler.call(this, dispatcher);
        
        this.$measureServiceMetaModelDAO = new MeasureServiceMetaModel(driver.connectblox);
        this.$measureModelDAO = new MeasureModelDAO(driver);
        this.$connectblox = driver.connectblox;
        this.$measureModelStore = measureModelStore;
        this.$promiseCache = new PromiseCache();
    }
    
    MeasureModelActionHandler.prototype.destroy = function() {
        this.$measureServiceMetaModelDAO = null;
        this.$measureModelDAO = null;
        this.$connectblox = null;
        this.$measureModelStore = null;
        this.$promiseCache = null;
    };
    
    MeasureModelActionHandler.prototype.$dispatchModel = function(model, renaming) {
        return this.dispatchPayload({
            actionType: MeasureModelActions.SET_MODEL,
            model: model,
            renaming: renaming
        });
    };
    
    MeasureModelActionHandler.prototype.$fetchModel = function() {
        var me = this;
        return me.$promiseCache.concurrentPromise(
            "measure-model",
            function() {
                return me.$measureModelDAO.fetchModel();
            });
    };
    
    /**
     * Should only be used for testing
     *
     * @private
     */
    MeasureModelActionHandler.prototype.$setModel = function(model) {
        return this.dispatchPayload({
            actionType: MeasureModelActions.SET_MODEL,
            model: model
        });
    };
    
    /**
    * Loads the model. If model already loaded,
    * does nothing
    * 
    * @param {object} [renaming]
    * @param {boolean} [force] - if we should load the model even if it is already
    *                           loaded in the store
    * @return {Promise}
    */
    MeasureModelActionHandler.prototype.loadModel = function(renaming, force) {
        var me = this,
            promiseBuilder = new PromiseBuilder();
        
        if (!me.$measureModelStore.getModel() || force)
            promiseBuilder = PromiseBuilder.do(me.$fetchModel())
                .thenDo(function(model) {
                    return me.$dispatchModel(model, renaming);
                });
        return promiseBuilder.build();
    };
    
    /**
     * Reloads the model, restarts measure service and dispatches model
     * to stores.
     * 
     * @param {object} renaming
     * @return {Promise}
     */
    MeasureModelActionHandler.prototype.updateModel = function(renaming) {
        var me = this;
        return PromiseBuilder.do(function() {
            return me.$connectblox.restartMeasure();
        }).thenDo(function() {
            return me.loadModel(renaming, true);
        }).build();
    };

    /**
     * Returns a promise that will resolve when the measure model is loaded. If
     * the model is already loaded it will just retrieve it from the measuremodelstore
     * and resolve immediately.
     *
     * @param {boolean} [force] whether or not to force the model to be re-loaded 
     *                          from the server
     * @returns {Promise}
     */
    MeasureModelActionHandler.prototype.getModel = function(force) {
        var me = this;
        if (!me.$measureModelStore.getModel()) {
            return me.loadModel(undefined, force).then(function() {
                return me.$measureModelStore.getModel();
            });
        } else {
            return Promise.resolve(me.$measureModelStore.getModel());
        }
    };
    
    /**
     * Adds a level to measure model and dispatches the updated the measure model
     * to the MeasureModelStore.
     * 
     * @param {string} levelName
     * @return {Promise}    A void promise that is resolved once the level is added
     *                      and the measure model is updated.
     */
    MeasureModelActionHandler.prototype.addLevel = function(levelName) {
        var me = this;
        
        this.dispatchPayload({
            actionType: MeasureModelActions.EDIT_MODEL,
            levelName: levelName
        });
        
        return PromiseBuilder.do(me.$measureServiceMetaModelDAO.addLevel(levelName))
            .thenDo(function() {
                return me.updateModel();
            })
            .onFailure(function(err) {
                me.dispatchPayload({
                    actionType: MeasureModelActions.ADD_LEVEL_ERROR,
                    levelName: levelName,
                    error: err
                });
            }).build();
    };
    
    MeasureModelActionHandler.prototype.addParentLevel = function(levelName, dimensionName, hierarchyName, newLevelName, newDimensionName) {
        var me = this;
        me.dispatchPayload({
            actionType: MeasureModelActions.EDIT_MODEL,
            levelName: levelName
        });
        
        return PromiseBuilder.do(me.$measureServiceMetaModelDAO.addParentLevel(
            levelName, dimensionName, hierarchyName, newLevelName, newDimensionName))
            .thenDo(function() {
                var renaming = {
                    dimensionRename: {}
                };
                renaming.dimensionRename[dimensionName] = newDimensionName;
                return me.updateModel(renaming);
            })
            .onFailure(function(err) {
                me.dispatchPayload({
                    actionType: MeasureModelActions.ADD_LEVEL_ERROR,
                    levelName: levelName,
                    error: err
                });
            }).build();
    };
    
    /**
     * Adds a new metric
     * 
     * @param {string} metricName
     * @param {Array[Header]} intersection - a list of headers in x and y axis
     * @return {Promise[void]}
     */
    MeasureModelActionHandler.prototype.addMetric = function(metricName, intersection) {
        var me = this;
        me.dispatchPayload({
            actionType: MeasureModelActions.EDIT_MODEL,
            metricName: metricName
        });

        return PromiseBuilder.do(this.loadModel()).thenDo(function() {
            var allDimensions = lodash.values(me.$measureModelStore.getModel().allDimensions);
            return me.$measureServiceMetaModelDAO.addMetric(metricName, intersection, allDimensions)
                .then(me.updateModel.bind(me));
        }).build();
    };
    
    /**
     * Renames a Metric
     * 
     * @param {string} metricName
     * @param {string} newCaption
     * @return {Promise[void]}
     */
    MeasureModelActionHandler.prototype.renameMetric = function(metricName, newCaption) {
        var me = this;
        me.dispatchPayload({
            actionType: MeasureModelActions.EDIT_MODEL,
            metricName: metricName
        });

        return PromiseBuilder.do(me.loadModel()).thenDo(function() {
            var renaming = {
                metricRename : {}
            };
            renaming.metricRename[metricName] = newCaption;
            
            return me.$measureServiceMetaModelDAO.renameMetric(metricName, newCaption)
                .then(function() {
                    return me.updateModel(renaming);
                });
        }).build();
    };
    
    /**
     * Relay updated measure properties from HTML UI to measure service, then reload grid.
     * @param {string} measureName, measure
     * @param {string} prevAggMethod
     * @param {string} currAggMethod
     * @return {Promise}
     */
    MeasureModelActionHandler.prototype.setMeasureProperties = function(measureName, prevAggMethod, currAggMethod) {
        util.type.assertArgs(arguments, ["string","string","string"]);

        var me = this;

        if (currAggMethod !== prevAggMethod) {
            return PromiseBuilder.do(me.$measureModelDAO.setMeasureProperties(measureName, prevAggMethod, currAggMethod))
                .thenDo(function() {
                    return me.updateModel()
                })
                .onFailure(function() {
                    me.dispatchPayload({
                        actionType: MeasureModelActions.SET_MEASURE_PROPERTIES_ERROR,
                    });    
                }).build();
        } else {
            return Promise.resolve();
        }
    }

    module.exports = MeasureModelActionHandler;

},{"../dao/measuremodeldao":216,"../measureservice-metamodel":237,"../promisebuilder":256,"../store/measuremodelstore":267,"../util":280,"../util/promisecache":283,"./actionhandler":159,"inherits":45,"lodash":90}],165:[function(require,module,exports){
"use strict";

var ActionHandler = require("./actionhandler");
var constants = require("../constant");
var ModalWindowActions = constants.ModalWindowActions;
var ModalWindowTypes = constants.ModalWindows.Types;
var inherits = require("inherits");

inherits(ModalWindowsActionHandler, ActionHandler);
/**
 * An action handler that opens and closes modal windows
 * @constructor ModalWindowsActionHandler
 */
function ModalWindowsActionHandler(dispatcher) {
    ActionHandler.call(this, dispatcher);
}

/**
 * Opens a confirm dialog.
 * @param {string}   text  text to display in the confirm dialog
 * @param {string}   [title]   the title of the confirm dialog
 * @return {Promise}
 */
ModalWindowsActionHandler.prototype.confirm = function(text, title) {
    var me = this,
        options;

    return new Promise(function(resolve, reject) {
        options = {
            resolve: resolve,
            reject: reject,
            text: text,
            title: title
        };

        return me.openWindow(ModalWindowTypes.CONFIRMATION_DIALOG, options);
    });
};

/**
 * Opens a modal window.
 * @param {string}   windowType  the type of modal window to open
 * @param {Object}   [options]   parameters which are needed to initialize the modal window
 * @return {Promise}
 */
ModalWindowsActionHandler.prototype.openWindow = function(windowType, options) {
    return this.dispatchPayload({
        actionType: ModalWindowActions.OPEN_WINDOW,
        windowType: windowType,
        options: options
    });
};

/**
 * Closes a modal window.
 * @param {string}   windowType  the type of modal window to close
 * @param {string}   windowId    the modal window id to close
 * @return {Promise}
 */
ModalWindowsActionHandler.prototype.closeWindow = function(windowType, windowId) {
    return this.dispatchPayload({
        actionType: ModalWindowActions.CLOSE_WINDOW,
        windowType: windowType,
        windowId: windowId
    });
};

module.exports = ModalWindowsActionHandler;

},{"../constant":191,"./actionhandler":159,"inherits":45}],166:[function(require,module,exports){
/* global Promise */
    "use strict";

    var util = require("../util");
    var lodash = require("lodash");
    var cubiql = require("../cubiql");
    var ActionHandler = require("./actionhandler");
    var inherits = require("inherits");
    var MeasureServiceDAO = require("../dao/measureservicedao");
    var queryutil = require("../querygen/util");
    var querygen = require("../querygen/query");
    var queryresults = require("../querygen/results");
    var pch = require("../pivotconfig_helper");
    var modstate = require("../modelerstate");
    var CANVAS = require("../constant").CANVAS;
    var ModalWindowTypes = require("../constant").ModalWindows.Types;
    var ActionsStates = require("../constant").ACTIONS.STATES;
    var formatter = require("../formatter");

    inherits(ModelerActionHandler, ActionHandler);
    
    function bindAll(obj) {
        return lodash.bindAll(obj, lodash.functionsIn(obj));
    }

    /**
     * Defines all the actions for the modeler application. Consider this to be
     * the public API for interacting with the modeler application. Essentially,
     * anything you can do via the UI, you should be able to do via an action.
     *
     * @param {Dispatcher} dispatcher
     * @param {Object}  dependencies
     *                  dependencies.measureModelActionHandler
     *                  dependencies.multiAxisActionHandler
     *                  dependencies.measureModelStore
     *                  dependencies.pivotStore
     * @param {UrlDriver} urlDriver
     */
    function ModelerActionHandler(dispatcher, dependencies, urlDriver) {
        this.$measureModelActionHandler = bindAll(dependencies.measureModelActionHandler);
        this.$multiAxisConfigActionHandler = dependencies.multiAxisConfigActionHandler; //TODO removed bindAll b/c of potential perf issue, check back on this and if it is a problem remove for all
        this.$multiAxisDataActionHandler = dependencies.multiAxisDataActionHandler;
        this.$collaborationActionHandler = dependencies.collaborationActionHandler;
        this.$measureModelStore = dependencies.measureModelStore;
        this.$pivotConfigStore = dependencies.pivotConfigStore;
        this.$multiAxisConfigStore = bindAll(dependencies.multiAxisConfigStore);
        this.$fieldStore = bindAll(dependencies.fieldStore);
        this.$canvasStore = bindAll(dependencies.canvasStore);
        this.$canvasActionHandler = bindAll(dependencies.canvasActionHandler);
        this.$canvasConfigActionHandler = bindAll(dependencies.canvasConfigActionHandler);
        this.$canvasConfigStore = bindAll(dependencies.canvasConfigStore);
        this.$measureLanguageActionHandler = bindAll(dependencies.measureLanguageActionHandler);
        this.$measureLanguageStore = bindAll(dependencies.measureLanguageStore);
        this.$pivotConfigActionHandler = bindAll(dependencies.pivotConfigActionHandler);
        this.$actionsActionHandler = bindAll(dependencies.actionsActionHandler);
        this.$gridOptionActionHandler = dependencies.gridOptionActionHandler;
        this.$dragAndDropStore = bindAll(dependencies.dragAndDropStore);
        this.$dragAndDropActionHandler = bindAll(dependencies.dragAndDropActionHandler);
        this.$sheetStore = bindAll(dependencies.sheetStore);
        this.$multiAxisDataStore = dependencies.multiAxisDataStore;
        this.$modalWindowsActionHandler = dependencies.modalWindowsActionHandler;
        this.$modelerWebSocket = dependencies.modelerWebSocket;
        this.$notificationsActionHandler = dependencies.notificationsActionHandler;
        this.$modelerOptionStore = dependencies.modelerOptionStore;
        this.$viewActionHandler = dependencies.viewActionHandler;
        this.$viewConfigStore = dependencies.viewConfigStore;
        this.$viewConfigActionHandler = dependencies.viewConfigActionHandler;
        //TODO remove this once Sergey's view config changes make it so that
        //ModelerActionHandler doesn't initialize multiAxisConfig states
        this.$modelerApp = dependencies.modelerApp;

        this.$measureServiceDAO = new MeasureServiceDAO(urlDriver);

        this.$canvasInitPromises = {};
        
        ActionHandler.call(this, dispatcher);
    }

    /**
     * Export pivot configuration to CSV
     *
     * @param {String} pivotId
     */
    ModelerActionHandler.prototype.exportToCsv = function(pivotId) {
        var measureModel = this.$measureModelStore.getModel(),
            pivotOptions = this.$pivotStore.getQueryOptions(pivotId);

        return this.$createCsvFromOptions(pivotOptions, measureModel).then(
            util.timedFn('Dumping CSV to file', function(csv) {
                var blob = new Blob([csv], {type: 'text/csv'}),
                    url = URL.createObjectURL(blob),
                    a = document.createElement("a");

                a.style.display = "none";
                document.body.appendChild(a);
                a.setAttribute("href", url);
                a.setAttribute("download", "export.csv");
                a.click();

                // FF fix: needs a delay before releasing the created url object otherwise it won't trigger downloading.
                setTimeout(function(){
                    URL.revokeObjectURL(url);
                });
                document.body.removeChild(a);
            })
        );
    };

    ModelerActionHandler.prototype.createCsvFromMAConfig = function(maConfig, measureModel) {
        var me = this,
            pivotDef = pivothelper.pivotOptionsToPivotDef(pivotOptions, measureModel, this.$pivotConfigStore);

        var measureQueries = pivothelper.pivotDefToMeasureQueries(pivotDef, pivothelper.PivotQueryMode.EXPORT, measureModel),
            serviceQueries = querygen.measureQueriesToServiceQueries(measureQueries, measureModel),
            serviceRequest = querygen.serviceQueriesToServiceRequest(serviceQueries, measureModel);

        var promise = util.timedPromise('CSV Export Request', this.$measureServiceDAO.send(serviceRequest.request))
            .then(util.timedFn('Convert Export to CSV', function(response) {
                queryutil.checkServiceResponse(serviceRequest.request, response);

                var tables = measureQueries.map(function(query) {
                        return serviceRequest.responseProcessor.getMeasureQueryAsTable(query, response, true);
                    }),
                    csv = '',
                    csvValue,
                    needQuoteValue,
                    isQuotedValue,
                    columnFormatter = {};

                function makeColumnFormatter(measureQuery) {
                    var metric = querygen.getCoreMeasure(measureQuery.measure),
                        metricName,
                        measureConfig,
                        dataType,
                        dataFormatter,
                        format,
                        quoteValue = (['INT','DECIMAL','FLOAT'].indexOf(queryutil.getMeasureValueType(measureQuery.measure, measureModel)) === -1);

                    if (metric && metric instanceof querygen.Metric) {
                        metricName = metric.name;
                        measureConfig = me.$pivotConfigStore.getMetricConfig(metricName);
                        dataType = queryutil.getMeasureValueType(measureQueries[idx].measure, measureModel);
                        dataFormatter = formatter.getFormatter(measureConfig && measureConfig.format, metricName, dataType);
                        format = dataFormatter && dataFormatter.format;
                    }

                    return function(value) {
                        var formattedValue = format ? format(value) : value;
                        return quoteValue ? '"' + formattedValue + '"' : formattedValue;
                    };
                }

                if (tables.length) {
                    var measureModel = pivotDef.measureModel,
                        lastQuery = measureQueries[measureQueries.length - 1],
                        filterTable = lastQuery.measure instanceof querygen.ConstantTerm && tables[tables.length - 1],
                        filterIndices = [].concat(lastQuery.mappedInter.qualified_level.map(function(ql) { 
                            return measureQueries.findIndex(function(q) {
                                return q.measure.qualifiedLevel && cubiql.qLevelEqual(q.measure.qualifiedLevel, ql); 
                            }); 
                        }), filterTable ? [tables.length - 1] : []),
                        unionedTable = queryresults.unionResultTables(tables, [], filterIndices),
                        dataRow,
                        startIndex = lastQuery.mappedInter.qualified_level.length,
                        lastIndex = startIndex + tables.length - (filterTable ? 2 : 1),
                        i = 0,
                        j;

                    // Get the formatter object for the measures and store it in formattedMethods using their index in the unionedTable as the key.

                    for (var idx = 0; idx < measureQueries.length; ++idx) {
                        columnFormatter[idx] = makeColumnFormatter(measureQueries[idx]);
                    }

                    //header line
                    csv = lodash.compact(measureQueries.map(function(q, i) {
                        if (!filterTable || i < tables.length - 1) {
                            return '"' + queryutil.makeCaptionForMeasure(q.measure, measureModel) + '"';
                        }
                    })).join(',') + "\n";

                    for (; i < unionedTable.dataTable.length; i++) {
                        dataRow = unionedTable.dataTable[i];
                        for (j = startIndex; j <= lastIndex; j++) {
                            if (lodash.isUndefined(dataRow[j])) {
                                csv += "";
                            } else {
                                csvValue = columnFormatter[j - startIndex](dataRow[j]);
                                if (csvValue) {
                                    csvValue = csvValue.toString();

                                    //don't need add double quotes if the value starts and ends with them.
                                    isQuotedValue = csvValue.startsWith('"') && csvValue.endsWith('"');
                                    needQuoteValue = !isQuotedValue && csvEscapedRegex.test(csvValue);

                                    if (needQuoteValue) {
                                        csvValue = '"' + csvValue + '"';
                                    }
                                }
                                csv += csvValue;
                            }

                            if (j < lastIndex) {
                                csv += ",";
                            }
                        } 

                        if (i < unionedTable.dataTable.length - 1) {
                            csv += "\n";
                        }
                    }

                    if (tables.length !== 1) {
                        console.warn("Export query should produce exactly one table!");
                    }
                }

                return csv;
            }));

        promise.catch(util.logError);

        return promise;
    };

    /**
     * Loads the pivot state. Assures that the model is fetched 
     * as well as level members for slices.
     * 
     * @param {string} pivotId
     * @param {PivotConfig} pivotConfig - the pivot config object representing this configuration   
     * @return {Promise[void]} Promise that is resolved when all is done.
     */
    ModelerActionHandler.prototype.loadPivotState = function loadPivotState(pivotId, pivotConfig) {
        var me = this;

        return this.$measureModelActionHandler.getModel().then(function() {
            var modState = modstate.createModelerState(me.$modelerApp),
                maConfig = pch.pivotConfigToMultiAxisConfig(modState, pivotId, pivotConfig);
                
            maConfig = maConfig.set("queryLevelFilterFlag", true);

            return me.setViewTaskConfig(pivotId, "main", { maConfig: maConfig, isUnmasked: false});
        });
    };

    function $getPivotConfigs(canvas) {
        var pivotConfigs = [];
        Object.keys(canvas.views).forEach(function(viewId) {
            var view = canvas.views[viewId];
            if (view.config && view.config.pivotConfig) {
                pivotConfigs.push(view.config.pivotConfig);
            }
            if (view.module === CANVAS.MODULES.CANVAS)
                pivotConfigs.concat(getPivotConfigs(view.config));
        });
        return pivotConfigs;
    }
    
    function getPivotConfigs(canvas) {
        return lodash.flatten($getPivotConfigs(canvas));
    }
    
    ModelerActionHandler.prototype.initializeModeler = function() {
        var modelerOptionStore = this.$modelerOptionStore,
            startupPromises = [
                this.$measureModelActionHandler.loadModel(),
                this.$pivotConfigActionHandler.loadConfig(),
                this.$actionsActionHandler.loadActions(),
                this.$viewConfigActionHandler.loadAllViews()
            ],
            promise,
            me = this;

        if (modelerOptionStore.canEditRules()) {
            startupPromises.push(this.$measureLanguageActionHandler.loadRules().catch(util.logError));
        }

        promise = Promise.all(startupPromises);

        // Done separately, not in the promise.all above because it is okay for the websocket to fail to connect
        if (typeof window !== 'undefined') {
            // only run the follwing in a browser
            promise.then(function(){        
                me.$modelerWebSocket.restart();
            }).catch(util.logError);
        }

        return promise;
    };

    ModelerActionHandler.prototype.setViewTaskConfig = function(viewId, taskName, taskConfig) {
        return this.$multiAxisConfigActionHandler.setViewTaskConfig(viewId, taskName, taskConfig);
    },

    /**
     * @param  {String} actionOrActionId
     * @param  {String} actionLabel
     * @return {Promise} a promise that resolved into the actions response
     */
    ModelerActionHandler.prototype.callAction = function(actionOrActionId, actionLabel) {
        var me = this,
            actionConfig,
            getActionPromise,
            doActionPromise;

        // get the action config
        getActionPromise = this.$multiAxisDataActionHandler.promptForUnsavedChanges()
            .then(this.$actionsActionHandler.$getAction.bind(this.$actionsActionHandler, actionOrActionId));

        // broadcast action started
        getActionPromise.then(function(config) {
            return me.$collaborationActionHandler.broadcastActionChangedState(config.id, actionLabel, ActionsStates.STARTED);
        }).catch(util.logError);

        // perform the action
        doActionPromise = getActionPromise.then(function(config) {
            actionConfig = config;
            return me.$actionsActionHandler.callAction(actionOrActionId);
        });

        doActionPromise.then(function() {
            return me.$multiAxisDataActionHandler.markAllDataDirty();
        });

        // broadcast action status
        doActionPromise.then(function() {
            me.$collaborationActionHandler.broadcastActionChangedState(actionConfig.id, actionLabel, ActionsStates.SUCCEEDED);
        }).catch(function (err) {
            me.$collaborationActionHandler.broadcastActionChangedState(actionConfig.id, actionLabel, ActionsStates.FAILED);
            util.logError(err);
        });

        return doActionPromise;
    };

    ModelerActionHandler.prototype.clearUserRelatedStores = function() {
        return Promise.resolve(this.$viewConfigStore.clear());
    };

    ModelerActionHandler.prototype.reviewPendingEdits = function() {
        return this.$modalWindowsActionHandler.openWindow(ModalWindowTypes.REVIEW_EDITS_DIALOG);
    };

    /**
     * Opens a dialog window in which user can review and discard existed locks
     * @return  {Promise}
     * */
    ModelerActionHandler.prototype.reviewLocks = function () {
        return this.$modalWindowsActionHandler.openWindow(ModalWindowTypes.REVIEW_LOCKS_DIALOG);
    };

    /**
     * Opens a dialog window which notifies the user about logout because of being idle
     * @param   {Object}    properties   contains the props for logout notification dialog.
     * @return  {Promise}
     * */
    ModelerActionHandler.prototype.notifyUserAboutLogout = function(properties) {
        return this.$modalWindowsActionHandler.openWindow(ModalWindowTypes.LOGOUT_NOTIFICATION_DIALOG, properties);
    };

    /**
     * Changes a location if navigation is allowed.
     * @param {string} url
     * @return {Promise}
     */
    ModelerActionHandler.prototype.navigateIfAllowed = function(url) {
        return this.$multiAxisDataActionHandler.promptForUnsavedChanges().then(function() {
            location.hash = url;
        });
    };

    /**
     * Sends the edits and notifies users that some edits were made
     * @param {Object} edits
     * @return {Promise}
     */
    ModelerActionHandler.prototype.sendEdits = function(edits) {
        return this.$multiAxisDataActionHandler.sendEdits(edits).then(
            this.$collaborationActionHandler.broadcastEditsWereMade.bind(this.$collaborationActionHandler));
    };

    ModelerActionHandler.prototype.installMeasureRule = function(pivotId, editorId, primaryFormula, inverseFormulas) {
        var measureLanguageActionHandler = this.$measureLanguageActionHandler,
            multiAxisDataActionHandler = this.$multiAxisDataActionHandler,
            pivotStore = this.$pivotStore,
            measureLanguageStore = this.$measureLanguageStore,
            moveField = this.moveField.bind(this),
            notificationsActionHandler = this.$notificationsActionHandler;
            
        return measureLanguageActionHandler.installMeasureRule(editorId, primaryFormula, inverseFormulas)
            .then(
                function onAddMeasureRuleSuccess() {
                    return multiAxisDataActionHandler.markAllDataDirty().then(function() {
                        // add metric if not already in visible metrics
                        var rulesWithEditors = measureLanguageStore.getRulesWithEditors();

                        return Promise.all(rulesWithEditors.map(function(metricName) {
                            var firstMetric = pivotStore.getFieldsIn(pivotId, "z")[0];
                            
                            if (pivotStore.indexInAxis(pivotId, metricName, "z") === -1) {
                                return moveField(pivotId, metricName, "z", firstMetric && firstMetric.name);
                            }
                            else return Promise.resolve();             
                        }));
                    });
                },                
                function onAddMeasureRuleError(err) {
                    return notificationsActionHandler.error(err.message, "Error", {}, {autoDismiss: 5});
                }
            );
    };

    module.exports = ModelerActionHandler;

},{"../constant":191,"../cubiql":211,"../dao/measureservicedao":217,"../formatter":227,"../modelerstate":239,"../pivotconfig_helper":255,"../querygen/query":258,"../querygen/results":259,"../querygen/util":260,"../util":280,"./actionhandler":159,"inherits":45,"lodash":90}],167:[function(require,module,exports){
"use strict";

var MultiAxisConfigActions = require("../store/multiaxisconfigstore").MultiAxisConfigActions;
var ActionHandler = require("./actionhandler");
var inherits = require("inherits");

inherits(MultiAxisConfigActionHandler, ActionHandler);

/**
 * @typedef {Object} TaskConfig
 * @property {MAConfig} maConfig
 * @property {Boolean} hasMaskedRange
 * @property {MARange} configuredRange
 */

/**
 * MultiAxisConfigActionHandler.
 * @constructor
 *
 * @param {Dispatcher} dispatcher
 */
function MultiAxisConfigActionHandler(dispatcher, dependencies) {
    ActionHandler.call(this, dispatcher);
}

MultiAxisConfigActionHandler.prototype.setViewTaskConfig = function(viewId, taskName, config) {
    return this.dispatchPayload({
        actionType: MultiAxisConfigActions.SET_VIEW_TASK_CONFIG,
        viewId: viewId,
        taskName: taskName,
        config: config
    });
};

MultiAxisConfigActionHandler.prototype.setViewInactive = function(viewId) {
    return this.dispatchPayload({
        actionType: MultiAxisConfigActions.SET_VIEW_INACTIVE,
        viewId: viewId
    });
};

MultiAxisConfigActionHandler.prototype.setViewTaskActive = function(viewId, taskName) {
    return this.dispatchPayload({
        actionType: MultiAxisConfigActions.SET_VIEW_TASK_ACTIVE,
        viewId: viewId,
        taskName: taskName
    });
};

MultiAxisConfigActionHandler.prototype.setViewTaskInactive = function(viewId, taskName) {
    return this.dispatchPayload({
        actionType: MultiAxisConfigActions.SET_VIEW_TASK_INACTIVE,
        viewId: viewId,
        taskName: taskName
    });
};

module.exports = MultiAxisConfigActionHandler;

},{"../store/multiaxisconfigstore":270,"./actionhandler":159,"inherits":45}],168:[function(require,module,exports){
/* global Promise */
"use strict";

var multiaxisdatastore = require("../store/multiaxisdatastore");
var MultiAxisDataActions = multiaxisdatastore.MultiAxisDataActions;
var ActionHandler = require("./actionhandler");
var inherits = require("inherits");
var assert = require("assert");
var util = require("../util");
var MeasureServiceDAO = require("../dao/measureservicedao");
var LogEvents = require("../store/logstore").LogEvents;
var Messages = require("../constant/messages");
var maug = require("../multiaxis/updategenerator");
var querygen = require("../querygen/query");
var MQG = require("measure-query-gen/src/MQG");
var constant = require("../constant");

inherits(MultiAxisDataActionHandler, ActionHandler);
/**
 * @constructor MultiAxisDataActionHandler
 * @param {Object} dispatcher
 * @param {Object} driver
 * @param {Object} dependencies
 * @param {Object} dependencies.madStore
 * @param {Object} dependencies.pivotConfigStore
 * @param {Object} dependencies.measureModelStore
 * @param {Object} dependencies.logActionHandler
 * @param {Object} dependencies.modalWindowActionHandler
 */

function MultiAxisDataActionHandler(dispatcher, driver, dependencies) {
    ActionHandler.call(this, dispatcher);
    
    this.$madStore = dependencies.multiAxisDataStore;
    this.$pivotConfigStore = dependencies.pivotConfigStore;
    this.$measureModelStore = dependencies.measureModelStore;
    this.$logActionHandler = dependencies.logActionHandler;
    this.$notificationsActionHandler = dependencies.notificationsActionHandler;
    this.$measureServiceDAO = new MeasureServiceDAO(driver);
    this.$modalWindowsActionHandler = dependencies.modalWindowsActionHandler;
    this.$dispatcher = dispatcher;
}

/**
 * @typedef {String} AxisName 
 *
 * @typedef {Object} Range
 * @property {Number} start
 * @property {Number} length
 *
 * specification of a range across multiple axes.  If an axis is not defined, that implicitly means the entire range of the axis
 * @typedef {Object<AxisName, Range|undefined>} MultiAxisRange
 *
 * @param {String} viewId
 * @param {String} taskName
 * @param {MultiAxisRange} range
 */
MultiAxisDataActionHandler.prototype.setViewTaskRange = function(viewId, taskName, range) {
    return this.$dispatcher.handleViewAction({
        actionType: MultiAxisDataActions.SET_VIEW_TASK_RANGE,
        viewId: viewId,
        taskName: taskName,
        range: range
    });
};

/**
 * Mark a query (or query + positions) as requested so it will be retrieved (if necessary) and stored in the pivot data store
 *
 * @param {MeasureQuery} query the measure query for which data is being requested
 * @param {Position[]} positions Optional. the positions for which to limit this request to
 */
MultiAxisDataActionHandler.prototype.requestQuery = function(query, positions) {
    return this.$dispatcher.handleViewAction({
        actionType: MultiAxisDataActions.REQUEST_QUERY,
        query: query,
        positions: positions
    });
};

MultiAxisDataActionHandler.prototype.storePendingEditForSlice = function(pivotId, value, fieldName) {
    var measureQuery = this.$madStore.getMeasureQueryForFieldSliceValue(pivotId, fieldName),
        coreMeasure = querygen.getCoreMeasure(measureQuery.measure),
        metricQuery;

    assert(coreMeasure instanceof querygen.Attribute, "Core slice measure should be an attribute!");    

    metricQuery = this.$madStore.getPivotDef(pivotId).getSelectedSliceMetricQuery(coreMeasure.qualifiedLevel);

    return this.dispatchPayload({
        actionType: MultiAxisDataActions.STORE_PENDING_EDIT,
        query: measureQuery,
        metricQuery: metricQuery,
        position: {}, //slices have no keys, so empty position
        edit: {
           data: value
        }, 
        editedMetricInters: [new MQG.MetricInter(metricQuery.measure.name, metricQuery.inter)]
    });
};

/**
 * @param {Boolean} singleEditMode
 * @param {Object[]} edits
 * @prop {Object} edits[0..].cellInfo
 * @prop {Object} edits[0..].editConfigName
 * @prop {Object} edits[0..].edit
 * @return {Promise}
 */
MultiAxisDataActionHandler.prototype.storePendingEdits = function(edits) {
    var me = this;

    return me.dispatchPayload({
        actionType: MultiAxisDataActions.STORE_PENDING_EDITS,
        edits: edits.map(function(edit) {
            return {
                editConfig: edit.cellInfo.editConfigs[edit.editConfigName],
                positionInfo: edit.cellInfo.positionInfo,
                edit: edit.edit
            };
        })
    });
};

MultiAxisDataActionHandler.prototype.commitPendingEdits = function() {
    var edits = this.$madStore.getAllPendingEdits();

    return this.dispatchPayload({
        actionType: MultiAxisDataActions.MARK_EDITS_FOR_COMMIT,
        edits: edits
    });
};

MultiAxisDataActionHandler.prototype.sendEdits = function(edits) {
    var me = this,
        model = this.$measureModelStore.getModel(),
        userLocks = this.$madStore.getLocks();
        
    return me.execute({
        fn: function() { 
            var request = maug.createRequestForEdits(edits, userLocks, model, me.$pivotConfigStore.getMetricsConfig());

            return util.timedPromise('Update Request', me.$measureServiceDAO.send(request));
        },
        startAction: {actionType: MultiAxisDataActions.MARK_EDITS_IN_FLIGHT},
        successAction: { actionType: MultiAxisDataActions.SET_EDITS_SUCCESSFUL, edits: edits },
        failAction: { actionType: MultiAxisDataActions.SET_EDITS_FAILED, edits: edits}
    });
};

MultiAxisDataActionHandler.prototype.markDataDirtyByMeasure = function(measure, pivotIds) {
    return this.dispatchPayload({
        actionType: MultiAxisDataActions.MARK_DATA_DIRTY_BY_MEASURE,
        measure: measure,
        pivotIds: pivotIds
    });
};

MultiAxisDataActionHandler.prototype.markAllDataDirty = function(pivotIds) {
    return this.dispatchPayload({
        actionType: MultiAxisDataActions.MARK_ALL_DATA_DIRTY,
        pivotIds: pivotIds
    });
};

/**
 * @param {multiaxisdatastore.EditablityRequest} editabilityRequest
 * @return {Promise}
 **/
MultiAxisDataActionHandler.prototype.sendEditabilityRequest = function(editabilityRequest) {
    var me = this;

    return this.dispatchPayload({actionType: MultiAxisDataActions.MARK_EDITABILITY_IN_FLIGHT})
        .then(function() {
            return me.$measureServiceDAO.send(editabilityRequest.serviceRequest);
        })
        .then(function (response) {
            assert(response.editability instanceof Object);
            return me.dispatchPayload({
                actionType: MultiAxisDataActions.SET_EDITABILITY_STATUS,
                request: editabilityRequest,
                response: response.editability
            });
        })
        .catch(function (err) {
            me.$logActionHandler.warn(LogEvents.DATA_PROCESSING_ERROR, Messages.INCONSISTENT_EDIT_ERROR, err);
            return me.dispatchPayload({
                actionType: MultiAxisDataActions.SET_EDITABILITY_STATUS,
                request: editabilityRequest,
                response: {} 
            });
        });
};

/**
 * @param {multiaxisdatastore.OutstandingDataRequest[]} outstandingDataRequests
 * @return {Promise}
 */
MultiAxisDataActionHandler.prototype.sendOutstandingDataRequests = function(outstandingDataRequests) {
    var me = this;

    return Promise.all(outstandingDataRequests.map(function(outstandingDataRequest) {
        var serviceRequest = outstandingDataRequest.serviceRequest;
        outstandingDataRequest.queryTime = new Date();

        return me.dispatchPayload({
            actionType: MultiAxisDataActions.SET_DATA_REQUEST_RUNNING,
            dataRequest: outstandingDataRequest
        })
        .then(function() {
            return util.timedPromise('Data Requests', me.$measureServiceDAO.send(serviceRequest.request));
        })
        .then(util.timedFn("Dispatching Load For Outstanding Requests", function(response) {
            var processPromise = me.dispatchPayload({
                actionType: MultiAxisDataActions.LOAD_OUTSTANDING_DATA_REQUEST,
                processor: serviceRequest.responseProcessor,
                response: response,
                dataRequest: outstandingDataRequest
            }).then(function() {
                return me.dispatchPayload({
                    actionType: MultiAxisDataActions.SET_DATA_REQUEST_FINISHED,
                    dataRequest: outstandingDataRequest
                });
            });
            
            return util.timedPromise('Load From Outstanding Requests', processPromise);
        }))            
        .catch(function(err) {
            return me.dispatchPayload({
                actionType: MultiAxisDataActions.SET_DATA_REQUEST_FAILED,
                dataRequest: outstandingDataRequest,
                error: err
            }).then(function() {
                return Promise.reject(err);
            });
        });
    }));
};

/**
 * Sends a request to create a new instance of the level w/ the given id and label.
 * @param  {QualifiedLevel} level  Level a new instance will be created for.
 * @param  {string}         id     ID of the new instance.
 * @param  {string}         label  Label of the new instance.
 * @return {Promise}        Request promise.
 */
MultiAxisDataActionHandler.prototype.createLevel = function(level, id, label) {
    var me = this,
        req = maug.createRequestForLevelCreation(level, id, label);

    return this.$measureServiceDAO.send(req)
        .then(function() {
            return me.markAllDataDirty();
        })
        .catch(function(err) {
            return me.$notificationsActionHandler.error(err.error || Messages.UNEXPECTED_SERVER_ERROR, "Server Error");
        });
};

/**
 * Clears edits. If 'edits[]' is provided will clear only these edits.
 * @param {Array} [edits]
 */
MultiAxisDataActionHandler.prototype.clearEdits = function(edits) {
    var payload = {
        actionType: MultiAxisDataActions.CLEAR_EDITS,
        edits: edits
    };

    if (edits) {
        payload.edits = edits;
    }

    return this.dispatchPayload(payload);
};

/**
 * Opens a confirmation dialog if there are pending edits.
 * @return {Promise}
 */
MultiAxisDataActionHandler.prototype.promptForUnsavedChanges = function () {
    var me = this;

    if (this.$madStore.getAllPendingEdits().length) {
        return me.$modalWindowsActionHandler.confirm(constant.MESSAGES.UNCALCULATED_CHANGES,
            constant.MESSAGES.CONFIRM_NAVIGATION);
    }
    return Promise.resolve();
};

MultiAxisDataActionHandler.prototype.setLocks = function(locks) {
    return this.dispatchPayload({
        actionType: MultiAxisDataActions.SET_LOCKS,
        locks: locks
    });
};

MultiAxisDataActionHandler.prototype.unsetLocks = function(locks) {
    return this.dispatchPayload({
        actionType: MultiAxisDataActions.UNSET_LOCKS,
        locks: locks
    });
};

MultiAxisDataActionHandler.prototype.clearAllLocks = function() {
    return this.dispatchPayload({
        actionType: MultiAxisDataActions.CLEAR_ALL_LOCKS
    });
};

module.exports = MultiAxisDataActionHandler;

},{"../constant":191,"../constant/messages":195,"../dao/measureservicedao":217,"../multiaxis/updategenerator":250,"../querygen/query":258,"../store/logstore":265,"../store/multiaxisdatastore":271,"../util":280,"./actionhandler":159,"assert":undefined,"inherits":45,"measure-query-gen/src/MQG":1}],169:[function(require,module,exports){
"use strict";

var NavigationTreeActions = require("../store/navigationtreestore").NavigationTreeActions;
var NavigationTreeDAO = require("../dao/navigationtreedao");


/**
 * Action handler for navigation tree.
 * @constructor
 * @param {Object} dispatcher
 * @param {Object} driver
 */
function NavigationTreeActionHandler(dispatcher, driver) {
    this.$navigationTreeDAO = new NavigationTreeDAO(driver);
    this.$dispatcher = dispatcher;
}

/**
 * Loads a navigation configuration for the given treeId
 * @param  {String} treeId
 * @return {Promise}
 */
NavigationTreeActionHandler.prototype.loadConfig = function(treeId) {
    var me = this,
        navigationTreeDAO = this.$navigationTreeDAO;

    return navigationTreeDAO.fetchNavigationTreeConfig(treeId)
        .then(function(config) {
            return me.$dispatcher.handleViewAction({
                actionType: NavigationTreeActions.SET_CONFIG,
                config: config
            });
        });
};

/**
 * Updates the navigation tree that is in the workspace 
 * with the given config
 * @param  {Object} config
 */
NavigationTreeActionHandler.prototype.updateConfig = function(config) {
    this.$navigationTreeDAO.setNavigationTreeConfig(config);
};

/**
 * emits SET_CONFIG to update the navigation Tree Window with
 * the given config
 * @param {Object} config
 */
NavigationTreeActionHandler.prototype.setConfig = function(config) {
    return this.$dispatcher.handleViewAction({
        actionType: NavigationTreeActions.SET_CONFIG,
        config: config
    });
};

module.exports = NavigationTreeActionHandler;
},{"../dao/navigationtreedao":218,"../store/navigationtreestore":272}],170:[function(require,module,exports){
"use strict";

var ActionHandler = require("./actionhandler");
var inherits = require("inherits");
var util = require("../util");
var NotificationActions = require("../store/notificationsstore").NotificationsActions;

var lodash = require("lodash");

inherits(NotificationsActionHandler, ActionHandler);

/**
 * NotificationsActionHandler.
 * @constructor
 *
 * @param {Dispatcher} dispatcher
 */
function NotificationsActionHandler(dispatcher) {
    this.$dispatcher = dispatcher;
}

/**
 * Shows the success notification.
 *
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsActionHandler.prototype.success = function(message, title, action, options) {
    return this.dispatchPayload({
        actionType: NotificationActions.SHOW_SUCCESS,
        message: message,
        title: title,
        action: action,
        options: options
    });
};

/**
 * Shows an info notification.
 *
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsActionHandler.prototype.info = function(message, title, action, options) {
    return this.dispatchPayload({
        actionType: NotificationActions.SHOW_INFO,
        message: message,
        title: title,
        action: action,
        options: options
    });
};

/**
 * Shows a warning notification.
 *
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsActionHandler.prototype.warning = function(message, title, action, options) {
    return this.dispatchPayload({
        actionType: NotificationActions.SHOW_WARNING,
        message: message,
        title: title,
        action: action,
        options: options
    });
};

/**
 * Shows an error notification.
 *
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsActionHandler.prototype.error = function(message, title, action, options) {
    return this.dispatchPayload({
        actionType: NotificationActions.SHOW_ERROR,
        message: message,
        title: title,
        action: action,
        options: options
    });
};

/**
 * Shows an notification.
 *
 * @param {String} [level] - The title of the notification.
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsActionHandler.prototype.notify = function(level, message, title, action, options) {
    return this.dispatchPayload({
        actionType: NotificationActions.SHOW,
        message: message,
        title: title,
        action: action,
        options: options,
        level: level
    });
};

/**
 * Executes the notification's action callback.
 *
 * @param {String} [notificationId] - The internal notification ID.
 */
NotificationsActionHandler.prototype.executeCallback = function(notificationId) {
    return this.dispatchPayload({
        actionType: NotificationActions.EXECUTE_CALLBACK,
        notificationId: notificationId
    });
};

module.exports = NotificationsActionHandler;
},{"../store/notificationsstore":273,"../util":280,"./actionhandler":159,"inherits":45,"lodash":90}],171:[function(require,module,exports){
"use strict";

var util = require("../util");
var PivotConfigActions = require("../store/pivotconfigstore").PivotConfigActions;
var FormattingDAO = require("../dao/formattingdao");

function PivotConfigActionHandler(dispatcher, driver, pivotConfigStore) {
    this.$formattingDAO = new FormattingDAO(driver);
    this.$dispatcher = dispatcher;
    this.$pivotConfigStore = pivotConfigStore;
}

/**
* Loads the measure and the level formatting patterns from the database.
* Prevent concurrent calls to the DB. Only loads if patterns are not
* yet loaded in store.
* 
* @return {Promise[void]}
*/
PivotConfigActionHandler.prototype.loadConfig = function() {
    var dispatcher = this.$dispatcher,
        pivotConfigStore = this.$pivotConfigStore,
        formattingDAO = this.$formattingDAO;

    if (pivotConfigStore.isConfigLoaded()) {
        return Promise.resolve();
    }

    var isFetchingConfigDisplayFormats = pivotConfigStore.isFetchingConfigDisplayFormats();

    if (!isFetchingConfigDisplayFormats) {
        isFetchingConfigDisplayFormats = formattingDAO.fetchFormattingConfig()
            .then(function(result) {
                return dispatcher.handleViewAction({
                    actionType: PivotConfigActions.SET_CONFIG,
                    config: result
                });
            });

        isFetchingConfigDisplayFormats.catch(function(err) {
            dispatcher.handleViewAction({
                actionType: PivotConfigActions.ERROR_FETCHING_CONFIG
            });
            util.logError(err);
        });

        dispatcher.handleViewAction({
            actionType: PivotConfigActions.SET_FETCHING_CONFIG,
            promise: isFetchingConfigDisplayFormats
        });
    }

    return isFetchingConfigDisplayFormats;
};

module.exports = PivotConfigActionHandler; 

},{"../dao/formattingdao":214,"../store/pivotconfigstore":274,"../util":280}],172:[function(require,module,exports){
var PromiseCache = require("../util/promisecache");
var UserDAO = require("../dao/userdao");
var UserActions = require("../constant").User.ACTIONS;

var UserLoginActionId = "__user_login__";
var UserLogoutActionId = "__user_logout__";

function UserActionHandler(dispatcher, driver, loginUrl, logoutUrl, realm) {
    this.$dispatcher = dispatcher;
    
    this.$userDAO = new UserDAO(driver.http, driver.urls.currentUserUrl, loginUrl, logoutUrl, realm);
    this.$promiseCache = new PromiseCache();
}

UserActionHandler.prototype.checkIsAuthenticated = function () {
    var me = this;

    return this.$promiseCache.concurrentPromise(UserLoginActionId, function () {
        return me.$userDAO.getCurrentUser().then(function (userName) {
            if (userName) {
                return me.$dispatcher.handleViewAction({
                    actionType: UserActions.AUTHENTICATE,
                    userName: userName
                });
            }
        }).catch(function(){
            return false;
        });
    });
};

/**
 *
 * @returns {Promise}
 */
UserActionHandler.prototype.authenticate = function (userName, password) {
    var me = this;

    return this.$promiseCache.concurrentPromise(UserLoginActionId, function () {
        return me.$userDAO.authenticate(userName, password).then(function () {
            return me.$dispatcher.handleViewAction({
                actionType: UserActions.AUTHENTICATE,
                userName: userName
            });
        });
    });
};

/**
 *
 * @returns {Promise}
 */
UserActionHandler.prototype.unauthenticate = function () {
    var me = this;

    return this.$promiseCache.concurrentPromise(UserLogoutActionId, function () {
        return me.$userDAO.unauthenticate().then(function () {
            return me.$dispatcher.handleViewAction({
                actionType: UserActions.UNAUTHENTICATE
            });
        });
    });
};

module.exports = UserActionHandler;

},{"../constant":191,"../dao/userdao":219,"../util/promisecache":283}],173:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var assert = require("assert");

var ViewLayoutUtils = require("../util/viewlayoututils");
var constants = require("../constant").View;
var MODELER_VIEW_ID = require("../constant").ViewConfig.MODELER_VIEW_ID;

var DefaultPagePosition = {
    options: {
        size: "1",
        openIn: "right"
    }
};

function ViewActionHandler(dispatcher, dependencies) {
    this.$dispatcher = dispatcher;

    this.$viewConfigActions = dependencies.viewConfigActions;
    this.$viewConfigStore = dependencies.viewConfigStore;
    this.$viewStore = dependencies.viewStore;

    this.$modelerViewUniqueId = this.$viewStore.getViewUniqueId(null, MODELER_VIEW_ID);
}

/**
 * Opens view as page.
 * @param {String}  viewId - the view`s ID
 * @param {Promise}
 */
ViewActionHandler.prototype.openPage = function(viewId) {
    assert(viewId, ["View`s ID has to be passed"]);

    var viewStore = this.$viewStore,
        currentViewId = viewStore.getCurrentPageViewId(),
        parentViewId = viewStore.getViewId(this.$modelerViewUniqueId),
        parentVs = this.$viewConfigStore.getViewState(parentViewId),
        viewUniqueId = viewStore.getViewUniqueId(this.$modelerViewUniqueId, viewId),
        config = { module: viewStore.getViewModuleId(viewUniqueId) },
        views;

    if (currentViewId === viewId) {
        return Promise.resolve();
    }

    parentVs = currentViewId && ViewLayoutUtils.closeViewInLayout(parentVs, currentViewId) || parentVs;

    //close all other opened views
    parentVs.get("views").forEach(function(view, childViewId) {
        if (!view.get("module")) {
            parentVs = ViewLayoutUtils.closeViewInLayout(parentVs, childViewId);
        }
    });

    parentVs = ViewLayoutUtils.openViewInLayout(parentVs, viewId, config, DefaultPagePosition);
    return this.$viewConfigActions.setViewState(parentViewId, parentVs);
};

/**
 * Closes current page.
 */
ViewActionHandler.prototype.closePage = function() {
    var currentViewId = this.$viewStore.getCurrentPageViewId();

    return currentViewId && this.closeViewIn(this.$modelerViewUniqueId, currentViewId) || Promise.resolve();
};

/**
 * Opens the view by the view`s unique ID.
 * @param {String} uniqueViewId - the view`s unique ID
 * @param {ViewConfig} [config] - the view's config
 * @param {ViewPosition} [position] - the view`s preferable position.
 * @returns {Promise}
 */
ViewActionHandler.prototype.openView = function(uniqueViewId, config, position) {
    var viewId = this.$viewStore.getViewId(uniqueViewId),
        parentViewUniqueId = this.$viewStore.getParentUniqueId(uniqueViewId);

    return this.openViewIn(parentViewUniqueId, viewId, config, position);
};

/**
 * Opens the view in the specified parent.
 * @param {String} parentViewUniqueId - the parent view`s unique ID
 * @param {String} uniqueViewId - the view`s unique ID
 * @param {ViewConfig} [config] - the view's config
 * @param {ViewPosition} [position] - the view`s preferable position.
 * @returns {Promise}
 */
ViewActionHandler.prototype.openViewIn = function(parentViewUniqueId, viewId, config, position) {
    var parentViewId = this.$viewStore.getViewId(parentViewUniqueId);

    return this.$doWithViewState(parentViewId, function(viewState) {
        return ViewLayoutUtils.openViewInLayout(viewState, viewId, config, position);
    });
};

/**
 * Closes the view.
 * @param {String} uniqueViewId - the view`s unique ID
 * @returns {Promise}
 */
ViewActionHandler.prototype.closeView = function(uniqueViewId) {
    var viewId = this.$viewStore.getViewId(uniqueViewId),
        parentViewUniqueId = this.$viewStore.getParentUniqueId(uniqueViewId);

    return this.closeViewIn(parentViewUniqueId, viewId);
};

/**
 * Closes the view
 * @param {String} parentViewUniqueId - the parent view`s unique ID.
 * @param {String} viewId - the view`s ID
 * @returns {Promise}
 */
ViewActionHandler.prototype.closeViewIn = function(parentViewUniqueId, viewId) {
    var parentViewId = this.$viewStore.getViewId(parentViewUniqueId);

    return this.$doWithViewState(parentViewId, function(viewState) {
        if (!viewState) {
            return Promise.reject({ viewClosed: true });
        }
        return ViewLayoutUtils.closeViewInLayout(viewState, viewId);
    }).catch(function(err) {
        if (err && err.viewClosed) {
            return;
        }

        return Promise.reject(err);
    });
};

/**
 * Sets the view mode of the view.
 * @param {String} uniqueViewId - the view`s unique ID.
 * @param {String} viewMode - the view mode.
 * @param {Object} options - other things that go with the view mode
 */
ViewActionHandler.prototype.setViewMode = function(uniqueViewId, viewMode, options) {
    var viewId = this.$viewStore.getViewId(uniqueViewId),
        parentViewId = this.$viewStore.getParentId(uniqueViewId);

    return this.$doWithViewState(parentViewId, function(viewState) {
        return ViewLayoutUtils.setViewModeInLayout(viewState, viewId, viewMode, options);
    });
};

ViewActionHandler.prototype.$doWithViewState = function(viewId, callback) {
    var viewConfigActionHandler = this.$viewConfigActions,
        viewState = this.$viewConfigStore.getViewState(viewId);

    viewState = callback(viewState);

    return viewConfigActionHandler.setViewState(viewId, viewState).then(function() {
        return viewConfigActionHandler.saveViewState(viewId, viewState);
    });
};

module.exports = ViewActionHandler;

},{"../constant":191,"../util/viewlayoututils":285,"assert":undefined,"lodash":90}],174:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var assert = require("assert");
var Immutable = require("immutable");

var PromiseCache = require("../util/promisecache");

var ViewConfigDAO = require("../dao/viewconfigdao");

var constants = require("../constant").ViewConfig;
var ViewConfigActions = constants.ACTIONS;
var MODELER_VIEW_ID = constants.MODELER_VIEW_ID;

var ConfigurationNotFoundMessage = "Configuration for view {view_id} not found in the database";

var LoadViewsActionId = "__load_views__";


function ViewConfigActionHandler(dispatcher, driver, dependencies) {
    this.$viewConfigStore = dependencies.viewConfigStore;
    this.$userStore = dependencies.userStore;
    this.$dispatcher = dispatcher;

    this.$viewConfigDAO = new ViewConfigDAO(driver);
    this.$promiseCache = new PromiseCache();
}

ViewConfigActionHandler.prototype.destroy = function() {
    this.$viewConfigStore = null;
    this.$userStore = null;
    this.$dispatcher = null;

    this.$viewConfigDAO = null;
    this.$promiseCache = null;
};

/**
 * Loads all existing views configurations and states from the database.
 * Has to be called before rendering the modeler page.
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.loadAllViews = function() {
    var me = this,
        promise;

    return this.$promiseCache.concurrentPromise(LoadViewsActionId, function() {
        return me.$fetchViews().then(function(viewsAndStates) {
            return Promise.all(lodash.map(viewsAndStates, function(view, viewId) {
                return me.$dispatcher.handleViewAction({
                    actionType: ViewConfigActions.SET_VIEW_STATE,
                    config: Immutable.fromJS(view.config),
                    state: Immutable.fromJS(view.state),
                    viewId: viewId
                });

            }));
        });
    });
};

/**
 * Loads a view from the database
 * @param  {String} viewId - the view`s ID
 * @param  {Boolean} [skipLoadState=false] - if true, the view`s state won't be requested
 * @return {Promise}
 */
ViewConfigActionHandler.prototype.loadView = function(viewId, skipLoadState) {
    var me = this,
        stateLoadPromise;
    return this.$viewConfigDAO.fetchConfig(viewId).then(function(config) {
        if (skipLoadState) {
            stateLoadPromise = Promise.resolve(config);
        } else {
            stateLoadPromise = me.$viewConfigDAO.fetchState(viewId, me.$userStore.getCurrentUserName());
        }

        return stateLoadPromise.then(function(state) {
            return me.$dispatcher.handleViewAction({
                actionType: ViewConfigActions.SET_VIEW_STATE,
                config: Immutable.fromJS(config),
                state: Immutable.fromJS(state),
                viewId: viewId
            });

        });
    });
};


/**
 * Initializes the view by local view`s configuration.
 * @param {String} viewId - the view`s ID
 * @param {ViewConfig} [localConfig={}] - the view`s config
 * @param {Boolean} [overrideCurrentState=false] - if true, current view`s state will be overridden
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.initializeView = function(viewId, localConfig, overrideCurrentState) {
    assert(viewId, ["View`s ID has to be passed"]);

    var currentViewState = this.$viewConfigStore.getViewState(viewId);

    localConfig = localConfig || Immutable.Map();

    if (!currentViewState || (overrideCurrentState && currentViewState !== localConfig)) {
        return this.setViewState(viewId, localConfig, localConfig);
    }
    
    return Promise.resolve();
};

/**
 * Sets current view`s state.
 * @param {String} viewId - the view`s ID
 * @param {ViewConfig} viewState - the view`s state
 * @param {ViewConfig} [viewConfig] - the view`s config
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.setViewState = function(viewId, viewState, viewConfig) {
    if (!Immutable.Map.isMap(viewState)) {
        viewState = Immutable.fromJS(viewState);
    }

    if (viewConfig && !Immutable.Map.isMap(viewConfig)) {
        viewConfig = Immutable.fromJS(viewConfig);
    }

    return this.$dispatcher.handleViewAction({
        actionType: ViewConfigActions.SET_VIEW_STATE,
        state: viewState,
        config: viewConfig,
        viewId: viewId
    });
};

/**
 * Saves the view`s state.
 * @param {String} viewId - the view`s ID
 * @param {ViewConfig} viewState - the view`s state
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.saveViewState = function(viewId, viewState) {
    assert(viewId, ["View`s ID has to be passed"]);
    assert(viewState, ["View state has to be passed"]);

    if (viewId === MODELER_VIEW_ID) { // we should not save "page-with-sidebar" state as it is our internal state
        return Promise.resolve();
    }

    return this.$viewConfigDAO.saveState(viewId, viewState, this.$userStore.getCurrentUserName());
};

/**
 * Saves the given view states.
 * @param {Immutable.List} viewStates
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.saveViewStates = function(viewStates) {
    viewStates = viewStates.filter(function(view) { // we should not save "page-with-sidebar" state as it is our internal state
        return view.get("id") !== MODELER_VIEW_ID;
    });

    return this.$viewConfigDAO.saveStates(viewStates, this.$userStore.getCurrentUserName());
};

/**
 * Resets the view - reverts the view`s state to the view`s initial config.
 * @param {String} viewId - the view`s ID
 * @returns {Promise}
 */
ViewConfigActionHandler.prototype.resetViewState = function(viewId) {
    assert(viewId, ["View`s ID has to be passed"]);

    var config = this.$viewConfigStore.getViewConfig(viewId);

    return this.setViewState(viewId, config).then(this.saveViewState.bind(this, viewId, config));
};

ViewConfigActionHandler.prototype.$fetchViews = function() {
    var me = this,
        viewState,
        views;

    return this.$viewConfigDAO.fetchConfigs().then(function(configs) {
        return me.$viewConfigDAO.fetchStates(me.$userStore.getCurrentUserName()).then(function(states) {

            views = lodash.chain(configs).map(function(config) {
                return {
                    config: config,
                    state: lodash.find(states, function(state) {
                        return state.id === config.id;
                    })
                }
            }).mapKeys(function(view) {
                return view.config.id;
            }).value();

            states.forEach(function(viewState) {
                if (!views[viewState.id]) {
                    views[viewState.id] = {
                        config: lodash.cloneDeep(viewState),
                        state: lodash.cloneDeep(viewState)
                    }
                }
            });

            return views;
        });
    });
};

module.exports = ViewConfigActionHandler;

},{"../constant":191,"../dao/viewconfigdao":220,"../util/promisecache":283,"assert":undefined,"immutable":44,"lodash":90}],175:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = {
    LEVELS: {
        ERROR: "Error",
        INFO: "Info",
        WARNING: "Warning"
    },
    STATES: {
        SUCCEEDED: "SUCCEEDED",
        FAILED: "FAILED",
        STARTED: "STARTED"
    },
    ActionActions: createConstant("ActionStore", [
        "CLEAR_STATUS",
        "START_ACTION",
        "FAIL_ACTION",
        "SUCCEED_ACTION",
        "LOAD_ACTIONS"
    ]),
    ActionEvents: createConstant("ActionStore", [
        "ACTION_STARTED",
        "ACTION_FAILED",
        "ACTION_SUCCEEDED",
        "ACTIONS_LOADED",
        "CHANGED"
    ])
};

},{"../store/store":275}],176:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

/**
 * An enum of different selection types.
 * @type {Object}
 */
module.exports = {
    SelectionTypes: createConstant("SelectionTypes", [
        "EXPLICITLY_INCLUDED",
        "IMPLICITLY_INCLUDED",
        "CAN_BE_INCLUDED",
        "EXCLUDED"
    ]),
    AssociationStrategy: createConstant("AssociationStrategy", ["SINGLE", "GROUPED"])
};

},{"../store/store":275}],177:[function(require,module,exports){
"use strict";

module.exports = {
    X: "X",
    Y: "Y",
    SLICE: "Z"
};
},{}],178:[function(require,module,exports){
"use strict";

module.exports = {
    OK: "Ok",
    OK_CANCEL: "OkCancel",
    YES_NO_CANCEL: "YesNoCancel",
    CALCULATE_CONTINUE_CANCEL: "CalculateContinueCancel",
    CONTINUE_CANCEL: "ContinueCancel",
    CONFIRM_CONTINUE_CANCEL: "ConfirmContinueCancel",
    CONFIRM_DISCARD_CANCEL: "ConfirmDiscardCancel"
};
},{}],179:[function(require,module,exports){
"use strict";

module.exports = {
    OK: "Ok",
    CANCEL: "Cancel",
    YES: "Yes",
    NO: "No",
    CALCULATE: "Calculate & Continue",
    CONFIRM: "Confirm",
    CONTINUE: "Continue",
    DISCARD: "Discard"
};
},{}],180:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

exports.ACTIONS = createConstant("Collaboration", [
    "UPDATE_SOCKET_LIST",
    "UPDATE_USER_STATUS",
    "UPDATE_CURRENT_SOCKET",
    "UPDATE_DATA_EDITS",
    "BROADCAST_EDITS_WERE_MADE",
    "BROADCAST_ACTION_CHANGED_STATE"
]);

exports.EVENTS = createConstant("Collaboration", [
    "USER_LIST_UPDATED",
    "DATA_UPDATED",
    "USER_CONNECTED",
    "USER_NEW_SOCKET",
    "USER_SOCKET_CLOSED",
    "USER_DISCONNECTED",
    "CONNECT",
    "DISCONNECT",
    "ACTION_STATE_CHANGED"
]);

exports.UPDATE_INTERVALS = {
    MIN: 0,
    MAX: 6
};

exports.STANDARD_MESSAGE_TYPES = {
    OPEN: "open",
    CLOSE: "close"
};

exports.MESSAGE_PROPERTIES = {
    JOIN: "join",
    LEAVE_CODE: "leave_code",
    PEERS: "peers"
};

},{"../store/store":275}],181:[function(require,module,exports){
"use strict";

var isMac = (typeof window !== "undefined") && navigator.platform.toUpperCase().indexOf("MAC") >= 0;

module.exports = {
    MenuItemInfo: {
        Create: {
            key: "createItem",
            label: "Create "
        },
        FilterSection: {
            key: "filterSection"
        },
        Deferred: {
            key: "deferred",
            label: "Deferred Calc"
        },
        Lock: {
            key: "lock",
            label: isMac ? "Lock (Cmd + L)" : "Lock (Ctrl + L)"
        },
        Calculate: {
            key: "calculate",
            label: "Calculate (F9)"
        },
        Discard: {
            key: "discard",
            label: "Discard"
        },
        Review: {
            key: "review",
            label: isMac ? "Review (Cmd + F9)" : "Review (Ctrl + F9)"
        },
        Unlock: {
            key: "unlock",
            label: isMac ? "Unlock (Cmd + Shift + L)" : "Unlock (Ctrl + Shift + L)"
        },
        UnlockAll: {
            key: "unlockAll",
            label: "Unlock All"
        },
        ModelBrowser: {
            key: "modelBrowser",
            label: "Model Browser"
        },
        Measures: {
            key: "measures",
            label: "Visible Measures Panel"
        },
        ConfigurationMode: {
            key: "configurationMode",
            label: "Configuration Mode"
        },
        ChartMode: {
            key: "chartMode",
            label: "Chart Mode"
        },
        Copy: {
            key: "copy",
            label: isMac ? "Copy (Cmd + C)" : "Copy (Ctrl + C)"
        },
        Cut: {
            key: "cut",
            label: isMac ? "Cut (Cmd + X)" : "Cut (Ctrl + X)"
        },
        Paste: {
            key: "paste",
            label: isMac ? "To Paste use (Cmd + V)" : "To Paste use (Ctrl + V)"
        },
        ExportToCsv: {
            key: "exportToCsv",
            label: "Export To Csv"
        },
        ExportToExcel: {
            key: "exportToExcel",
            label: "Export To Excel"
        },
        Filter: {
            key: "filter",
            label: "Filter"
        },
        ClearFilter: {
            key: "clearFilter",
            label: "Clear Filter"
        },
        Sort: {
            key: "sort",
            label: "Sort"
        },
        SortAsc: {
            key: "sortAsc",
            label: "Sort Ascending"
        },
        SortDesc: {
            key: "sortDesc",
            label: "Sort Descending"
        },
        ClearSort: {
            key: "clearSort",
            label: "Clear Sort"
        },
        ConditionalFormatting: {
            key: "conditionalFormatting",
            label: "Conditional Formatting"
        },
        ClearFormatting: {
            key: "clearFormatting",
            label: "Clear Formatting"
        },
        FormulaEditor: {
            key: "formulaEditor",
            label: "Formula Editor"
        },
        PivotSettings: {
            key: "pivotSettings",
            label: "Pivot Settings"
        },
        ResetState: {
            key: "resetState",
            label: "Reset State"
        },
        Remove: {
            key: "remove",
            label: "Remove"
        },
        MeasureProperties: {
            key: "measureProperties",
            label: "Measure Properties"
        },
        HideOutline: {
            key: "hideOutline",
            label: "Hide Outline"
        },
        DisplayOutline: {
            key: "displayOutline",
            label: "Display As Outline"
        },
        HideRollup: {
            key: "hideRollup",
            label: "Hide Rollup"
        },
        DisplayRollup: {
            key: "displayRollup",
            label: "Display Rollup"
        },
        SyncAll: {
            key: "syncAll",
            label: "Sync All"
        },
        SyncAllOnPage: {
            key: "syncAllOnPage",
            label: "Sync All On Page"
        },
        UnsyncAll: {
            key: "unsyncAll",
            label: "Unsync All"
        },
        UnsyncAllOnPage: {
            key: "unsyncAllOnPage",
            label: "Unsync All On Page"
        },
        UnsyncThis: {
            key: "unsyncThis",
            label: "Unsync This"
        },
        SyncWith: {
            key: "syncWith",
            label: "Sync With..."
        },
        Details: {
            key: "details",
            label: "Details"
        }
    },
    IconInfo: {
        Checked: "check",
        Sync: "link",
        Unsync: "chain-broken",
        Lock: "lock",
        Unlock: "unlock",
        Sort: "sort",
        SortAsc: "sort-amount-asc",
        SortDesc: "sort-amount-desc",
        Filter: "filter",
        Remove: "times",
        Copy: "files-o",
        Cut: "scissors",
        Paste: "clipboard",
        Search: "search",
        Details: "list-alt",
        Plus: "plus"
    }
};

},{}],182:[function(require,module,exports){
"use strict";

module.exports = {
    options: {autoDismiss: 3},
    messages: {
        info: "CSV exporting has started.",
        success: "CSV downloading completed.",
        empty: "Sheet is empty, nothing to export.",
        error: "An error has occurred during exporting CSV.",
        largeDataWarn: "Attempting to export a large data set (> 1 million cells). This may take a long time and may run out of memory."
    }
};

},{}],183:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = createConstant("CustomEventTypes", [
    "CREATED_BY_MODELER"
]);
},{"../store/store":275}],184:[function(require,module,exports){
"use strict";

module.exports = {
    WIDTH: 80,
    HEIGHT: 20
};
},{}],185:[function(require,module,exports){
"use strict";

module.exports = {
    UP: "Up",
    RIGHT: "Right",
    DOWN: "Down",
    LEFT: "Left"
};
},{}],186:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = {
    TYPES: {
        FIELD: "Field"
    },
    STATE: {
        DRAGGING: "Dragging",
        DROPPED: "Dropped"
    },
    ACTIONS: createConstant("DragAndDrop", [
        "DRAG",
        "DRAGOVER",
        "DROP",
        "DRAGEND"
    ]),
    EVENTS: createConstant("DragAndDrop", [
        "CHANGED"
    ])
};

},{"../store/store":275}],187:[function(require,module,exports){
"use strict";

module.exports = {
    options: {autoDismiss: 3},
    messages: {
        info: "Excel file exporting has started.",
        success: "Excel file downloading completed.",
        empty: "Sheet is empty, nothing to export.",
        error: "An error has occurred during exporting Excel file.",
        largeDataWarn: "Attempting to export a large data set (> 1 million cells). This may take a long time and may run out of memory."
    }
};
},{}],188:[function(require,module,exports){
"use strict";

var FieldTypes = require("./fieldtypes");
var TypeClasses = {};

TypeClasses[FieldTypes.LEVEL] = "level";
TypeClasses[FieldTypes.MEASURE_GROUP] = "measure-group";
TypeClasses[FieldTypes.MEASURE] = "measure";

module.exports = TypeClasses;
},{"./fieldtypes":189}],189:[function(require,module,exports){
"use strict";

/**
 * @constant {number} FieldTypes
 */
var FieldTypes = Object.freeze({
    MEASURE: 1,
    LEVEL: 2,
    DIMENSION: 3,
    MEASURE_GROUP: 4
});

module.exports = FieldTypes;
},{}],190:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

exports.ACTIONS = createConstant("GridOptions", [
    "SET_OPTIONS",
    "SET_FORMATTING",
    "ADD_RULE",
    "REMOVE_RULE",
    "UPDATE_RULE",
    "UPDATE_MEASURES"
]);

exports.EVENTS = createConstant("GridOptions", [
    "CHANGED"
]);

var CONDITIONALS = {
    NOT_EMPTY: {
        name: "notEmpty",
        label: "is not empty",
        unsupportedTypes: ["BOOLEAN"]
    },
    EMPTY: {
        name: "empty",
        label: "is empty",
        unsupportedTypes: ["BOOLEAN"]
    },
    GREATER_THAN: {
        name: ">",
        label: ">",
        unsupportedTypes: ["BOOLEAN", "STRING", "NAMED"]
    },
    GREATER_EQUAL: {
        name: ">=",
        label: ">=",
        unsupportedTypes: ["BOOLEAN", "STRING", "NAMED"]
    },
    LESS_THAN: {
        name: "<",
        label: "<",
        unsupportedTypes: ["BOOLEAN", "STRING", "NAMED"]
    },
    LESS_EQUAL: {
        name: "<=",
        label: "<=",
        unsupportedTypes: ["BOOLEAN", "STRING", "NAMED"]
    },
    EQUAL: {
        name: "=",
        label: "=",
        unsupportedTypes: []
    },
    NOT_EQUAL: {
        name: "<>",
        label: "<>",
        unsupportedTypes: []
    },
    RANGE: {
        name: "range",
        label: "is in range",
        INCLUDE_MIN: "includeMin",
        INCLUDE_MAX: "includeMax",
        unsupportedTypes: ["BOOLEAN", "STRING", "NAMED"]
    }
};

exports.CONDITIONALS = CONDITIONALS;

exports.NUMERIC_CONDITIONALS = [
    CONDITIONALS.LESS_EQUAL.name,
    CONDITIONALS.LESS_THAN.name,
    CONDITIONALS.GREATER_EQUAL.name,
    CONDITIONALS.GREATER_THAN.name
];

exports.FORMATTING_CONTROLLER = {
    VIEW_MODES: {
        VIEW: "view",
        EDIT: "edit",
        REMOVE: "remove"
    },
    ALL: "All",
    INTERSECTIONS: "Intersections"
};

exports.GLOBAL_OPTIONS = "GLOBAL_OPTIONS";
},{"../store/store":275}],191:[function(require,module,exports){
/**
* Constants module.
* Contains all constants defined and used in logicblox.pivot.
* @module constant
*/

"use strict";

module.exports = {
    CHANGE_EVENT: "CHANGE_EVENT",
    DOUBLE_CLICK_TIME: 500,
    SORT: require("./sort"),
    ACTIONS: require("./actions"),
    CSV_EXPORT: require("./csvexport"),
    MESSAGES: require("./messages"),
    DefaultCellSize: require("./defaultcellsize"),
    PivotEditMode: require("./pivoteditmode"),
    ButtonTypes: require("./buttontypes"),
    ButtonPanelTypes: require("./buttonpaneltypes"),
    ModalWindowActions: require("./modalwindowsactions"),
    ModalWindows: require("./modalwindows"),
    Direction: require("./direction"),
    NotificationLevels: require("./notificationlevels"),
    NotificationPositions: require("./notificationpositions"),
    Labels: require("./labels"),
    Collaboration: require("./collaboration"),
    StorageTypes: require("./storageTypes"),
    UserActivity: require("./useractivity"),
    EXCEL_EXPORT: require("./excelexport"),
    DND: require("./draganddrop"),
    AssociativeFiltering: require("./associativefiltering"),
    GridOptions: require("./gridoptions"),
    ViewConfig: require("./viewconfig"),
    Layout: require("./layout"),
    View: require("./view"),
    User: require("./user"),
    FieldTypes: require("./fieldtypes"),
    FieldTypeClasses: require("./fieldtypeclasses"),
    Keys: require("./keys"),
    SignalDataTypes: require("./signaldatatypes"),
    PagesSyncStates: require("./pages_sync_states"),
    VegaLite: require("./vegalite"),
    CustomEventTypes: require("./custom_event_types"),
    ContextMenu: require("./context_menu"),
    FilterableMeasureTypes: ["DECIMAL", "INT", "FLOAT"],
    Axes: require("./axes")
};

},{"./actions":175,"./associativefiltering":176,"./axes":177,"./buttonpaneltypes":178,"./buttontypes":179,"./collaboration":180,"./context_menu":181,"./csvexport":182,"./custom_event_types":183,"./defaultcellsize":184,"./direction":185,"./draganddrop":186,"./excelexport":187,"./fieldtypeclasses":188,"./fieldtypes":189,"./gridoptions":190,"./keys":192,"./labels":193,"./layout":194,"./messages":195,"./modalwindows":196,"./modalwindowsactions":197,"./notificationlevels":198,"./notificationpositions":199,"./pages_sync_states":200,"./pivoteditmode":201,"./signaldatatypes":202,"./sort":203,"./storageTypes":204,"./user":205,"./useractivity":206,"./vegalite":207,"./view":208,"./viewconfig":209}],192:[function(require,module,exports){
module.exports = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
};

},{}],193:[function(require,module,exports){
"use strict";

module.exports = {
    MeasureFilterWindow: {
        NAV_RANGE_TITLE: "Range",
        NAV_AT_LEAST_TITLE: "At Least",
        NAV_AT_MOST_TITLE: "At Most"
    }
};
},{}],194:[function(require,module,exports){
"use strict";

module.exports = {
    VIEW_MODE: {
        DEFAULT: "default",
        CONFIGURATION: "configuration",
        CHART: "chart",
        FORM: "form"
    },
    POSITION: {
        LEFT: "left",
        RIGHT: "right",
        TOP: "top",
        BOTTOM: "bottom"
    }
};

},{}],195:[function(require,module,exports){
"use strict";

module.exports = {
    UNEXPECTED_SERVER_ERROR: "An unexpected server error occurred.",

    INCONSISTENT_EDIT_ERROR: "The edits so far are inconsistent (e.g., a metric may not have an inverse, or all metrics cannot be edited simultaneously).  Please look for problems in your edits and try again.",

    INCONSISTENT_SINGLE_EDIT_ERROR: "Unexpected: single edit on noneditable position.",

    INCONSISTENT_NEW_EDITS_ERROR: "The set of edits you have made are inconsistent (e.g. a metric may not have an inverse, or all of the metrics cannot be edited simultaneously).  Please look for problems in your edits and try again.",
    UNEXPECTED_EDIT_ERROR: "Your edit(s) could not be committed due to a processing error or invalid/inconsistent data.  Please look for problems in your edits and try again.",

    CONFIRM_NAVIGATION: "Confirm Navigation",
    UNCALCULATED_CHANGES: "There are uncalculated changes. The data will be lost if you leave the page.",

    PLEASE_CONFIRM: "Please Confirm",
    SWITCH_DEFAULT_MODE: "This configuration can't be displayed in the form mode. Would you like to switch to the default mode?"
};

},{}],196:[function(require,module,exports){
"use strict";

var Types = {
    CONFIRMATION_DIALOG: "CONFIRMATION_DIALOG",
    REVIEW_EDITS_DIALOG: "REVIEW_EDITS_DIALOG",
    REVIEW_LOCKS_DIALOG: "REVIEW_LOCKS_DIALOG",
    LOGOUT_NOTIFICATION_DIALOG: "LOGOUT_NOTIFICATION_DIALOG",
    SORT_DIALOG: "SORT_DIALOG",
    SIGNAL_MANAGEMENT_DIALOG: "SIGNAL_MANAGEMENT_DIALOG",
    SIGNALS_INFO_DIALOG: "SINGAL_INFO_DIALOG",
    PAGES_SYNC_DIALOG: "PAGES_SYNC_DIALOG",
    WARNING_DIALOG: "WARNING_DIALOG",
    LEVEL_CREATION_FORM: "LEVEL_CREATION_FORM"
};

var RenderPolicy = {
    REPLACE: "REPLACE",
    APPEND: "APPEND"
};

/**
 * @namespace Specs
 */
var Specs = {};

Specs[Types.CONFIRMATION_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.REVIEW_LOCKS_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.REVIEW_EDITS_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.LOGOUT_NOTIFICATION_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.SORT_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.SIGNAL_MANAGEMENT_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.SIGNALS_INFO_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.PAGES_SYNC_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.WARNING_DIALOG] = {
    renderPolicy: RenderPolicy.REPLACE
};

Specs[Types.LEVEL_CREATION_FORM] = {
    renderPolicy: RenderPolicy.REPLACE
};

/**
 * For testing. Lets us test APPEND render policy.
 */
Specs[Types.TEST_DIALOG] = {
    renderPolicy: RenderPolicy.APPEND
};

exports.Types = Types;
exports.RenderPolicy = RenderPolicy;
exports.Specs = Specs;
},{}],197:[function(require,module,exports){
"use strict";

module.exports = require("../store/store").createConstant("ModalWindows", ["OPEN_WINDOW", "CLOSE_WINDOW"]);
},{"../store/store":275}],198:[function(require,module,exports){
"use strict";

module.exports = {
    SUCCESS: "success",
    INFO: "info",
    WARNING: "warning",
    ERROR: "error"
};
},{}],199:[function(require,module,exports){
"use strict";

module.exports = {
    TOP_RIGHT: "tr",
    TOP_LEFT: "tl",
    TOP_CENTER: "tc",
    BOTTOM_RIGHT: "br",
    BOTTOM_LEFT: "bl",
    BOTTOM_CENTER: "bc"
};
},{}],200:[function(require,module,exports){
"use strict";

module.exports = {
    SYNCED_WITH_CURRENT_SHEET: "SYNCED_WITH_CURRENT_SHEET",
    SYNCED: "SYNCED",
    UNSYNCED: "UNSYNCED"
};
},{}],201:[function(require,module,exports){
"use strict";

module.exports = {
    MULTI: "multi",
    SINGLE: "single"
};

},{}],202:[function(require,module,exports){
"use strict";

var assert = require("assert");
var Immutable = require("immutable");
var Joi = require("joi");
var lodash = require("lodash");

var POSITIONS = Joi.array().items(Joi.object().keys({
    qualifiedName: Joi.string().required(),
    positions: Joi.array().items(Joi.string())
}));
/**
* POSITIONS example
*    [
*        {
*            qualifiedName: "Product:sku",
*            positions: ["sku-1", "sku-2"]
*        },
*        {
*            qualifiedName: "Location:store",
*            positions: ["store-1", "store-2"]
*        }
*    ]
*/

var STRING = Joi.string().required();

/**
 * Removes "measure" prop from initial value and transforms data to be an array.
 * @param  {Function}      func
 * @param  {Immutable.Map} initValue
 * @param  {*}             data
 * @return {Immutable.Map}
 */
function removeMeasurePropAndTransformToArray(func, initValue, data) {
    if (!Immutable.List.isList(data)) {
        data = Immutable.List([data]);
    }

    initValue = initValue.delete("measure");
    return func(initValue, data);
}

var Transformations = {
    POSITIONS: lodash.wrap(function(initValue, data) {
        return initValue.set("positions", data);
    }, removeMeasurePropAndTransformToArray),

    STRING: lodash.wrap(function(initValue, data) {
        return data.join(" ");
    }, removeMeasurePropAndTransformToArray)
};

module.exports = {
    POSITIONS: "POSITIONS",
    STRING: "STRING",
    schemas: {
        POSITIONS: POSITIONS,
        STRING: STRING
    },
    getTransformationFn: function(dataType) {
        var fn = Transformations[dataType];

        assert(lodash.isFunction(fn), "There is no transformation function for data type " + dataType);
        return fn;
    }
};

},{"assert":undefined,"immutable":44,"joi":58,"lodash":90}],203:[function(require,module,exports){
"use strict";

module.exports = {
    ASCENDING: "asc",
    DESCENDING: "desc",
    DEFAULT_ATTR: "label",
    DEFAULT_TYPE: "asc",
    /**
     * Converts the various forms of sort order strings to the proper form based
     * on the constants.
     * 
     * @param  {String} sortStr 
     * @return {ASCENDING|DESCENDING} the constant value for the given string
     */
    getSortType: function(sortStr) {
        if (!sortStr)
            return this.DEFAULT_TYPE;

        if (sortStr.toLowerCase() === "asc" || sortStr.toLowerCase() === "ascending")
            return this.ASCENDING;

        if (sortStr.toLowerCase() === "desc" || sortStr.toLowerCase() === "descending")
            return this.DESCENDING;

        // don't know that string, return default type
        return this.ASCENDING;
    },

    /**
     * Converts the various forms of sort order strings to the proper form based
     * on the constants.
     *
     * @param  {String} attrStr
     * @return {String} one of the supported sorting attributes - "label" / "order"
     */
    getSortAttr: function(attrStr) {
        if (!attrStr)
            return this.DEFAULT_ATTR;

        if (attrStr.toLowerCase() === "label" || attrStr.toLowerCase() === "order")
            return attrStr;

        // don't know that string, return default attribute
        return this.DEFAULT_ATTR;
    }
};

},{}],204:[function(require,module,exports){
module.exports = {
    LOCAL: "local",
    SESSION: "session",
    IN_MEMORY: "in-memory"
};
},{}],205:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = {
    ACTIONS: createConstant("User", [
        "AUTHENTICATE",
        "UNAUTHENTICATE"
    ]),
    EVENTS: createConstant("User", [
        "CHANGED"
    ])
};

},{"../store/store":275}],206:[function(require,module,exports){
"use strict";

module.exports = {
    IDLE_TIME_VALUES: {
        //in seconds
        NOTIFICATION_TIME: 1800,
        LOGOUT_TIME: 60,
        IGNORE_BROADCASTING_TIME: 300
    },
    USER_ACTIVITY_STATUS: {
        ACTIVE: "ACTIVE",
        IGNORE_BROADCASTING: "IGNORE_BROADCASTING",
        IDLE: "IDLE",
        LOGGED_OUT: "LOGGED_OUT"
    },
    LOCAL_STORAGE_PROPERTY: "USER_ACTIVITY_STATUS_VALUES",
    LAST_ACTIVITY_TIMESTAMP: "LAST_ACTIVITY_TIMESTAMP"
};

},{}],207:[function(require,module,exports){
"use strict";

module.exports = {
    MARK: {
        AREA: "area",
        BAR: "bar",
        LINE: "line",
        POINT: "point",
        TEXT: "text",
        TICK: "tick",
        RULE: "rule",
        CIRCLE: "circle",
        SQUARE: "square"
    },
    FIELD_TYPE: {
        QUANTITATIVE: "quantitative",
        TEMPORAL: "temporal",
        ORDINAL: "ordinal",
        NOMINAL: "nominal"
    },
    AGGREGATE: {
        MEAN: "mean",
        COUNT: "count",
        SUM: "sum"
    }
};

},{}],208:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = {
    ACTIONS: createConstant("View", [
        "SET_CURRENT_PAGE_VIEW"
    ]),
    EVENTS: createConstant("View", [
        "CURRENT_PAGE_VIEW_CHANGED"
    ]),

    Modules: {
        //Views
        Page: "Page",
        Canvas: "CanvasView",
        Layout: "Layout",
        Sheet: "SheetView",
        VegaChart: "VegaChart",
        ModelerNavigationTree: "ModelerNavigationTree",
        Image: "Image",
        LogConsole: "LogConsole",
        ActionButtons: "ActionButtons",
        ShortcutButtons: "ShortcutButtons",
        ContentPresenter: "ContentPresenter",

        //Sheet Modules
        VegaLite: "VegaLite",
        PivotGrid: "PivotGrid",
        Form: "Form",
        Grid: "Grid",
        MeasureFilterWindow: "MeasureFilterWindow",
        ConfigMenu: "ConfigMenu",
        RollupWindow: "RollupWindow",
        Rows: "Rows",
        Columns: "Columns",
        Measures: "Measures",
        Slices: "Slices",
        ModelBrowser: "ModelBrowser",
        MeasureBrowser: "MeasureBrowserController",
        DimensionBrowser: "DimensionBrowserController",
        MeasureLanguageEditor: "MeasureLanguageEditor",
        MeasureWindow: "MeasureWindow",
        ConditionalFormatting: "ConditionalFormatting",
        SheetConfigurationPanel: "SheetConfigurationPanel"
    }
};

},{"../store/store":275}],209:[function(require,module,exports){
"use strict";

var createConstant = require("../store/store").createConstant;

module.exports = {
    ACTIONS: createConstant("ViewConfig", [
        "SET_VIEW_STATE"
    ]),
    EVENTS: createConstant("ViewConfig", [
        "STATE_CHANGED",
        "CONFIG_CHANGED"
    ]),
    MODELER_VIEW_ID: "page-with-sidebar",
    PATH: {
        SIGNALS: ["signals", "output"],
        SIGNAL_LISTENERS: ["signals", "input"]
    }
};

},{"../store/store":275}],210:[function(require,module,exports){
"use strict";

var csv = module.exports;
var CELLS_PER_ITER = 5000;

csv.getExportData = function(viewId, maDataStore, onComplete, csvOptions) {
    var queryOptions = {
            attributeOptions: {
                includeValue: true,
            },
            builderOptions: {
                prebuildInfoAndData: false
            }
        },
        headingData = maDataStore.getHeadingData(viewId, "exportCsv"),
        width = headingData.getHeadingAxisInfo("X").getLength(),
        length = headingData.getHeadingAxisInfo("Y").getLength(),
        linesPerIter = Math.max(Math.trunc(CELLS_PER_ITER / width), 25),
        csvBuilder = csv.mkCsvBuilder(length, width, 1, 0, csvOptions),
        exportRowsFrom = function(index) {
            return function() {
                // The outpus CSV always has the metrics on the X axis and all the levels on the
                // Y axis. So, iterate over the Y exporting ROWS_PER_ITER at a time.
                var range = {
                    Y: {
                        start: index,
                        length: (length - index) > linesPerIter ? linesPerIter : (length - index)
                    }
                };

                if ((index + range.Y.length) < length) {
                    setTimeout(exportRowsFrom(index + linesPerIter));
                }

                maDataStore.getDataRange(viewId, "exportCsv", range, csvBuilder.cellBuilder, true, queryOptions, ["Y","X"]);

                if ((index + range.Y.length) >= length) {
                    onComplete(csvBuilder.getCsv());
                }
            };
        };
    setTimeout(exportRowsFrom(0));
};

csv.mkCsvBuilder = function(length, width, horAxisIdx, verAxisIdx, csvOptions) {
    var headingLine = '',
        csv = '',
        levelMemberAttribute = (csvOptions && csvOptions.exportLevelMemberId) ? "id" : "label",
        valueAttribute = (csvOptions && csvOptions.exportRawValue) ? "rawValue" : "formattedValue",

        builder = function(fields, rollups, members, headings, positionInfo, coord, cellInfoBuilder, cellDataBuilder) {
            var cellInfo = cellInfoBuilder(fields, rollups, members, headings, positionInfo, coord),
                cellData = cellDataBuilder(fields, rollups, members, positionInfo),
                //coord = cellInfo.coord,
                verCoord = coord[verAxisIdx],
                horCoord = coord[horAxisIdx],
                verHeadings,
                horHeadings,
                headingIdx,
                headingLen,
                hasValue,
                hasSelectedDataLabel;

            // filter out any placeholder headings, occurs when there are no
            // levels on the grid
            cellInfo.headings[verAxisIdx] = cellInfo.headings[verAxisIdx].filter(function(verHeading) {
                return !verHeading.config.placeholder;
            });

            cellInfo.headings[horAxisIdx] = cellInfo.headings[horAxisIdx].filter(function(horHeading) {
                return !horHeading.config.placeholder;
            });

            if (verCoord === 0) {
                //if top row, add to the header line
                if (horCoord === 0) {
                    //in the top left cell, add the
                    //headings for Y axis key
                    verHeadings = cellInfo.headings[verAxisIdx];
                    verHeadings.forEach(function(verHdg) {
                        if (headingLine.length > 0) {
                            headingLine += ',';
                        }
                        headingLine += '"' + verHdg.config.field.id + '"';
                    });
                }

                //headings from X axis
                horHeadings = cellInfo.headings[horAxisIdx];
                for (headingIdx = 0; headingIdx < horHeadings.length; headingIdx++) {
                    if (!cellData.invalid) {
                        if (headingLine.length > 0) {
                            headingLine += ',';
                        }
                        headingLine += '"' + horHeadings[headingIdx][levelMemberAttribute] + '"';
                    }
                }
            }
            if (horCoord === 0) {
                //when we're at the beginning of a line, add the key labels
                verHeadings = cellInfo.headings[verAxisIdx];
                headingIdx = 0;
                headingLen = verHeadings.length;
                for (; headingIdx < headingLen; headingIdx++) {
                    csv += '"' + verHeadings[headingIdx][levelMemberAttribute] + '",';
                }
            }

            hasSelectedDataLabel = !cellData.invalid && cellData.queryResults.selectedDataLabel && cellData.queryResults.selectedDataLabel.value;
            hasValue = !cellData.invalid && cellData.queryResults.value && cellData.queryResults.value.value;

            // check selectedDataLabel first as that takes priority over value
            if (hasSelectedDataLabel && cellData.queryResults.selectedDataLabel && cellData.queryResults.selectedDataLabel.value.formattedValue.length > 0) {
                csv += '"' + cellData.queryResults.selectedDataLabel.value[valueAttribute][0][0] + '"';
            } else if (hasValue && cellData.queryResults.value && cellData.queryResults.value.value[valueAttribute].length > 0) {
                csv += '"' + cellData.queryResults.value.value[valueAttribute][0][0] + '"';
            } else if (!hasSelectedDataLabel && !hasValue) {
                // query results could be empty in the case where we are only exporting headers or
                // all measures are invalid

                // strip the comma b/c there are no measures
                csv = csv.slice(0,-1);
            }

            if (horCoord === width-1)
                csv += '\n';
            else
                csv += ',';
        };

    return {
        cellBuilder: builder,
        getCsv: function() {
            // strip off trailing newline
            if (csv.length > 1) {
                csv = csv.slice(0,-1);
            }
            return headingLine + "\n" + csv;
        }
    };
};

},{}],211:[function(require,module,exports){
    "use strict";

    /* A stateless, singleton module to centralize and abstract
     * interfacing with measure service data */
    var util = require("./util");
    var cubiql = module.exports;
    var assert = require("assert");
    var logiql = require("./logiql");
    var lodash = require("lodash");
    var MQG = require("measure-query-gen/src/MQG");
    var rule = logiql.rule;
    var and = logiql.and;

    cubiql.noneAgg = "(None)";
    cubiql.noneUpd = "(None)";
    
    // FIX can we replace strings/regexps with JSON?
    /**
     * Regexp for filter/slice expressions. Slices end with a !.
     *
     * @param {String} s
     * @return {Object} return
     * @return {String} return.dimlvl
     * @return {String} return.comparison
     * @return {String} return.member
     */
    cubiql.parseFilter = function (s) {
        //Regex transforming the filter string : 
        //for levels: "Dimension:Level = level1"
        //for values: "MeasureName > value" or "MeasureName >= value"
        //var matches = s.match(/^([^:]+(?::[^:=!<>~]+)?)([!=<>~]+)(.*?)!?$/); //OLD REGEX TO DROP
        var matches = s.match(/^(.*?)([!=<>~]+)(.*?)!?$/);
        assert(matches instanceof Array);
        assert(matches.length === 4);
        return {dimlvl: matches[1],
                comparison: matches[2],
                member: matches[3]};
    };

    /**
     * forgiving method for working with our currently mixed codebase.. accepts either string or a filter.
     * In the case of a filter, the same will be returned, otherwise it will parse the string and return the 
     * resulting filter
     *
     * @param {String|Filter} filterString, of the form "Dim:Lvl=v1|Dim:Lvl=v2|..." or "Metric>v1&Metric<v2"
     * @return {cubiql.Filter} ret
     */
    cubiql.parseFilterString = function (filterString) {
        assert(lodash.isString(filterString) || lodash.isObject(filterString), "Invalid argument!");
        //forgiving check to handle passing a filter in, which results in no-op
        if (lodash.isObject(filterString)) //checking object instead of 'Filter' b/c cloning loses the prototype
            return filterString;

        var filterClauses = filterString.replace("&","|").split("|");
        assert(filterClauses.length > 0, "Empty filters");

        filterClauses = filterClauses.map(cubiql.parseFilter);
        var comparisons = filterClauses.map(function (filter) {
            return new cubiql.Comparison(filter.comparison, filter.member);
        });

        var levelOrMetric = filterClauses[0].dimlvl;
        return new cubiql.Filter(levelOrMetric, comparisons);
    };

    /**
     * Convert a string representation of filters into a structured representation
     *
     * @param {String[]} filterList
     * @return {cubiql.Filter[]} ret
     */
    cubiql.parseFilterList = function (filterList) {
        util.type.assertArgs(arguments, [Array]);
        return filterList.map(cubiql.parseFilterString);
    };

    /**
     * @typedef {Object} AggDef
     * @property {String} method
     * @property {Boolean} isAll
     * @property {String} keyOrMeasure
     *
     * Regexp for aggregate expressions.
     *
     * @param {String} s
     * @return {AggDef} 
     */
    cubiql.parseAgg = function (s) {
        var matches = s.match(/^([^:]+):(.*)$/);
        assert(matches.length === 3);
        return {
            method: matches[1],
            keyOrMeasure: matches[2],
            isAll: !cubiql.isMeasure(matches[2]) && /ALL$/.test(matches[2])
        };
    };

    /**
     * @param {String} type, a primitive type
     * @return {Function} parser, a parser from string to the type
     */
    cubiql.getParser = function (type) {
        type = type.toLowerCase();
        // FIX make labels uppercase to avoid
        var boolParser = function(s) {
                if (s === true || (s.toLowerCase && s.toLowerCase() === "true")) return true;
                else if (s === false || (s.toLowerCase && s.toLowerCase() === "false")) return false;
                else console.error("Expected a boolean value");
            },
            map =
            {"int": (function (s) {
                var n = parseInt(s);
                if (isNaN(n)) console.error("Couldn't parse string '" + s + "' as int.");
                return n;
            }),
             "float": (function (s) {
                 var n = parseFloat(s);
                 if (isNaN(n)) console.error("Couldn't parse string '" + s + "' as float.");
                 return n;
             }),
             "decimal": (function (s) {
                 var n = parseFloat(s);
                 if (isNaN(n)) {
                     console.error("Couldn't parse string '" + s + "' as decimal.");
                 }

                 return String(n);
             }),
             "string": function (s) { return s; },
             //a named type is used for entity-valued metrics
             "named": function (s) { return s; },
    	     //both bool and boolean are currently required because the protocol uses 'bool' and the measure metric type uses 'boolean'
             "bool": (boolParser),
             "boolean": (boolParser)
            };
        assert(map.hasOwnProperty(type), "no parser for type "+type);
        return map[type];
    };

    /**
     * @param {String} s, of the form Dimension:Level
     * @param {Boolean} [includeLabel=false] whether to attempt to parse label from the form Label:Dimension:Level, default: false
     * @return {MeasureProtocol.QualifiedLevel}
     */
    cubiql.parseDimLvl = function (s, includeLabel) {
        assert(typeof s === "string", "parseDimLvl can only parse strings");
        includeLabel = !!includeLabel;
        var ss = s.split(":");
        if (!includeLabel) {
            assert(ss.length === 2, "String "+ s +" doesn't look like dimension:level");
            return {dimension: ss[0], level: ss[1]};
        } else {
            assert(ss.length === 2 || ss.length === 3, "String "+ s +" doesn't look like dimension:level or label:dimension:level");
            if (ss.length === 2)
                return {dimension: ss[0], level: ss[1]};
            else 
                return {label: ss[0], dimension: ss[1], level: ss[2]};
        }
    };

    /**
     * @param {QualifiedLevel} qLevel
     * @return {String} of the form Dimension:Level
     */
    cubiql.qualifiedLevelToQualifiedName = function (qLevel, includeLabel) {
        if (includeLabel)
            return cubiql.qualifiedName(qLevel.dimension, qLevel.level, qLevel.label);
        else
            return cubiql.qualifiedName(qLevel.dimension, qLevel.level);
    };

    /**
     * @param {String} dimension
     * @param {String} [level]
     * @return {String} [label] of the form Dimension:Level
     */
    cubiql.qualifiedName = function (dimension, level, label) {
        return (lodash.isUndefined(label) ? dimension : label) + ":" + (lodash.isUndefined(level) ? "" : level);
    };

    /**
     * Return a function that can be used to creation
     * qualified level names. Useful in mapping operations:
     * 
     *     var qualifiedLevels = levelNames.map(cubiql.mkQualifiedName(dimensionName));
     * 
     * @param   {String}   dimensionName
     * @returns {function} 
     */
    cubiql.mkQualifiedName = function(dimensionName) {
        return function(levelName) {
            return cubiql.qualifiedName(dimensionName, levelName);
        };
    };

    /*
     * @param {Object[]} arr
     * @prop {String} arr[0..].qualifiedName
     * @return {String[]}
     */
    cubiql.pluckQualifiedName = function(arr) {
        return lodash.map(arr, "qualifiedName");
    };

    /*
     * @param {Object[]} arr
     * @prop {String} arr[0..].qualifiedName
     * @return {QualifiedLevel[]}
     */
    cubiql.pluckQualifiedLevel = function(a) {
        return cubiql.pluckQualifiedName(a).map(cubiql.parseDimLvl);
    };

    /**
     * @param {MeasureProtocol.QualifiedLevel} pos1
     * @param {MeasureProtocol.QualifiedLevel} pos2
     * @param {Boolean} [enforceLabel] whether or not the labels must match in order to be equal
     * @param {Boolean} [enforceHierarchy] whether or not the hierarchy must match in order to be equal
     * @return {Boolean}
     */
    cubiql.qLevelEqual = function (pos1, pos2, enforceLabel, enforceHierarchy) {
        var labelMatches = enforceLabel ? cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(pos1))(pos2) : true,
            hierarchyMatches = enforceHierarchy ? (!pos1.hierarchy || !pos2.hierarchy || (pos1.hierarchy === pos2.hierarchy)) : true;

        return (pos1.dimension === pos2.dimension) &&
               (pos1.level === pos2.level) && 
               hierarchyMatches &&
               labelMatches;
    };


    /**
     * @param {MQG.Intersection} inter1
     * @param {MQG.Intersection} inter2
     * @param {Boolean} ignoreOrder ignores the order of the intersections' keys.  Defaults to false
     * @param {Boolean} enforceLabel - consider labels also when comparing qualified levels. Defaults to false
     * @param {Boolean} enforceHierarchy - consider hierarchy also when comparing qualified levels. Defaults to false
     * @return {Boolean}
     */
    cubiql.intersectionEqual = function (inter1, inter2, ignoreOrder, enforceLabel, enforceHierarchy) {
        var levels1 = inter1.qualified_level || [],
            levels2 = inter2.qualified_level || [],
            qLevelEqual = cubiql.qLevelEqual;

        //default ignoreOrder to false
        ignoreOrder = !!ignoreOrder;

        //default enforceLabel to false
        enforceLabel = !!enforceLabel;
        
        // default enforceHierarchy to false
        enforceHierarchy = !!enforceHierarchy;

        return (levels1.length === levels2.length) &&
               (levels1.every(function (p1, i) {
                    if (ignoreOrder) {
                        return levels2.some(cubiql.qlevel.qLevelEqual(p1, enforceLabel, enforceHierarchy));
                    } else {
                        return qLevelEqual(p1, levels2[i], enforceLabel, enforceHierarchy); 
                    }
                }));
    };

    /**
     * @param {MQG.Intersection} inter
     * @param {String} label
     * @return {MQG.Intersection}
     */
    cubiql.projectLabelFromIntersection = function(inter, label) {
        return new MQG.Intersection(
            inter.qualified_level.filter(util.not(cubiql.qlevel.labelEquals(label)))
                .map(cubiql.cloneQualifiedLevel)
        );
    };

    /**
     * Given an intersection and a list of QualifiedLevels, 
     * return a copy of the original intersection but moving the same-label 
     * levels in the intersection to match the levels passed in.
     * e.g.
     *
     * [Intersection(Product:sku, Location:store), [Product:subclass]] =>
     *    Intersection(Product:subclass, Location:store)
     *
     * @param {MQG.Intersection} inter
     * @param {MQG.QualifiedLevel[]} qls
     * @return {MQG.Intersection}
     */
    cubiql.stepIntersectionToLevels = function(inter, qls) {
        return new MQG.Intersection( 
            inter.qualified_level.map(function(ql) {
                var label = cubiql.qlevel.getLabel(ql),
                    matches = qls.filter(cubiql.qlevel.labelEquals(label));

                if (matches.length === 0) {
                    return ql; //no change 
                } else {
                    assert(matches.length === 1, "Too many matches for label '" + label + "'");
                    return cubiql.cloneQualifiedLevel(matches[0]);
                }
            })
        );
    };

    /**
     * Returns true if the dimensionality of inter1 is a subspace of inter2
     *
     * @param {MQG.Intersection} inter1
     * @param {MQG.Intersection} inter2
     * @return {Boolean}
     */
    cubiql.isDimensionalSubset = function(inter1, inter2) {
        var qls1 = inter1.qualified_level,
            qls2 = inter2.qualified_level;
        //trivial case, inter1 has more dimensions than 2 
        if (qls1.length > qls2)
            return false;

        return qls1.every(function(ql1) {
            return qls2.some(cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(ql1)));
        });
    };

    /**
     * Returns the overlapping set of labels between two intersections
     *
     * @param {MQG.Intersection} inter1
     * @param {MQG.Intersection} inter2
     * @return {Label[]}
     */
    cubiql.getOverlappingLabels = function(inter1, inter2) {
        var qls1 = inter1.qualified_level,
            qls2 = inter2.qualified_level;

        return qls1.map(cubiql.qlevel.getLabel).filter(function(label1) {
            return qls2.some(cubiql.qlevel.labelEquals(label1));
        });
    };

    /**
     * In-place sort an intersection's qualified levels by label in the same
     * manner that the measure service does to determine key order in some cases
     *
     * @param MQG.Intersection inter
     * @return {MQG.Intersection}
     */
    cubiql.sortIntersectionByLabel = function(inter) {
        inter.qualified_level.sort(function(ql1, ql2) {
            var lbl1 = cubiql.qlevel.getLabel(ql1),
                lbl2 = cubiql.qlevel.getLabel(ql2); 
            if (lbl1 < lbl2) 
                return -1;
            else if (lbl1 > lbl2)
                return  1;
            return 0; 
        });

        return inter;
    };

    /**
     * Returns true if the metrics and intersections are equal
     *
     * @param {MQG.MetricInter} metricInter1
     * @param {MQG.MetricInter} metricInter2
     * @return {Boolean}
     */
    cubiql.metricInterEqual = function (metricInter1, metricInter2) {
        return (metricInter1.metric === metricInter2.metric) &&
            // compare modulo labels
            cubiql.intersectionEqual(metricInter1.inter, metricInter2.inter, true);
    };

    /**
     * Find 'metricInter' if it's among 'metricInters'.
     *
     * @param {MQG.MetricInter[]} metricInters
     * @param {MQG.MetricInter} metricInter
     * @return {(MetricInter|undefined)}
     */
    cubiql.findMetricInter = function (metricInters, metricInter) {
        return lodash.find(metricInters, lodash.curry(cubiql.metricInterEqual)(metricInter));
    };

    /**
     * @typedef {Comparison} c
     * @prop {String} c.comparison "=" or ">" or "<"
     * @prop {String} c.member
     */
    cubiql.Comparison = function (operator, value) {
        this.comparison = operator;
        this.member = value;
    };

    /**
     * @typedef {Filter} filter
     * @prop {(String|undefined)} filter.metric
     * @prop {(QualifiedLevel|undefined)} filter.qualifiedLevel
     * @prop {Boolean} filter.is_disjunction
     * @prop {Comparison[]} filter.comparisons
     */

    /**
     * @param {String|MQG.QualifiedLevel} metricOrQlevel "Sales" or "Calendar:day"
     * @param {Comparison[])} comparisons
     * @return {cubiql.Filter}
     */
    cubiql.Filter = function (metricOrQlevel, comparisons) {
        if (lodash.isString(metricOrQlevel)) {
            if (metricOrQlevel.match(":")) {
                // qualified level
                this.qualifiedLevel = cubiql.parseDimLvl(metricOrQlevel);
                this.is_disjunction = true;
            } else {
                // metric
                this.metric = metricOrQlevel;
                this.is_disjunction = false;
            }
        } else {
            this.qualifiedLevel = metricOrQlevel;
            this.is_disjunction = true;
        }

        if (comparisons && comparisons.length) {
            assert(comparisons[0] instanceof cubiql.Comparison);
            this.comparisons = comparisons;
        }
    };

    cubiql.cloneFilter = function(filter) {
        return new cubiql.Filter(filter.qualifiedLevel || filter.metric, filter.comparisons);
    };

    /**
     * Check that filters have the right shape.
     *
     * @param {cubiql.Filter[]} filters
     */
    cubiql.checkFilter = function (filters) {
        // previously with unstructured data it would be a String or an object {string: String, type: String}
        assert(Array.isArray(filters) &&
               filters.length === 0 ||
               // ideally we would test (filters[0] instanceof cubiql.Filter), but
               // lodash.cloneDeep (cf. headerOnlyOptions in
               // MeasureProvider.prototype.setQuery) only copies the object
               // contents, not the constructor (e.g., cubiql.Filter)
               // so we have to stick to looking for the right properties
               (filters[0] instanceof Object && filters[0].hasOwnProperty("comparisons")),
               ["Filter of unexpected form", filters]);
    };

    /**
     * Gets the filters for a metric
     *
     * @param  {cubiql.Filter[]} slices filters in the configuration options
     * @return {Object} metricFilters
     * @prop {(String|undefined)} metricFilters[metricName].min : minimum value
     * @prop {(String|undefined)} metricFilters[metricName].max : maximum value
     * @prop {(String|undefined)} metricFilters[metricName].equal : filter equal to custom values used with inclusive
     */
    cubiql.getMetricFilters = function (slices) {
        var metricFilters = {};
        if (slices) {
            slices.forEach(function(slice) {
                if (slice.hasOwnProperty("metric")) {
                    var name = slice.metric;
                    slice.comparisons.forEach(function(comparison) {
                        var op = comparison.comparison,
                            value = comparison.member;
                        if (!metricFilters[name])
                            metricFilters[name] = [];
                        switch (op) {
                        case ">":
                            metricFilters[name].min = value;
                            break;
                        case "<":
                            metricFilters[name].max = value;
                            break;
                        case "=":
                            if (!metricFilters[name].equal)
                                metricFilters[name].equal = [];
                            metricFilters[name].equal.push(value);
                            break;
                        case ">=":
                            metricFilters[name].min = value;
                            if (!metricFilters[name].equal)
                                metricFilters[name].equal = [];
                            metricFilters[name].equal.push(value);
                            break;
                        case "<=":
                            metricFilters[name].max = value;
                            if (!metricFilters[name].equal)
                                metricFilters[name].equal = [];
                            metricFilters[name].equal.push(value);
                            break;
                        }
                    });
                }
            });
        }
        return metricFilters;
    };

    /**
     * checking if a given key is a Measure
     * @param  {Strgin}  key can be a level or a measure.
     * @return {Boolean}     true if the key is a measure (doesn't contain ":")
     *                       false if the key is a level (contains ":")
     */
    cubiql.isMeasure = function (key) {
        return (key.indexOf(":") === -1);
    };

    cubiql.isQualifiedLevel = function(ql) {
        return ql && ql instanceof MQG.QualifiedLevel;
    };

    /**
     * @param {string} metricName
     * @param {string} predicateName
     * @return {string} LogiQL rule for adding 'metricName' backed by 'predicateName'
     */
    cubiql.assertMetricPredicate = function (metricName, predicateName) {
        var metricNameString = "\""+metricName+"\"",
        predicateNameString = "\""+predicateName+"\"";
        // FIX maybe ^upsert
        return rule(and(
            // create predicate
            "+lb:web:measure:PredicateConstructor[transaction:id[]] = msgPred",
            "+lb:web:measure:Predicate(msgPred) {" +
                "  +lb:web:measure:Predicate_name[] = "+predicateNameString +
                "}",
            // associate metric with predicate, use upsert in case predicate already exists
            "^lb:web:measure:Metric_predicate[msgMetric] = msgPred"),
                    "lb:web:measure:Metric_name[msgMetric] = "+metricNameString);
    };

    /**
     * @param {string} metricName
     * @return {string} LogiQL rule for removing 'metricName' recalc
     */
    cubiql.retractMetricPredicate = function (metricName) {
        var metricNameString = "\""+metricName+"\"";
        return rule("-lb:web:measure:Metric_predicate[msgMetric] = msgPred",
                    and("lb:web:measure:Metric_name[msgMetric] = "+metricNameString,
                        "lb:web:measure:Metric_predicate@prev[msgMetric] = msgPred"));
    };

    /**
     * @param {string} metricName
     * @param {string} ruleName
     * @return {string} LogiQL rule for adding 'metricName' recalc defined by 'ruleName'
     */
    cubiql.assertMetricRecalc = function (metricName, ruleName) {
        var metricNameString = "\""+metricName+"\"",
        ruleNameString = "\""+ruleName+"\"";
        return rule(and(
            // create recalc
            "+lb:web:measure:Recalc(msgRecalc)",
            "+lb:web:measure:RecalcConstructor[transaction:id[]] = msgRecalc",
            "+lb:web:measure:Recalc_rule_name[msgRecalc] = "+ruleNameString,
            // associate metric with recalc
            "+lb:web:measure:Metric_recalc[msgMetric] = msgRecalc"),
                    "lb:web:measure:Metric_name[msgMetric] = "+metricNameString);
    };

    /**
     * @param {string} metricName
     * @return {string} LogiQL rule for removing 'metric' recalc
     */
    cubiql.retractMetricRecalc = function (metricName) {
        var metricNameString = "\""+metricName+"\"";
        return rule("-lb:web:measure:Metric_recalc[msgMetric] = msgRecalc",
                    and("lb:web:measure:Metric_name[msgMetric] = "+metricNameString,
                        "lb:web:measure:Metric_recalc@prev[msgMetric] = msgRecalc"));
    };

    /**
     * @param {string} metricName
     * @param {string} aggMethod
     * @return {string} LogiQL rule for setting agg method from 'metric'
     */
    cubiql.upsertAggMethod = function (metricName, aggMethod) {
        var metricNameString = "\""+metricName+"\"",
        aggMethodString = "\""+aggMethod+"\"";
        // relies on upsert semantics not caring if there was a value before: '^f[0]=0' inserts f[0]=0 even if !f@prev[0]=_
        return rule("^lb:web:measure:Metric_agg_method[msgMetric] = aggMethod",
                    and("lb:web:measure:Metric_name[msgMetric] = "+metricNameString,
                        "measure:schema2DimensionMsg:agg2Msg["+aggMethodString+"] = aggMethod"));
    };

    /**
     * @param {string} metricName
     * @return {string} LogiQL rule for removing agg method from 'metric'
     */
    cubiql.retractAggMethod = function (metricName) {
        var metricNameString = "\""+metricName+"\"";
        return rule("-lb:web:measure:Metric_agg_method[msgMetric] = aggMethod",
                    and("lb:web:measure:Metric_name[msgMetric] = "+metricNameString,
                        "lb:web:measure:Metric_agg_method@prev[msgMetric] = aggMethod"));
    };

    /**
     * @param {string} metricName
     * @return {string} LogiQL rule for removing agg method from 'metric'
     */
    cubiql.retractUpdMethod = function (metricName) {
        var metricNameString = "\""+metricName+"\"";
        return rule("-lb:web:measure:Metric_update_method[msgMetric] = updMethod",
                    and("lb:web:measure:Metric_name[msgMetric] = "+metricNameString,
                        "lb:web:measure:Metric_update_method@prev[msgMetric] = updMethod"));
    };


    /**
     * regexp to find typed column attributes on a MeasureProtocol.Column
     */
    cubiql.columnRegExp = new RegExp("^([^_]*)_column");

    /**
     * @param {MeasureProtocol.Column} a report column expected from a cubiql report
     * @return {string} the string representation of the type, e.g. 'string'|'int'|'float'|'bool'|'decimal' 
     */
    cubiql.getColumnValueType = function (reportColumn) {
        var value_keys = Object.keys(reportColumn)
              .map(function(k) { return k.match(cubiql.columnRegExp); })
              .filter(function(k) { return !!k; });
        assert.equal(value_keys.length, 1, "Expected only one *_column attribute in reportColumn (e.g., string_column)");
        return value_keys[0][1];
    };

    /**
     * @param {MeasureProtocol.Column} a report column expected from a cubiql report
     * @return {(undefined|MeasureProtocol.StringColumn|MeasureProtocol.IntColumn|MeasureProtocol.FloatColumn|MeasureProtocol.BoolColumn|MeasureProtocol.DecimalColumn)} the column found, or undefined if none found.
     */
    cubiql.getValueColumn = function (reportColumn) {
        return reportColumn[cubiql.getColumnValueType(reportColumn) + "_column"];
    };

    /**
     * Find neutral element of a given type
     *
     * @param {String} type
     * @return {Any}
     */
    cubiql.getNeutralElement = function (type) {
        var neuters = {
            STRING: "",
            FLOAT: 0.0,
            INT: 0,
            DECIMAL: "0.0",
            BOOLEAN: false
        };

        var neuter = neuters[type];
        assert(neuter !== undefined);
        return neuter;
    };

    /**
     * @typedef {MemberValue} memberValue
     * @prop {String} memberValue.memberId
     * @prop {QualifiedLevel} memberValue.qualifiedLevel
     */

    /**
     * Compare member values
     *
     * @param {MemberValue} memberValue1
     * @param {MemberValue} memberValue2
     * @return {Number}
     */
    cubiql.memberValueCompare = function (memberValue1, memberValue2) {
        return util.arrayCompare(
            [memberValue1.qualifiedLevel.dimension, memberValue1.qualifiedLevel.level, memberValue1.memberId],
            [memberValue2.qualifiedLevel.dimension, memberValue2.qualifiedLevel.level, memberValue2.memberId],
            0);
    };

    /**
     * @param {MQG.QualifiedLevel} ql
     * @return {MQG.QualifiedLevel}
     */
    cubiql.cloneQualifiedLevel = function(ql) {
        return new MQG.QualifiedLevel(
            cubiql.qlevel.getDimension(ql),
            cubiql.qlevel.getLevel(ql),
            cubiql.qlevel.getHierarchy(ql),
            cubiql.qlevel.getLabel(ql)
        );
    };

    /**
     * @param {MQG.Intersection} inter
     * @return {MQG.Intersection}
     */
    cubiql.cloneIntersection = function(inter) {
        return new MQG.Intersection( 
            inter.qualified_level.map(cubiql.cloneQualifiedLevel)
        );
    };

    /**
     * @param {MQG.MetricInter} metricInter
     * @return {MQG.MetricInter}
     */
    cubiql.cloneMetricIntersection = function(metricInter) {
        return new MQG.MetricInter(metricInter.metric, cubiql.cloneIntersection(metricInter.inter));
    };

    /**
     * Given a list of qualified levels, it groups them by label and the
     * grouped levels are sorted by the hierarchy, from lowest to highest.
     * 
     * @param  {MQG.QualifiedLevel[]} qualifiedLevels - a list of qualified levels
     * @param  {MeasureModel} model - the measure model
     * @return {Object<Label, MQG.QualifiedLevel[]>}
     */
    cubiql.getSortedQualifiedLevelsGroupedByLabel = function(qualifiedLevels, model) {
        var qualifiedLevelsLookUp = lodash.groupBy(qualifiedLevels, cubiql.qlevel.getLabel);

        return Object.keys(qualifiedLevelsLookUp).reduce(function(result, label) {
            result[label] = cubiql.sortQualifiedLevelsByHierarchy(qualifiedLevelsLookUp[label], model);
            
            return result;
        }, {});
    };

    /**
     * Sorted a list of QualifiedLevels by their order in the hierarchy (lowest to highest)
     *
     * @param {MQG.QualifiedLevel[]} qualifiedLevels
     * @param {MeasureModel} measureModel
     * @return {MQG.QualifiedLevel[]}
     */
    cubiql.sortQualifiedLevelsByHierarchy = function(qualifiedLevels, model) {
        if (qualifiedLevels.length === 0) 
            return qualifiedLevels;

        var levels = lodash.map(qualifiedLevels, "level"),
            dimension = cubiql.qlevel.getDimension(qualifiedLevels[0]),
            hierarchies = model.findHierarchiesWithLevels(dimension, levels),
            path = hierarchies.length > 0 ? hierarchies[0].path : [],
            hierarchyLvls = lodash.map(path, "level"),
            sortedLevels = [],
            i = 0,
            idx;

        for (; i < hierarchyLvls.length; i++) {
            idx = levels.indexOf(hierarchyLvls[i]);
            if (idx > -1)
                sortedLevels.push(qualifiedLevels[idx]);
        }

        return sortedLevels;
    };

    /**
     * Determines if inter1 is equal to or higher than inter2. An intersection
     * is considered "higher" if it for every level in inter2, it has a higher
     * level (or no level which effectively means ALL). See cubiql_test for
     * an list of examples. 
     * 
     * @param  {MQG.Intersection}  inter1
     * @param  {MQG.Intersection}  inter2
     * @param  {MeasureModel}  model
     * @return {Boolean}
     */
    cubiql.isIntersectionEqualOrHigher = function(inter1, inter2, model) {
        if (cubiql.intersectionEqual(inter1, inter2)) {
            return true;
        }

        var overlappingLabels = cubiql.getOverlappingLabels(inter1, inter2),
            inter1Lookup,
            inter2Lookup;

        if (inter1.qualified_level.length !== overlappingLabels.length) {
            // inter1 must be a subset of inter2 and therfore every label in inter1
            // must appear in inter2
            return false;
        } else {
            inter1Lookup = lodash.groupBy(inter1.qualified_level, cubiql.qlevel.getLabel);
            inter2Lookup = lodash.groupBy(inter2.qualified_level, cubiql.qlevel.getLabel);
            // is inter1 higher?
            return lodash.every(inter1Lookup, function(qls, label) {
                var ql1 = qls[0],
                    ql2 = inter2Lookup[label][0];
                    
                return !model.qLevelBelow(ql1, ql2);
            });
        }
    };

    /**
     * Returns a clone of the original QualifiedLevel with a new label
     *
     * @param {MQG.QualifiedLevel} qualifiedLevel
     * @param {String} label
     * @return {MQG.QualifiedLevel}
     */ 
    cubiql.relabelQL = function(qualifiedLevel, label) {
        return new MQG.QualifiedLevel(qualifiedLevel.dimension, qualifiedLevel.level, qualifiedLevel.hierarchy, label);
    };

    /**
     * Groups rollups by dimension. Returns an object where the keys are the
     * dimension name and the values are arrays of all the rollups for that dimension.
     *
     * @param  {AggDef[]}   aggregates  - a list of agg definitions 
     * @return {AggDef[][]} the aggs grouped by dimension
     */
    cubiql.groupRollupsByDimension = function(aggregates) {
        var result = {},
            dims,
            rollupGroups = [],
            i = 0;

        aggregates.forEach(function(agg) {
            var dimension = cubiql.parseDimLvl(agg.keyOrMeasure).dimension;

            if (!result[dimension]) {
                result[dimension] = [];
            }
            result[dimension].push(agg);
        });
        dims = Object.keys(result);
        for (; i < dims.length; i++)
            rollupGroups.push(result[dims[i]]); 

        return rollupGroups; 
    };

    /**
     * Computes all rollup combinations that we must query out.
     *
     * @param  {AggDef[][]} aggregatesByDimension a two dimensional array where each sublist
     *                                          is the list of all rollups for a particular dimension,
     *                                          e.g. [["TOTAL:Product:Sku"], ["TOTAL:Calendar:Year", "TOTAL:Calendar:Month"]]
     * @return {AggDef[][]}              a two dimensional array where each sublist
     *                                          is a grouping of rollups that must be queried
     *                                          together
     *
     * Example input (AggDefs grouped by dimension):
     * [
     *   [ {method: 'TOTAL', keyOrMeasure: 'Product:Sku'} ],
     *   [ {method: 'TOTAL', keyOrMeasure: 'Calendar:Year'},
     *     {method: 'TOTAL', keyOrMeasure: 'Calendar:Month'} ]
     * ]
     *
     * Example result (permutations of AggDefs of different dimensions):
     * [ [ {method: 'TOTAL', keyOrMeasure: 'Product:Sku'} ],
     *   [ {method: 'TOTAL', keyOrMeasure: 'Product:Sku'}, {method: 'TOTAL', keyOrMeasure: 'Calendar:Year'} ],
     *   [ {method: 'TOTAL', keyOrMeasure: 'Product:Sku'}, {method: 'TOTAL', keyOrMeasure: 'Calendar:Month'} ],
     *   [ {method: 'TOTAL', keyOrMeasure: 'Calendar:Year'} ],
     *   [ {method: 'TOTAL', keyOrMeasure: 'Calendar:Month'} ] ]
     */
    cubiql.getRollupCombinations = function(aggregatesByDimension) {
        var result = [];

        function combine(rest, combos) {
            if (combos.length !== 0)
                result.push(combos);

            rest.forEach(function(aggs,i) {
                aggs.forEach(function(agg) {
                    combine(rest.slice(i+1), combos.concat(agg));
                });
            });
        }

        combine(aggregatesByDimension, []);

        return result;
    };


    /**
     * These functions are all functions that can be applied to qualified levels,
     * or create functions that can be applied to qualified levels.
     * The are here so that we don't have to keep recreating them when doing
     * filtering, mapping, etc on lists of levels.
     */
    cubiql.qlevel = {
        getDimension: function(qualifiedLevel) {
            return qualifiedLevel.dimension;
        },
        getLevel: function(qualifiedLevel) {
            return qualifiedLevel.level;
        },
        getHierarchy: function(qualifiedLevel) {
            return qualifiedLevel.hierarchy;
        },
        getLabel: function(qualifiedLevel) {
            //the dimension serves as the label if one is not specified
            return lodash.isUndefined(qualifiedLevel.label) ? cubiql.qlevel.getDimension(qualifiedLevel) : qualifiedLevel.label;
        },
        dimensionEquals: function(dimension) {
            var me = this;
            return function(level) {
                return me.getDimension(level) === dimension;
            };
        },
        labelEquals: function(label) {
            var me = this;
            return function(level) {
                return me.getLabel(level) === label;
            };
        },
        qLevelEqual: function(level, enforceLabel, enforceHierarchy) {
            return function(l) {
                return cubiql.qLevelEqual(l, level, enforceLabel, enforceHierarchy);
            };
        },
        parseDimLvl: function(includeLabel) {
            return function(qName) {
                return cubiql.parseDimLvl(qName, includeLabel);
            };
        }
    };

    cubiql.isMeasuresQualifiedName = function (qName) {
        return qName === "-:Measures";
    };

    cubiql.isRealLevel = function(ql) {
        var qName = cubiql.qualifiedLevelToQualifiedName(ql, true);
        return cubiql.qNameIsRealLevel(qName);
    };

    cubiql.qNameIsRealLevel = function(qName) {
        return !cubiql.isMeasuresQualifiedName(qName) && cubiql.qlevel.getLevel(cubiql.parseDimLvl(qName, true)) !== "ALL";
    };

    cubiql.positionToLevels = function(position) {
        var keys = Object.keys(position),
            levels = [],
            i = 0;

        //for loop instead of map used here to prevent creating
        //functions inside a loop if positionToLevels is called within a loop over many positions
        for (; i < keys.length; i++)
            levels.push(cubiql.parseDimLvl(keys[i], true));

        return levels;
    };

    cubiql.getPositionIdForLevel = function(position, ql) {
        return position[cubiql.qualifiedLevelToQualifiedName(ql, true)];
    };

    cubiql.legalizeLabel = function(illegalLabel) {
        return illegalLabel.replace(new RegExp(/:/, 'g'), '__');
    };

},{"./logiql":233,"./util":280,"assert":undefined,"lodash":90,"measure-query-gen/src/MQG":1}],212:[function(require,module,exports){
    "use strict";

    var util = require("../util");

    function ActionsDAO(driver) {
        this.$driver = driver;
        this.actionsUrl = driver.urls.actionsUrl;
    }

    ActionsDAO.prototype.postAction = function(action) {
        return this.$driver.http.post(this.actionsUrl, action, {
            Accept: "application/json"
        });
    };

    ActionsDAO.prototype.getAction = function(actionId) {
        return this.$driver.http.get(this.actionsUrl + "/" + actionId).then(function(array) {
            return array.length && array[0];
        });
    };

    ActionsDAO.prototype.getActions = function() {
        return this.$driver.http.get(this.actionsUrl).then(function(actions) {
            return actions;
        });
    }

    module.exports = ActionsDAO;

},{"../util":280}],213:[function(require,module,exports){
"use strict";

var util = require("../util");
var websocketParser = require("../websocketparser");
var CollaborationEvents = require("../constant").Collaboration.EVENTS;
var StandardMessageTypes = require("../constant").Collaboration.STANDARD_MESSAGE_TYPES;
var lodash = require("lodash");

/**
 * A set of functions to handle websocket unprompted messages
 * @typedef  {Object}   CollaborationActionHandlerCallbacks
 *
 * @property {Function} onFullUserList            - Handles a message indicating full socket and user list update.
 *                      @param     {Object} message               Parsed message from the message recieved from the websocket
 *                      @property  {Array}  message.sockets       List of {socket, username} couples for all available connected sockets
 *
 * @property {Function} onPeerOpenConnection      - Handles a message indicating the connection of a user's socket (current user excluded).
 *                      @param     {Object}   message             Parsed message: {id, username} couple
 *                      @property  {String}   message.id          Socket id
 *                      @property  {String}   message.username    Socket username
 *
 * @property {Function} onPeerCloseConnection     - Handles a message indicating the disconnection of a user's socket (current user excluded).
 *                      @param     {Object}   message             Parsed message: {id, username} couple
 *                      @property  {String}   message.id          Socket id
 *                      @property  {String}   message.username    Socket username
 *
 * @property {Function} onOpenConnection          - Handles a message indicating the connection of the current user's socket.
 * @property {Function} onCloseConnection         - Handles a message indicating the disconnection of the current user's socket.
 * @property {Function} onDataUpdated             - Handles a message indicating the update of the data.
 */

/**
 * The modeler social DAO handles interactions with the
 * @param {Object}                              socketDriver  WebSocket
 * @param {Object}                              driver        URL Driver
 * @param {CollaborationActionHandlerCallbacks} callbacks     Callbacks to be used to handle messages
 */
function CollaborationDAO(socketDriver, driver, callbacks) {
    this.$callbacks = callbacks;
    this.$driver = driver;
    if (socketDriver) {
        socketDriver.setRawMessageHandler(this.handleRawMessage.bind(this));
    }
}

/**
 * Handles a message received from the websocket and acts depending on its type
 * @param  {Object} data
 */
CollaborationDAO.prototype.handleRawMessage = function(data) {
    var msg = websocketParser.parseMessage(data);

    switch (msg.type) {
        case CollaborationEvents.DATA_UPDATED:
            this.$callbacks.onDataUpdated(msg);
            break;
        case CollaborationEvents.ACTION_STATE_CHANGED:
            this.$callbacks.onActionStateChanged(msg);
            break;
        case CollaborationEvents.USER_LIST_UPDATED:
            this.$callbacks.onFullUserList(msg).catch(console.error);
            break;
        case CollaborationEvents.USER_CONNECTED:
            this.$callbacks.onPeerOpenConnection(msg).catch(console.error);
            break;
        case CollaborationEvents.USER_DISCONNECTED:
            this.$callbacks.onPeerCloseConnection(msg).catch(console.error);
            break;
        case StandardMessageTypes.OPEN:
            this.$callbacks.onOpenConnection();
            break;
        case StandardMessageTypes.CLOSE:
            this.$callbacks.onCloseConnection();
            break;
        default:
            console.warn("Unknown message type.");
            break;
    }
};

module.exports = CollaborationDAO;

},{"../constant":191,"../util":280,"../websocketparser":292,"lodash":90}],214:[function(require,module,exports){
    "use strict";

    var HttpHelper = require("../../logicblox.core/network").HttpHelper;

    function FormattingDAO(driver) {
        this.$driver = driver;
    }
    
    /**
    * Makes a request to the pivot_config service to get the display formats for the measures.
    * The format is specified in the 'pivot.proto'. The current format returns an object with one
    * property that looks like this:
    *  {
    *    "metric_config":[
    *                      {"metric_name": "Sales","format": "$0,000.00"},
    *                      {"metric_name": "Inventory", "format": "0,000"},
    *                      {"metric_name": "Returns"}
    *                     ]
    *  }
    *  Note that the format is an optional property.
    */
    FormattingDAO.prototype.fetchFormattingConfig = function() {
        // TODO: We should make this service a GET service
        return this.$driver.http.post(this.$driver.urls.measureConfigUrl, {});
    };

    module.exports = FormattingDAO;

},{"../../logicblox.core/network":156}],215:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");
    var FormulaAST = require("../util/formulaast");
    var Immutable = require("immutable");

    function MeasureLanguageDAO(driver) {
        this.$measureServiceUrl = driver.urls.measureUrl;
        this.$rulesUrl = driver.urls.rulesUrl;
        this.$http = driver.http;
    }

    /**
     * Makes a request to the measure service to install rules.
     * Installing a rule that is syntically correct always succeeds.
     * Inverse rules can be changed, but sending in a rule with a different
     * primary rule will not fail, but will have no effect.
     * 
     * @param {string} rules        A string representing one or many rules.
     * @return {Promise}            A Promise containing the result returned by the server.
     *                              If error is caused we will return an error object:
     *                              containing `error` and `error_message` attributes.
     */
    MeasureLanguageDAO.prototype.installRules = function(rules) {
        var data = JSON.stringify({
            "install_request": {
                "rules": rules
            }
        });

        return this.$http.post(this.$measureServiceUrl, data)
            .catch(function(err) {
                var body = err.body,
                    problem = body && body.problem,
                    text = problem && lodash.map(problem, 'text').join("\n");

                if (text) {
                    throw new Error(text);
                }
                else throw err;
            });
    };

/**
 * Fetches the rules in the database
 * 
 * @return {Object} rules
 */
MeasureLanguageDAO.prototype.fetchRules = function() {
    return this.$http.post(this.$rulesUrl, {}).then(function(program) {
        return MeasureLanguageDAO.buildRuleObj(program.rule);
    });
};

/**
 * Builds a rule object with primary, inverse and recalcAgg maps
 *
 * This can be used to find primary rules, inverse rules, and recalcs:
 *
 * ruleObj.primary['Margin']
 * ruleObj.inverses['Margin']
 * ruleObj.recalcAgg['AveSales']
 * 
 * @param  {Array<Rule>} rules
 * @param  {MeasureModel} model
 * @return {object}
 */
MeasureLanguageDAO.buildRuleObj = function(rules) {
    var ruleObj = {
            primary: {},
            inverses: {}
        },
        isValidRule = function(rule) {
            var isValid = isValidFormula(rule.formula && rule.formula[0]);
            if (!isValid) {
                console.warn("Ignoring rule " + rule.name + " since it is invalid.");    
            }            
            return isValid;
        },
        isValidFormula = function(formula) {
            var isValid = FormulaAST.isValid(formula);
            if (!isValid) {
                console.warn("Ignoring formula " + formula.name + " since it is invalid.");
            }            
            return isValid;
        };

    rules && rules.filter(isValidRule).forEach(function(rule) {
        var primaryFormula = new FormulaAST(rule.formula[0]),
            inverseFormulas = rule.formula.slice(1).filter(isValidFormula).map(function(f) {
                return new FormulaAST(f);
            }),
            ruleName = primaryFormula.name;

        if (ruleObj.primary[ruleName]) {
            console.error("A primary formula for " + ruleName + " already exists");
        }
        ruleObj.primary[ruleName] = primaryFormula;

        ruleObj.inverses[ruleName] = ruleObj.inverses[ruleName] || [];
        inverseFormulas.forEach(function(inverseFormula) {
            ruleObj.inverses[ruleName].push(inverseFormula);
        });
    });

    return Immutable.fromJS(ruleObj);
};

exports.MeasureLanguageDAO = MeasureLanguageDAO;

},{"../util/formulaast":282,"immutable":44,"lodash":90}],216:[function(require,module,exports){
"use strict";

    var lodash = require("lodash");
    var MQG = require("measure-query-gen/src/MQG");
    var cubiql = require("../cubiql");
    var PromiseCache = require("../util/promisecache");
    var pushAll = Array.prototype.push;

    function MeasureModelDAO(driver) {
        this.$connectblox = driver.connectblox;
        this.$http = driver.http;
        this.$measureUrl = driver.urls.measureUrl;
    }

    /**
     * Fetch measure model from the server
     * 
     * @return {Promise[object]} the measure service measure model object
     */
    MeasureModelDAO.prototype.fetchModel = function() {
        var measureUrl = this.$measureUrl,
            http = this.$http,
            promiseCache = new PromiseCache();

        return promiseCache.concurrentPromise("fetchModel", function() {
            return http.post(measureUrl, new MQG.ModelRequestRequest()).then(function(response) {
                return response.model;
            });
        });
    };
    
    /**
     * Fetch measure model from the server
     * 
     * @return {Promise[object]} the measure service measure model object
     */
    MeasureModelDAO.prototype.setMeasureProperties = function(measureName, prevAggMethod, currAggMethod) {
        var me = this,
            ruleName,
            rules = [],
            logic,
            recalcCheck = false; // check when switching from predicate to recalc

        if(currAggMethod !== prevAggMethod) {
            // update the measure service's protobuf representation
    
            // switch between recalc and predicate metrics (n.b. doesn't handle dialogue metrics)
            if(prevAggMethod === "RECALC") {
                // recalc to predicate
                ruleName = measureName;
                pushAll.apply(rules, [cubiql.retractMetricRecalc(measureName),
                                      cubiql.assertMetricPredicate(measureName, ruleName)]);
            } else if(currAggMethod === "RECALC") {
                // predicate to recalc
                ruleName = measureName;
                pushAll.apply(rules, [cubiql.retractMetricPredicate(measureName),
                                      cubiql.assertMetricRecalc(measureName, ruleName)]);
                recalcCheck = true;
            }
    
            // update agg method
            if(currAggMethod === "RECALC" || currAggMethod === cubiql.noneAgg) {
                rules.push(cubiql.retractAggMethod(measureName));
            } else /*currAggMethod is an agg method*/ {
                rules.push(cubiql.upsertAggMethod(measureName, currAggMethod));
            }
    
            logic = rules.join("\n");
            
            // change metric configuration in workspace
            return me.$connectblox.execBlock(logic)
                .catch(function(err) {
                    var message = JSON.parse(err.responseText).error;
                    throw new Error(["Error executing logic to set measure properties", message, err]);
                })
                // reset measure service
                .then(function() {
                    return me.$connectblox.restartMeasure();
                })
                .catch(function(err) {
                    throw new Error(["Error restarting measure service", err]);
                })
                // when switching to recalc, check if rule exists
                // FIX maybe should check before changing predicate to recalc
                .then(function () {
                    if(recalcCheck) {
                        return me.$connectblox.query("_(name) <- lb:web:measure:Rule_name[_]=name.")
                            .then(function (queryResponse) {
                                if(recalcCheck) {
                                    assert(queryResponse, "MeasureWindow: Expected list of measure language rules.");
                                    var string_column = queryResponse.response.return_local[0].column[0].string_column,
                                    ruleNames = string_column.values || [];
                                    if(ruleNames.indexOf(measureName) === -1) {
                                        var warning = "Metric '"+measureName+"' automatically defined using measure language rule named '"+measureName+"', but no such rule exists.  Metric cannot be viewed until such a rule is defined.";
                                        alert(warning);
                                    }
                                }
                            });;
                    }
                });
        }
        else return Promise.resolve();
    };

    exports.MeasureModelDAO = MeasureModelDAO;

},{"../cubiql":211,"../util/promisecache":283,"lodash":90,"measure-query-gen/src/MQG":1}],217:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");

    function MeasureServiceError(msg) {
        this.message = msg;
    }

    function MeasureServiceDAO(driver) {
        this.$driver = driver;
    }
    
    /**
     * @param {Object} options the Pivot Options object
     * @param {MeasureModel} measureModel 
     * @param {UrlDriver} driver
     * @return {Promise<String>}
     */
    MeasureServiceDAO.prototype.send = function(request) {
        //given the export query request as a result, build up the query and
        //point the window at it to cause a download

        return this.$driver.http.post(this.$driver.urls.measureUrl, request).then(function(result) {
            var hasException = result && !lodash.isUndefined(result.exception),
                problems = hasException && result.problem,
                errorProblems = problems && problems.filter(function (problem) { return problem.severity === "ERROR"; }).length > 0;

            if (errorProblems) {    
                throw new MeasureServiceError(lodash.map(problems,'text').join('\n'));
            } else {
                return result;
            }
        });
    };
        
    module.exports = MeasureServiceDAO;

},{"lodash":90}],218:[function(require,module,exports){
    "use strict";

    var HttpHelper = require("../../logicblox.core/network").HttpHelper;

    function NavigationTreeDAO(driver) {
        this.$driver = driver;
    }
    
    /**
    * Makes a request to the /navigation_tree_config service to get the navigation tree that looks like this:
    *{
    *    nodes : [{
    *        id: "Parent_Node_id",
    *        properties: [{
    *            key: "property_key",
    *            value : "property_value"
    *        }],
    *        children: [{
    *                id: "first_child_Node_id",
    *                properties : [{
    *                    key: "property_key",
    *                    value : "property_value"
    *                }, {
    *                    key: "property_key",
    *                    value : "property_value"
    *                }]
    *            }, {
    *                id: "second_child_Node_id",
    *                properties : [{
    *                    key: "property_key",
    *                    value : "property_value"
    *                }]
    *            }
    *        ]
    *    }]
    *}
    *
    * Note that all properties are optional
    */
    NavigationTreeDAO.prototype.fetchNavigationTreeConfig = function(treeId) {
        var url = this.$driver.urls.navigationTreeUrl + "/" + treeId;
        return this.$driver.http.get(url);
    };

    NavigationTreeDAO.prototype.setNavigationTreeConfig = function(config) {
        var url = this.$driver.urls.navigationTreeUrl;
        return this.$driver.http.post(url, config);
    };

    module.exports = NavigationTreeDAO;

},{"../../logicblox.core/network":156}],219:[function(require,module,exports){
"use strict";

/**
 *
 * @param driver
 * @param loginUrl
 * @param logoutUrl
 * @param realm
 * @constructor
 */
function UserDAO(httpHelper, currentUserUrl, loginUrl, logoutUrl, realm) {
    this.$http = httpHelper;

    this.$realm = realm;
    this.$currentUserUrl = currentUserUrl;
    this.$loginUrl = loginUrl;
    this.$logoutUrl = logoutUrl;
}

UserDAO.prototype.getCurrentUser = function () {
    return this.$http.getCurrentUser(this.$currentUserUrl);
};

UserDAO.prototype.authenticate = function (userName, password) {
    return this.$http.login(this.$loginUrl, userName, password, this.$realm);
};

UserDAO.prototype.unauthenticate = function () {
    return this.$http.logout(this.$logoutUrl, "", this.$realm);
};

module.exports = UserDAO;

},{}],220:[function(require,module,exports){
"use strict";

var lodash = require("lodash");

/**
 * @param driver
 * @constructor
 */
function ViewConfigDAO(driver) {
    this.$driver = driver;

    this.viewsConfigsUrl = driver.urls.viewsConfigsUrl;
    this.viewsStatesUrl = driver.urls.viewsStatesUrl;
    this.viewConfigUrl = driver.urls.viewConfigUrl;
    this.viewStateUrl = driver.urls.viewStateUrl;
}

/**
 * Returns configurations of all views from the database
 * @returns {Promise.<Object>}
 */
ViewConfigDAO.prototype.fetchConfigs = function () {
    return this.$driver.http.get(this.viewsConfigsUrl);
};


/**
 * Saves a list of view configurations
 * @param {ViewConfig[]} configs - a list of the view configurations
 * @returns {Promise}
 */
ViewConfigDAO.prototype.saveConfigs = function(configs) {
    return this.$driver.http.post(this.viewsConfigsUrl, { View: configs });
};
/**
 * Returns configuration of a view from the database
 * @param {String} viewId - the view`s ID
 * @returns {Promise.<ViewConfig>}
 */
ViewConfigDAO.prototype.fetchConfig = function (viewId) {
    var url = this.$buildViewUrl(this.viewConfigUrl, viewId);

    return this.$driver.http.get(url);
};

/**
 * Saves a view configuration as the default for the given id
 * @param {String} viewId - the view`s ID
 * @param {ViewConfig} config - the view`s configuration
 * @returns {Promise}
 */
ViewConfigDAO.prototype.saveConfig = function (viewId, config) {
    var url = this.$buildViewUrl(this.viewConfigUrl, viewId);

    return this.$driver.http.post(url, config);
};

/**
 * Returns states of all views from the database
 * @param {String} userName - current user`s name
 * @returns {Promise.<Object>}
 */
ViewConfigDAO.prototype.fetchStates = function (userName) {
    var url = this.$buildViewUrl(this.viewsStatesUrl, null, userName);

    return this.$driver.http.get(url);
};

/**
 * Returns state of a view from the database
 * @param {String} viewId
 * @returns {Promise.<ViewConfig>}
 */
ViewConfigDAO.prototype.fetchState = function (viewId, userName) {
    var url = this.$buildViewUrl(this.viewStateUrl, viewId, userName);

    return this.$driver.http.get(url);
};

/**
 * Saves view`s state to the database
 * @param {String} viewId - the view`s ID
 * @param {ViewConfig} config - the view`s state
 * @returns {Promise}
 */
ViewConfigDAO.prototype.saveState = function (viewId, config, userName) {
    var url = this.$buildViewUrl(this.viewStateUrl, viewId, userName);

    return this.$driver.http.post(url, config);
};

/**
 * Saves view states to the database.
 * @param {Array} viewStates
 * @returns {Promise}
 */
ViewConfigDAO.prototype.saveStates = function (viewStates, userName) {
    var url = this.$buildViewUrl(this.viewsStatesUrl, undefined, userName);

    return this.$driver.http.post(url, {
        viewstates: viewStates
    });
};

ViewConfigDAO.prototype.$buildViewUrl = function (url, viewId, userName) {
    var params = {};

    if (viewId) {
        params.id = viewId;
    }

    if (userName) {
        params.user = userName;
    }
    
    if (Object.keys(params).length) {
        url += "?" + lodash.map(params, function (value, key) {
            return key + "=" + value;
        }).join("&");
    }

    return url;
};

module.exports = ViewConfigDAO;

},{"lodash":90}],221:[function(require,module,exports){
"use strict";

function WorkbookDAO(driver) {
    this.$driver = driver;
    this.workbooksUrl = driver.urls.workbooksUrl;
}

/**
 * Query workbooks
 * 
 * @param  {Object} options
 * @property {string} options.user_id
 * @property {string} options.workbook_id
 * @property {boolean} options.active_only
 * @property {boolean} options.id_only
 * @property {boolean} options.verbose
 * @return {Array[object]}
 */
WorkbookDAO.prototype.get = function(options) {
    return this.$driver.http.get(this.workbooksUrl, null, options).then(function(result) {
        return result.workbooks || [];
    });
};

module.exports = WorkbookDAO;

},{}],222:[function(require,module,exports){
var StorageTypes = require("./constant").StorageTypes;
var util = require("./util");

var lodash = require("lodash");

var DEFAULT_CHECK_VALUE_INTERVAL = 500;

/**
 * Creates DataStorageQueueChecker.
 *
 * This an internal class that used by DataStorage. You don't need to create it by self.
 * We need it for telling DataStorage that some data were changed.
 * And it's not important where this data were changed - in another class or in another browser's tab.
 *
 * The main purpose for implement is that we needed something for synchronization of data between different browser's tabs.
 * So it starts an async loop in checks values (it just looks on the timestamp when the value last changed).
 * If there were some changes - invoke associated callback (passed as a parameter in the "add" method).
 *
 * @constructor
 */
var DataStorageQueueChecker = function () {
    this.$values = {};
    this.$storages = {};
    this.$asyncWaitForChanges(DEFAULT_CHECK_VALUE_INTERVAL);
};

/**
 * Adds the item to the checking queue.
 * @param {String} storageId unique storage ID. Needs for separating storages b/c it's possible to have different types of storages for the same owner.
 * @param {String} ownerId The owner ID.
 * @param {String} propertyName The property name
 * @param {{getItem, setItem, removeItem}} storage The storage object
 * @param {Function} callback
 */
DataStorageQueueChecker.prototype.add = function (storageId, ownerId, propertyName, storage, callback) {
    //don't do anything if the callback isn't specified
    if (!lodash.isFunction(callback)) {
        return;
    }

    this.$storages[storageId] = storage;

    this.$values[ownerId] = this.$values[ownerId] || {
            storageId: storageId,
            modified: null,
            props: {}
        };

    this.$values[ownerId].props[propertyName] = this.$values[ownerId].props[propertyName] || {
            modified: null,
            callback: callback
        };
};

/**
 * Removes the item from the queue (unsubscribe from checking on changes).
 * @param {String} ownerId
 * @param {String} propertyName
 */
DataStorageQueueChecker.prototype.remove = function (ownerId, propertyName) {
    if (this.$values[ownerId]) {
        delete this.$values[ownerId].props[propertyName];

        if (!lodash.keys(this.$values[ownerId].props).length) {
            delete this.$storages[this.$values[ownerId].storageId];
            delete this.$values[ownerId];
        }
    }
};

/**
 * Check values changes in a async loop.
 * If some value was changed it will call the callback associated with this value.
 * @param interval
 */
DataStorageQueueChecker.prototype.$asyncWaitForChanges = function (interval) {
    var me = this,
        ownerFromStorage,
        storage,
        keys,
        owner,
        ownerId,
        prop;

    var delayCheck = function () {
        lodash.delay(function () {
            keys = Object.keys(me.$values);
            for (var i = 0, count = keys.length; i < count; i++) {
                ownerId = keys[i];
                owner = me.$values[ownerId];

                storage = me.$storages[owner.storageId];
                ownerFromStorage = storage.getItem(ownerId);
                if (ownerFromStorage && owner.modified !== ownerFromStorage.meta.modified) {

                    lodash.forEach(ownerFromStorage.props, function (propValue, propertyName) {
                        prop = owner.props[propertyName];
                        if (propValue.modified !== prop.modified) {
                            prop.modified = propValue.modified;

                            lodash.delay(function () {
                                prop.callback();
                            }, 0);
                        }
                    });
                }
            }

            delayCheck();
        }, interval);
    };

    delayCheck();
};

var QueueCheckerInstance = new DataStorageQueueChecker();

/**
 * Creates DataStorage.
 * The class used for storing data. There is an ability to subscribe on data changed using 'subscribe' method.
 * The most common scenarios of usage are:
 * - storing data when browser closed
 * - sync of data between different browsers or between browser's tabs.
 * - reporting that values changes in many places in the app etc.
 *
 * Example of usage:
 *
 * //create new DataStorage
 * var locks = new DataStorage("ownerClass", "locks", StorageTypes.LOCAL);
 * locks.subscribe(function(){
 *      //locks changed
 * });
 *
 * //change the value
 * locks.value = {value:"customValue"};
 *
 * //get the actual value
 * console.log(locks.value);
 *
 * @param {String} ownerId The owner ID.
 * @param {String} propertyName The name of the property.
 * @param {String} [storageType=IN_MEMORY] The storage type
 * @constructor
 */
var DataStorage = function (ownerId, propertyName, storageType) {
    Object.defineProperty(this, "value", {
        get: this.get.bind(this),
        set: this.set.bind(this)
    });

    this.$ownerId = ownerId;
    this.$propertyName = propertyName;

    this.$storageUid = lodash.uniqueId(ownerId);
    this.$storageType = util.checkEnumValue(storageType, StorageTypes, StorageTypes.IN_MEMORY);

    this.$storage = this.$getStorage(this.$storageType);
    this.$propertyId = this.$getPropertyId();
    this.$value = this.$storage.getItem(this.$propertyId);

    this.$callbacks = {};
};

/**
 * Returns current value.
 * @returns {Any}
 */
DataStorage.prototype.get = function () {
    return this.$value;
};

/**
 * Sets current value.
 * @param {Object} value The new value
 */
DataStorage.prototype.set = function (value) {
    var timestamp = Date.now();

    this.$storage.setItem(this.$propertyId, value);
    this.$value = value;

    this.$updateTimestamp(timestamp);

    lodash.forEach(this.$callbacks, function(cb){
        lodash.isFunction(cb) && cb(value);
    });
};

/**
 * Subscribes on value changes.
 * @param {Function} callback The callback that will be called when value changed
 */
DataStorage.prototype.subscribe = function (callback) {
    if (!lodash.isFunction(callback)) {
        return;
    }

    var callbackHash = util.hashCode(callback.toString());

    if (!Object.keys(this.$callbacks).length) {
        QueueCheckerInstance.add(this.$storageUid, this.$ownerId, this.$propertyName, this.$storage, this.$invokeCallback.bind(this));
    }

    this.$callbacks[callbackHash] = callback;
};

DataStorage.prototype.$invokeCallback = function () {
    var updatedValue = this.$storage.getItem(this.$propertyId);
    if (!lodash.eq(this.$value, updatedValue)) {
        this.$value = updatedValue;
        lodash.forEach(this.$callbacks, function(cb){
            lodash.isFunction(cb) && cb(updatedValue);
        });
    }
};

/**
 * Unsubscribes from value changes.
 * @param {Function} [callback] The callback that will be unsubscribed.
 */
DataStorage.prototype.unsubscribe = function (callback) {
    var callbackHash = util.hashCode(callback.toString());

    delete this.$callbacks[callbackHash];

    if (!Object.keys(this.$callbacks).length) {
        QueueCheckerInstance.remove(this.$storageUid, this.$propertyName);
    }
};

DataStorage.prototype.destroy = function () {
    this.$callbacks = [];
    QueueCheckerInstance.remove(this.$storageUid, this.$propertyName);
};

DataStorage.prototype.$updateTimestamp = function (timestamp) {
    var ownerValue = this.$storage.getItem(this.$ownerId);

    ownerValue.props[this.$propertyName].modified = timestamp;
    ownerValue.meta.modified = timestamp;

    this.$storage.setItem(this.$ownerId, ownerValue);
};

/**
 * Returns UID for specified value.
 * @returns {String} The UID
 */
DataStorage.prototype.$getPropertyId = function () {
    var ownerValue = this.$storage.getItem(this.$ownerId),
        propertyItem;

    if (!ownerValue || !ownerValue.props) {
        ownerValue = {
            meta: {modified: null},
            props: {}
        };
    }

    propertyItem = ownerValue.props[this.$propertyName];
    if (!propertyItem) {
        propertyItem = {modified: null, uid: util.uuid()};
        ownerValue.props[this.$propertyName] = propertyItem;

        this.$storage.setItem(this.$ownerId, ownerValue);
    }

    return propertyItem.uid;
};

/**
 * Returns storage by storage type.
 * @param {String} [storageType=IN_MEMORY] The storage type
 * @returns {{getItem, setItem, removeItem}} The storage
 */
DataStorage.prototype.$getStorage = function (storageType) {
    switch (storageType) {
        case StorageTypes.LOCAL:
            return LocalStorage;
            break;
        case StorageTypes.SESSION:
            return SessionStorage;
            break;
        case StorageTypes.IN_MEMORY:
        default:
            return InMemoryStorage;
            break;
    }
};

/**
 * Creates a storage by storage type.
 *
 * @param storageType
 * @returns {Object} storage (InMemory, LocalStorage or SessionStorage)
 */
var CreateStorage = function (storageType) {
    var storage;
    if (typeof(window) !== "undefined") {
        switch (storageType) {
            case StorageTypes.LOCAL:
                storage = storageAvailable("localStorage") && window.localStorage;
                break;
            case StorageTypes.SESSION:
                storage = storageAvailable("sessionStorage") && window.sessionStorage;
                break;
        }
    }

    if (!storage) {
        return InMemoryStorage;
    }

    return {
        getItem: function (key) {
            var value = storage.getItem(key);

            try {
                return value && JSON.parse(value);
            } catch (e) {
            }
        },
        setItem: function (key, value) {
            var strValue = lodash.isString(value) ? value : JSON.stringify(value);
            storage.setItem(key, strValue);
        },
        removeItem: function (key) {
            storage.removeItem(key);
        }
    }
};

/**
 * In-memory storage. Used for storing values in a object.
 * @type {{getItem, setItem, removeItem}}
 */
var InMemoryStorage = (function () {
    var values = {};

    return {
        getItem: function (key) {
            return values[key];
        },
        setItem: function (key, value) {
            values[key] = value;
        },
        removeItem: function (key) {
            delete values[key];
        }
    }
})();

/**
 * Session storage. Used for storing values in sessionStorage.
 * @type {{getItem, setItem, removeItem}}
 */
var SessionStorage = CreateStorage(StorageTypes.SESSION);

/**
 * Local storage. Used for storing values in localStorage.
 * Can be used for synchronization of data between browser's tabs.
 * @type {{getItem, setItem, removeItem}}
 */
var LocalStorage = CreateStorage(StorageTypes.LOCAL);

/**
 * Returns true if the storage type is available.
 * @param {String} type The storage type ('localStorage' or 'sessionStorage')
 * @returns {Boolean}
 */
function storageAvailable(type) {
    try {
        var storage = window[type],
            x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return true;
    }
    catch (e) {
        return false;
    }
}

module.exports = DataStorage;
},{"./constant":191,"./util":280,"lodash":90}],223:[function(require,module,exports){
/* globals Promise */
"use strict";

/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Dispatcher
 *
 * The Dispatcher is capable of registering callbacks and invoking them.
 * More robust implementations than this would include a way to order the
 * callbacks for dependent Stores, and to guarantee that no two stores
 * created circular dependencies.
 */

    function Dispatcher() {
        
        var _callbacks = [];
        var _promises = [];

      /**
       * Register a Store's callback so that it may be invoked by an action.
       * @param {function} callback The callback to be registered.
       * @return {number} The index of the callback within the _callbacks array.
       */
      this.register = function(callback) {
        _callbacks.push(callback);
        return _callbacks.length - 1; // index
      };
      
      this.destroy = function() {
          _callbacks = [];
      };
    
    
      /**
       * dispatch
       * @param  {object} payload The data from the action.
       */
      this.dispatch = function(payload) {
        // First create array of promises for callbacks to reference.
        var resolves = [];
        var rejects = [];
        _promises = _callbacks.map(function(_, i) {
          return new Promise(function(resolve, reject) {
            resolves[i] = resolve;
            rejects[i] = reject;
          });
        });
        // Dispatch to callbacks and resolve/reject promises.
        var callbackPromises = _callbacks.map(function(callback, i) {
          // Callback can return an obj, to resolve, or a promise, to chain.
          // See waitFor() for why this might be useful.
          try {
              return Promise.resolve(callback(payload)).then(function() {
                resolves[i](payload);
              }, function(err) {
                console.error(err.stack);
                rejects[i](new Error('Dispatcher callback unsuccessful'));
              });
          } catch (err) {
              console.error(err.stack);
              rejects[i](new Error('Dispatcher callback unsuccessful'));
          }
        });
        _promises = [];
        return Promise.all(callbackPromises);
      };
    
      /**
       * Allows a store to wait for the registered callbacks of other stores
       * to get invoked before its own does.
       * This function is not used by this TodoMVC example application, but
       * it is very useful in a larger, more complex application.
       *
       * Example usage where StoreB waits for StoreA:
       *
       *   var StoreA = merge(EventEmitter.prototype, {
       *     // other methods omitted
       *
       *     dispatchIndex: Dispatcher.register(function(payload) {
       *       // switch statement with lots of cases
       *     })
       *   }
       *
       *   var StoreB = merge(EventEmitter.prototype, {
       *     // other methods omitted
       *
       *     dispatchIndex: Dispatcher.register(function(payload) {
       *       switch(payload.action.actionType) {
       *
       *         case MyConstants.FOO_ACTION:
       *           Dispatcher.waitFor([StoreA.dispatchIndex], function() {
       *             // Do stuff only after StoreA's callback returns.
       *           });
       *       }
       *     })
       *   }
       *
       * It should be noted that if StoreB waits for StoreA, and StoreA waits for
       * StoreB, a circular dependency will occur, but no error will be thrown.
       * A more robust Dispatcher would issue a warning in this scenario.
       */
      this.waitFor = function(/*array*/ promiseIndexes, /*function*/ callback) {
        var selectedPromises = promiseIndexes.map(function(index) {
          return _promises[index];
        });
        return Promise.all(selectedPromises).then(callback).catch(function(err) {
            console.error(err.stack);
        });
      };
      
      this.handleViewAction = function(action) {
        return this.dispatch({
          actionType: 'VIEW_ACTION',
          action: action
        });
      };
    
    }

    exports.Dispatcher = Dispatcher;

},{}],224:[function(require,module,exports){
/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2010, Ajax.org B.V.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

"use strict";

var lodash = require("lodash");
var assert = require("assert");

/**
 * This "class" can be used to add event emitters to any module/object.
 * To do so, just call `lodash.mixin(SomeClass.prototype, EventEmitter.prototype);`
 */
function EventEmitter() {
}

EventEmitter.prototype.stopPropagation = function() { this.propagationStopped = true; };
EventEmitter.prototype.preventDefault = function() { this.defaultPrevented = true; };

EventEmitter.prototype._emit =
EventEmitter.prototype._dispatchEvent = function(eventName, e) {
    this._eventRegistry || (this._eventRegistry = {});
    this._defaultHandlers || (this._defaultHandlers = {});

    var listeners = this._eventRegistry[eventName] || [],
        listenersClone,
        defaultHandler = this._defaultHandlers[eventName];
    if (!listeners.length && !defaultHandler)
        return;

    if (typeof e != "object" || !e)
        e = {};

    if (!e.type)
        e.type = eventName;
    if (!e.stopPropagation)
        e.stopPropagation = this.stopPropagation;
    if (!e.preventDefault)
        e.preventDefault = this.preventDefault;

    // Use cloned listeners list to emit the events. This is allows event handlers
    // to remove themselves from the listeners list during the event handling
    // without affecting the dispatching process here.
    listenersClone = lodash.clone(listeners);
    for (var i=0; i<listenersClone.length; i++) {
        try {
            listenersClone[i](e, this);
        } catch(exn) {
            console.error(exn.stack || exn);
            throw exn;
        }
        if (e.propagationStopped)
            break;
    }
    
    if (defaultHandler && !e.defaultPrevented)
        return defaultHandler(e, this);
};


EventEmitter.prototype._signal = function(eventName, e) {
    var listeners = (this._eventRegistry || {})[eventName];
    if (!listeners)
        return;

    for (var i=0; i<listeners.length; i++)
        listeners[i](e, this);
};

EventEmitter.prototype.once = function(eventName, callback) {
    var _self = this;
    callback && this.addEventListener(eventName, function newCallback() {
        _self.removeEventListener(eventName, newCallback);
        callback.apply(null, arguments);
    });
};


EventEmitter.prototype.setDefaultHandler = function(eventName, callback) {
    this._defaultHandlers = this._defaultHandlers || {};
    
    if (this._defaultHandlers[eventName])
        throw new Error("The default handler for '" + eventName + "' is already set");
        
    this._defaultHandlers[eventName] = callback;
};

EventEmitter.prototype.on =
EventEmitter.prototype.addEventListener = function(eventName, callback, capturing) {
    this._eventRegistry = this._eventRegistry || {};

    var listeners = this._eventRegistry[eventName];
    if (!listeners)
        listeners = this._eventRegistry[eventName] = [];

    if (listeners.indexOf(callback) == -1)
        listeners[capturing ? "unshift" : "push"](callback);
    return callback;
};

EventEmitter.prototype.off =
EventEmitter.prototype.removeListener =
EventEmitter.prototype.removeEventListener = function(eventName, callback) {
    this._eventRegistry = this._eventRegistry || {};

    var listeners = this._eventRegistry[eventName];
    if (!listeners)
        return;

    var index = listeners.indexOf(callback);
    if (index !== -1)
        listeners.splice(index, 1);
};

EventEmitter.prototype.removeAllListeners = function(eventName) {
    if (eventName && this._eventRegistry) 
        this._eventRegistry[eventName] = [];
    else
        this._eventRegistry = {};
};


/**
 * Executes a callback if a certain condition is true. If not
 * true, it will listen for the given event and check the return of then
 * whenFn. If the whenFn ever returns true, the callback function will be
 * called and the event listener will be removed.
 * 
 * @param {function} whenFn - should return true when the condition is OK
 * @param {eventName}
 * @param {function} callback
 */
EventEmitter.prototype.executeWhen = function(whenFn, eventName, callback) {
    var me = this;

    function callbackAndRemoveListener(callback) {
        if (whenFn()) {
            callback();
            me.removeEventListener(eventName, callbackAndRemoveListener);
        }
    }
    if (whenFn()) {
        callback();
    }
    else {
        this.addEventListener(eventName, callbackAndRemoveListener);
    }
};

function StoreEventEmitter() {
}
    
/**
 * Register events on an emitter with and without
 * an ownerId. This function can be called as
 * 
 *    emitter.on(EVENT, callback);
 * 
 * and
 * 
 *    emitter.on(emitterId, EVENT, callback);
 */
StoreEventEmitter.prototype.on = function(ownerId, eventId, callback) {
    this.$eventEmitters = this.$eventEmitters || {};

    var args = Array.from(arguments);

    assert(arguments.length === 2 || arguments.length === 3);

    if (arguments.length === 2) {
        args.unshift("no-owners");
        ownerId = args[0];
        eventId = args[1];
        callback = args[2];
    }

    if (!this.$eventEmitters[ownerId])
        this.$eventEmitters[ownerId] = new EventEmitter();
    var emitter = this.$eventEmitters[ownerId];
    emitter.on(eventId, callback);
};
    
StoreEventEmitter.prototype.once = function(ownerId, eventId, callback) {
    this.$eventEmitters = this.$eventEmitters || {};

    var args = Array.from(arguments);

    assert(args.length === 2 || args.length === 3);

    if (args.length === 2) {
        args.unshift("no-owners");
        ownerId = args[0];
        eventId = args[1];
        callback = args[2];
    }

    if (!this.$eventEmitters[ownerId])
        this.$eventEmitters[ownerId] = new EventEmitter();
    var emitter = this.$eventEmitters[ownerId];
    emitter.once(eventId, callback);
};
    
StoreEventEmitter.prototype._emit = function(ownerId, eventId, event) {
    this.$eventEmitters = this.$eventEmitters || {};

    var emitter = this.$eventEmitters[ownerId];

    if (emitter) {
        emitter._emit(eventId, event);    
    }
    emitter = this.$eventEmitters["no-owners"];
    if (emitter) {
        emitter._emit(eventId, event);
    }
};
    
StoreEventEmitter.prototype.removeEventListener = function(ownerId, eventId, callback) {
    this.$eventEmitters = this.$eventEmitters || {};

    var args = Array.from(arguments);

    assert(args.length === 2 || args.length === 3);

    if (args.length === 2) {
        args.unshift("no-owners");
        ownerId = args[0];
        eventId = args[1];
        callback = args[2];
    }        

    var emitter = this.$eventEmitters[ownerId];
    emitter.removeEventListener(eventId, callback);
};

StoreEventEmitter.prototype.removeAllListeners = function() {
    this.$eventEmitters = {};
};

exports.EventEmitter = EventEmitter;
exports.StoreEventEmitter = StoreEventEmitter;

},{"assert":undefined,"lodash":90}],225:[function(require,module,exports){
"use strict";

var excelcreator = require("./util/excelcreator");
var CELLS_PER_ITER = 5000;

function getExportData(viewId, maDataStore, returnRawData, onComplete) {
    var queryOptions = {
            attributeOptions: {
                includeValue: true,
            },
            builderOptions: {
                prebuildInfoAndData: false
            }
        },
        measureModel = maDataStore.getModel(),
        headingData = maDataStore.getHeadingData(viewId, "exportExcel"),
        excelCreator = new excelcreator.ExcelCreator(measureModel, headingData, "Y", "X", "Z"),
        xLen = headingData.getHeadingAxisInfo("X").getLength(),
        yLen = headingData.getHeadingAxisInfo("Y").getLength(),
        iterAxis = xLen >= yLen ? "X" : "Y",
        iterLen = xLen >= yLen ? xLen : yLen,
        shortAxisLen = xLen >= yLen ? yLen : xLen,
        cellBuilder = excelCreator.mkCellBuilder(),
        linesPerIter = Math.max(Math.trunc(CELLS_PER_ITER / shortAxisLen), 25),
        exportSliceAt = function(index) {
            return function() {
                // Iterate over the longer axis.
                var range = { Z: { length: 1 } };
                range[iterAxis] = { 
                    start: index,
                    length: (iterLen - index) > linesPerIter ? linesPerIter : (iterLen - index)
                };

                if ((index + range[iterAxis].length) < iterLen) {
                    setTimeout(exportSliceAt(index + linesPerIter));
                }

                maDataStore.getDataRange(viewId, "exportExcel", range, cellBuilder, true, queryOptions);

                if ((index + range[iterAxis].length) >= iterLen) {
                    onComplete(excelCreator.exportData(returnRawData));
                }
            }
        };
    setTimeout(exportSliceAt(0));
}

module.exports.getExportData = getExportData;

},{"./util/excelcreator":281}],226:[function(require,module,exports){
"use strict";

/**
 * A tool that parses measure formats.
 * @constructor
 */
function FormatParser() {
    this.$formatters = {};
    this.$regExp = new RegExp("([\$€₡£₹¥₩₦₱₲฿₴₫%]|zł)?([#0]+)([\\.\\,])?([#0]+)?([\\.\\,])?(\\d+)?([\$€₡£₹¥₩₦₱₲฿₴₫%]|zł)?");
    this.$prefixSymbolIndex = 1;
    this.$postfixSymbolIndex = 7;
    this.$thousandsDelimiterIndex = 3;
}

/**
 * An object that contains information about format.
 * @typedef  {Object}  ParsedFormat
 * @property {Object}  delimiters
 * @property {string}  delimiters.thousands
 * @property {string}  delimiters.decimal
 * @property {Object}  currency
 * @property {string}  currency.symbol
 * @property {boolean} currency.isPrefix
 *
 * Returns a cached parsed format according to data type and string format or creates a new format.
 * @param  {string} dataType the type of data
 * @param  {string} format   the format
 * @return {ParsedFormat}    an object representation of format
 */
FormatParser.prototype.parse = function(dataType, format) {
    var formatterName = this.$getFormatterName(dataType, format),
        formatter = this.$formatters[formatterName];

    if (!formatter) {
        formatter = this.$parse(dataType, format);
        this.$formatters[formatterName] = formatter;
    }
    return formatter;
};

/**
 * Parses the format
 * @param  {string} dataType
 * @param  {string} format
 * @return {ParsedFormat}
 */
FormatParser.prototype.$parse = function(dataType, format) {
    var parsedFormat = this.$getDefaultFormat(),
        matches,
        formatSymbol;

    if(format && format.match) {
        matches = format.match(this.$regExp);
        formatSymbol = matches[this.$prefixSymbolIndex] || matches[this.$postfixSymbolIndex];

        parsedFormat.delimiters.thousands = matches[this.$thousandsDelimiterIndex];
        parsedFormat.delimiters.decimal = parsedFormat.delimiters.thousands === "," ? "." : ",";

        if (formatSymbol) {
            if (formatSymbol === "%") {
                parsedFormat.isPercentage = true;
            } else {
                parsedFormat.currency = {
                    symbol: formatSymbol,
                    isPrefix: !!matches[this.$prefixSymbolIndex]
                };
                parsedFormat.isPercentage = false;
            }
        }
    }

    return parsedFormat;
};

/**
 * Returns an unique name for formatter.
 * @param  {string} dataType
 * @param  {string} format
 * @return {string}
 */
FormatParser.prototype.$getFormatterName = function(dataType, format) {
    return dataType + ":" + format;
};

/**
 * Returns the default format.
 * @return {ParsedFormat}
 */
FormatParser.prototype.$getDefaultFormat = function() {
    return {
        isPercentage: false,
        delimiters: {
            thousands: ",",
            decimal: "."
        }
    };
};

/**
 * Stores a FormatParser instance that is used to parse formats.
 * @type {FormatParser}
 */
module.exports = new FormatParser();
},{}],227:[function(require,module,exports){
"use strict";

var Formatter = module.exports;

var assert = require("assert");
var formatParser = require("./formatparser");
var numeral = require("numeral");
var lodash = require("lodash");

/**
 * Returns the format function according to the given format and name.
 * @param  {String}   format       the format pattern
 * @param  {String}   name         the measure name
 * @param  {Object}   language     format language
 * @return {Function}              the function that has one argument which is the value that should be formatted
 */
function getFormatMethod(format, name, language) {
    if (format) {
        if (language) {
            if(language.currency && language.currency.symbol) {
                //numeral supports only $ as format currency
                format = format.replace(language.currency.symbol, "$");
            }
        } else {
            name = "en";
        }

        return function(value) {
            numeral.language(name);
            return value && numeral(value).format(format);
        }
    } else {
        return lodash.identity;
    }
}

/**
 * Returns the unformat function according to the given measure name
 * @param {String} name         the measure name
 * @param {Object} language     format language
 * @return {Function}           the function with one argument which is the value that should be unformatted
 */
function getUnformatMethod(name, language) {
    var isPercentage;

    if (!language) {
        //setting default language
        name = "en";
    } else {
        isPercentage = language.isPercentage;
    }

    return function(value) {
        numeral.language(name);

        //if the user enters something like "2" into the percentage cell
        //it should be parsed like "2%" and unformatted to "0.02", that's why we divide by 100
        return isPercentage && !lodash.includes(value, "%") ?
            numeral().unformat(value) / 100 :
            numeral().unformat(value);
    };
}

/**
 * An object that has methods to format/unformat values.
 * @typedef  {Object}   MeasureFormatter
 * @property {Function} format        the function that does formatting
 * @property {Function} unformat      the function that does unformatting
 * @property {String}   formatPattern the pattern that should be used to format/unformat a value
 */
function createFormatterFromLanguage(format, name, language) {
    var newLanguage,
        res;

    //check if there is such language already in numeral
    try {
        numeral.language(name);
    } catch(e) {
        newLanguage = true;
    }

    //set language to numeral if there is no such
    if (newLanguage && language) {
        //creating language with the measure name
        numeral.language(name, language);
    }

    res = {
        formatPattern: format,
        format: getFormatMethod(format, name, language),
        unformat: getUnformatMethod(name, language),
        isPercentage: language && language.isPercentage
    };

    return res;
}

/**
 * Creates a format language for measure, sets language to use the right currency
 * and transforms the entered format to a format supported by numeral.
 *
 * Accept all the formats that numeral accepts, the only difference is that it accepts
 * any currency in that list: $ or € or ₡ or £ or ₹ or ¥ or ₩ or ₦ or ₱ or ₲ or ฿ or ₴ or ₫ or zł
 *
 * Examples of accepted formats:
 *     "$#,###.00"
 *     "£#,###.00"
 *     "#,###%"
 *
 * @param  {String} format  the format pattern for the given measure name
 * @param  {String} name    the name of measure
 * @return {MeasureFormatter}
 */
Formatter.getFormatter = function(format, name, dataType) {
    assert(name || dataType, "Measure name and data type are required.");

    if (!format) {
        return createFormatterFromLanguage(null, name);
    }

    var formatter = formatParser.parse(dataType, format),
        language = {
            delimiters: {
                thousands: formatter.delimiters.thousands,
                decimal: formatter.delimiters.decimal
            },
            abbreviations: {
                thousand: "[kK]",
                million: "[mM]",
                billion: "[bB]",
                trillion: "[tT]"
            },
            currency: {
                symbol: formatter.currency && formatter.currency.symbol
            },
            isPercentage: formatter.isPercentage
        };

    return createFormatterFromLanguage(format, name, language);
};
},{"./formatparser":226,"assert":undefined,"lodash":90,"numeral":99}],228:[function(require,module,exports){
"use strict";

var mac = require("./multiaxisconfig");
var lodash = require("lodash");
var assert = require("assert");
var queryresults = require("./querygen/results");
var queryutil = require("./querygen/util");
var Immutable = require("immutable");
var mah = require("./multiaxisheading");

module.exports.HeadingGenerator = HeadingGenerator;

function HeadingGenerator(measureModel) {
    this.$measureModel = measureModel;
}

/**
 * @typedef {Object} QueryData
 * @property {ResultTable} resultTable - undefined if data not available
 * @property {Boolean} isDirty
 *
 * @typedef {Map<DataName, mad.QueryData>} FieldData
 *
 * @param {mac.NestTerm} nestTerm the MultiAxisConfig NestTerm 
 * @param {Map<Field, FieldData>} fieldData mapping from field to FieldData object that holds all the data for that field's data configs
 * @param {Map<Field, mad.QueryData[]>} sortTables mapping from field to array of ResultTable objects representing the sort data relative to the field sort configs 
 * @param {Map<Immutable.List<Field>, mad.QueryData>} mapTables result table mapping between fields, in a map keyed by two-element lists of Fields (parent, child)
 * @param {MultiAxisConfig} multiAxisConfig
 */
HeadingGenerator.prototype.generateMAHNestTerm = function(nestTerm, fieldData, sortTables, mapTables, multiAxisConfig) {
    var me = this,
        measureModel = this.$measureModel,
        levelFields = nestTerm.fieldTerms.map(function(fieldTerm) {
            return mac.getField(multiAxisConfig, fieldTerm.fieldId);
        }),
        outlineLevelFields = levelFields.filter(function(f) {
            return f.displayMode === mac.LevelDisplayMode.OUTLINE;
        }),
        outlineFieldNames = outlineLevelFields.map(function(f) { return f.id; }),
        fieldNames = levelFields.map(function(f) { return f.id; }),
        fieldLevels = levelFields.map(function(f) { return mac.levelToQualifiedLevel(f.level); }),
        childToParentMaps = new Map(),
        parentToChildMaps = new Map(),
        fieldMemberLists = new Map(),
        memberLookups = new Map(),
        mappings = new Map(),
        allDataAvailable = true,
        fieldTerms,
        fieldMaps;

    //loop through each level from high to low, building maps
    fieldLevels.forEach(function(lvl, i) {
        var thisField = levelFields.get(i),
            thisFieldData = fieldData.get(thisField),
            thisSortTables = sortTables.get(thisField),
            parentField = i > 0 && levelFields.get(i-1),
            parentLevel = parentField && fieldLevels.get(i-1),
            
            parentFieldId = parentField && parentField.id,
            thisFieldId = thisField.id,

            mapTable = parentField && mapTables.get(new Immutable.List([parentField, thisField])),
            tableMap = [],
            thisQueryData = [],
            sortTableConfigs = [],
            unifiedResultTable,
            dataTable,
            labelTableIndex,
            parentTableIndex,
            thisFieldDataAvailable,
            thisFieldDataDirty,

            parentId,
            thisId,
            thisMember,
            thisFieldMemberList = [],
            childToParentMap = new Map(),
            parentToChildMap = new Map(),
            memberLookup = new Map(),
            childrenArray,
            row,
            j = 0;

        assert(thisFieldData.get("id"), "Expected to receive 'id' data for level's field data");

        thisFieldData.keySeq().forEach(function(k) {
            thisQueryData.push(thisFieldData.get(k));
            tableMap.push(k);
        });

        //use the id instead of label if the field didn't request label
        labelTableIndex = tableMap.indexOf("label") > -1 ? tableMap.indexOf("label") : 0;

        thisField.sortConfigs.forEach(function(sortCfg, i) {
            var resultTableIndex = thisQueryData.length;
            thisQueryData.push(thisSortTables[i]);
            var tableCfg = {
                tableIdx: resultTableIndex,
                direction: sortCfg.sortType
            };
            if (thisSortTables[i].resultTable)
                tableCfg.valueType = queryutil.getMeasureValueType(thisSortTables[i].resultTable.columnInfo[1].measure, measureModel);

            sortTableConfigs.push(tableCfg);
        });

        if (mapTable) {
            parentTableIndex = thisQueryData.length;
            thisQueryData.push(mapTable);
        }

        thisFieldDataAvailable = thisQueryData.every(function(d) {
            return !lodash.isUndefined(d.resultTable);
        });

        thisFieldDataDirty = thisQueryData.some(function(d) {
            return d.isDirty;
        });

        if (thisFieldDataAvailable) {
            //always filter on the first table which is id
            unifiedResultTable = queryresults.unionResultTables(lodash.map(thisQueryData, "resultTable"), sortTableConfigs, [0]);
            dataTable = unifiedResultTable.dataTable;

            parentToChildMaps.set(parentFieldId, parentToChildMap);

            mappings.set(parentFieldId, []);
            fieldMemberLists.set(thisFieldId, thisFieldMemberList);

            //row expected to be a of structure [thisId, thisId, dataCfg1, dataCfg2, ..., dataCfgM, sortCfg1, sortCfg2, ..., sortCfgN[, parentId]]
            //parentId will only be at the end if there is a parent field
            for(; j < dataTable.length; j++) {
                row = dataTable[j];
                thisId = row[1];
                thisMember = new mah.Member(thisId, row[labelTableIndex+1], createMemberConfig(row, thisField, tableMap));
                memberLookup.set(thisId, thisMember); 

                //update mappings between levels
                if (parentLevel) {
                    parentId = row[parentTableIndex+1]; //+1 because the first column is the key, so tables are offset by one
                    childToParentMap.set(thisId, parentId);
                } else {
                    //if no parent, go ahead and add to field member list
                    thisFieldMemberList.push(thisMember);
                }

                childrenArray = parentToChildMap.get(parentId);
                if (childrenArray) {
                    childrenArray.push(thisId);
                } else {
                    parentToChildMap.set(parentId, [thisId]);
                }
            }
        } else {
            allDataAvailable = false;
        }

        memberLookups.set(thisFieldId, memberLookup); 
    
        childToParentMaps.set(thisFieldId, childToParentMap);
    });

    function getFieldInfo(field) {
        var fieldId = field.id,
            fieldIndex = fieldNames.indexOf(fieldId);

        return {
            fieldId: fieldId,
            fieldMembers: fieldMemberLists.get(fieldId), 
            rollupConfig: field.rollupConfigs.size && field.rollupConfigs.get(0),
            isOutline: field.displayMode === mac.LevelDisplayMode.OUTLINE,
            memberLookup: memberLookups.get(fieldId),
            parentToChildMap: parentToChildMaps.get(fieldId),
            mapping: mappings.get(fieldId),
            immediateChildField: fieldIndex < fieldNames.size - 1 && levelFields.get(fieldIndex+1)
        };
    }

    function addRollupMemberToChildren(parentFieldInfo, parentRollupMemberInfo, lowestOutlineFieldMapping, lowestOutlineParentId) {
        if (!parentFieldInfo.immediateChildField) return;
        
        var childField = parentFieldInfo.immediateChildField,
            childFieldInfo = getFieldInfo(childField),
            childIsOutline = childFieldInfo.isOutline,
            fieldMembers = childFieldInfo.fieldMembers,
            rollupParentMember = parentRollupMemberInfo.member,
            rollupMember;

        //we only add a member if it is an outline (since there is no heading term for non-outline Fields)
        if (childIsOutline) {
            rollupMember = new mah.Member(
                mah.mkRollupMemberId(parentFieldInfo.rollupConfig, rollupParentMember.config.field.id, rollupParentMember.id),
                //only draw a label for the last field
                !childFieldInfo.immediateChildField ? rollupParentMember.label : "",
                parentRollupMemberInfo.rollupMemberConfig
            );
            fieldMembers.push(rollupMember);

            //make a mapping to the last outline parent id
            if (lowestOutlineFieldMapping && !lodash.isUndefined(lowestOutlineParentId)) {
                lowestOutlineFieldMapping.push([rollupMember.id, lowestOutlineParentId]);
            }
        }

        if (childFieldInfo.immediateChildField)
            addRollupMemberToChildren(childFieldInfo, parentRollupMemberInfo, 
              childIsOutline ? childFieldInfo.mapping : lowestOutlineFieldMapping,
              childIsOutline ? rollupMember.id : lowestOutlineParentId);
    }

    /**
     * populates the members for lower fields that rollup to this particular parent member.
     *
     * @param {FieldInfo} parentFieldInfo info about the field, passed from the outside to prevent repeated calculation
     * @param {String} parentId similarly passed from outside to prevent repeated calculations
     * @param {Member} parentMember
     * @param {Map} [lowestOutlineFieldMapping] if passed, provides the mapping from the lowest field above or including the parent field to its children.  This is necessary because we are converting config terms to heading terms.  Config terms are always represented whether they are outlines or not, but separate headings are only constructed for fields that are in outline mode.  Therefore we pass down through the recursive calls the last -outline- field's mapping.  It's place here is a bit awkward but is done in this manner to prevent the need to separately loop over members a second time to establish the correct heading mappings.
     * @param {String} [lowestOutlineParentId] if one of the parent fields is an outline one, the id of the parent member to this iteration. Provided to prevent repeated calculations
     */
    function populateChildrenFieldMembersForMember(parentFieldInfo, parentId, parentMember, lowestOutlineFieldMapping, lowestOutlineParentId) {
        //skip out for non-parent levels
        if (!parentFieldInfo.immediateChildField) return;

        var childField = parentFieldInfo.immediateChildField, 
            childFieldInfo = getFieldInfo(childField),
            childIsOutline = childFieldInfo.isOutline,
            childMemberLookup = childFieldInfo.memberLookup,
            //for recursively populating the fields lower than this one, we need to find the proper
            //argument for lowestOutlineFieldMapping, which is either this field if it is in Outline mode, or the argument passed into this call
            childLowestOutlineFieldMapping = childIsOutline ? childFieldInfo.mapping : lowestOutlineFieldMapping,
            parentRollupConfig = parentFieldInfo.rollupConfig,
            parentRollupMemberInfo = parentRollupConfig && {
                rollupConfig: parentRollupConfig,
                member: parentMember,
                rollupMemberConfig: mah.mkRollupMemberConfig(parentRollupConfig, parentMember)
            },
            fieldMembers = childFieldInfo.fieldMembers,
            childrenArray,
            childMember,
            childId,
            childLowestOutlineParentId,
            i = 0,
            noChildId,
            noChildMember;

        //if the parent is a rollup member, add it to all downstream field members
        if (parentRollupConfig)
            addRollupMemberToChildren(parentFieldInfo, parentRollupMemberInfo, lowestOutlineFieldMapping, lowestOutlineParentId);

        childrenArray = parentFieldInfo.parentToChildMap.get(parentId);
        if (childrenArray && childrenArray.length) {
            for (i = 0; i < childrenArray.length; i++) {
                childId = childrenArray[i];
                childMember = childMemberLookup.get(childId);

                if (childIsOutline) {
                    fieldMembers.push(childMember);
                    childLowestOutlineParentId = childId;
                } else {
                    childLowestOutlineParentId = lowestOutlineParentId;
                }

                if (lowestOutlineParentId && lowestOutlineFieldMapping)
                    lowestOutlineFieldMapping.push([childId, lowestOutlineParentId]);

                populateChildrenFieldMembersForMember(childFieldInfo, childId, childMember, childLowestOutlineFieldMapping, childLowestOutlineParentId);
            }
        } else if (lowestOutlineParentId && lowestOutlineFieldMapping) {
            noChildId = lowestOutlineParentId + "_NO_CHILDREN";
            noChildMember = new mah.Member(noChildId, "", {field: childField, invalidHeadings: true});
            
            lowestOutlineFieldMapping.push([noChildId, lowestOutlineParentId]);
            fieldMembers.push(noChildMember);
            
            populateChildrenFieldMembersForMember(childFieldInfo, noChildId, noChildMember, childLowestOutlineFieldMapping, noChildId);
        }
    }

    if (allDataAvailable) {
        //starting with the first field, populate child members.
        //we go top to bottom like this to cause the members in each field to be 
        //properly sorted by the parent field(s)
        fieldMemberLists.get(fieldNames.get(0)).forEach(function(member) {
            var memberId = member.id,
                fieldInfo = getFieldInfo(levelFields.get(0)),
                outlineField = fieldInfo.isOutline && fieldInfo,
                outlineParentId = outlineField && memberId,
                outlineMapping = outlineField && outlineField.mapping;

            populateChildrenFieldMembersForMember(fieldInfo, memberId, member, outlineMapping, outlineParentId); 
        });

        fieldMaps = lodash.compact(outlineFieldNames.map(function(fieldId, i) {
            //if not the last one
            if (i < outlineLevelFields.size - 1) {
                return new mah.FieldMap(
                    outlineLevelFields.get(i), 
                    outlineLevelFields.get(i+1), 
                    mappings.get(fieldId)
                );
            }
        }).toArray());

        fieldTerms = outlineFieldNames.map(function(fieldId, i) {
            var members = fieldMemberLists.get(fieldId);
            
            return members.length ? new mah.FieldTerm(outlineLevelFields.get(i), members) :
                me.$createInvalidFieldTermForField(outlineLevelFields.get(i));
        }).toArray();

    } else {
        fieldMaps = lodash.compact(levelFields.map(function(field, i) {
            if (i < levelFields.size - 1) {
                return new mah.FieldMap(
                    field,
                    levelFields.get(i+1), 
                    [[mah.LOADING_MEMBER_ID, mah.LOADING_MEMBER_ID]]
                );
            }
        }).toArray());

        //if we don't have data, make terms to reflect that
        fieldTerms = levelFields.map(function(field, i) {
            return me.$createLoadingFieldTermForField(field);
        }).toArray();
    }

    //if there's only one term and no maps, then it boils down to just a field term
    if (fieldMaps.length && fieldTerms.length > 1)
        return new mah.NestTerm(nestTerm.fieldId, fieldTerms, fieldMaps);
    else
        return fieldTerms[0];
};

/**
 * @param {mac.FieldTerm} fieldTerm
 * @param {MAConfig} multiAxisConfig
 * @return {mah.FieldTerm}
 */
HeadingGenerator.prototype.generateMAHFieldTermForMeasureField = function(fieldTerm, multiAxisConfig) {
    var field = mac.getField(multiAxisConfig, fieldTerm.fieldId);

    return new mah.FieldTerm(
        field,
        [new mah.Member(field.id, field.fieldLabel, {field: field})]
    );
};

/**
 * @param {mac.FieldTerm} fieldTerm
 * @param {FieldData} fieldData
 * @param {mad.QueryData[]} sortData
 * @param {MAConfig} multiAxisConfig
 * @return {mah.FieldTerm}
 */
HeadingGenerator.prototype.generateMAHFieldTermForLevelField = function(fieldTerm, fieldData, sortData, multiAxisConfig) {
    var me = this,
        field = mac.getField(multiAxisConfig, fieldTerm.fieldId),
        queryData = [],
        tableMap = [],
        sortTableConfigs = [],
        labelTableIndex = [],
        unifiedResultTable,
        allDataAvailable = true,
        dataTable,
        members = [],
        row,
        thisId,
        thisMember,
        j = 0;

    assert(field, "Couldn't find field for id " + fieldTerm.fieldId);
    assert(fieldData.get("id"), "Expected to receive 'id' data for level's field data");

    queryData.push(fieldData.get("id"));
    tableMap.push("id");

    field.data.forEach(function(dataCfg) {
        queryData.push(fieldData.get(dataCfg.name));
        tableMap.push(dataCfg.name);
    });    

    //use the id instead of label if the field didn't request label
    labelTableIndex = tableMap.indexOf("label") > -1 ? tableMap.indexOf("label") : 0;

    (field.sortConfigs || new Immutable.List()).forEach(function(sortCfg, i) {
        var resultTableIndex = queryData.length;
        queryData.push(sortData[i]);

        sortTableConfigs.push({
            tableIdx: resultTableIndex,
            direction: sortCfg.sortType,
            valueType: mac.getMeasureValueType(sortCfg.measure, me.$measureModel)
        });
    });

    allDataAvailable = queryData.every(function(d) {
        return !lodash.isUndefined(d.resultTable);
    });
    
    if (allDataAvailable) {
        unifiedResultTable = queryresults.unionResultTables(lodash.map(queryData, "resultTable"), sortTableConfigs, [0]);
        dataTable = unifiedResultTable.dataTable;

        //row expected to be a of structure [thisId, thisId, dataCfg1, dataCfg2, ..., dataCfgM, sortCfg1, sortCfg2, ..., sortCfgN[, parentId]]
        //parentId will only be at the end if there is a parent field
        for(; j < dataTable.length; j++) {
            row = dataTable[j];
            thisId = row[1];
            thisMember = new mah.Member(thisId, row[labelTableIndex + 1], createMemberConfig(row, field, tableMap));

            members.push(thisMember);
        }

        return members.length ? new mah.FieldTerm(field, members) : 
            this.$createInvalidFieldTermForField(field);
    } else {
        return this.$createLoadingFieldTermForField(field);
    }
};

HeadingGenerator.prototype.$createLoadingFieldTermForField = function(field) {
    var loadingLabel = "Loading " + (field.fieldLabel || field.id) + "...";
    return new mah.FieldTerm(field, [new mah.Member(mah.LOADING_MEMBER_ID, loadingLabel, {field: field, loading: true})]);
};

HeadingGenerator.prototype.$createInvalidFieldTermForField = function(field) {
    return new mah.FieldTerm(field, [new mah.Member(mah.INVALID_MEMBER_ID, "", {field: field, invalidHeadings: true})]);
};

function createMemberConfig(row, thisField, tableMap) {
    var cfg = {
            field: thisField
        },
        len = tableMap.length,
        k = 1;

    for (; k < len; k++) {
        cfg[tableMap[k]] = row[k+1]; //have to increment b/c the key makes an offset
    } 

    return cfg;
}

},{"./multiaxisconfig":253,"./multiaxisheading":254,"./querygen/results":259,"./querygen/util":260,"assert":undefined,"immutable":44,"lodash":90}],229:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var mac = require("../multiaxisconfig");

var fh = module.exports;

fh.getFieldStateFromStore = function(fieldStore) {
    return fieldStore.getFields();
};

fh.getFieldFromQualifiedName = function(fieldState, qName) {
    // fields from a qualified name can only be levels, measures ar field groups
    // and are guaranteed to be unique
    return fieldState.get(getKeyFromIdAndType(qName, mac.FieldTypes.LEVEL)) || 
        fieldState.get(getKeyFromIdAndType(qName, mac.FieldTypes.MEASURE)) ||
        fieldState.get(getKeyFromIdAndType(qName, mac.FieldTypes.MEASURE_GROUP));
};


fh.getField = function(fieldState, id, type) {
    return fieldState.get(getKeyFromIdAndType(id, type));
};

fh.getLevelFieldsForDimension = function(fieldState, dimension) {
    return fieldState.toList().filter(function(f) { 
        return f instanceof mac.LevelField && f.level.dimensionName === dimension;
    });
};

function getKeyFromIdAndType(id, type) {
    return Immutable.Map({ id: id, type: type });
}

/**
 *
 * @param {FieldState} fieldState
 * @param {String} measureGroupId
 * @return {MeasureGroupField}
 */
fh.getCanonicalMeasureGroup = function(fieldState, measureGroupId) {
    // look for the measure group in the field store
    var measureGroup = fh.getField(fieldState, measureGroupId, mac.FieldTypes.MEASURE_GROUP);
    
    if (!measureGroup) { 
        measureGroup = new mac.MeasureGroupField({ id: measureGroupId, fieldLabel: measureGroupId });
    }

    return measureGroup;
};

},{"../multiaxisconfig":253,"immutable":44}],230:[function(require,module,exports){
"use strict";

var mmh = module.exports;

mmh.getMeasureModelFromStore = function(measureModelStore) {
    return measureModelStore.getModel();
};


},{}],231:[function(require,module,exports){
"use strict";

var pchs = module.exports;
var SORT = require("../constant").SORT;

pchs.getPivotConfigFromStore = function(pivotConfigStore) {
    return {
        levelsConfig: pivotConfigStore.getLevels(),
        metricsConfig: pivotConfigStore.getMetricsConfig()
    };
};

pchs.getMetricFormat = function(pivotConfigState, metricName) {
        var metricConfig = pchs.getMetricConfig[metricName];
        return metricConfig && metricConfig.format;
};

pchs.getMetricConfig = function(pivotConfigState, metricName) {
    return pivotConfigState.metricsConfig && pivotConfigState.metricsConfig[metricName];
};

/**
* Returns default sort configuration for level.
*
* @param {PivotConfigState} pivotConfigState
* @param {mac.Level} level - the level.
* @return {Object} - the default sort configuration.
*/
pchs.getLevelDefaultSort = function(pivotConfigState, level) {
    var cfg = this.getLevelConfig(pivotConfigState, level);

    return {
        sortAttr: (cfg && cfg.sortAttr) || SORT.DEFAULT_ATTR, 
        sortType: (cfg && cfg.sortType) || SORT.DEFAULT_TYPE
    };
};

pchs.getLevelConfig = function(pivotConfigState, level) {
    var levelName = level.dimensionName + ":" + level.levelName;
    return pivotConfigState.levelsConfig && pivotConfigState.levelsConfig[levelName];
};

},{"../constant":191}],232:[function(require,module,exports){
"use strict";

var assert = require("assert");
var lodash = require("lodash");

/**
 * A tool that parses user's input data.
 * @constructor
 */
function InputParser(formatter) {
    this.formatter = formatter;

    this.SPREAD_METHOD_SUFFIX = {
        E: "EVEN",
        R: "REPLICATE",
        P: "RATIO",
        D: "DELTA"
    };

    this.$isCalculatorRegExp = new RegExp("^(((\\+-|[+/*])(?=.*[^%]$))|(\\+-|\\+(?=.*%$)))");

    this.$isSpreadRegExp = new RegExp("[ERPD]$");

    this.NON_NUMERIC_TYPES = ["STRING", "NAMED", "BOOLEAN"];
}


/**
 * Checks whether value is calculator.
 * @param  {string}  value the value that should be checked
 * @return {string|null}
 */
InputParser.prototype.$isCalculator = function(value) {
    var matchedValue = value.toString().match(this.$isCalculatorRegExp);
    return matchedValue && matchedValue[0]; //return the first matched group which contains the calculation symbol
};

/**
 * Checks whether value contains Spread suffix.
 * @param  {string}  value the value that should be checked
 * @return {string|null}
 */
InputParser.prototype.$isSpread = function(value) {
    var matchedValue = value.toString().match(this.$isSpreadRegExp);
    return matchedValue && matchedValue[0]; //return the first matched group which contains the spread symbol
};

InputParser.prototype.$adjustValueWithDelta = function(value, deltaValue, operator) {
    var rawDeltaValue = this.formatter.unformat(deltaValue);
    var rawValue = this.formatter.unformat(value);

    switch (operator) {
        case "+":
        case "+-":
            if (this.formatter.isPercentage || !lodash.includes(deltaValue, "%")) {
                // for the percentage cell we just add a value, regardless of the "%" is specified or not
                return rawValue + rawDeltaValue;
            } else {
                // if it's not the percentage cell and the user specified the "%" then we need to
                // calculate the percent part and add it to the initial value
                return rawValue + rawDeltaValue * rawValue;
            }
        case "*":
            if (this.formatter.isPercentage) {
                return rawValue * rawDeltaValue * 100;
            }
            return rawValue * rawDeltaValue;
        case "/":
            if (this.formatter.isPercentage) {
                return rawValue / (rawDeltaValue * 100);
            }
            return rawValue / rawDeltaValue;
        default: assert(false, "Unsupported delta operator.");
    }
};


/** Parse the input string and determine the value to be used for update. The parsing is done in
 * the following sequence:
 *  1. Result value is initialized with formatted input value and undefined spread method.
 *
 *  2. If the type of the measure is STRING_MEASURE_TYPE then we just return this result.
 *
 *  3. If the input value contains a one of these operators: "+,-,*,/" as prefix, it has a
 *  delta value. If the delta is specified as % value, compute the actual delta from it.
 *  Finally, compute the result using the value, operator and delta value.
 *
 *  4. If there is no operator, then result.data is set to unformatted input value, e.g. "$1,000" turns into 1000
 *
 *  5. If the spread method suffix is specified then we set spreadMethod of the result based on this suffix.
 *
 *  {String} input // current input value
 *  {Object} measDataType   // data type of the measure
 *  {Object} formatter // format, unformat, formatPattern
 *  {String} cellData // current cell value
 *
 * @return {Object} result, where
 *   {Object} result.data           // data that matches the measure's type
 *   {String} result.spreadMethod   // has either a valid spread method or else it is undefined
 */
InputParser.prototype.parseEditInput = function(input, measDataType, cellData) {
    var operator,
        spreadResult,
        result = {
            data: input,
            spreadMethod: undefined
        };

    // if the measure type is string just return the raw input
    if (!lodash.includes(this.NON_NUMERIC_TYPES, measDataType)) {
        operator = this.$isCalculator(input);
        assert(!(operator && !cellData), "Somehow an operator was applied to a cell we don't have data for, probably because it was offscreen. This is not currently supported.");
        if (operator && cellData) {
            result.data = this.$adjustValueWithDelta(cellData, input, operator[0]);
        } else {
            result.data = input ? this.formatter.unformat(input) : undefined;
        }

        spreadResult = this.$isSpread(input);
        if (spreadResult) {
            result.spreadMethod = this.SPREAD_METHOD_SUFFIX[spreadResult[0]]
        }
    }

    return result;
};

module.exports.createParser = function(formatter) {
    return new InputParser(formatter);
};

},{"assert":undefined,"lodash":90}],233:[function(require,module,exports){
"use strict";

/**
 * @param {string} head
 * @param {string} body
 * @return {string} LogiQL rule with 'head' and 'body'
 */
exports.rule = function (head, body) {
    return head+" <- "+body+".";
}

/**
 * @param {string[]} arguments
 * @return {string} LogiQL formula as conjunction of 'arguments'
 */
exports.and = function () {
    return Array.prototype.slice.call(arguments, 0).join(",");
}

},{}],234:[function(require,module,exports){

/**
 * Module to contain validation functions for MAConfig objects
 */
var mac = require("./multiaxisconfig");

//shorthand to export functions
var mcv = module.exports;


mcv.validateRollupConfigs = function(config, model) {
    var allLevelFields = mac.getAxisFields(config, function(f) { return f instanceof mac.LevelField; }),
        messages = [];

    allLevelFields.forEach(function(f) {
        //validate that all level fields have at most one rollup
        if (f.rollupConfigs && f.rollupConfigs.size > 1)
            messages.push("LevelFields may have at most 1 rollupconfig but '" + f.id + "' has more than 1");
    });

    return messages;
};

},{"./multiaxisconfig":253}],235:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");

    /* A stateless, singleton module to centralize
     * measure language rules/formulas
     */
    var measurelanguage = module.exports;

    /**
     * Measure language rule
     *
     * @param {String} ruleName
     * @param {String[]} formulas
     * @return {String}
     */
    measurelanguage.rule = function (ruleName, formulas) {
        // surround the formulas with rule <name> { formula <body> }
        return "rule \"" + ruleName + "\" { " +
            formulas.join(" ") +
            " }";
    };

    /**
     * Measure language formula
     *
     * @param {String} formulaName
     * @param {String[]} formulaBody
     * @return {String}
     */
    measurelanguage.formula = function (formulaName, formulaBody) {
        return "formula \"" + formulaName + "\" { " + formulaBody + " }";
    };

    /**
     * Parse string as measure language formula
     *
     * @param {String} formula
     * @return {Object} ret
     * @prop {String} ret.name
     * @prop {String} ret.body
     * @throws {Error} if the formula doesn't parse
     */
    measurelanguage.parseFormula = function(formula) {
        // Formula should have the form 'MetricName = Expr'
        // We extract the formula name from the formula text with a regex
        var tokens = /\s*(\w+)[\s\[]*/.exec(formula);
        if (tokens) {
            return { name: tokens[1], body: formula };    
        }        
    };

measurelanguage.RuleBuilder = RuleBuilder;

function RuleBuilder() {
    this.$primaryFormula = null;
    this.$inverseFormulas = [];
}

RuleBuilder.newBuilder = function() {
    return new RuleBuilder();
};

RuleBuilder.prototype.setPrimaryFormula = function(formula) {
    this.$primaryFormula = measurelanguage.parseFormula(formula);
    return this;
};

RuleBuilder.prototype.setInverseFormulas = function(formulas) {
    formulas = formulas || [];
    this.$inverseFormulas = formulas.map(function(f) {
        return measurelanguage.parseFormula(f);
    });
    return this;
};

RuleBuilder.prototype.getRuleId = function() {
    return this.$primaryFormula.name;
};

RuleBuilder.prototype.build = function() {
    var primaryFormula = this.$primaryFormula,
        inverseFormulas = this.$inverseFormulas,
        formulas = [primaryFormula].concat(inverseFormulas).map(function(formula) {
            return measurelanguage.formula(formula.name, formula.body);
        });
    return measurelanguage.rule(primaryFormula.name, formulas);
};

},{"lodash":90}],236:[function(require,module,exports){
var Immutable = require("immutable");
var assert = require("assert");
var lodash = require("lodash");
var cubiql = require("./cubiql");

var PRIMITIVE_DIMENSIONS = ["Boolean", "Int", "Float", "String", "Decimal"];

var PRIMITIVE_OPS = ["NEGATE", "SQRT", "LOG", "TO_UPPER", "TO_LOWER", "ADD", "MAX", "SUBTRACT", "MULTIPLY", "DIVIDE", "FLOOR", "CEIL", "POW", "MOD", "ABS"];

var PRIMITIVE_AGGREGATIONS = ["COLLECT", "AMBIG", "TOTAL", "MIN", "MAX", "COUNT", "MODE", "COUNT_DISTINCT", "HISTOGRAM", "SORT", "AVERAGE", "KEY_SORT"];

var EmptyModel = {
    "aggregation": Immutable.List,
    "operator": Immutable.List,
    "metric": Immutable.List,
    "type": Immutable.List,
    "dimension": Immutable.List
};

function MeasureModel(immutableModel) {

    //initialize model with default values
    immutableModel = immutableModel.withMutations(function(map){
        lodash.forEach(EmptyModel, function(value, key){
            if (!map.has(key)){
                map.set(key, value());
            }
        });
    });

    var metrics = immutableModel.get("metric"),
        dimensions = immutableModel.get("dimension");

    this.$model = immutableModel;

    // create a Map from metric name to the object, use withMutations for performance
    this.$metrics = Immutable.Map().withMutations(function(map) {
        metrics.forEach(function(metric) {
            map.set(metric.get("name"), metric);
        });
    });

    // create a Map from dimension name to the object, use withMutations for performance
    this.$dimensions = Immutable.Map().withMutations(function(map) {
        dimensions.forEach(function(dimension) {
            map.set(dimension.get("name"), dimension);
        });
    });
}

MeasureModel.prototype.isPrimitiveDimension = function(dimensionName) {
    return PRIMITIVE_DIMENSIONS.indexOf(dimensionName) > -1;
};

MeasureModel.prototype.hasMeasureInfo = function(measureName) {
    return this.$metrics.has(measureName);
};

MeasureModel.prototype.hasDimension = function(dimensionName) {
    return this.$dimensions.has(dimensionName);
};

MeasureModel.prototype.getMeasureInfo = function(measureName) {
    var metric = this.$metrics.get(measureName);
    
    return metric && new Metric(metric);
};

MeasureModel.prototype.getBackingType = function(typeName) {
    var type = this.$model.get("type").find(function(v) { return v.get("type") === typeName; });

    return type && type.get("backing_type").get("kind");
};

MeasureModel.prototype.getAttributeType = function(attributeName, dimensionName, levelName) {
    var dimension = this.$dimensions.get(dimensionName),
        level = dimension && dimension.get("level").find(function(l) { return l.get("name") === levelName; }),
        attribute = level && level.get("attribute").find(function(a) { return a.get("name") === attributeName; }),
        type = attribute && attribute.get("type").get("kind");
        
    return type;
};

/**
 * Returns a set of levels that are parents of the given level. If also given
 * a hierarchyName, it will only search within that hierarchy.
 * @param  {String} dimensionName
 * @param  {String} levelName
 * @param  {String} [hierarchyName]
 * @return {Immutable.Set<QualifiedName>}
 */
MeasureModel.prototype.getParents = function(dimensionName, levelName, hierarchyName) {
    var dimension = this.$dimensions.get(dimensionName),
        hierarchies = dimension && hierarchyName ? dimension.get("hierarchy").filter(function(h) { return h.get("name") === hierarchyName; }) : dimension.get("hierarchy"),
        parents = Immutable.Set();

    hierarchies.forEach(function(h) {
        var lvls = h.get("path").skipUntil(function(p) { return p.get("level") === levelName; });

        // strip off the first b/c that's the specified level
        parents = parents.concat(lvls.shift());
    });

    // convert to qualifiedNames
    return parents.map(function(lvl) { return cubiql.qualifiedName(dimensionName, lvl.get("level")); });
};

/**
 * Return true if ql1 is strictly below ql2 in some hierarchy
 * @param {QualifiedLevel} ql1
 * @param {QualifiedLevel} ql2
 * @return {boolean}
 */
MeasureModel.prototype.qLevelBelow = function (ql1, ql2) {
    assert(ql1 instanceof Object && ql1.hasOwnProperty("dimension") && ql1.hasOwnProperty("level"));
    assert(ql2 instanceof Object && ql2.hasOwnProperty("dimension") && ql2.hasOwnProperty("level"));
    
    if (ql1.dimension !== ql2.dimension)
        return false;

    var parents1 = this.getParents(ql1.dimension, ql1.level),
        qName2 = cubiql.qualifiedName(ql2.dimension, ql2.level);

    return parents1.has(qName2) || (ql1.level !== "ALL" && ql2.level === "ALL");
};

/**
 * Sort levels by how they appear in a hierarchy in the dimension. If all the
 * given levels are not in the same hierarchy, then they cannot be sorted and
 * we return an empty array.
 * 
 * @param {String} dimensionName
 * @param {QualifiedLevel[]} qLevels
 * @return {QualifiedLevel[]}
 */
MeasureModel.prototype.sortLevels = function(dimensionName, qLevels) {
     if (!Array.isArray(qLevels) || qLevels.length === 0) 
        return [];
    
    var levelNames = qLevels.map(function(ql) { return ql.level; }).filter(function(name) { return name !== "ALL" }),
        hierarchies = this.$getHierarchiesForDimension(dimensionName),
        hierarchiesWithLevels = this.$getHierarchiesWithLevels(hierarchies, levelNames),
        path;
    
    // no hierarchy has all the given levels, so none is technically the lowest
    if (!hierarchiesWithLevels || hierarchiesWithLevels.size === 0)
        return [];
        
    // any path that has all levels must have them in the same relative order
    path = hierarchiesWithLevels.get(0).get("path");

    // sort the qualified levels by the order they appear in the hierarchy path
    return qLevels.slice().sort(function(a, b) {
        var aIdx = path.findIndex(function(p) { return p.get("level") === a.level; }),
            bIdx = path.findIndex(function(p) { return p.get("level") === b.level; });
        
        return aIdx > bIdx ? 1 : -1;
    });
};

/**
 * Compute qualified level of lowest level, if any.
 * 
 * @param {String} dimensionName
 * @param {QualifiedLevel[]} qLevels
 * @return {(QualifiedLevel|undefined)}
 */
MeasureModel.prototype.findLowestLevel = function(dimensionName, qLevels) {
    var sortedLevels = this.sortLevels(dimensionName, qLevels);
    
    return sortedLevels.length > 0 ? sortedLevels[0] : undefined;
};

/**
 * Compute qualified level of lowest level, if any.
 * 
 * @param {String} dimensionName
 * @param {QualifiedLevel[]} qLevels
 * @return {(QualifiedLevel|undefined)}
 */
MeasureModel.prototype.findHighestLevel = function(dimensionName, qLevels) {
    var sortedLevels = this.sortLevels(dimensionName, qLevels);
    
    return sortedLevels.length > 0 ? sortedLevels[sortedLevels.length - 1] : undefined;
};

MeasureModel.prototype.listLevelsInHierarchy = function(qName) {
    var qLevel = cubiql.parseDimLvl(qName),
        hierarchies = this.$getHierarchiesForDimension(qLevel.dimension),
        hierarchiesWithLevels = this.$getHierarchiesWithLevels(hierarchies, [ qLevel.level ]);

    return hierarchiesWithLevels.map(function(h) {
        return Immutable.Map({
            name: h.get("name"),
            levels: h.get("path").map(function(p) { return cubiql.qualifiedName(qLevel.dimension, p.get("level")); })
        });
    }).toJS();
};

MeasureModel.prototype.getDefaultHierarchyName = function(dimensionName, levelName) {
    var dimension = this.$dimensions.get(dimensionName),
        defaultName = dimension.get("default_hierarchy");

    if (levelName)
        if (levelName === "ALL") 
            return defaultName;
        else
            return this.findHierarchiesWithLevels(dimensionName, [levelName])[0].name; 
    else
        return defaultName;
};

MeasureModel.prototype.$getHierarchiesForDimension = function(dimensionName) {
    var dimension = this.$dimensions.get(dimensionName),
        hierarchies = dimension && dimension.get("hierarchy") || hierarchies.List(),
        defaultName = dimension.get("default_hierarchy");

    //sort hierarchies so the default is first and then its lexicographical
    return hierarchies.sortBy(function(h) { var hName = h.get("name"); if (hName === defaultName) { return ""; } else { return hName; } });
};

MeasureModel.prototype.$getHierarchiesWithLevels = function(hierarchies, levelNames) {
    return hierarchies.filter(function(h) {
        var levelsInHierarchy = h.get("path").map(function(p) { return p.get("level"); });
        return levelsInHierarchy.isSuperset(levelNames);
    });
};

MeasureModel.prototype.findHierarchiesWithLevels = function(dimensionName, levelNames) {
    var hierarchies = this.$getHierarchiesForDimension(dimensionName),
        hierarchiesWithLevels = this.$getHierarchiesWithLevels(hierarchies, levelNames);
    
    return hierarchiesWithLevels.toJS();
};

var firstLastRegExp = new RegExp("_\(first\|last\)$");

/**
 * Returns the first hierarchy of 'dimensionName' that contains all the
 * 'levelNames'. If the input level names are empty, default hierarchy
 * is returned.
 *
 * If a hierarchy 'H' has an additional 'first' (or 'last') level
 * mapping, then there will be an additional hierarchy 'H_first' (or
 * 'H_last').  When searching for a hierarchy that contains all levels,
 * we favor H over H_first/H_last by picking the first matching
 * hierarchy.  We rely on dimension.hierarchy having the form
 * [DefaultHierarchy, ...OtherHierarchies...] where OtherHierarchies are
 * ordered lexicographically by name (i.e., H will appear before H_first
 * and H_last).
 *
 * @param {String} dimensionName
 * @param {String[]} levelNames
 * @return {(MeasureProtocol.Hierarchy|undefined)}
 */
MeasureModel.prototype.getHierarchyWith = function(dimensionName, levelNames) {
    var hierarchies = this.$getHierarchiesForDimension(dimensionName),
        hierarchiesWithLevels = this.$getHierarchiesWithLevels(hierarchies, levelNames).filter(function(hierarchy) {
            return !firstLastRegExp.test(hierarchy.get("name"));
        });
    
    return hierarchiesWithLevels.size > 0 && hierarchiesWithLevels.first().toJS();
};

MeasureModel.prototype.getLevelNameByPredicate = function(predicate) {
    // create a type to search for
    var type = Immutable.Map({ kind: "NAMED", named: predicate });
        
    return this.$model.get("dimension")
        .reduce(function(prev, d) { 
            if (prev)
                return prev;

            var lvl = d.get("level").find(function(lvl) {
                return Immutable.is(lvl.get("type"), type);
            });
            
            if (lvl)
                return cubiql.qualifiedName(d.get("name"), lvl.get("name"));
        }, false);
};

MeasureModel.prototype.getDimension = function(dimensionName) {
    var dimension = this.$dimensions.get(dimensionName);
    return dimension && dimension.toJS();
};

MeasureModel.prototype.getNonPrimitiveDimensions = function() {
    return this.$model.get("dimension").filterNot(function(d) { return this.isPrimitiveDimension(d.get("name")); }, this).toJS();
};

MeasureModel.prototype.getLevel = function(dimensionName, levelName) {
    var level = this.$dimensions.get(dimensionName)
        .get("level")
        .find(function(l) { return l.get("name") === levelName; });
        
    return level && level.toJS();
};

MeasureModel.prototype.getLevelAttr = function(level, attrName) {
    return level.attribute.find(function(attr) {
        return attr.name === attrName;
    });
};

MeasureModel.prototype.getLevelAttributePredicateName = function(level, attrName) {
    return this.getLevelAttr(level, attrName).predicate.name;
};

/**
 * Sorts hierarchies alphabetically by name with the default always first. 
 * Mutates the given list of hierarchies and also returns it.
 * 
 * @param  {Hierarchy[]} hierarchies
 * @param  {String} defaultHierarchy the name of the default heirarchy
 * @return {Hierarchy[]}
 */
MeasureModel.prototype.sortHierarchies = function(hierarchies, defaultHierarchy) {
    hierarchies.sort(function(h1, h2) {
        if (h1.name === defaultHierarchy) return -1;
        else if (h2.name === defaultHierarchy) return 1;
        else return h1.name.localeCompare(h2.name);
    });
    return hierarchies;
};

MeasureModel.prototype.isRecalc = function(metricName) {
    return this.$metrics.get(metricName).has("recalc");
};

MeasureModel.prototype.isPctParentMetric = function(metricName) {
    var levels = this.$getMetricIntersection(metricName).get("qualified_level");
    
    if (!this.isRecalc(metricName))
        return false;
    
    // group the levels by dimension
    return levels.groupBy(function(lvl) { return lvl.get("dimension"); })
        // return true if the intersection has two levels in the same dimension
        .some(function(lvls) { return lvls.size === 2; });
};

MeasureModel.prototype.getPctParentConfig = function(metricName) {
    var levels = this.$getMetricIntersection(metricName).get("qualified_level"),
        levelsPerDimension = levels && levels.groupBy(function(lvl) { return lvl.get("dimension"); }),
        splitDimension = levelsPerDimension && levelsPerDimension.find(function(lvls) { return lvls.size === 2; });
    
    if (!splitDimension || !this.isRecalc(metricName))
        return;

    return {
        dimension: splitDimension.get(0).get("dimension"),
        childLabel: splitDimension.get(0).get("label"),
        parentLabel: splitDimension.get(1).get("label")
    };
};

MeasureModel.prototype.$getMetricIntersection = function(metricName) {
    return this.$metrics.get(metricName).get("signature").get("base_signature").get("intersection");
};

/**
 * Returns the (immutable) operator with the given name.
 * 
 * @param  {String} name the name of the operator
 * @param {Type[]} domain the domain of the operator
 * @return {OpDef} the operator
 */
MeasureModel.prototype.getOperator = function(name, domain) {
    return this.$model.get("operator").find(function(op) {
        return op.get("name") === name &&
            (!domain || Immutable.is(Immutable.fromJS(domain), op.get("domain")));
    });
};

MeasureModel.prototype.getMetrics = function() {
    return this.$metrics.toList();
};

/**
 * Returns the aggregation with the given name.
 * @param  {String} name the name of the aggregation
 * @return {Immutable.Map} the aggregation definition
 */
MeasureModel.prototype.getAggregation = function(name) {
    return this.$model.get("aggregation").find(function(agg) {
        return agg.get("name") === name;
    });
};

/**
 * Returns the spread with the given name.
 * @param  {String} name the name of the spread
 * @return {Immutable.Map} the spread definition
 */
MeasureModel.prototype.getSpreadDefinition = function(name) {
    return this.$model.get("spread").find(function(spreadDef) {
        return spreadDef.get("name") === name;
    });
};

MeasureModel.prototype.getPrimitiveAggMethods = function() {
    return PRIMITIVE_AGGREGATIONS;
};

/**
 * Returns the lowest level(s) in the given dimension name.
 * @param  {String} dimensionName the name of the dimension
 * @return {String[]} qualified name(s) of the lowest level(s)
 */
MeasureModel.prototype.getLowestLevelsInDimension = function(dimensionName) {
    var hierarchies = this.$dimensions.get(dimensionName).get("hierarchy"),
        levels = [];

    hierarchies.forEach(function(h) {
        var baseLevel = h.getIn(["path", 0]);
        levels.push(cubiql.qualifiedName(dimensionName, baseLevel.get("level")))
    });

    return levels;
};

/**
 * A wrapper around the MeasureProtocol's metric structure. The intent is to abstract
 * away the specific format of the measure service's protocol since it is subject to
 * change.
 * 
 * @param {MeasureProtocol.Metric} immutableMetric an ImmutableJS version of a metric
 * @constructor
 */
function Metric(immutableMetric) {
    this.$metric = immutableMetric;
}

Object.defineProperties(Metric.prototype, {
    "name": { get: function() { return this.$metric.get("name"); } },
    "inter": { 
        get: function() {
            var intersection = this.$metric.getIn(["signature", "base_signature", "intersection"]);
            return intersection.size > 0 ? intersection.toJS() : { qualified_level: [] };
        } 
    },
    "caption": { get: function() { return this.$metric.has("caption") ? this.$metric.get("caption") : undefined; } },
    "predicate": { get: function() { return this.$metric.has("predicate") ? this.$metric.get("predicate") : undefined; } },
    "recalc": { get: function() { return this.$metric.has("recalc") ? this.$metric.get("recalc").toJS() : undefined; } },
    "type": { get: function() { return this.$metric.getIn(["signature", "base_signature", "type", "type"]).toJS(); } },
    "agg_method": { get: function() { return this.$metric.has("agg_method") ? this.$metric.get("agg_method").toJS() : undefined; } },
    "update_method": { get: function() { return this.$metric.has("update_method") ? this.$metric.get("update_method").toJS() : undefined; } }
});

module.exports = MeasureModel;

},{"./cubiql":211,"assert":undefined,"immutable":44,"lodash":90}],237:[function(require,module,exports){
"use strict";

var connectblox;
var util = require("./util");

var MeasureServiceMetaModel = function(_connectblox) {
    connectblox = _connectblox;
};

(function() {

    this.addLevel = addLevel;
    this.renameMetric = renameMetric;

    // TODO: remove all dimensions from here and pass in the intersection headers (lowest level)
    this.addMetric = function(metricName, intersectionHeaders, alldimensions) {
        return addMetric(metricName, intersectionHeaders, alldimensions);
    }

    /**
     * @param levelName the existing level name to which we will add a parent to
     * @param dimensionName the new dimension name for this level
     * @param hierarchyName the new hierarchy name
     * @param newLevelName the name for the new parent level
     * @param axis axis to which we will add the new level to
     * @param callback(err) callback as result of level adding
     */
    this.addParentLevel = addParentLevel;

}).call(MeasureServiceMetaModel.prototype);


/**
 * Parses error messages. Assumes that the message is within '###', like
 * ###ABORT###<error-code>###<error-message>###ENDABORT###
 */
function parseErrorMessage(m) {
    var startString = "###ABORT###";
    var endString = "###ENDABORT###";
    var errorStr = m.substring(m.indexOf(startString) + startString.length, m.indexOf(endString));
    var error_array = errorStr.split("###");
    var errorObj;
    if (error_array.length == 2) {
        errorObj = {
            error_code: error_array[0],
            error_message: error_array[1]
        };
    }
    else {
        errorObj = {
            error_message: m
        };
    }
    return errorObj;
}

/**
 * @typedef {Object<String,String>} TemplateValues
 *
 * @param {String} str string to expand
 * @param {TemplateValues} templateVals the object containing the values to expand in the string
 * @return {String}
 */
function expandTemplate(str, templateVals) {
    Object.keys(templateVals).forEach(function(key) {
        var expanded = templateVals[key];
        str = str.replace(new RegExp(util.escapeRegExp(key),"g"), expanded);
    });

    return str;
}

function addLevel(levelName) {
    var templateVals = {
            '$levelName': levelName,
            '$refModePredName': levelName + "_id",
            '$labelPredName': levelName + "_label"
        },
        expand = function(logic) {
            return expandTemplate(logic, templateVals);
        },
        checkLogic = expand(
            '+lb:web:config:abort:error_response(500, "Dimension $levelName already exists.")' +
            '   <-' +
            '    lb:web:measure:Dimension_name@prev[dim] = name,\n' +
            '    name = "$levelName".'),
        addBlockLogic = expand(
            '$levelName(f), $refModePredName(f:id) -> string(id).\n' +
            '$labelPredName[f] = label -> $levelName(f), string(label).\n' +
            'lang:entity(`$levelName).'),
        addLevelLogic = expand(
            '+lb:web:measure:Dimension(dim),' +
            '+pivot:measure:metamodel:Dim_cons[mm, name] = dim,' +
            '\n' +
            '+lb:web:measure:Dimension:Hierarchy(hier),' +
            '+pivot:measure:metamodel:Hier_cons[dim, hier_name] = hier,' +
            '+lb:web:measure:Dimension_default_hierarchy[dim] = hier_name,' +
            '\n' +
            '+lb:web:measure:Dimension:Level(level),' +
            '+pivot:measure:metamodel:Level_cons[dim, name] = level,' +
            '+lb:web:measure:Dimension:Level_type[level] = new_level_type,' +
            '+pivot:measure:metamodel:Type_cons[name] = new_level_type,\n' +
            '+lb:web:measure:Type(new_level_type),\n' +
            '+lb:web:measure:Type_kind[new_level_type] = lb:web:measure:Type:Kind_enum["NAMED"],\n' +
            '+lb:web:measure:Type_named[new_level_type] = name,\n' +
            '\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path(path),' +
            '+pivot:measure:metamodel:Path_cons[hier, name] = path,' +
            '+lb:web:measure:Dimension:Hierarchy_path[hier, 0] = path,\n' +
            '\n' +
            '+pivot:measure:metamodel:Attr_cons[level, "id"] = id_attr,' +
            '+lb:web:measure:Attribute(id_attr),' +
            '+lb:web:measure:Attribute_name(id_attr, "id"),' +
            '+lb:web:measure:Attribute_type[id_attr] = string_type,' +
            '+lb:web:measure:Attribute_predicate(id_attr, refPred),' +
            '\n' +
            '+pivot:measure:metamodel:Predicate_cons["$refModePredName"] = refPred,' +
            '+lb:web:measure:Predicate(refPred),' +
            '+lb:web:measure:Predicate_name(refPred, "$refModePredName"),' +
            '\n' +
            '+pivot:measure:metamodel:Attr_cons[level, "label"] = label_attr,' +
            '+lb:web:measure:Attribute(label_attr),' +
            '+lb:web:measure:Attribute_type[label_attr] = string_type,' +
            '+lb:web:measure:Attribute_predicate(label_attr, labelPred),' +
            '\n' +
            '+pivot:measure:metamodel:Predicate_cons["$labelPredName"] = labelPred,' +
            '+lb:web:measure:Predicate(labelPred),' +
            '+lb:web:measure:Predicate_name(labelPred, "$labelPredName"),' +
            '\n' +
            '+lb:web:measure:Type(string_type),' +
            '+lb:web:measure:Type_kind[string_type] = kind,' +
            '+modeler_config:metamodel:config:type_fromtypename["STRING"] = string_type ' +
            '\n' +
            '    <-' +
            '    lb:web:measure:MeasureModel(mm),' +
            '    hier_name = "Default",' +
            '    kind = lb:web:measure:Type:Kind_enum["STRING"],' +
            '    name = "$levelName".\n');


    return connectblox.execBlock(checkLogic)
        .catch(function(err) {
            throw {message: parseErrorMessage(err.message).error_message, error: err.message};
        })
        .then(function() {
            return connectblox.addBlock(addBlockLogic);
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            throw {message: "Error adding level predicate", error: err};
        })
        .then(function() {
            return connectblox.execBlock(addLevelLogic);
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            var message = JSON.parse(err.responseText).error;
            throw new Error({ message: parseErrorMessage(message).error_message, error: message });
        });
}

function uuid() {
    return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });
}

function addParentLevel(levelName, dimensionName, hierarchyName, newLevelName, newDimensionName) {
    var mappingPredicate = levelName + "2" + newLevelName,
        newMemberValue = newLevelName.toLowerCase() + "-1",
        newMemberId = uuid(),
        templateVals = {
            '$levelName': levelName,
            '$dimensionName': dimensionName,
            '$hierarchyName': hierarchyName,
            '$newLevelName': newLevelName,
            '$newDimensionName': newDimensionName,
            '$newLevelRefPredName': newLevelName + "_id",
            '$newLevelLabelPredName': newLevelName + "_label",
            '$mappingPredicate': mappingPredicate,
            '$newMemberId': newMemberId,
            '$newMemberValue': newMemberValue
        },
        expand = function(logic) {
            return expandTemplate(logic, templateVals);
        },
        checkLogic = expand(
            // check new dimension name doesn't exist
            '+lb:web:config:abort:error_response(500, "A dimension named $dimensionName already exists.")' +
            '   <-' +
            '    old_dimension_name = "$dimensionName",\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    lb:web:measure:Dimension@prev(dim),' +
            '    old_dimension_name != dimension_name,' +
            '   lb:web:measure:Dimension_name@prev[dim] = dimension_name.' +

            // check level name does not exist
            '+lb:web:config:abort:error_response(500, "A level named $newLevelName already exists in dimension $newDimensionName.")' +
            '   <-' +
            '    dimension_name = "$newDimensionName",\n' +
            '    name = "$newLevelName",' +
            '    lb:web:measure:Dimension_name[dim] = dimension_name,\n' +
            '    lb:web:measure:Dimension_level@prev(dim, level),\n' +
            '   lb:web:measure:Dimension:Level_name@prev[level] = name.' +
            '\n' +

            // fail if we are trying to create parent level for a level already with a perent in a hierarchy
            // i.e., the base level needs to be at the top of the hierarchy
            '+lb:web:config:abort:error_response(500, "Base level $levelName is not at top of hierarchy"\n)' +
            '    <-\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    hierarchy_name = "$hierarchyName",\n' +
            '    level_name = "$levelName",\n' +
            '    lb:web:measure:Dimension_name[dim] = dimension_name,\n' +
            '    pivot:measure:metamodel:Hier_cons@prev[dim, hierarchy_name] = hier,\n' +
            '    lb:web:measure:Dimension:Hierarchy_path@prev[hier, i] = path,\n' +
            '    lb:web:measure:Dimension:Hierarchy:Path_level@prev[path] = level_name,\n' +
            '    i < _max_level_index[hier].\n' +

            '_max_level_index[hier] = max_i\n' +
            '    <-' +
            '    agg<<max_i = max(i)>>\n' +
            '    lb:web:measure:Dimension:Hierarchy_path@prev[hier, i] = _.\n'),
        addBlockLogic = expand(
            '$newLevelName(f), $newLevelRefPredName(f:id) -> string(id).\n' +
            '$newLevelLabelPredName[f] = label -> $newLevelName(f), string(label).\n' +
            '$mappingPredicate[l1] = l2 -> $levelName(l1), $newLevelName(l2).' +
            "lang:entity(`$newLevelName)."),
        createParentLevelLogic = expand(
            // rename dimension
            '^lb:web:measure:Dimension_name[dim] = dimension_name\n' +
            '    <-\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    old_dimension_name = "$dimensionName",\n' +
            '    lb:web:measure:Dimension_name@prev[dim] = old_dimension_name.\n' +

            // create new parent level
            '+pivot:measure:metamodel:Level_cons[dim, new_level_name] = level,\n' +
            '+lb:web:measure:Dimension:Level(level),\n' +
            '+lb:web:measure:Dimension:Level_type[level] = new_level_type,\n' +
            '+pivot:measure:metamodel:Type_cons[new_level_name] = new_level_type,\n' +
            '+lb:web:measure:Type(new_level_type),\n' +
            '+lb:web:measure:Type_kind[new_level_type] = lb:web:measure:Type:Kind_enum["NAMED"],\n' +
            '+lb:web:measure:Type_named[new_level_type] = new_level_name,\n' +
            '\n' +
            '+lb:web:measure:Attribute(id_attr),\n' +
            '+pivot:measure:metamodel:Attr_cons[level, "id"] = id_attr,\n' +
            '+lb:web:measure:Attribute_predicate(id_attr, id_pred),\n' +
            '+pivot:measure:metamodel:Predicate_cons["$newLevelRefPredName"] = id_pred,\n' +
            '+lb:web:measure:Predicate(id_pred),\n' +
            '+lb:web:measure:Predicate_name(id_pred, "$newLevelRefPredName"),\n' +
            '+lb:web:measure:Attribute_type[id_attr] = string_type,\n' +
            '\n' +
            '+lb:web:measure:Attribute(label_attr),\n' +
            '+pivot:measure:metamodel:Attr_cons[level, "label"] = label_attr,\n' +
            '+lb:web:measure:Attribute_predicate(label_attr, label_pred),\n' +
            '+pivot:measure:metamodel:Predicate_cons["$newLevelLabelPredName"] = label_pred,\n' +
            '+lb:web:measure:Predicate(label_pred),\n' +
            '+lb:web:measure:Predicate_name(label_pred, "$newLevelLabelPredName"),\n' +
            '+lb:web:measure:Attribute_type[label_attr] = string_type,\n' +
            '+lb:web:measure:Type(string_type),' +
            '+lb:web:measure:Type_kind[string_type] = string_kind,' +
            '+modeler_config:metamodel:config:type_fromtypename["STRING"] = string_type ' +
            '    <-\n' +
            '    lb:web:measure:Type:Kind_enum["STRING"] = string_kind,\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    new_level_name = "$newLevelName",\n' +
            '    lb:web:measure:Dimension_name[dim] = dimension_name.\n' +

            // create new hierarchy, if necessary
            '+pivot:measure:metamodel:Hier_cons[dim, hierarchy_name] = hier,\n' +
            '+lb:web:measure:Dimension:Hierarchy(hier),\n' +
            '\n' +
            '+pivot:measure:metamodel:Path_cons[hier, new_level_name] = path,\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path(path),\n' +
            '+lb:web:measure:Dimension:Hierarchy_path[hier, 1] = path,\n' +
            '\n' +
            '+pivot:measure:metamodel:Path_cons[hier, base_level_name] = moved_path,\n' +
            '+lb:web:measure:Dimension:Hierarchy_path[hier, 0] = moved_path,\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path(moved_path),\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path_pred[moved_path] = mapping_predicate,\n' +
            '+pivot:measure:metamodel:Predicate_cons[mapping_predicate_name] = mapping_predicate,\n' +
            '+lb:web:measure:Predicate(mapping_predicate),\n' +
            '+lb:web:measure:Predicate_name(mapping_predicate, mapping_predicate_name)\n' +
            '    <-\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    new_level_name = "$newLevelName",\n' +
            '    hierarchy_name = "$hierarchyName",\n' +
            '    base_level_name = "$levelName",\n' +
            '    mapping_predicate_name = "$mappingPredicate",\n' +
            '    !(pivot:measure:metamodel:Hier_cons@prev[dim, hierarchy_name] = _),\n' +
            '    pivot:measure:metamodel:Level_cons@prev[dim, base_level_name] = _,\n' +
            '    lb:web:measure:Dimension_name[dim] = dimension_name.\n' +

            // update existing hierarchy
            '\n' +
            '+pivot:measure:metamodel:Path_cons[hier, new_level_name] = path,\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path(path),\n' +
            '+lb:web:measure:Dimension:Hierarchy_path[hier, i + 1] = path,\n' +
            '+lb:web:measure:Dimension:Hierarchy:Path_pred[base_path] = mapping_predicate,\n' +
            '+pivot:measure:metamodel:Predicate_cons[mapping_predicate_name] = mapping_predicate,\n' +
            '+lb:web:measure:Predicate(mapping_predicate),\n' +
            '+lb:web:measure:Predicate_name(mapping_predicate, mapping_predicate_name)\n' +
            '    <-\n' +
            '    dimension_name = "$newDimensionName",\n' +
            '    new_level_name = "$newLevelName",\n' +
            '    hierarchy_name = "$hierarchyName",\n' +
            '    mapping_predicate_name = "$mappingPredicate",\n' +
            '    lb:web:measure:Dimension_name[dim] = dimension_name,\n' +
            '    pivot:measure:metamodel:Hier_cons@prev[dim, hierarchy_name] = hier,\n' +
            '    lb:web:measure:Dimension:Hierarchy_path@prev[hier, i] = base_path,\n' +
            '    _max_level_index[hier] = i.\n' +

            '_max_level_index[hier] = max_i\n' +
            '    <-' +
            '    agg<<max_i = max(i)>>\n' +
            '    lb:web:measure:Dimension:Hierarchy_path@prev[hier, i] = _.\n' +

            // map all existing children level-members to new level
            '+$mappingPredicate(l1, l2)\n' +
            '    <-\n' +
            '  $newLevelRefPredName[l2] = "$newMemberId",\n' +
            '  $levelName@prev(l1).\n' +
            '+$newLevelName(l), +$newLevelRefPredName[l] = "$newMemberId", +$newLevelLabelPredName[l] = "$newMemberValue".\n');

    return connectblox.execBlock(checkLogic)
        .catch(function(err) {
            var message = JSON.parse(err.responseText).error;
            throw new Error(parseErrorMessage(message).error_message);
        })
        .then(function() {
            return connectblox.addBlock(addBlockLogic);
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            throw new Error("Could not create level predicate");
        })
        .then(function() {
            return connectblox.execBlock(createParentLevelLogic);
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            var message = JSON.parse(err.responseText).error;
            throw new Error(parseErrorMessage(message).error_message);
        });
}

/**
 * Renames a metric
 * @param  {string} metricName          
 * @param  {string} newName         
 */
function renameMetric(metricName, newName) {

    var execblock_query =
    "^lb:web:measure:Metric_caption[metric] = caption," +
    "^lb:web:measure:Metric_name[metric] = caption" +
    "    <-" +
    "    lb:web:measure:Metric(metric),"+
    "    lb:web:measure:Metric_name@prev[metric] = name," +
    "    name = \""+metricName+"\",\n" +
    "    caption = \""+newName+"\".\n" ;

    return connectblox.execBlock(execblock_query)
        .catch(function(err) {
            if (err.message)
                throw err;
            var message = JSON.parse(err.responseText).error;
            throw {message: parseErrorMessage(message).error_message, error: message};
        })
        .then(function() {
            return connectblox.restartMeasure();  
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            throw {message: "Error restarting measure service", error: err};
        });
}

/**
 * Creates a new Metric
 * @param {string} metricName    the name of the new metric
 * @param {Array[header]}        an array of headers for the intersection for the new metric.
 *                                  this function will calculate the base levels for the headers
 *                                  and create a metric only with the base levels for each dimension
 * @param {Array[Object]} alldimensions 
 * @param callback(err) callback as result of metric adding
 */
function addMetric(metricName, intersectionHeaders, alldimensions) {
    // FIXME: do not use uuid, but rather a has of the list of qualified levels in the intersection
    var intersection = "+lb:web:measure:Intersection(intersection), +pivot:measure:metamodel:Intersection_cons[\""+ uuid() +"\"] = intersection,";
    var predicate_body = "decimal(f)";

    var groupLevelsByDimension = function(headers) {
        var result = {};
        headers.forEach(function(header) {
            if (typeof result[header.dimension] === "undefined") {
                result[header.dimension] = [];
            }
            result[header.dimension].push(header.name);
        })
        return result;
    }
    
    var findLowestLevelInHierarchy = function(hierarchies, levelNames) {
        // first we find the hierarchy that contains all levels;
        // if one doesn't exist, then we throw an error;
        var containsAll = function(hierarchy) {
            return levelNames.every(function(levelName1) {
                return hierarchy.path.find(function(levelObj2) {
                    return levelName1 === levelObj2.level;
                });
            });
        };
        
        var candidateHierarchies = hierarchies.filter(containsAll);
        if (candidateHierarchies.length === 0)
            throw new Error("All levels must be in same hierarchy.");
        
        // just take the first hierarchy and find the lowest level
        var hierarchy = candidateHierarchies[0];
        var sortedLevels = hierarchy.path.map(function(p) { return p.level; });
        var lowestLevelIndex = 1000000000;
        levelNames.forEach(function(levelName) {
            var levelIndex = sortedLevels.indexOf(levelName);
            if (levelIndex > -1 && levelIndex < lowestLevelIndex)
                lowestLevelIndex = levelIndex;
        })
        return hierarchy.path[lowestLevelIndex].level;
    }
    
    var headers_intersection = [];
    var levelsByDimension = groupLevelsByDimension(intersectionHeaders);
    Object.keys(levelsByDimension).forEach(function(dim) {
        var dimension = alldimensions.find(function(d) { return d.name === dim; });
        if (dimension){
            var hierarchies = dimension.hierarchy;
            var levelNames = levelsByDimension[dim];
            var lowestLevelName = findLowestLevelInHierarchy(hierarchies, levelNames);
            var lowestLevel = dimension.level.find(function(l) { return l.name === lowestLevelName; });
            headers_intersection.push({
                dimension: dim,
                name: lowestLevel.name,
                impl: lowestLevel.type.named
            });
        }
    });

    var body = "";
    var predicate_keys = [];
    for(var index = 0; index < headers_intersection.length; index++)
    {
        var header = headers_intersection[index];
        predicate_keys.push("p"+index);
        predicate_body += ","+header.impl+"(p"+index+")";

        intersection +=
            "+pivot:measure:metamodel:QualifiedLevel_cons[dim" + index +", level" + index + "] = qualifiedlevel_" + index + "," +
            "+lb:web:measure:QualifiedLevel(qualifiedlevel_"+index+"),"+
            "+lb:web:measure:Intersection_qualified_level[intersection,"+index+"] = qualifiedlevel_"+index+",";

        body +=
            "lb:web:measure:Dimension_name[dim" + index +"] = \""+header.dimension+"\"," +
            "lb:web:measure:Dimension:Level_name[level" + index +"] = \""+header.name+"\",";
    }
    predicate_keys = "[" + predicate_keys.join(", ") + "]";
    predicate_body +=".\n";

    var predicate_name = "Custom_Metric" + uuid().replace(/-/g,"_");
    var Metric_name = metricName;
    var addblock_query = predicate_name+predicate_keys+"= f -> "+predicate_body;
    // var rule = "+predicate_"+metricName+predicate_keys+"= f <- f=0f,"+predicate_body;

    var execblock_query="lb:web:measure:Metric@prev(metric)," +
    "name = \""+Metric_name+"\"" +
    "   ->" +
    "   lb:web:measure:Metric_name@prev[metric] != name." +
    "" +
    intersection +
    "" +
    "+lb:web:measure:Predicate(predicate),"+
    "+pivot:measure:metamodel:Predicate_cons[predicate_name] = predicate,"+
    "" +
    "+lb:web:measure:Metric(metric),"+
    "+lb:web:measure:Metric_name[metric] = caption," +
    "+pivot:measure:metamodel:Metric_cons[id, name] = metric,"+
    "+lb:web:measure:Metric_type[metric] = decimal_type,"+
    "+lb:web:measure:Metric_agg_method[metric] = agg_type,"+
    "+lb:web:measure:Metric_update_method[metric] = spread_type,"+
    "+lb:web:measure:Metric_predicate[metric] = predicate,"+
    "+lb:web:measure:Metric_inter[metric] = intersection,"+
    "+lb:web:measure:Metric_caption[metric] = caption,"+
    "\n" +
    '+lb:web:measure:Type(decimal_type),' +
    '+lb:web:measure:Type_kind[decimal_type] = decimal_kind,' +
    '+modeler_config:metamodel:config:type_fromtypename["DECIMAL"] = decimal_type ' +
    "    <-" +
         body +
    "     lb:web:measure:Type:Kind_enum[\"DECIMAL\"] = decimal_kind,\n" +
    "     lb:web:measure:AggExpr:Method_primitive[agg_type] = agg_kind,\n" +
    "     lb:web:measure:AggExpr:Method:Primitive_enum[\"TOTAL\"] = agg_kind,\n" +
    "     lb:web:measure:UpdateExpr:Transform:SpreadKind_primitive[spread_type] = spread_kind,\n" +
    "     lb:web:measure:UpdateExpr:Transform:SpreadKind:Primitive_enum[\"RATIO\"] = spread_kind,\n" +
    "    lb:web:measure:MeasureModel(id)," +
    "    name = \""+predicate_name+"\",\n" +
    "    caption = \""+Metric_name+"\",\n" +
    "    predicate_name = name.\n";
    

    return connectblox.addBlock(addblock_query)
        .catch(function(err) {
            throw new Error("Could not create metric predicate");
        })
        .then(function() {
            return connectblox.execBlock(execblock_query);
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            var message = JSON.parse(err.responseText).error;
            throw new Error(parseErrorMessage(message).error_message);
        })
        .then(function() {
            return connectblox.restartMeasure();  
        })
        .catch(function(err) {
            if (err.message)
                throw err;
            throw new Error("Error restarting measure service");
        });
}

exports.addLevel = addLevel;
exports.addMetric = addMetric;
exports.addParentLevel = addParentLevel;
exports.uuid = uuid;
exports.MeasureServiceMetaModel = MeasureServiceMetaModel;
exports.parseErrorMessage = parseErrorMessage;

},{"./util":280}],238:[function(require,module,exports){
    /* globals console */
    "use strict";

    var EventEmitter = require("./event_emitter").EventEmitter;

    var util = require("./util");
    var lodash = require("lodash");

    // dependencies
    var Dispatcher = require("./dispatcher").Dispatcher;
    var Router = require("../logicblox.core/routing").Router;
    var UrlDriver = require("./urldriver").UrlDriver;
    var ModelerWebSocket = require("./websocket").ModelerWebSocket;

    var fieldstore = require("./store/fieldstore");
    var multiaxisconfigstore = require("./store/multiaxisconfigstore");
    var MeasureLanguageStore = require("./store/measurelanguagestore");
    var measuremodelstore = require("./store/measuremodelstore");

    var multiaxisdatastore = require("./store/multiaxisdatastore");
    var pivotconfigstore = require("./store/pivotconfigstore");
    var navigationtreestore = require("./store/navigationtreestore");
    var logstore = require("./store/logstore");
    var actionstore = require("./store/actionstore");
    var modeleroptionstore = require("./store/modeleroptionstore");
    var DragAndDropStore = require("./store/draganddropstore");
    var CollaborationStore = require("./store/collaborationstore");
    var ModalWindowsStore = require("./store/modalwindowsstore");
    var NotificationsStore = require("./store/notificationsstore");
    var UserStore = require("./store/userstore");
    var ViewConfigStore = require("./store/viewconfigstore");
    var ViewStore = require("./store/viewstore");

    var MeasureServiceDAO = require("./dao/measureservicedao");
    var WorkbookDAO = require("./dao/workbookdao");

    // actions
    var MeasureLanguageActionHandler = require("./action/measurelanguageactionhandler");
    var MeasureModelActionHandler = require("./action/measuremodelactions");
    var ModelerActionHandler = require("./action/modeleractions");
    var MultiAxisConfigActionHandler = require("./action/multiaxisconfigactions");

    var MultiAxisDataActionHandler = require("./action/multiaxisdataactions");

    var PivotConfigActionHandler = require("./action/pivotconfigactions");

    var NavigationTreeActionHandler = require("./action/navigationtreeactions");
    var LogActionHandler = require("./action/logactions");
    var ActionActionHandler = require("./action/actionactions");
    var DragAndDropActionHandler = require("./action/draganddropactions");
    var CollaborationActionHandler = require("./action/collaborationactions");
    var ModalWindowsActionHandler = require("./action/modalwindowsactions");
    var NotificationsActionHandler = require("./action/notificationsactions");
    var ViewConfigActionHandler = require("./action/viewconfigactions");
    var ViewActionHandler = require("./action/viewactions");
    var UserActionHandler = require("./action/useractions");

    var modstate = require("./modelerstate");
    var ModelerViews = require("./modelerviews");

    /*
     * Utility function to validate the flags set for controlling the modeling features.
     *
     * @param {Object} modelingFeatures - Object with list of fields / flags for enabling / disabling the modeling features.
     */
    function validateModelingFeatureOptions(modelingFeatures) {
        /* eslint-disable no-console */
        if (lodash.isUndefined(modelingFeatures)) {
            console.warn("Modeling feature flags are undefined. Default settings will be used.");
            return;
        }

        if (lodash.isUndefined(modelingFeatures.editSchema) || !lodash.isBoolean(modelingFeatures.editSchema)) {
            console.warn("Flag for edit schema feature ('editSchema') is either not found or its value is not a 'true' or 'false' value. Default value of 'true' will be used.");
        }

        if (lodash.isUndefined(modelingFeatures.editRules) || !lodash.isBoolean(modelingFeatures.editRules)) {
            console.warn("Flag for formula editor feature ('editRules') is either not found or its value is not a 'true' or 'false' value. Default value of 'false' will be used.");
        }
        /* eslint-enable no-console */
    }

    /**
     * A function that will be called when the Modeler makes a service request
     * that failed authentication, i.e. returned a 401 - Unauthorized error. The
     * typical implementation would redirect to a login page.
     *
     * @callback AuthenticationFailureFn
     * @param {ModelerApp} modeler - the modeler app that issued the request that failed authentication
     * @param {Object} xhr         - the xhr that caused the error
     */

    /**
     * @typedef {Object} ActionConfig
     * @property {String} svcUrl                      - the path of the service to call (relative paths are prepended with urls.serverUrl)
     * @property {String} method                      - the http method to use (defaults to POST when a message is provided, otherwise GET)
     * @property {String} contentType                 - content type of the message, defaults to application/json
     * @property {String|Object} message              - the message to send to the service
     *
     * @typedef {Object} CollaborationConfig
     * @property {Number} minUpdateInterval           - minimal value for data update interval
     * @property {Number} maxUpdateInterval           - maximal value for data update interval
     *
     * @typedef {Object} ModelerAppConfig
     *
     * @property {String} appPrefix                   - the URL prefix for application services. If services are running on a workbook the prefix should point to that workbook
     * @property {String} [workbookId]
     * @property {Object} urls                        - configuration object for overriding the default modeler URLs
     * @property {String} urls.measureUrl             - the relative URL for the measure service
     * @property {String} urls.measureUpdateUrl       - the relative URL for the measure update service (optional)
     * @property {String} urls.measureConfigUrl       - the relative URL for querying measure formatting configuration
     * @property {String} urls.navigationTreeGetUrl   - the relative URL for querying navigation tree configuration
     * @property {String} urls.navigationTreeSetUrl   - the relative URL for setting navigation tree configuration
     * @property {String} urls.connectBloxUrl         - the relative URL for the connectblox services
     * @property {String} urls.addBlockUrl            - the relative URL for the addblock service
     * @property {String} urls.execBlockUrl           - the relative URL for the execblock service
     * @property {String} urls.listPredicatesUrl      - the relative URL for the listpredicates service
     * @property {String} urls.userBroadcastUrl       - the relative URL for the websocket service
     * @property {String} urls.currentUserUrl         - the relative URL for querying the current user service
     * @property {String} urls.lbWebAdminUrl          - the relative URL the lb web admin service
     *
     * @property {Object} modelingFeatures                                - the configuration object for enabling / disabling modeling features
     * @property {Boolean} modelingFeatures.editSchema                    - flag to enable / disable schema editing
     * @property {Boolean} modelingFeatures.editRules                     - flag to show / hide the "Formula Editor" option in cogwheel menu
     * @property {CollaborationConfig}  [modelingFeatures.collaboration]  - the configuration object for collaboration features
     *
     * @property {String} workspace       - the name of the workspace for ConnectBlox requests
     *
     * @property {Object} routing                     - routing specific configuration
     * @property {routing.toUrlFn} routing.toUrl      - the callback function for generating full URLs out of
     *                                                  relative modeler URLs
     * @property {routing.fromUrlFn} routing.fromUrl  - the callback function for converting full URLs to relative
     *                                                  modeler URLs
     *
     * @property {Object} actions                     - an object configuring a set of actions, where the key of the object
     *                                                  defines the action ID, and the value is an @type {ActionConfig}
     *
     * @property {Object} events                      - callback functions for various modeler events
     * @property {AuthenticationFailureFn} events.onAuthenticationFailure - a function called when any service request fail authentication
     *                                                  typically this is
     *
     * @property {Function} getServiceUrl - function that takes the url configured in the action and allows application to tranform
     *                                      the url.
     * @property {Function} getActionMessage - function that takes the message configured in the action and the url
     *                                         or the service and allows customizing the message.
     *
     * @property {Object} mainCanvas      - the top level canvas configuration
     * @property {Object[]} canvases      - the canvas configurations for the application
     * @property {Object} el              - the DOM element in which to place the modeler
     * @property {Object} views           - the views to use to render the components (optional)
     */
    function generateModelerAppConfig(userConfig) {
        // services run either on the master or on a workbook
        var appPrefix = userConfig.appPrefix || (userConfig.urls && userConfig.urls.appPrefix) || "",
            broadcastUrlPrefix = userConfig.broadcastUrlPrefix || appPrefix,
            workbookId = userConfig.workbookId,
            workbookServicePrefix = workbookId ? appPrefix + "/workbook-" + workbookId : appPrefix,
            enableUserBroadcast = userConfig.modelingFeatures && userConfig.modelingFeatures.collaboration,
            defaultUrls = {
                // services running on workbook branch
                measureUrl: workbookServicePrefix + "/measure",
                measureUpdateUrl: workbookServicePrefix + "/measure-update",
                measureConfigUrl: workbookServicePrefix + "/pivot_config",
                rulesUrl: workbookServicePrefix + "/rules",
                navigationTreeUrl: workbookServicePrefix + "/navtree",
                actionsUrl: workbookServicePrefix + "/actions",
                userBroadcastUrl: enableUserBroadcast && broadcastUrlPrefix + "/websocket/broadcast_auth/workbook-" + (workbookId || "0"),
                // services running on master
                workbooksUrl: appPrefix + "/workbooks",
                sheetUrl: appPrefix + "/sheet",
                resetSheetUrl: appPrefix + "/reset_sheet",
                currentUserUrl: appPrefix + "/admin/current_user",
                lbWebAdminUrl: appPrefix + "/lb-web/admin",
                connectBloxUrl: appPrefix + "/connectblox",
                addBlockUrl: appPrefix + "/connectblox/addblock",
                execBlockUrl: appPrefix + "/connectblox/exec",
                listPredicatesUrl: appPrefix + "/connectblox/list-predicates",
                createBranchUrl: appPrefix + "/connectblox/create_branch",
                closeBranchUrl: appPrefix + "/connectblox/close_branch",
                replaceDefaultBranchUrl: appPrefix + "/connectblox/replace_default_branch",

                //views services
                viewsConfigsUrl: appPrefix + "/views",
                viewsStatesUrl: appPrefix + "/viewstates",
                viewConfigUrl: appPrefix + "/view",
                viewStateUrl: appPrefix + "/viewstate"
            },
            // merging with userConfig ignoring pageConfig because it's Immutable and lodash doesn't know how to do deep clone of Immutable
            // in future add other defaults into this mixin
            mergedConfig = lodash.merge({ urls: defaultUrls }, lodash.omit(userConfig, ["pageConfig"]));

        // assign it separately here because it is Immutable.Map
        mergedConfig.pageConfig = userConfig.pageConfig;

        if (!mergedConfig.workspace) {
            throw new Error("workspace needs to be set in config");
        }

        mergedConfig.getServiceUrl = userConfig.getServiceUrl || function(url) {
            if (url.indexOf("/commit") !== -1 || url.indexOf("/refresh") !== -1) {
                url = appPrefix + url;
            } else {
                url = workbookServicePrefix + url;
            }

            return url;
        };

        mergedConfig.getActionMessage = userConfig.getActionMessage || function(message, url) {
            if (workbookId && url.indexOf("/commit") !== -1 || url.indexOf("/refresh") !== -1) {
                message = fixCommitRefreshMessage(message, workbookId);
            }

            return message;
        };

        if (userConfig.workspace) {
            mergedConfig.connectblox = {
                workspace: userConfig.workspace
            };
        }
        mergedConfig.routing = userConfig.routing || {};

        validateModelingFeatureOptions(userConfig.modelingFeatures);
        mergedConfig.modelingFeatures = userConfig.modelingFeatures ||  {
            editSchema: true,
            editRules: true
        };

        return mergedConfig;
    }

    function fixCommitRefreshMessage(message, workbookId) {
        message.workbook_id = workbookId;
        return message;
    }

    /*
     * A ModelerApp is a container for all of the non-UI components of a modeler
     * application. It contains all the stores, action handlers and configuration
     * for the application. A ModelerApp is intended to be used with or
     * without a browser (w/o a browser is primarily for testing).
     *
     * @param {ModelerAppConfig} userConfig configuration options for the application
     */
    lodash.mixin(ModelerApp.prototype, EventEmitter.prototype);
    function ModelerApp(userConfig) {
        var config = this.config = generateModelerAppConfig(userConfig || {});

        // log and dispatcher used app wide, declared top most
        var dispatcher = new Dispatcher();

        var globalSignalEmitter = new EventEmitter();

        var logStore = new logstore.LogStore(dispatcher);
        var logActionHandler = new LogActionHandler(dispatcher);
        var modelerWebSocket;

        var urlDriver = this.urlDriver = new UrlDriver(config);

        var eventConfig = config.events || {},
            onAuthenticationFailure = eventConfig.onAuthenticationFailure,
            onAuthorizationFailure = eventConfig.onAuthorizationFailure,
            afterAction = eventConfig.afterAction;

        urlDriver.on("AUTHENTICATION_FAILURE", function(obj) {
            if (onAuthenticationFailure) {
                onAuthenticationFailure(obj);
            }
        });

        urlDriver.on("AUTHORIZATION_FAILURE", function(obj) {
            if (onAuthorizationFailure) {
                onAuthorizationFailure(obj);
            }
        });        
        
        var userStore = new UserStore(dispatcher);
        var userActionHandler = new UserActionHandler(dispatcher, urlDriver, userConfig.loginUrl, userConfig.loginUrl, userConfig.realm);

        if (typeof window !== 'undefined') {
            // only run the following in a browser
            var router = new Router(config.routing.toUrlFn, config.routing.fromUrlFn);

            var modelerviews = config.views || require("./modelerviews");

            modelerWebSocket = new ModelerWebSocket(config.urls.userBroadcastUrl, urlDriver, logActionHandler, userStore);
        }
        
        // Stores and Action Handlers
        var modalWindowsStore = new ModalWindowsStore(dispatcher);
        var modalWindowsActionHandler = new ModalWindowsActionHandler(dispatcher);

        var notificationsStore = new NotificationsStore(dispatcher);
        var notificationsActionHandler = new NotificationsActionHandler(dispatcher);

        var pivotConfigStore = new pivotconfigstore.PivotConfigStore(dispatcher);
        var pivotConfigActionHandler = new PivotConfigActionHandler(dispatcher, urlDriver, pivotConfigStore);    

        var measureModelStore = new measuremodelstore.MeasureModelStore(dispatcher);
        var measureModelActionHandler = new MeasureModelActionHandler(dispatcher, urlDriver, measureModelStore);

        var fieldStore = new fieldstore.FieldStore(dispatcher, measureModelStore, pivotConfigStore);

        var measureServiceDAO = new MeasureServiceDAO(urlDriver);
        var workbookDAO = new WorkbookDAO(urlDriver);

        var multiAxisConfigStore = new multiaxisconfigstore.MultiAxisConfigStore(dispatcher, measureModelStore, fieldStore);

        var measureLanguageStore = new MeasureLanguageStore(dispatcher, multiAxisConfigStore);

        var measureLanguageActionHandler = new MeasureLanguageActionHandler(dispatcher, urlDriver);

        var multiAxisDataStore = new multiaxisdatastore.MultiAxisDataStore(dispatcher, {
            measureModelStore: measureModelStore,
            pivotConfigStore: pivotConfigStore,
            multiAxisConfigStore: multiAxisConfigStore,
            logActionHandler: logActionHandler
        });

        var multiAxisDataActionHandler = new MultiAxisDataActionHandler(dispatcher, urlDriver, {
            logActionHandler: logActionHandler,
            notificationsActionHandler: notificationsActionHandler,
            modalWindowsActionHandler: modalWindowsActionHandler,
            multiAxisDataStore: multiAxisDataStore,
            pivotConfigStore: pivotConfigStore,
            measureModelStore: measureModelStore
        });

        var navigationTreeStore = new navigationtreestore.NavigationTreeStore(dispatcher);
        var navigationTreeActionHandler = new NavigationTreeActionHandler(dispatcher, urlDriver);

        var actionStore = new actionstore(dispatcher);

        var modelerOptionStore = new modeleroptionstore.ModelerOptionStore(dispatcher, config.modelingFeatures);

        var dragAndDropActionHandler = new DragAndDropActionHandler(dispatcher);
        var dragAndDropStore = new DragAndDropStore(dispatcher);

        var actionActionHandler = new ActionActionHandler(dispatcher, urlDriver, config.getServiceUrl, config.getActionMessage, afterAction, {
            logActionHandler: logActionHandler,
            actionStore: actionStore
        });

        var collaborationStore = new CollaborationStore(dispatcher);
        var collaborationActionHandler = new CollaborationActionHandler(dispatcher, modelerWebSocket, urlDriver, {
            actionsActionHandler: actionActionHandler,
            multiAxisDataActionHandler: multiAxisDataActionHandler,
            notificationsActionHandler: notificationsActionHandler,
            modelerOptionStore: modelerOptionStore,
            userStore: userStore
        });

        var multiAxisConfigActionHandler = new MultiAxisConfigActionHandler(dispatcher, {
            measureModelStore: measureModelStore,
            fieldStore: fieldStore
        });        

        var viewConfigStore = new ViewConfigStore(dispatcher);
        var viewConfigActionHandler = new ViewConfigActionHandler(dispatcher, urlDriver, {
            viewConfigStore: viewConfigStore,
            userStore: userStore
        });

        var viewStore = new ViewStore(dispatcher, viewConfigStore, ModelerViews.getViewComponentForModule);
        var viewActionHandler = new ViewActionHandler(dispatcher, {
            viewConfigActions: viewConfigActionHandler,
            viewConfigStore: viewConfigStore,
            viewStore: viewStore
        });

        var modelerActionHandler = new ModelerActionHandler(dispatcher, {
            // actions
            measureModelActionHandler: measureModelActionHandler,
            multiAxisConfigActionHandler: multiAxisConfigActionHandler,
            multiAxisDataActionHandler: multiAxisDataActionHandler,
            navigationTreeActionHandler: navigationTreeActionHandler,
            measureLanguageActionHandler: measureLanguageActionHandler,
            pivotConfigActionHandler: pivotConfigActionHandler,
            actionsActionHandler: actionActionHandler,
            dragAndDropActionHandler: dragAndDropActionHandler,
            modalWindowsActionHandler: modalWindowsActionHandler,
            collaborationActionHandler: collaborationActionHandler,
            viewActionHandler: viewActionHandler,
            viewConfigActionHandler: viewConfigActionHandler,
            // stores
            measureModelStore: measureModelStore,
            pivotConfigStore: pivotConfigStore,
            multiAxisConfigStore: multiAxisConfigStore,
            fieldStore: fieldStore,
            navigationTreeStore: navigationTreeStore,
            dragAndDropStore: dragAndDropStore,
            multiAxisDataStore: multiAxisDataStore,
            modelerOptionStore: modelerOptionStore,
            modelerWebSocket: modelerWebSocket,
            // TEMPORARILY pass in modelerApp here which is silly but trying
            // to make the smallest change to allow for initialization of the modeler state, once Sergey's
            // view config changes are done, this should no longer be needed
            modelerApp: this,
            viewConfigStore: viewConfigStore
        }, urlDriver);

        // initialize modeler app
        /**
         * Initializes modeler
         * @returns {Promise}
         */
        this.start = function() {
            var startedApp = modelerActionHandler.initializeModeler();
            startedApp.catch(util.logError);
            return startedApp;
        };

        this.close = function() {
            this.getModelerActionHandler().clearUserRelatedStores().catch(util.logError);
        };

        /**
         * Destroys a dispatcher and all stores, action handlers.
         */
        this.destroy = function() {
            var regExp = /get(.*)(store|handler)$/i;

            dispatcher.destroy();
            urlDriver.destroy();
            
            lodash.forEach(this, function(getter, key) {
                var item;

                if (regExp.test(key)) {
                    item = getter();
                    
                    if (item.destroy || item.removeAllListeners) {
                        item.destroy && item.destroy();
                        item.removeAllListeners && item.removeAllListeners();
                    }
                }
            });
        };

        /**
         * Public Methods
         */

        this.getModelerDispatcher = function() {
            return dispatcher;
        };

        // stores
        this.getMeasureLanguageStore = function() {
            return measureLanguageStore;
        };

        this.getMeasureModelStore = function() {
            return measureModelStore;
        };

        this.getMultiAxisConfigStore = function() {
            return multiAxisConfigStore;
        };

        this.getModalWindowsStore = function() {
            return modalWindowsStore;
        };

        this.getNotificationsStore = function() {
            return notificationsStore;
        };

        this.getUserStore = function() {
            return userStore;
        };


        //FIX this is only here due to needing it for the request interface refactoring. 
        //Ultimately the pivot grid should be refactored to use action handlers which will eliminate the need for this
        this.getMeasureServiceDAO = function() {
            return measureServiceDAO;
        };

        this.getWorkbookDAO = function() {
            return workbookDAO;
        };

        this.getMultiAxisDataStore = function() {
            return multiAxisDataStore;
        };

        this.getFieldStore = function() {
            return fieldStore;
        };

        this.getPivotConfigStore = function() {
            return pivotConfigStore;
        };

        this.getNavigationTreeStore = function() {
            return navigationTreeStore;
        };

        this.getLogStore = function() {
            return logStore;
        };

        this.getActionStore = function() {
            return actionStore;
        };

        this.getModelerOptionStore = function() {
            return modelerOptionStore;
        };

        this.getDragAndDropStore = function() {
            return dragAndDropStore;
        };

        this.getCollaborationStore = function() {
            return collaborationStore;
        };

        this.getViewConfigStore = function() {
            return viewConfigStore;
        };

        this.getViewStore = function() {
            return viewStore;
        };

        // action handlers
        this.getMultiAxisConfigActionHandler = function() {
            return multiAxisConfigActionHandler;
        };

        this.getMeasureLanguageActionHandler = function() {
            return measureLanguageActionHandler;
        };

        this.getMeasureModelActionHandler = function() {
            return measureModelActionHandler;
        };

        this.getModelerActionHandler = function() {
            return modelerActionHandler;
        };

        this.getMultiAxisDataActionHandler = function() {
            return multiAxisDataActionHandler;
        };

        this.getPivotConfigActionHandler = function() {
            return pivotConfigActionHandler;
        };

        this.getNavigationTreeActionHandler = function() {
            return navigationTreeActionHandler;
        };

        this.getLogActionHandler = function() {
            return logActionHandler;
        };

        this.getActionActionHandler = function() {
            return actionActionHandler;
        };

        this.getCollaborationActionHandler = function() {
            return collaborationActionHandler;
        };

        this.getDragAndDropActionHandler = function() {
            return dragAndDropActionHandler;
        };

        this.getModalWindowsActionHandler = function() {
            return modalWindowsActionHandler;
        };

        this.getNotificationsActionHandler = function() {
            return notificationsActionHandler;
        };
        
        this.getUserActionHandler = function() {
            return userActionHandler;
        };

        this.getViewConfigActionHandler = function() {
            return viewConfigActionHandler;
        };

        this.getViewActionHandler = function() {
            return viewActionHandler;
        };

        this.getUserActionHandler = function() {
            return userActionHandler;
        };

        // services
        this.getConnectBlox = function() {
            return urlDriver.connectblox;
        };

        this.getRouter = function() {
            return router;
        };

        this.registerViewModule = function(moduleId, component) {
            return ModelerViews.registerViewModule(moduleId, component);
        };

        this.getViewComponentForModule = function(moduleId) {
            return ModelerViews.getViewComponentForModule(moduleId);
        };

        this.getUrlDriver = function() {
            return urlDriver;
        };

        this.getModelerWebSocket = function() {
            return modelerWebSocket;
        };

        this.getGlobalSignalEmitter = function() {
            return globalSignalEmitter;
        };

        this.getQueryGenerator = function() {
            //we want to re-use the multiaxisdatastore's generator to retian its caching
            return this.getMultiAxisDataStore().getQueryGenerator();
        };

        this.getModelerState = function() {
            return modstate.createModelerState(this);
        };
    }

    ModelerApp.prototype.getCurrentUser = function() {
        var currentUserUrl = this.config.urls.currentUserUrl,
            http = this.urlDriver.http;

        return http.getCurrentUser(currentUserUrl);
    };

    module.exports = ModelerApp;
    // export events for convenience
    module.exports.MultiAxisConfigEvents = multiaxisconfigstore.MultiAxisConfigEvents;
    module.exports.MeasureLanguageEvents = MeasureLanguageStore.Events;
    module.exports.MeasureConfigEvents = pivotconfigstore.MeasureConfigEvents;
    module.exports.MeasureModelEvents = measuremodelstore.MeasureModelEvents;
    module.exports.generateModelerAppConfig = generateModelerAppConfig;
},{"../logicblox.core/routing":157,"./action/actionactions":158,"./action/collaborationactions":160,"./action/draganddropactions":161,"./action/logactions":162,"./action/measurelanguageactionhandler":163,"./action/measuremodelactions":164,"./action/modalwindowsactions":165,"./action/modeleractions":166,"./action/multiaxisconfigactions":167,"./action/multiaxisdataactions":168,"./action/navigationtreeactions":169,"./action/notificationsactions":170,"./action/pivotconfigactions":171,"./action/useractions":172,"./action/viewactions":173,"./action/viewconfigactions":174,"./dao/measureservicedao":217,"./dao/workbookdao":221,"./dispatcher":223,"./event_emitter":224,"./modelerstate":239,"./modelerviews":2,"./store/actionstore":261,"./store/collaborationstore":262,"./store/draganddropstore":263,"./store/fieldstore":264,"./store/logstore":265,"./store/measurelanguagestore":266,"./store/measuremodelstore":267,"./store/modalwindowsstore":268,"./store/modeleroptionstore":269,"./store/multiaxisconfigstore":270,"./store/multiaxisdatastore":271,"./store/navigationtreestore":272,"./store/notificationsstore":273,"./store/pivotconfigstore":274,"./store/userstore":276,"./store/viewconfigstore":277,"./store/viewstore":278,"./urldriver":279,"./util":280,"./websocket":291,"lodash":90}],239:[function(require,module,exports){
"use strict";

var fieldhelpers = require("./helpers/fieldhelpers");
var measuremodelhelpers = require("./helpers/measuremodelhelpers");
var pivotconfighelpers = require("./helpers/pivotconfighelpers");
var pch = require("./pivotconfig_helper");
var ch = require("./view/pivot/config_helper");


/**
 * @typedef {Object} ModelerState
 * @property {PivotConfigState} pivotConfig
 * @property {MeasureModel} measureModel
 * @property {FieldState} fields
 * @property {Object} pch
 * @property {Object} ch
 */

/**
 * @typedef {Object} PivotConfigState
 * @property {Object<MetricName, MetricConfig>} metricsConfig
 * @property {Object<LevelName, LevelConfig>} levelConfig
 *
 * @typedef {Object} fields
 */

/**
 * @typedef {Immutable.List<mac.Field>} FieldState
 */

var ms = module.exports;

//TODO make modeler state immutable (requires using immutable measure model and immutable pivotconfig state
ms.createModelerState = function(modelerApp) {
    return ms.createModelerStateFromStores(modelerApp.getFieldStore(), 
        modelerApp.getMeasureModelStore(), 
        modelerApp.getPivotConfigStore());
};

ms.createModelerStateFromStores = function(fieldStore, measureModelStore, pivotConfigStore) {
    return {
        fields: fieldhelpers.getFieldStateFromStore(fieldStore),
        measureModel: measuremodelhelpers.getMeasureModelFromStore(measureModelStore),
        pivotConfig: pivotconfighelpers.getPivotConfigFromStore(pivotConfigStore),
        pch: pch,
        ch: ch
    };
};

ms.fields = fieldhelpers;
ms.measuremodel = measuremodelhelpers;
ms.pivotconfig = pivotconfighelpers;
},{"./helpers/fieldhelpers":229,"./helpers/measuremodelhelpers":230,"./helpers/pivotconfighelpers":231,"./pivotconfig_helper":255,"./view/pivot/config_helper":289}],240:[function(require,module,exports){
"use strict";

var mac = require("../multiaxisconfig");
var lodash = require("lodash");
var data = require("./data");
var util = require("../util");

function makePositionValueBuilder(query, formatter, keyQNames) {
    var unusedKeyIndices = query.mappedInter.qualified_level.map(function(ql, i) {
            var qName = mac.mqgLevelToQName(ql);
            if (keyQNames.indexOf(qName) === -1)
                   return i;
        }).filter(function(i) { return !lodash.isUndefined(i); }),
        valueArity = 1 + unusedKeyIndices,
        valueFormatter = makeValueFormatterFn(formatter, valueArity),
        rowValueParser = makeRowValueParser(query, keyQNames);

    return {
        createInitValueObj: function(queryTime) {
            return {
                rawValue: [],
                formattedValue: [],
                queryTime: queryTime
            };
        },
        updateValueObjectWithRow: function(valueObj, row) {
            var rawValue = rowValueParser(row); 
            valueObj.rawValue.push(rawValue);
            valueObj.formattedValue.push(valueFormatter(rawValue));
        },
        reverseValueObjectValues: function(valueObj) {
            valueObj.rawValue.reverse();
            valueObj.formattedValue.reverse();
        }
    };
}

function makeValueFormatterFn(formatter, valueArity) {
    var valueIndex = valueArity - 1, //the last item in the value row
        formatFn = formatter.format; 

    if (formatFn) {
        //mutates formattedValuesOut in-place
        return function(rawValue) {
            var formattedValue = rawValue.slice(); //copy the value row, these are primitives so a shallow copy is fine

            //now format the value index
            formattedValue[valueIndex] = formatFn(formattedValue[valueIndex]);

            return formattedValue;
        }; 
    } else {
        return function(rawValue) {
            return rawValue;
        };
    }
}

function makeRowValueParser(query, keyQNames) {
    var unusedKeyIndices = query.mappedInter.qualified_level.map(function(ql, i) {
            var qName = mac.mqgLevelToQName(ql);
            if (keyQNames.indexOf(qName) === -1)
                   return i;
        }).filter(function(i) { return !lodash.isUndefined(i); }),
        unusedKeyCt = unusedKeyIndices.length,
        valueIndex = query.mappedInter.qualified_level.length,
        rowWidth = valueIndex+1;

    return unusedKeyCt > 0 ? function (row) {
        var i = 0,
            val = [];

        for (; i < unusedKeyCt; i++) {
            val.push(row[unusedKeyIndices[i]]);
        }
        val.push(row[valueIndex]);
        return val;
    } : function(row) {
        return row.slice(valueIndex,rowWidth);
    };
}

function keyComparator(rowKey, posKey) {
    if (rowKey < posKey)
        return -1;
    else if (rowKey > posKey)
        return 1;
    else
        return 0;
}

function BinarySearcher(query, formatter, resultDataMap) {
    this.$keyQNames = resultDataMap.usedKeyMaps.map(function(keyMap) {
        return keyMap.qName; 
    });

    this.$keyRowIndices = resultDataMap.usedKeyMaps.map(function(keyMap) { 
        return keyMap.index; 
    });

    this.$keyComparators = new Array(this.$keyRowIndices.length).fill(keyComparator);

    this.$valueBuilder = makePositionValueBuilder(query, formatter, this.$keyQNames);
}

BinarySearcher.prototype.setPositionTableMap = function(positionToTableMap) {
    //TODO instead of using this local cache we should use an exterior cache to cache sortings
    //Map<ResultTable, SortedResultTable>
    var sortedResultTables = new Map(),
        thisPosToTableMap,
        positionKey,
        e,
        res,
        mapEntries = positionToTableMap.entries(),
        cachedData,
        resultTable,
        sortedResultTable;

    this.$positionToTableMap = new Map();
    thisPosToTableMap = this.$positionToTableMap;

    for (; res = mapEntries.next(), !res.done, e = res.value||[], positionKey = e[0], cachedData = e[1];) {
        resultTable = cachedData.resultTable;
        sortedResultTable = sortedResultTables.get(resultTable);

        if (!sortedResultTable) {
            sortedResultTable = data.sortResultTableByIndices(this.$keyRowIndices, this.$keyComparators, resultTable);
            sortedResultTables.set(resultTable, sortedResultTable); 
        }

        thisPosToTableMap.set(positionKey, sortedResultTable);
    }
};

BinarySearcher.prototype.setSingleTable = function(resultTable, queryTime) {
    //TODO instead we should use an exterior cache that stores different sortings of tables
    this.$singleResultTable = data.sortResultTableByIndices(this.$keyRowIndices, this.$keyComparators, resultTable);
    this.$queryTime = queryTime;
};

BinarySearcher.prototype.getQueryTime = function(queryTime) {
    return this.$queryTime;
};

BinarySearcher.prototype.findPositionRows = function(position) {
    return this.findPositionsRows([position])[0];
};

BinarySearcher.prototype.findPositionValue = function(position) {
    return this.findPositionsValue([position])[0];
};

BinarySearcher.prototype.findPositionsRows = function(positions, valueBuilder) {
    var valueBuilder = valueBuilder || util.mkIdentityFunction();
    if (this.$singleResultTable)
        return this.findPositionRowsForSingleTable(positions, valueBuilder);
    else
        return this.findPositionRowsForMultipleTables(positions, valueBuilder);
};

BinarySearcher.prototype.findPositionsValue = function(positions) {
    return this.findPositionsRows(positions, this.$valueBuilder);
};

BinarySearcher.prototype.findPositionRowsForSingleTable = function(positions, valueBuilder) {
    var i = 0,
        posCt = positions.length,
        resultTable = this.$singleResultTable,
        position,
        values,
        dataTable = resultTable.dataTable,
        queryTime = resultTable.queryTime,
        posRows = [];

    for (; i < posCt; i++) {
        position = positions[i];
        //TODO track the starting row and increment it as we find positions
        values = this.findRowsForPosition(position, dataTable, 0, valueBuilder, queryTime);

        posRows.push(values);
    }

    return posRows;
};

BinarySearcher.prototype.findPositionRowsForMultipleTables = function(positions, valueBuilder) {
    var i = 0,
        posCt = positions.length,
        positionToTableMap = this.$positionToTableMap,
        position,
        values,
        resultTable,
        posRows = [];

    for (; i < posCt; i++) {
        position = positions[i];
        resultTable = positionToTableMap.get(position.key);
        if (resultTable) {
            //TODO track the starting row and increment it as we find positions
            values = this.findRowsForPosition(position, resultTable.dataTable, 0, valueBuilder, resultTable.queryTime);
            posRows.push(values);
        } else {
            //we don't know this position
            posRows.push(undefined);
        }
    }

    return posRows;
};

/**
 * @param {Position} position
 * @param {(Key|Value)[][]} dataTable dataTable assumed to be sorted by the keyQNames in priority order
 * @param {Number} startingRow the row to start searching the dataTable on
 * @param {Function} valueBuilder
 * @param {Date} queryTime
 * @return {(Key|Value)[][]}
 */
BinarySearcher.prototype.findRowsForPosition = function(positionInfo, dataTable, startingRow, valueBuilder, queryTime) {
    var keyQNames = this.$keyQNames,
        position = positionInfo.position,
        keyLen = keyQNames.length,
        keyRowIndices = this.$keyRowIndices,
        keyComparators = this.$keyComparators,
        valueObj = valueBuilder.createInitValueObj(queryTime),
        updateValueObjectWithRow = valueBuilder.updateValueObjectWithRow,
        reverseValueObjectValues = valueBuilder.reverseValueObjectValues,
        posVal,
        rowVal,
        cmpVal = 0,
        searchRange = [startingRow, dataTable.length-1],
        rangeStart, rangeEnd,
        rowPtr = this.computeFirstSearchRow(searchRange),
        upperRow, upperRowPtr, lowerRow, lowerRowPtr,
        row,
        i = 0;

    row = dataTable[rowPtr];

    while (row) {
        //  check if position matches key in the current row of the result table
        for (i = 0; i < keyLen; i++) {
            posVal = position[keyQNames[i]];
            rowVal = row[keyRowIndices[i]];
            cmpVal = keyComparators[i](rowVal, posVal);

            if (cmpVal !== 0) {
                break;
            }
        }
        if (cmpVal === 0) {
            //since we found a match (and the dataTable is sorted), we now need to find the bounds, of the matching segment
            //TODO this is linear in the number of matches, but doesn't necessarily handle to be.  At a later time
            //     we could consider to do an exponential jumping search which should be about (log N) to find the upper bound and likewise for lower bound
            //     This won't remove the K time we need to actually retrieve the K rows, but it will remove the K comparisons we need to find the bounds
            rangeStart = searchRange[0];
            rangeEnd = searchRange[1];

            //first find upper bound
            upperRowPtr = rowPtr - 1;
            while (upperRowPtr >= rangeStart) {
                upperRow = dataTable[upperRowPtr];
                for (i = 0; i < keyLen; i++) {
                    posVal = position[keyQNames[i]];
                    rowVal = upperRow[keyRowIndices[i]];
                    cmpVal = keyComparators[i](rowVal, posVal);

                    if (cmpVal !== 0) {
                        break;
                    }
                }
                if (cmpVal === 0) {
                    updateValueObjectWithRow(valueObj, upperRow);
                    upperRowPtr--;
                } else {
                    //leave the loop, we shan't find anymore!
                    break;
                }
            }
            //now reverse the rows to maintain the proper order (since we inserted from lowest to highest)
            reverseValueObjectValues(valueObj);

            //actually add the initially discovered row after the upper rows are added to maintain the ordering
            updateValueObjectWithRow(valueObj, row);

            //now find lower bound
            lowerRowPtr = rowPtr + 1;
            while (lowerRowPtr <= rangeEnd) {
                lowerRow = dataTable[lowerRowPtr];
                for (i = 0; i < keyLen; i++) {
                    posVal = position[keyQNames[i]];
                    rowVal = lowerRow[keyRowIndices[i]];
                    cmpVal = keyComparators[i](rowVal, posVal);

                    if (cmpVal !== 0) {
                        break;
                    }
                }
                if (cmpVal === 0) {
                    updateValueObjectWithRow(valueObj, lowerRow);
                    lowerRowPtr++;
                } else {
                    //leave the loop, we shan't find anymore!
                    break;
                }
            }
            break; //done!
        } else {
            //narrow the range
            searchRange = this.computeNextSearchRange(searchRange, rowPtr, cmpVal);
            if (!searchRange) break;
            //calculate the next row ptr
            rowPtr = this.computeNextSearchRow(searchRange, rowPtr, cmpVal); 
            row = dataTable[rowPtr];
        }
    }

    return valueObj;
};

BinarySearcher.prototype.computeNextSearchRange = function(range, row, cmp) {
    var start = range[0],
        end = range[1];

    if (start === end) return; //undefined if we can't narrow further

    if (cmp > 0) { //position occurs before the row if at all
        return [start, Math.max(start, row-1)];
    } else if (cmp < 0) { //position occurs after row if at all 
        return [Math.min(end, row+1), end];
    } else { //since this row does have it, we don't know how big the range of matches is so we can't reduce the range at all
        return range;
    }
};
        
BinarySearcher.prototype.computeNextSearchRow = function(range, row, cmp) {
    var start = range[0],
        end = range[1],
        size = end - start;

    if (size < 2 || cmp === 0) //we start at the beginning if the range is too small to split or if we're in the middle of matching
        return start;
    else
        return start + Math.floor(size / 2);
};
        
BinarySearcher.prototype.computeFirstSearchRow = function(range) {
    return range[0]; //starting row
};

module.exports = BinarySearcher;

},{"../multiaxisconfig":253,"../util":280,"./data":241,"lodash":90}],241:[function(require,module,exports){
"use strict";

/**
 * @typedef {AxisRange} Object
 * @property {Number} [start] default to zero
 * @property {Number} [length] default to maximum length of axis
 *
 * @typedef {String} AxisName
 *
 * @typedef {Object<AxisName, AxisRange>} MARange
 *
 * @typedef {(CellData|MADataArray)[]} MADataArray
 * A multi-dimension array of CellData.  Each cell either contains the subdimensional data array or the actual cell data if in the inner-most dimension
 *
 * @typedef {Object} MAData
 * @property {MADataArray} dataArray
 * @property {String[]} orderedAxisNames list of the axes names in this array, ordered from outermost to innermost of the MADataArray
 *
 */

var mac = require("../multiaxisconfig");
var assert = require("assert");

var d = module.exports;

/**
 * @param {MAConfig} maConfig
 * @param {mah.HeadingData} headingData
 * @param {MARange} range
 * @param {Function} computeData
 * @param {Boolean} [flattened] defaults to false
 * @param {String[]} [orderedAxisNames] customize the order of axis iteration
 * @return {MAData}
 */
d.iterateViewRange = function(maConfig, headingData, range, computeData, flattened, orderedAxisNames) {
    orderedAxisNames = orderedAxisNames || mac.getOrderedAxes(maConfig);
    var headingsPerAxis = {},
        dataArray = [],
        axisStartCoords = {}; 

    if (!headingData || !range) return;

    orderedAxisNames.forEach(function(axisName) {
        var axisRange = range.get(axisName);

        headingsPerAxis[axisName] = headingData.getHeadingAxisInfo(axisName).getHeadingRange(axisRange.start, axisRange.start + axisRange.length);
        axisStartCoords[axisName] = axisRange.start;
    });

    if (orderedAxisNames.length)
        d.iterateCells(dataArray, [], [], [], [], [], orderedAxisNames, axisStartCoords, headingsPerAxis, 0, computeData, flattened);

    return {
        dataArray: dataArray,
        orderedAxisNames: orderedAxisNames
    };
};
/**
 * recursively iterate through a set of axis headings to perform some action for each N-dimensional coordinate (cell)
 */
d.iterateCells = function(cell, fields, members, rollups, headings, coord, orderedAxisNames, axisStartCoords, headingsPerAxis, axisIndex, computeData, flattened, hasInvalidHeadings) {
    assert(axisIndex < orderedAxisNames.length, "O no, how did we get an axisIndex that's past the end of the ordered axis names?");

    var axisName = orderedAxisNames[axisIndex],
        axisStartCoord = axisStartCoords[axisName],
        rows = headingsPerAxis[axisName],
        rowLen = rows.length,
        row,
        innerFields,
        innerRollups,
        innerMembers,
        innerHeadings,
        isInnerMost = axisIndex === orderedAxisNames.length - 1,
        innerCell,
        data,
        innerCoord,
        i = 0;

    for (; i < rowLen; i++) {
        row = rows[i];
        innerFields = fields.concat(row.fields);
        innerRollups = rollups.concat(row.rollups);
        innerMembers = members.concat(row.members);
        //headings is a list of lists where each inner list is the headings for a particular axis
        innerHeadings = headings.concat([row.headers]);
        innerCoord = coord.concat(axisStartCoord+i);

        if (isInnerMost) {
            data = computeData(innerFields, innerRollups, innerMembers, innerHeadings, innerCoord, hasInvalidHeadings || row.hasInvalidHeadings);
            cell.push(data);
        } else {
            //if 'flattened', we don't make a nested array but simply push down the existing array
            if (flattened) {
                innerCell = cell;
            } else {
                innerCell = [];
                cell.push(innerCell);
            }
            d.iterateCells(innerCell, innerFields, innerMembers, innerRollups, innerHeadings, innerCoord, orderedAxisNames, axisStartCoords, headingsPerAxis, axisIndex + 1, computeData, flattened, hasInvalidHeadings || row.hasInvalidHeadings); 
        }
    }
};

d.sortResultTableByIndices = function(keyRowIndices, keyComparators, resultTable) {
    return {
        columnInfo: resultTable.columnInfo,
        dataTable: d.sortDataTableByIndices(keyRowIndices, keyComparators, resultTable.dataTable)
    };
};

d.sortDataTableByIndices = function(indices, keyComparators, dataTable) {
    var indicesCt = indices.length,
        sortFn = function(row1, row2) {
            var i = 0,
                cmp = 0,
                keyIdx;
            
            for (;i < indicesCt; i++) {
                keyIdx = indices[i];
                cmp = keyComparators[i](row1[keyIdx], row2[keyIdx]);
                if (cmp !== 0)
                    return cmp;
            }

            return cmp;
        },
        copiedTable = dataTable.slice();

    copiedTable.sort(sortFn);
    return copiedTable;
};

},{"../multiaxisconfig":253,"assert":undefined}],242:[function(require,module,exports){

"use strict";

module.exports = DataWarehouse;
/**
 * Container and access mechanism for different kinds of data boxes.  Used to mediate access
 * to a set of data boxes
 */
function DataWarehouse(queryDataBox, editDataBox, headingData, brokenQueryKeys, dataCache) {
    this.$queryDataBox = queryDataBox;
    this.$queryDataLastUpdated = queryDataBox.getLastUpdated();
    this.$editDataBox = editDataBox;
    this.$headingData = headingData;
    this.$brokenQueryKeys = brokenQueryKeys;
    this.$dataCache = dataCache;
}

DataWarehouse.prototype.getQueryDataBox = function() {
    return this.$queryDataBox;
};

DataWarehouse.prototype.getEditDataBox = function() {
    return this.$editDataBox;
};

DataWarehouse.prototype.getHeadingData = function() {
    return this.$headingData;
};

DataWarehouse.prototype.getBrokenQueryKeys = function() {
    return this.$brokenQueryKeys;
};

DataWarehouse.prototype.isQueryBrokenByKey = function(queryKey) {
    return this.$brokenQueryKeys.indexOf(queryKey) > -1;
};

DataWarehouse.prototype.getPendingEditByKeys = function(editKey, positionInfo) {
    return this.$editDataBox.getPendingEditByKeys(editKey, positionInfo);
};

DataWarehouse.prototype.getOutstandingSaveByKeys = function(editKey, positionInfo) {
    return this.$editDataBox.getOutstandingSaveByKeys(editKey, positionInfo);
};

DataWarehouse.prototype.getQueryPositionValue = function(query, formatter, queryKey, positionInfo, resultDataMap) {
    var cachedPosData = this.$dataCache && this.$dataCache.getQueryPositionValue(queryKey, positionInfo, resultDataMap),
        cachedValue = cachedPosData && cachedPosData.value,
        cacheTime = cachedPosData && cachedPosData.cacheTime,
        useCacheValue = cacheTime && this.$queryDataLastUpdated <= cacheTime,
        realValObj;
    
    if (useCacheValue) {
        return cachedValue;
    } else {
        realValObj = this.$queryDataBox.getQueryPositionValue(query, formatter, queryKey, positionInfo, resultDataMap);
        if (realValObj)
            realValObj.lastChanged = performance.now(); 

        if (this.$dataCache) {
            this.$dataCache.cacheValue(queryKey, positionInfo.key, positionInfo.position, realValObj, resultDataMap);
        }

        return realValObj;
    }
};
},{}],243:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var lodash = require("lodash");
var cubiql = require("../cubiql");
var querygen = require("../querygen/query");
var qgutil = require("./queryutil");
var ma_querygen = require("./querygen");
var queryutil = require("../querygen/util");
var QueryGenerator = ma_querygen.QueryGenerator;
var ModelUtility = require("./modelutility");
var KeyManager = require("./keymanager");
var mac = require("../multiaxisconfig");
var mah = require("../multiaxisheading");
var mah_gen = require("../headinggen");
var assert = require("assert");
var data = require("./data");

var dp = module.exports;

var AxisRange = Immutable.Record({
    start: undefined,
    length: undefined
});

var DataProcessor = dp.DataProcessor = function(maConfig, measureModel, metricConfigs, includeFieldFilters) {
    this.$maConfig = maConfig;
    this.$measureModel = measureModel;
    this.$modelUtility = new ModelUtility(measureModel);
    this.$queryGenerator = new QueryGenerator(measureModel, metricConfigs);

    this.$cellDataFactoryCache = new Map();
    this.$cellQueryCache = new Map();
    this.$intersectionEditConfigs = new Map();
    this.$positionInfoCacheKeyFactoryCache = new Map(); 
    this.$keyManager = new KeyManager();
    this.$editConfigCache = new Map();
    this.$includeFieldFilters = includeFieldFilters || false;
};

DataProcessor.prototype.generateHeadingData = function(dataWarehouse) {
    var me = this,
        maConfig = this.$getMAConfig(),
        axisHeadings = {},
        sliceSelections;

    sliceSelections = this.$getSliceSelections(dataWarehouse);

    maConfig.axis.forEach(function(fields, axisName) {
        var axisHeaderExpr = maConfig.headerConfig.get(axisName);
        assert(axisHeaderExpr, "Couldn't find header config for axis: ", axisName);

        axisHeadings[axisName] = me.$generateHeadings(axisHeaderExpr, dataWarehouse);
    });

    return new mah.HeadingData(axisHeadings, sliceSelections, maConfig);
};

DataProcessor.prototype.$generateHeadings = function(headerExpr, dataWarehouse) {
    //TODO get config for view
    //walk through terms from config
    //at each term, get the data for that field, then
    //return an mah equivalent of the field having
    //converted the data into members {id: x, label: x, config: { field: Field } }
    var generator = new mah_gen.HeadingGenerator(this.$getModel()),
        mahTerm = this.$macTermToMAHTerm(headerExpr, generator, dataWarehouse),
        mahHeading = mahTerm && mah.termToAxisHeading(mahTerm);

    return mahHeading || undefined;
};

DataProcessor.prototype.$macTermToMAHTerm = function(headerTerm, generator, dataWarehouse) {
    var me = this,
        multiAxisConfig = this.$getMAConfig(),
        terms,
        field;

    if (headerTerm instanceof mac.PlaceholderTerm) {
        return new mah.PlaceholderTerm(headerTerm.fieldId);
    } if (headerTerm instanceof mac.ConcatTerm) {
        terms = lodash.compact(headerTerm.terms.map(function(term) {
            return me.$macTermToMAHTerm(term, generator, dataWarehouse);
        }).toArray());

        if (terms.length)
            return new mah.ConcatTerm(headerTerm.fieldId, terms);
    } else if (headerTerm instanceof mac.CrossTerm) {
        terms = lodash.compact(headerTerm.terms.map(function(term) {
            return me.$macTermToMAHTerm(term, generator, dataWarehouse);
        }).toArray());

        if (terms.length)
            return new mah.CrossTerm(headerTerm.fieldId, terms);
    } else if (headerTerm instanceof mac.NestTerm) {
        if (headerTerm.fieldTerms.size)
            return generator.generateMAHNestTerm(
                headerTerm,
                new Immutable.Map(headerTerm.fieldTerms.map(function(t) {
                    var field = mac.getField(multiAxisConfig, t.fieldId);

                    return [field, me.$getFieldHeaderData(field, dataWarehouse)];
                })),
                new Immutable.Map(headerTerm.fieldTerms.map(function(t) {
                    var field = mac.getField(multiAxisConfig, t.fieldId);

                    return [field, me.$getFieldSortData(field, dataWarehouse)];
                })),
                new Immutable.Map(headerTerm.fieldTerms.map(function(t, i) {
                    var field = mac.getField(multiAxisConfig, t.fieldId),
                        childTerm = headerTerm.fieldTerms.get(i+1),
                        childField = childTerm && mac.getField(multiAxisConfig, childTerm.fieldId),
                        pair = new Immutable.List([field,childField]);

                    return [pair, me.$getFieldMapData(pair, dataWarehouse)];
                })),
                multiAxisConfig
            ); 
    } else if (headerTerm instanceof mac.FieldTerm) {
        field = mac.getField(multiAxisConfig, headerTerm.fieldId);
        assert(field, "Couldn't find field referenced by field term: ", headerTerm.fieldId);
        if (field instanceof mac.LevelField)
            return generator.generateMAHFieldTermForLevelField(headerTerm, me.$getFieldHeaderData(field, dataWarehouse), me.$getFieldSortData(field, dataWarehouse), multiAxisConfig);
        else if (field instanceof mac.MeasureField)
            return generator.generateMAHFieldTermForMeasureField(headerTerm, multiAxisConfig);
    } else {
        throw new Error("couldn't make term into MAH Term");
    }
};

DataProcessor.prototype.$getSliceSelections = function(dataWarehouse) {
    var me = this,
        config = this.$getMAConfig(),
        sliceConfigs = config.sliceConfigs,
        sliceSelections = {};

    //For LevelField slices, populate from queries
    sliceConfigs.forEach(function(sliceConfig) {
        if (sliceConfig.sourceField instanceof mac.LevelField) {
            var queryData = me.getUnmaskedQueryData(me.$getQueryGenerator().generateSelectedSliceQuery(sliceConfig, sliceConfigs), dataWarehouse),
                isLoadingSlice = !(queryData.resultTable && queryData.resultTable.dataTable),
                selectedRow = !isLoadingSlice && queryData.resultTable.dataTable[0],
                selectedId = undefined;

            // queryData.resultTable.dataTable[0][0] should never be
            // undefined if it exists, so selectedId will remain
            // undefined exactly in the case that the 2D dataTable has
            // height or width 0.
            if (isLoadingSlice) {
                selectedId = mah.LOADING_MEMBER_ID;
            } else if (selectedRow) {
                selectedId = selectedRow[0];
            }
            
            sliceSelections[sliceConfig.sourceField.id] = { id: selectedId, loading: isLoadingSlice };
        } else if (sliceConfig.sourceField instanceof mac.MeasureGroupField) {
            assert(!sliceConfig.byMeasure, "byMeasure slice configuration not currently supported for Measure Group Fields");
            var id = sliceConfig.bySelection || (sliceConfig.sourceField.fields.size && sliceConfig.sourceField.fields.get(0).id);
            sliceSelections[sliceConfig.sourceField.id] = { id: id, loading: false };
        } else if (sliceConfig.sourceField instanceof mac.MeasureField) {
            assert(!sliceConfig.byMeasure, "byMeasure slice configuration not currently supported for MeasureFields");
            sliceSelections[sliceConfig.sourceField.id] = { id: sliceConfig.bySelection || sliceConfig.sourceField.id, loading: false };
        }
    });    

    return sliceSelections;
};

DataProcessor.prototype.$getFieldHeaderData = function(field, dataWarehouse) {
    if (field instanceof mac.LevelField && !mac.isAllLevelField(field)) {
        var me = this,
            multiAxisConfig = this.$getMAConfig(),
            filteredSliceConfigs = multiAxisConfig.sliceConfigs.filterNot(function(sc) { 
                return sc.get("sourceField") instanceof mac.MeasureGroupField;
            }),
            fieldQueries = this.$getQueryGenerator().generateHeaderQueries(field, filteredSliceConfigs),
            fieldData = new Immutable.Map();

        lodash.forEach(fieldQueries, function(query, queryName) {
            if (queryName !== "_sorts_")
                fieldData = fieldData.set(queryName, me.getUnmaskedQueryData(query, dataWarehouse));
        });

        return fieldData;
    } else if (mac.isAllLevelField(field)) {
        return new Immutable.Map({
            id: $mkQueryData([mac.levelToQualifiedLevel(field.level), {}], [[field.id, field.id]]),
            label: $mkQueryData([mac.levelToQualifiedLevel(field.level), {}], [[field.id, field.fieldLabel]]),
        });
    } else if (field instanceof mac.MeasureField) {
        return new Immutable.Map({
            id: $mkQueryData([{}, {}], [[field.id, field.id]]),
            label: $mkQueryData([{}, {}], [[field.id, field.fieldLabel]]),
        });
    }
};

/**
 * @param {LevelField} field
 * @param {DataWarehouse} dataWarehouse
 * @return {QueryData[]}
 */
DataProcessor.prototype.$getFieldSortData = function(field, dataWarehouse) {
    var multiAxisConfig = this.$getMAConfig(),
        filteredSliceConfigs = multiAxisConfig.sliceConfigs.filterNot(function(sc) { 
            return sc.get("sourceField") instanceof mac.MeasureGroupField;
        });

    if (field instanceof mac.LevelField && !mac.isAllLevelField(field)) {
        var me = this,
            fieldQueries = this.$getQueryGenerator().generateHeaderQueries(field, filteredSliceConfigs),
            sortQueries = fieldQueries._sorts_;

        return sortQueries.map(function(sortQuery) {
            return me.getUnmaskedQueryData(sortQuery, dataWarehouse);
        });
    } else {
        return [];
    }
};

/**
 * @param {Immutable.List<LevelField>} fieldPair a two-element list of the two fields to map between
 * @param {DataWarehouse} dataWarehouse
 * @return {QueryData}
 */
DataProcessor.prototype.$getFieldMapData = function(fieldPair, dataWarehouse) {
    assert(fieldPair.size === 2, "can only generate map data for two-elem field pairs!");
    if (!fieldPair.get(0) || !fieldPair.get(1)) return {}; //skip if either side is missin
    if (mac.isAllLevelField(fieldPair.get(0))) 
        return this.$getAllFieldMapData(fieldPair.get(0), fieldPair.get(1), dataWarehouse);
    else
        return this.getUnmaskedQueryData(this.$getQueryGenerator().generateFieldMapQuery(fieldPair), dataWarehouse);
};

DataProcessor.prototype.$getAllFieldMapData = function(allField, childField, dataWarehouse) {
    var childIdData = this.$getFieldHeaderData(childField, dataWarehouse).get("id"),
        allId = allField.id,
        mapData = {
            isAvailable: childIdData.isAvailable,
            isDirty: childIdData.isDirty
        },
        row,
        i = 0;
        
    if (childIdData.resultTable && childIdData.resultTable.dataTable) {
        mapData.resultTable = {
            columnInfo: childIdData.resultTable.columnInfo,
            dataTable: []
        };

        for (; i < childIdData.resultTable.dataTable.length; i++) {
            row = childIdData.resultTable.dataTable[i];
            mapData.resultTable.dataTable.push([row[0], allId]);
        }
    }    

    return mapData;
};

function $mkQueryData(columnInfo, dataTable) {
    return {
        isDirty: false,
        resultTable: {
            columnInfo: columnInfo,
            dataTable: dataTable
        }
    };
}

/**
 * @param {querygen.MeasureQuery} measureQuery
 * @param {DataBox} data
 * @return {QueryData}
 */ 
DataProcessor.prototype.getUnmaskedQueryData = function(measureQuery, dataWarehouse) {
    var queryKey = this.$calcMeasureQueryCacheKey(measureQuery);
    return getUnmaskedQueryDataByKey(queryKey, dataWarehouse.getQueryDataBox());
};

function getUnmaskedQueryDataByKey(queryKey, queryBox) {
    var queryData = queryBox.getUnmaskedQueryData(queryKey);

    return {
        resultTable: queryData && queryData.resultTable,
        isAvailable: !lodash.isUndefined(queryData)
    }; 
}

var DEFAULT_DATA_OPTIONS = {
    attributeOptions: {
        includeValue: true,
        includeEdit: true,
        includeSaving: true,
        includeLockStatus: true,
        includeProtectedStatus: true,
        includeOutstandingQueryStatus: true,
    },
    builderOptions: {
        prebuildInfoAndData: true
    }
};
Object.freeze(DEFAULT_DATA_OPTIONS);

function stringifyQueryOptions(options) {
    var result = "",
        option;
    if (options) {
        if (options === DEFAULT_DATA_OPTIONS) {
            result += "$$defaultOptions";
        } else {
            for (option in options.attributeOptions) {
                if (options.attributeOptions[option]) {
                    result += "$$" + option;
                }
            }
            for (option in options.builderOptions) {
                if (options.builderOptions[option]) {
                    result += "$$" + option;
                }
            }
        }
    }
    return result;
}

DataProcessor.prototype.getDataRange = function(configuredRange, cellBuilder, flattened, dataWarehouse, cellQueryOptions, orderedAxisNames) {
    cellQueryOptions = cellQueryOptions || DEFAULT_DATA_OPTIONS;
    var config = this.$getMAConfig(),
        headingData = dataWarehouse.getHeadingData(),
        range = configuredRangeToComputedRange(configuredRange, config, headingData), 
        cellDataBuilder = this.$mkCellDataBuilder(dataWarehouse, cellQueryOptions), 
        me = this,
        builder = cellBuilder ? 
            this.$makeInnerCellBuilder(cellBuilder, cellDataBuilder, cellQueryOptions)
            :
            function(fields, rollups, members) {
                var positionInfo = me.$calcPositionInfo(fields, members);
                return cellDataBuilder(fields, rollups, members, positionInfo);
            };

    return data.iterateViewRange(config, headingData, range, builder, flattened, orderedAxisNames);
};

DataProcessor.prototype.$makeInnerCellBuilder = function(cellBuilder, cellDataBuilder, cellQueryOptions) {
    var prebuild = cellQueryOptions.builderOptions.prebuildInfoAndData,
        cellInfoBuilder = this.$buildCellInfo.bind(this),
        me = this;

    if (prebuild) {
        return function(fields, rollups, members, headings, coord, hasInvalidHeadings) {
            var positionInfo = me.$calcPositionInfo(fields, members);
            return cellBuilder(me.$buildCellInfo(fields, rollups, members, headings, positionInfo, coord, hasInvalidHeadings), cellDataBuilder(fields, rollups, members, positionInfo)); 
        };
    } else {
        return function(fields, rollups, members, headings, coord) {
            var positionInfo = me.$calcPositionInfo(fields, members);
            return cellBuilder(fields, rollups, members, headings, positionInfo, coord, cellInfoBuilder, cellDataBuilder);
        };
    }
};

DataProcessor.prototype.getCellInfoInRange = function(configuredRange, dataWarehouse) {
    var config = this.$getMAConfig(),
        headingData = dataWarehouse.getHeadingData(),
        range = configuredRangeToComputedRange(configuredRange, config, headingData), 
        me = this,
        builder = function(fields, rollups, members, headings, coord, hasInvalidHeadings) {
            var positionInfo = me.$calcPositionInfo(fields, members);
            return me.$buildCellInfo(fields, rollups, members, headings, positionInfo, coord, hasInvalidHeadings); 
        };

    return data.iterateViewRange(config, headingData, range, builder, true);
};

DataProcessor.prototype.$buildCellInfo = function(fields, rollups, members, headings, positionInfo, coord, hasInvalidHeadings) {
    return {
        queries: !hasInvalidHeadings ? this.$getCellQueries(fields, rollups) : {},
        fields: fields,
        rollups: rollups,
        editConfigs: this.$getEditConfigs(fields, rollups), 
        positionInfo: positionInfo, 
        coord: coord,
        members: members,
        headings: headings
    };
};

DataProcessor.prototype.$mkCellDataBuilder = function(dataWarehouse, options) {
    var brokenQueryKeys = dataWarehouse.getBrokenQueryKeys(),
        me = this;

    return function(fields, rollups, members, positionInfo) {
        return me.getCellDataForInfo(positionInfo, dataWarehouse, fields, rollups, brokenQueryKeys, options);
    };
};

DataProcessor.prototype.getCellDataForInfo = function(positionInfo, dataWarehouse, fields, rollups, brokenQueryKeys, options) {
    var cellDataFactory = this.$getCellDataFactory(fields, rollups, brokenQueryKeys, options),
        cellData = cellDataFactory(positionInfo, dataWarehouse);

    if (cellData.someInvalid) {
        return {
            invalid: true,
            validityMessages: cellData.validityMessages
        };
    } else {
        return {
            invalid: false,
            queryResults: cellData.queryData,
            validityMessages: cellData.validityMessages
        };
    }
};

/**
 * @param {Immutable.List<mac.Field>} fields
 * @param {Immutable.List<mac.RollupConfig>} rollups
 * @param {String[]} brokenQueryKeys
 * @param {QueryDataOptions} options
 * @return {Function}
 */
DataProcessor.prototype.$getCellDataFactory = function(fields, rollups, brokenQueryKeys, options) {
    var key = this.$getKeyManager().makeFieldsRollupsKey(fields, rollups) + "$$" + brokenQueryKeys.length + stringifyQueryOptions(options), 
        factory = this.$cellDataFactoryCache.get(key);

    if (!factory) {
        factory = mkCellDataFactory(
            this.$getCellQueries(fields, rollups),
            this.$getEditConfigs(fields, rollups),
            brokenQueryKeys,
            options,
            this.$getKeyManager()
        );

        this.$cellDataFactoryCache.set(key, factory);
    }

    return factory;
};

/**
 * @typedef {Object} PositionInfo
 * @property {String} key
 * @property {Position} position
 *
 * @param {Field[]} fields
 * @param {String[]} members
 * @param {Number[]} [fieldMemberIndices]
 * @return {PositionInfo}
 */
DataProcessor.prototype.$calcPositionInfo = function(fields, members, fieldMemberIndices) {
    return this.$getPositionInfoCacheKeyFactoryForFields(fields, fieldMemberIndices)(members);
};

/**
 * @param {ConfigQueryType[]} queryTypes
 * @return {Immutable.List<MeasureQuery>}
 */
DataProcessor.prototype.generateUnmaskedQueries = function(queryTypes) {
    return this.$getQueryGenerator().generateUnmaskedQueriesFromConfig(this.$getMAConfig(), queryTypes)
        .filter(function(q) {
            return querygen.queryIsValid(q);
        });
};

/**
 * @typedef {Object} RequiredMaskedQuery
 * @property {MeasureQuery} query
 * @property {String} queryKey
 * @property {MetricInter[]} [editableMetricInters]
 * @property {PositionInfo[]} positionInfos
 *
 * @param {DataWarehouse} dataWarehouse
 * @param {ConfiguredRange} range
 * @return {RequiredMaskedQuery[]}
 */
DataProcessor.prototype.getRequiredMaskedQueries = function(dataWarehouse, configuredRange) {
    //warning! seenFieldsWithRollups intentionally uses a
    //non-immutable value.  We only use an Immutable map to benefit from being able to key off the 
    //pair of fields,rollups.
    var me = this,
        seenFieldsWithRollups = new Map(), 
        accumRequiredMaskedQueries = function(fields, rollups, members) {
            var key = me.$getKeyManager().makeFieldsRollupsKey(fields, rollups), 
                seen = seenFieldsWithRollups.get(key);

            if (!seen) {
                seen = {
                    fields: fields,
                    rollups: rollups,
                    seenPositionInfos: []
                };
                seenFieldsWithRollups.set(key, seen);
            }

            seen.seenPositionInfos.push(me.$calcPositionInfo(fields, members));
        },
        config = this.$getMAConfig(),
        headingData = dataWarehouse.getHeadingData(),
        range = configuredRangeToComputedRange(configuredRange, config, headingData), 
        requiredMaskedQueries = [];

    // can't load masked queries until all headings are done loading and a range
    // has been requested
    if (headingData.hasLoadingHeadings() || headingData.isLoadingSlice() || headingData.hasOnlyInvalidHeadings() || !range) {
        return requiredMaskedQueries;
    }

    data.iterateViewRange(config, headingData, range, accumRequiredMaskedQueries, true);

    seenFieldsWithRollups.forEach(function(seen) {
        var fields = seen.fields, 
            rollups = seen.rollups, 
            positionInfos = seen.seenPositionInfos, 
            positionInfo,
            cellQueries = me.$getCellQueries(fields, rollups),
            editConfigs = me.$getEditConfigs(fields, rollups), 
            queryNames = Object.keys(cellQueries),
            queryName,
            cellQuery,
            editConfig,
            requiredQuery,
            i = 0,
            j;

        for (; i < queryNames.length; i++) {
            queryName = queryNames[i];
            cellQuery = cellQueries[queryName];
            editConfig = editConfigs[queryName];
            requiredQuery = {
                query: cellQuery.query,
                queryKey: cellQuery.queryKey,
                positionInfos: []
            };
            
            if (querygen.queryIsValid(cellQuery.query)) {
                if (editConfig)
                    requiredQuery.editableMetricInters = editConfig.metricInters;
                
                for (j = 0; j < positionInfos.length; j++) {
                    positionInfo = positionInfos[j];
                    if (cellQuery.positionFn)
                        requiredQuery.positionInfos.push(cellQuery.positionFn(positionInfo.members));
                    else
                        requiredQuery.positionInfos.push(positionInfo);
                }
            }

            requiredMaskedQueries.push(requiredQuery);
        }
    });

    return requiredMaskedQueries;
};

DataProcessor.prototype.$getEditConfigs = function(fields, rollups) {
    var key = this.$getKeyManager().makeFieldsRollupsKey(fields, rollups),
        editConfigs = this.$editConfigCache.get(key);

    if (!editConfigs) {
        editConfigs = this.$generateIntersectionEditConfigs(fields, rollups, this.$getMAConfig().sliceConfigs);
        this.$editConfigCache.set(key, editConfigs);
    }
    return editConfigs;
};

/**
 * @typedef {Object<DataName, {query: {querygen.MeasureQuery}, queryKey: {String}, positionFn: {Function}}>} CellQueries
 */

/**
 * @param {Immutable.List<mac.Field>} fields
 * @param {Immutable.List<mac.RollupConfig>} rollups
 * @return {CellQueries}
 */
DataProcessor.prototype.$getCellQueries = function(fields, rollups) {
    var me = this,
        key = this.$getKeyManager().makeFieldsRollupsKey(fields, rollups), 
        queries = this.$cellQueryCache.get(key);

    if (!queries) {
        var config = this.$maConfig,
            innerFields = this.$getQueryGenerator().calcInnerFields(fields),
            interQueries = this.$getQueryGenerator().generateIntersectionQueries(fields, rollups, config.sliceConfigs, this.$includeFieldFilters),
            queryFormatters = this.$getQueryGenerator().calcQueryFormatters(fields),
            queryKeys;

        if (config.queryLevelFilterFlag) {
            interQueries['_passed_filter_'] = this.$getQueryGenerator().generateFilteredFlagQuery(fields, config.sliceConfigs);
            queryFormatters['_passed_filter_'] = {};
        }

        queryKeys = Object.keys(interQueries);

        queries = {};
        
        queryKeys.forEach(function(name) {
            var query = interQueries[name],
                missingLabels = [],
                matchingFields = [],
                matchingFieldIndices,
                matchingFieldCt,
                queryLabels,
                field,
                posInfoFn,
                label,
                i = 0;

            queries[name] = {
                query: query, 
                queryKey: me.$calcMeasureQueryCacheKey(query),
                formatter: queryFormatters[name]
            };
            
            if (!(query.validityMessages && query.validityMessages.length)) {
                queries[name].type = queryutil.getMeasureValueType(query.measure, me.$getModel());
                queryLabels = query.mappedInter.qualified_level.map(cubiql.qlevel.getLabel);
                //if any labels from the inner fields are not
                //in this query's mappedInter, make a position function that
                //takes the full position of a cell and returns the position relevant for this query
                for (; i < innerFields.size; i++) {
                    field = innerFields.get(i);
                    if (field instanceof mac.LevelField) {
                        label = field.level.labelName;
                        if (queryLabels.indexOf(label) > -1)
                            matchingFields.push(field);
                        else
                            missingLabels.push(label);
                    } else
                        matchingFields.push(field);
                }

                queries[name].resultDataMap = calcResultDataMap(innerFields, query);

                matchingFieldIndices = matchingFields.map(function(f) {
                   return fields.indexOf(f);
                }); 

                if (missingLabels.length) {
                    matchingFieldCt = matchingFieldIndices.length;
                    queryLabels = query.mappedInter.qualified_level.map(cubiql.qlevel.getLabel);
                    posInfoFn = me.$getPositionInfoCacheKeyFactoryForFields(new Immutable.List(matchingFields), matchingFieldIndices);
                    queries[name].positionFn = function(members) {
                        var i = 0,
                            newMembers = [];

                        for (; i < matchingFieldCt; i++) {
                            newMembers.push(members[matchingFieldIndices[i]]);
                        }

                        return posInfoFn(new Immutable.List(newMembers));
                    }; 
                }
            }
        });

        this.$cellQueryCache.set(key, queries);
    }

    return queries; 
};

function calcResultDataMap(innerFields, query) {
    var fieldQNames = innerFields.map(function(f) {
            if (f instanceof mac.LevelField) {
                return mac.levelToQName(f.level);
            }
        }),
        keyQNames = query.mappedInter.qualified_level.map(function(ql) {
            return mac.mqgLevelToQName(ql);
        }),
        usedKeyMaps = keyQNames.map(function(qName, i) {
            if (fieldQNames.indexOf(qName) > -1) {
                return {
                    qName: qName,
                    index: i
                };                
            }
        }).filter(lodash.identity),
        result = {
            usedKeyMaps: usedKeyMaps,
        };

    result.key = JSON.stringify(result);

    return result;
}

/**
 * @param {Immutable.List<Field>} fields
 * @param {Number[]} [fieldMemberIndices]
 * @return {Function}
 */
DataProcessor.prototype.$getPositionInfoCacheKeyFactoryForFields = function(fields, fieldMemberIndices) {
    var key = this.$getKeyManager().makeFieldsKey(fields) + JSON.stringify(fieldMemberIndices || "undefined"),
        factory = this.$positionInfoCacheKeyFactoryCache.get(key);

    if (!factory) {
        factory = this.$getPositionInfoFactory(fields, fieldMemberIndices);
        this.$positionInfoCacheKeyFactoryCache.set(key, factory);
    }

    return factory;
};

var POS_KEY_SEP = "$$";
/**
 * Returns a function that takes a Position and returns a stringifed key which is in a consistent order regardless
 * of the order of the input intersection, i.e. the PositionsCacheKeyFactory  for (Sku,Store) and (Store,Sku) should both
 * product the same key for the same position, despite the alternate ordering of the dimensions in the intersection.
 *
 * @param {Immutable.List<Field>} fields
 * @param {Number[]} [fieldMemberIndices]
 * @return {Function<Immutable.List<MemberId>>}
 */
DataProcessor.prototype.$getPositionInfoFactory = function(fields, fieldMemberIndices) {
    var inter = this.$getQueryGenerator().calcIntersectionFromFields(fields),
        sortedQNames = inter.qualified_level.map(function(ql) {
            return mac.mqgLevelToQName(ql);
        }),
        prefix,
        fieldIndices,
        len;

    //the goal here is to favor producing super simple functions over 
    //making nice code.  Hence all loop invariants are pulled out and the generated
    //functions (positionFns and the ultimate factory function) are meant to be as performant
    //as possible
    sortedQNames.sort();
    prefix = "[ " + JSON.stringify(sortedQNames) + " ]";
    fieldIndices = sortedQNames.map(function(qName) {
        var idx = fields.findIndex(function(f) {
            return f instanceof mac.LevelField &&
                mac.levelToQName(f.level) === qName;
        });
        assert(!lodash.isUndefined(idx), "Couldn't find index in fields for qname: ", qName);

        //provide the index to use in the member list
        if (fieldMemberIndices)
            return fieldMemberIndices[idx];
        else
            return idx;
    });
    len = fieldIndices.length; 

    return function(members) {
        var key = "",
            position = {},
            memberId,
            i = 0;

        for(; i < len; i++) {
            memberId = members[fieldIndices[i]];
            key += memberId + POS_KEY_SEP;
            position[sortedQNames[i]] = memberId;
        }

        return {
            key: key,
            position: position,
            members: members
        };
    };
};

DataProcessor.prototype.$calcMeasureQueryCacheKey = function(query) {
    return this.$getKeyManager().calcMeasureQueryCacheKey(query); 
};

DataProcessor.prototype.$getModel = function() {
    return this.$modelUtility.getModel();
};

/**
 * @return {QueryGenerator}
 */
DataProcessor.prototype.$getQueryGenerator = function() {
    return this.$queryGenerator;
};

DataProcessor.prototype.$getMAConfig = function() {
    return this.$maConfig;
};

DataProcessor.prototype.$getKeyManager = function() {
    return this.$keyManager;
};

/**
 * @typedef {Object} EditConfig
 * @param {DataConfig} dataConfig
 * @param {Boolean} editable
 * @param {MetricInter[]} metricInters
 * @param {mac.Measure} coreEditMeasure - simplified Measure representing the core of what will be modified.
 * @param {EditOptions} options
 *
 * @typedef {Object} EditOptions
 * @param {Boolean} customSpreadMethodAllowed
 * @param {PctParentEditConfig} pctParentConfig
 *
 * @typedef {Object} PctParentEditConfig
 * @property {LevelField} parentLevel 
 * @property {LevelField} childLevel 
 *
 *
 * @param {Immutable.List<mac.Field>} fieldList
 * @param {Immutable.List<mac.RollupConfig>} rollups
 * @param {Immutable.List<mac.SliceConfig>} sliceConfigs
 * @return {Object<DataName, EditConfigs>}
 */
DataProcessor.prototype.$generateIntersectionEditConfigs = function(fieldList, rollups, sliceConfigs) {
    var key = new Immutable.List([fieldList, rollups, sliceConfigs]).hashCode(),
        configs = this.$intersectionEditConfigs.get(key);

    if (!configs)
        this.$cacheIntersectionEditConfigs(key, fieldList, rollups, sliceConfigs);

    return this.$intersectionEditConfigs.get(key);
};

DataProcessor.prototype.$cacheIntersectionEditConfigs = function(key, fieldList, rollups, sliceConfigs) {
    var qg = this.$getQueryGenerator(),
        configs = {};

    qg.getDataConfigsForFields(fieldList).map(function(dataCfg) {
        configs[dataCfg.name] = this.$generateIntersectionEditConfig(dataCfg, fieldList, rollups, sliceConfigs);
    }, this);

    this.$intersectionEditConfigs = this.$intersectionEditConfigs.set(key, configs);
};

function findIndex(fields, ql) {
    return fields.findIndex(function(f) {
        if (f instanceof mac.LevelField && f.level) {
            return f.level.levelName === ql.level &&
                f.level.dimensionName === ql.dimension &&
                f.level.labelName === ql.label &&
                f.level.hierarchyName === ql.hierarchy;
        }
    });
}

function createPositionFn(posInfoFns, matchingFieldIndices) {
    assert(posInfoFns.length === matchingFieldIndices.length, "Must have a positionInfoFn per metric intersection.");
    
    var posInfoCt = posInfoFns.length;
    
    return function(membersList) {
        if (matchingFieldIndices.length !== membersList.length) {
            throw new Error("Expected a list of " + matchingFieldIndices.length + " member lists, got " + membersList.length);
        }
    
        var i = 0,
            j = 0,
            newMembers,
            matchingFieldCt,
            posInfos = [];

        for (; i < posInfoCt; i++) {
            newMembers = [];
            matchingFieldCt = matchingFieldIndices[i].length;
            for (; j < matchingFieldCt; j++) {
                newMembers.push(membersList[i][matchingFieldIndices[i][j]]);
            }
            posInfos.push(posInfoFns[i](newMembers));
        }

        return posInfos;
    };
}

DataProcessor.prototype.$generateIntersectionEditConfig = function(dataCfg, fieldList, rollups, sliceConfigs) {
    var qg = this.$getQueryGenerator(),
        editOptions = qg.calcEditOptionsForDataCfg(dataCfg, fieldList, rollups, sliceConfigs),
        coreEditMeasure = qg.calcCoreEditMeasure(dataCfg, editOptions),
        spreadMethodLookup = qgutil.getSpreadMethodLookup(coreEditMeasure, this.$measureModel),
        metricInters = qg.calcEditMetricIntersForMeasure(coreEditMeasure, editOptions),
        matchingFieldIndices = [],
        posInfoFns = [];
        
    metricInters.forEach(function(mi) {
        var filteredFields = [],
            fieldIndices = [];

        mi.inter.qualified_level.forEach(function(ql) {
            var fieldIdx = findIndex(fieldList, ql);
            if (fieldIdx >= 0) {
                filteredFields.push(fieldList[fieldIdx]);
                fieldIndices.push(fieldIdx);
            }
        });

        posInfoFns.push(this.$getPositionInfoCacheKeyFactoryForFields(filteredFields, fieldIndices));
        matchingFieldIndices.push(fieldIndices);
    }, this);

    return {
        dataConfig: dataCfg,
        //store the query that would query the value for this data config, mainly used for bookkeeping when handling edits in transition
        dataConfigQuery: qg.generateIntersectionQueryForDataConfig(dataCfg, fieldList, rollups, sliceConfigs),
        coreEditMeasure: coreEditMeasure,
        // no metric inters means the intersection is not editable, most likely due to 
        // a dimension split
        editable: !editOptions.readonly && !!spreadMethodLookup && metricInters.length > 0,
        formatter: qg.calcFormatterForDataCfg(dataCfg, fieldList),
        metricInters: metricInters,
        metricInterKeys: metricInters.map(function(metricInter) {
            return queryutil.stringifyMetricIntersection(metricInter, true);
        }),
        editOptions: editOptions,
        positionFn: createPositionFn(posInfoFns, matchingFieldIndices)
    };
};

function mkQueryValueFactory(cellQuery) {
    var resultDataMap = cellQuery.resultDataMap,
        queryKey = cellQuery.queryKey,
        query = cellQuery.query,
        formatter = cellQuery.formatter;

    return function(positionInfo, dataWarehouse) {
        var val = dataWarehouse.getQueryPositionValue(query, formatter, queryKey, positionInfo, resultDataMap);
        return val;
    };
}

function mkQueryOutstandingFactory(queryKey) {
    return function(positionInfo, dataWarehouse) {
        return dataWarehouse.getQueryDataBox().hasQueryPositionOutstandingByKey(queryKey, positionInfo);
    };
}

function mkLockStatusFactory(editKey) {
    if (editKey)
        return function(positionInfo, dataWarehouse) {
            return dataWarehouse.getEditDataBox().hasEditLockedAtPosition(editKey, positionInfo);
        };
    else //if no edit key, it's never locked
        return function() { return false; };
}

function mkProtectedStatusFactory(editKey, metricInterKeys) {
    if (!editKey) //if no edit key, it's never protected
        return function() { return false; };

    var metricInterLen = metricInterKeys.length;

    return function(positionInfo, dataWarehouse) {
        var i = 0, 
            editability,
            isProtected = false,
            editDataBox = dataWarehouse.getEditDataBox(),
            currentEditStateKey = editDataBox.getCurrentEditStateKey(); 

        for (; i < metricInterLen; i++) {
            editability = editDataBox.getEditabilityByKeys(currentEditStateKey, metricInterKeys[i]);
            //you're protected if any of the metric intersections you need to edit are not editable
            isProtected = isProtected || (editability && !editability.isEditable);

            if (isProtected)
                break;
        }

        return isProtected;
    };
}

function mkSaveOutstandingFactory(editKey) {
    if (editKey)
        return function(positionInfo, dataWarehouse) {
            return dataWarehouse.getOutstandingSaveByKeys(editKey, positionInfo);
        };
    else //if no edit key, it's never got a save outstanding
        return function() { return; };
}

function mkPendingEditFactory(editKey) {
    if (editKey)
        return function(positionInfo, dataWarehouse) {
            return dataWarehouse.getPendingEditByKeys(editKey, positionInfo);
        };
    else //if no edit key, it's never got a pending edit 
        return function() { return; };
}

/**
 * @typedef {Object} QueryDataOptions
 * @property {AttributeOptions} attributeOptions
 *
 * @typedef {Object} AttributeOptions
 * @property {Boolean} includeValue
 * @property {Boolean} includeEdit
 * @property {Boolean} includeSaving
 * @property {Boolean} includeLockStatus
 * @property {Boolean} includeProtectedStatus
 * @property {Boolean} includeOutstandingQueryStatus
 *
 * Key information needed to identify a particular query of a cell
 * @typedef {Object} QueryCellKeys
 * @property {String} queryKey
 * @property {String} editKey
 * @property {String[]} metricInterKeys
 */

/**
 * @param {CellQuery} cellQuery
 * @param {EditConfig} editConfig
 * @param {QueryDataOptions} options
 * @param {KeyManager} keyManager
 * @return {Function}
 */
function mkQueryCellDataFactory(cellQuery, editConfig, options, keyManager) {
    var dataFactories = getFactoriesForOptions(cellQuery, editConfig, options, keyManager),
        len = dataFactories.length;
        
    return function(positionInfo, data) {
        var i = 0;
        var queryCellData = {};
        for (; i < len; i++) {
            dataFactories[i](queryCellData, data, positionInfo);
        }

        return queryCellData;
    };
}

function mkQueryCellMutator(attrName, factoryFn) {
    return function(queryCellData, data, positionInfo) {
        queryCellData[attrName] = factoryFn(positionInfo, data);
    };
}

/**
 * @param {CellQuery} cellQuery
 * @param {EditConfig} editConfig
 * @param {QueryDataOptions} options
 * @param {KeyManager} keyManager
 * @return {Function[]}
 */
function getFactoriesForOptions(cellQuery, editConfig, options, keyManager) {
    var attrOptions = options.attributeOptions,
        dataFactories = [],
        queryKey = cellQuery.queryKey,
        editKey = editConfig && keyManager.calcEditConfigKey(editConfig), 
        metricInterKeys = editConfig && editConfig.metricInterKeys;

    if (attrOptions.includeValue) {
        dataFactories.push(mkQueryCellMutator("value", mkQueryValueFactory(cellQuery, keyManager)));
    }

    if (attrOptions.includeEdit) {
        assert(editKey, "Need edit key to make a factory for edit");
        dataFactories.push(mkQueryCellMutator("edit", mkPendingEditFactory(editKey, keyManager)));
    }

    if (attrOptions.includeSaving) {
        assert(editKey, "Need edit key to make a factory for save");
        dataFactories.push(mkQueryCellMutator("outstandingSave", mkSaveOutstandingFactory(editKey, keyManager)));
    }

    if (attrOptions.includeLockStatus) {
        assert(editKey, "Need edit key to make a factory for lock status");
        dataFactories.push(mkQueryCellMutator("locked", mkLockStatusFactory(editKey)));
    }

    if (attrOptions.includeProtectedStatus) {
        assert(editKey, "Need edit key to make a factory for protected status");
        assert(metricInterKeys, "Need metric inter keys to make a factory for protected status");
        dataFactories.push(mkQueryCellMutator("protected", mkProtectedStatusFactory(editKey, metricInterKeys, keyManager)));
    }

    if (attrOptions.includeOutstandingQueryStatus) {
        dataFactories.push(mkQueryCellMutator("queryOutstanding", mkQueryOutstandingFactory(queryKey, keyManager)));
    }

    return dataFactories;
}

function mkCellDataFactory(cellQueries, editConfigs, brokenQueryKeys, options, keyManager) {
    editConfigs = editConfigs || {};
    
    var queryNames = Object.keys(cellQueries),
        allQueriesValid = queryNames.every(function(queryName) {
            var queryObj = cellQueries[queryName];

            return querygen.queryIsValid(queryObj.query) && !queryIsBrokenByKey(queryObj.queryKey, brokenQueryKeys);
        }),
        validityMessages = lodash.uniq(queryNames.reduce(function(messages, queryName) {
            var queryObj = cellQueries[queryName],
                query = queryObj.query,
                i = 0;
                
            if (query.validityMessages && query.validityMessages.length) {
                for (;i < query.validityMessages.length; i++) {
                    messages.push(query.validityMessages[i]);
                }
            }

            return messages; 
        }, [])),
        queryDataFns,
        queryDataFnLen,
        queryPositionFns;

    if (allQueriesValid) {
        queryDataFns = queryNames.map(function(name) {
            var cellQuery = cellQueries[name],
                editConfig = editConfigs[name],
                queryOptions = lodash.cloneDeep(options);
            
            if (!editConfig) {
                queryOptions.attributeOptions.includeEdit = false;
                queryOptions.attributeOptions.includeSaving = false;
                queryOptions.attributeOptions.includeLockStatus = false;
                queryOptions.attributeOptions.includeProtectedStatus = false;
            }    

            return mkQueryCellDataFactory(cellQuery, editConfig, queryOptions, keyManager);
        });
        queryDataFnLen = queryDataFns.length;
        queryPositionFns = queryNames.map(function(queryName) {
            return cellQueries[queryName].positionFn;
        });

        return function(positionInfo, data) {
            var i = 0,
                queryData = {},
                dataObj = {
                    queryData: queryData,
                    validityMessages: validityMessages,
                    someInvalid: false 
                },
                positionFn;
            
            //loop through calling the queryDataFns to accumulate the right data on the object
            for (; i < queryDataFnLen; i++) {
                positionFn = queryPositionFns[i];
                if (positionFn)
                    queryData[queryNames[i]] = queryDataFns[i](positionFn(positionInfo.members), data);
                else
                    queryData[queryNames[i]] = queryDataFns[i](positionInfo, data);
            }

            return dataObj;
        };
    } else {
        return mkInvalidCellDataFactory(validityMessages);
    }
}

function mkInvalidCellDataFactory(validityMessages) {
    //if invalid, every cell has the same data
    var cellData = {
        queryData: {},
        validityMessages: validityMessages,
        someInvalid: true 
    };

    return function() {
        return cellData;
    };
}

function queryIsBrokenByKey(queryKey, brokenQueryKeys) {
    return brokenQueryKeys.indexOf(queryKey) > -1;
}

function configuredRangeToComputedRange(configuredRange, config, headingData) {
    var orderedAxes = mac.getOrderedAxes(config),
        viewRange = new Immutable.Map();

    if (!configuredRange || !headingData) return;

    orderedAxes.forEach(function(axisName) {
        var configured = configuredRange[axisName] || {},
            axisRange = new AxisRange({
                start: configured.start || 0
            }),
            axisInfo = headingData.getHeadingAxisInfo(axisName);

        if (lodash.isUndefined(configured.length) || configured.length > axisInfo.getLength()) {
            axisRange = axisRange.set("length", axisInfo.getLength());
        } else {
            axisRange = axisRange.set("length", configured.length);
        }

        viewRange = viewRange.set(axisName, axisRange);
    });
        
    return viewRange;
}

},{"../cubiql":211,"../headinggen":228,"../multiaxisconfig":253,"../multiaxisheading":254,"../querygen/query":258,"../querygen/util":260,"./data":241,"./keymanager":245,"./modelutility":246,"./querygen":248,"./queryutil":249,"assert":undefined,"immutable":44,"lodash":90}],244:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var assert = require("assert");
var queryresults = require("../querygen/results");
var mac = require("../multiaxisconfig");
var cubiql = require("../cubiql");

var e = module.exports;

/**
 * A LockSet is an edit configuration (effectively a metric + intersection) plus 
 * a list of positions for that edit configuration that are locked.
 * 
 * @typedef {Object} LockSet
 *
 * @property {EditConfig} editConfig
 * @property {String[][]} members
 */

e.EditDataBox = EditDataBox;
function EditDataBox(keyManager, lockStorage) {
    //Map<CacheKey, IncomingEdit>
    this.$pendingEdits = new Map();
    
    //Map<CacheKey, IncomingEdit>
    this.$editSaveOutstanding = new Map(); 

    //Map<CacheKey, Boolean>
    this.$editabilityDirty = new Map();

    this.$editabilityRequired = new Map();

    this.$editabilityCache = new Map();

    this.$keyManager = keyManager;

    this.$lockStorage = lockStorage;

    //MetricInter[]
    this.$cachedEditState = undefined;

    //IncomingEdit[][], array of the batches of edits in the queue. Lower indices indicate earlier position in queue
    this.$committedEditsQueue = [];
}

EditDataBox.prototype.getKeyManager = function() {
    return this.$keyManager;
};

//// Edit Queue ////

EditDataBox.prototype.getEditQueue = function() {
    return this.$committedEditsQueue;
};

EditDataBox.prototype.pushEditsOntoQueue = function(edits) {
    return this.getEditQueue().push(edits);
};

EditDataBox.prototype.popEditQueue = function() {
    this.$committedEditsQueue.shift();
};

EditDataBox.prototype.clearEditQueue = function() {
    this.$committedEditsQueue = [];
};

//// Edit Queue ////

EditDataBox.prototype.$calcEditPosKeyFromEdit = function(edit) {
    var km = this.getKeyManager();
    return km.calcEditPositionKeyFromKeys(km.calcEditConfigKey(edit.editConfig), edit.positionInfo.key);
};

EditDataBox.prototype.storePendingEdits = function(edits) {
    var me = this,
        km = this.getKeyManager();

    edits.forEach(function(edit) {
        var editConfig = edit.editConfig,
            editKey = km.calcEditConfigKey(editConfig),
            positionKey = edit.positionInfo.key,
            editPosKey = km.calcEditPositionKeyFromKeys(editKey, positionKey),
            editPayload = edit.edit,
            existingEdit;

        if (editPayload.isDelete && lodash.isUndefined(editPayload.data)) {
            // the cell was initially empty and now is being deleted.
            // no edit/delete should be stored, to avoid sending an invalid value such as NaN = parseFloat(undefined).
            existingEdit = me.getPendingEditByKeys(editKey, edit.positionInfo);

            if (existingEdit && !existingEdit.edit.isDelete) {
                // but the cell has a deferred edit, so drop the edit so the cell remains empty
                me.removePendingEditByKey(editPosKey);
            } else {
                // the cell hasn't been edited, so do nothing (don't add an edit)
            }
        } else {
            assert(!lodash.isUndefined(editPayload.data));
            editPayload.formattedValue = (editConfig.formatter && editConfig.formatter.format(editPayload.data)) || editPayload.data;
            me.addPendingEdit(edit, editPosKey);
        }
    });
};

EditDataBox.prototype.removePendingEdits = function(edits) {
    if (!edits) {
        this.$pendingEdits = new Map();
    } else {
        edits.forEach(this.removeEdit.bind(this));
    }
};

/**
 * @param {EditKey}
 * @param {PositionInfo}
 * @return {IncomingEdit}
 */
EditDataBox.prototype.getPendingEditByKeys = function(editKey, positionInfo) {
    return this.$pendingEdits.get(this.getKeyManager().calcEditPositionKeyFromKeys(editKey, positionInfo.key));
};

EditDataBox.prototype.addPendingEdit = function(edit, editPosKey) {
    this.$dirtyEditState();
    return this.$pendingEdits.set(editPosKey, edit);
};

EditDataBox.prototype.removePendingEditByKey = function(editPosKey) {
    this.$dirtyEditState();
    this.$pendingEdits.delete(editPosKey);
};

EditDataBox.prototype.removeEdit = function(edit) {
    var editPosKey = this.$calcEditPosKeyFromEdit(edit); 

    this.removePendingEditByKey(editPosKey);
};


/**
 * @return {IncomingEdit[]}
 */
EditDataBox.prototype.getAllPendingEdits = function() {
    return Array.from(this.$pendingEdits.values());
};

EditDataBox.prototype.markOutstandingSaveByKey = function(editPosKey, edit) {
    this.$editSaveOutstanding.set(editPosKey, edit);
};

EditDataBox.prototype.markOutstandingSave = function(edit) {
    var editPosKey = this.$calcEditPosKeyFromEdit(edit); 

    this.markOutstandingSaveByKey(editPosKey, edit);
};

EditDataBox.prototype.unmarkOutstandingSave = function(edit) {
    var editPosKey = this.$calcEditPosKeyFromEdit(edit); 

    this.unmarkOutstandingSaveByKey(editPosKey);
};

EditDataBox.prototype.unmarkOutstandingSaveByKey = function(editPosKey) {
    this.$editSaveOutstanding.delete(editPosKey);
};

EditDataBox.prototype.getOutstandingSaveByKeys = function(editKey, positionInfo) {
    var km = this.getKeyManager();
    return this.$editSaveOutstanding.get(km.calcEditPositionKeyFromKeys(editKey, positionInfo.key));
};

EditDataBox.prototype.markEditsForCommit = function(edits) {
    var me = this;

    if (edits.length === 0) {
        // don't do anything for the empty set of edits.
        // this avoids a deadlock situation where [] is enqueued in $editQueue,
        // e.g., because the single edit is a delete on an empty position,
        // and ModelerView.sendOutstandingDataRequests doesn't dequeue them.
        return;
    }

    this.pushEditsOntoQueue(edits);

    edits.forEach(function(edit) {
        //remove the pending edit
        me.removeEdit(edit);
        //mark it as save outstanding
        me.markOutstandingSave(edit);
    });
};

/**
 * When a set of edits succeed, process them, and also return back a ResultTable
 * for each query that was edited that represents the expected modifications to the data
 *
 * @param {IncomingEdit[]} edits
 * @return {Map<QueryKey, {query: {MeasureQuery}, resultTable: {ResultTable}}>}
 */
EditDataBox.prototype.onEditsSucceeded = function(edits) {
        //Map<QueryKey, {query: {MeasureQuery}, resultTable: {ResultTable}, positionInfos: {PositionInfo[]}}>
    var queryUpdateResultTables = new Map(),
        km = this.getKeyManager(),
        rowMaps = new Map(),
        me = this;

    edits.forEach(function(edit) {
        //TODO use pre-computed query/pos keys for perf
        var editConfig = edit.editConfig,
            editPayload = edit.edit,
            positionInfo = edit.positionInfo,
            query = editConfig.dataConfigQuery,
            queryKey = km.calcMeasureQueryCacheKey(query),
            //TODO when some mystical day in the future we have the default values for metrics loaded up,
            //     we should probably use that instead of undefined for deletes on default-valued metrics
            data = editPayload.isDelete ? undefined : editPayload.data,
            queryResult,
            row,
            rowMap;

        if (!rowMaps.has(queryKey))
            rowMaps.set(queryKey, new Map());

        if (!queryUpdateResultTables.has(queryKey))
            queryUpdateResultTables.set(queryKey, {
                query: query,
                positionInfos: [],
                resultTable: queryresults.createResultTableForQuery(query, [])
            });

        queryResult = queryUpdateResultTables.get(queryKey);
        queryResult.positionInfos.push(positionInfo);
        row = mkDataRow(query, edit.positionInfo, data);
        rowMap = rowMaps.get(queryKey);
        rowMap.set(row.key, row.data);

        me.unmarkOutstandingSave(edit);
    });

    rowMaps.forEach(function(rowMap, key) {
        queryUpdateResultTables.get(key).resultTable.dataTable = Array.from(rowMap.values());
    });



    //remove from the front of the queue
    this.popEditQueue();

    return queryUpdateResultTables;
};

function mkDataRow(query, positionInfo, data) { 
    var position = positionInfo.position,
        rowData = [],
        key = "",
        levelId,
        i = 0,
        qls = query.mappedInter.qualified_level,
        len = qls.length;

    for (; i < len; i++) {
        levelId = position[mac.mqgLevelToQName(qls[i])];
        if (lodash.isUndefined(levelId))
            assert(false, "can't make data row, position: " + positionInfo.key + " is too small for query: " + JSON.stringify(query));
        rowData.push(levelId);
        key += i + "_" + levelId + "__";
    }

    return {key: key, data: rowData.concat(data)};
}

EditDataBox.prototype.onEditsFailed = function(edits) {
    var me = this;
    // The saving edits for these failed edits need to be removed
    edits.forEach(function(edit) {
        me.unmarkOutstandingSave(edit);
    });

    // and we need to fix up the queue.  the behavior is to clear ALL edits in the queue (including subsequent edits)
    this.clearEditQueue();
};

// Editability

EditDataBox.prototype.isEditabilityDirtyByKey = function(key) {
    return this.$editabilityDirty.get(key) === true;
};

EditDataBox.prototype.markAllEditabilityDirty = function() {
    this.$editabilityCache.forEach(function(_,key) {
        this.$editabilityCache.set(key,true);
    }, this);
};

EditDataBox.prototype.markEditabilityRequiredByKey = function(cacheKey, metricInter) {
    this.$editabilityRequired.set(cacheKey, metricInter);
};

EditDataBox.prototype.markEditabilityRequired = function(metricInter) {
    var km = this.getKeyManager(),
        cacheKey = km.calcMetricInterKey(metricInter);

    this.markEditabilityRequiredByKey(cacheKey, metricInter);
};

EditDataBox.prototype.unmarkEditabilityRequiredByKey = function(cacheKey) {
    this.$editabilityRequired.delete(cacheKey);
};

EditDataBox.prototype.unmarkEditabilityRequired = function(metricInter) {
    var km = this.getKeyManager(),
        cacheKey = km.calcMetricInterKey(metricInter);

    this.unmarkEditabilityRequiredByKey(cacheKey);
};

EditDataBox.prototype.getOutstandingEditabilityNeeds = function() {
    var editState = this.getCurrentEditState(),
        editStateKey = this.getCurrentEditStateKey(),
        cacheKey,
        cachedValue,
        outstanding = [];

    this.$editabilityRequired.forEach(function(_, metricInterKey) {
        cacheKey = this.getKeyManager().calcEditabilityCacheKeyFromKeys(editStateKey, metricInterKey);        
        cachedValue = this.$editabilityCache.get(cacheKey);
        
        if (lodash.isUndefined(cachedValue) || this.isEditabilityDirtyByKey(cacheKey)) {
            outstanding.push(this.$editabilityRequired.get(metricInterKey));
        }
    }, this);

    return {
        editState: editState,
        metricInters: outstanding
    };    
};

EditDataBox.prototype.destroy = function() {
    this.$lockStorage.destroy();
    this.$lockStorage = null;
};

EditDataBox.prototype.$dirtyEditState = function() {
    delete this.$cachedEditState;
};

/**
 * Calculate editable metric/intersections from edited metric/positions.
 *
 * @return {EditabilityState}
 */
EditDataBox.prototype.getCurrentEditState = function () {
    if (this.$cachedEditState)
        return this.$cachedEditState;
        
    var edited = {},
        lockStorage = this.getLockData(),
        accumMetricInters = function(edit) {
            var metricInters = edit.editConfig.metricInters,
                metricInterKeys = edit.editConfig.metricInterKeys,
                key,
                len = metricInters.length,
                i = 0;

            for (; i < len; i++) {
                key = metricInterKeys[i];
                if (!edited[key])
                    edited[key] = metricInters[i];
            }
        },
        editState;

    this.getAllPendingEdits().forEach(accumMetricInters);
    lockStorage && lodash.values(lockStorage).forEach(accumMetricInters);

    this.$cachedEditState = editState = lodash.values(edited);
    return editState;
};

EditDataBox.prototype.getCurrentEditStateKey = function() {
    return this.getKeyManager().calcEditabilityStateKey(this.getCurrentEditState());
};

EditDataBox.prototype.storeEditability = function(editState, metricInter, isEditable) {
    var km = this.getKeyManager(),
        cacheKey = km.calcEditabilityCacheKeyFromKeys(km.calcEditabilityStateKey(editState), km.calcMetricInterKey(metricInter));
    
    this.$editabilityCache.set(cacheKey, {
        editState: editState,
        metricInter: metricInter,
        isEditable: isEditable
    });
    this.unmarkEditabilityRequiredByKey(cacheKey);
};

EditDataBox.prototype.getEditabilityByKeys = function(editStateKey, metricInterKey) {
    var cacheKey = this.getKeyManager().calcEditabilityCacheKeyFromKeys(editStateKey, metricInterKey);
    return this.$editabilityCache.get(cacheKey);
};

// Locking
EditDataBox.prototype.getLockData = function() {
    return this.$lockStorage.value;
};

EditDataBox.prototype.setLockData = function(lockData) {
    this.$dirtyEditState();
    
    this.$lockStorage.value = lockData;
};

EditDataBox.prototype.hasEditLockedAtPosition = function(editKey, positionInfo) {
    var lockData = this.getLockData(), 
        editLock = lockData && lockData[editKey];

    return editLock && editLock.positions[positionInfo.key];
};

/**
 * Marks the given lock sets as locked
 * 
 * @param  {LockSet[]} locks - a list of lock sets to set
 */
EditDataBox.prototype.setLocks = function(locks) {
    assert(!!locks, ["locks should be specified"]);

    var lockData = this.getLockData(), 
        km = this.getKeyManager(),
        newLockData = {},
        lock,
        lockKey,
        lockCt = locks.length,
        positionKey,
        positionInfo,
        positions,
        i = 0;

    for (; i < lockCt; i++) {
        lock = locks[i];
        lockKey = km.calcEditConfigKey(lock.editConfig);

        if (!newLockData[lockKey]) {
            newLockData[lockKey] = {
                editConfig: lock.editConfig,
                positions: {}
            };
        }
        for (var j=0; j < lock.positions.length; j++) {
            positionInfo = lock.positions[j];
            newLockData[lockKey].positions[positionInfo.key] = positionInfo;
        }
    }

    for (lockKey in lockData) {
        if (!newLockData[lockKey]) {
            newLockData[lockKey] = lockData[lockKey];
        } else {
            positions = lockData[lockKey].positions;
            for (positionKey in positions) {
                newLockData[lockKey].positions[positionKey] = positions[positionKey];
            }
        }
    }

    this.setLockData(newLockData);
};

/**
 * Marks the given lock sets as unlocked.
 * 
 * @param  {LockSet} locks
 */
EditDataBox.prototype.unsetLocks = function(locks) {
    assert(!!locks, ["locks should be specified"]);

    var lockData = this.getLockData(),
        km = this.getKeyManager(),
        i = 0,
        j = 0,
        lockCt = locks.length,
        positionCt,
        lock,
        lockKey;

    if (!lockData || !Object.keys(lockData).length) {
        return;
    }

    for (; i < lockCt; i++) {
        lock = locks[i];
        lockKey = km.calcEditConfigKey(lock.editConfig);
        if (lockData[lockKey]) {
            positionCt = lock.positions.length;
            for (j = 0; j < positionCt; j++) {
                delete lockData[lockKey].positions[lock.positions[j].key];
            }
            if (Object.keys(lockData[lockKey].positions).length === 0) {
                delete lockData[lockKey];
            }
        }
    }

    this.setLockData(lockData);
};

EditDataBox.prototype.clearAllLocks = function() {
    this.setLockData(null);
};

EditDataBox.prototype.hasLocks = function() {
    var lockData = this.getLockData();
    
    return lockData && Object.keys(lockData).length > 0; 
};

/**
 * Returns a list of all locks sets.
 * 
 * @return {LockSet[]}
 */
EditDataBox.prototype.getLocks = function() {
    if (!this.hasLocks()) {
        return [];
    }

    return lodash.map(this.getLockData(), function(lockInfo) {
        return {
            editConfig: lockInfo.editConfig,
            positions: lodash.values(lockInfo.positions)
        };
    });
};

},{"../cubiql":211,"../multiaxisconfig":253,"../querygen/results":259,"assert":undefined,"lodash":90}],245:[function(require,module,exports){
"use strict";

var queryutil = require("../querygen/util");

module.exports = KeyManager;
function KeyManager() {
}

KeyManager.prototype.calcMeasureQueryCacheKey = function(query) {
    if (!query.$queryKey) {
        query.$queryKey = queryutil.stringifyMeasureQuery(query);
    }
    return query.$queryKey; 
};

KeyManager.prototype.calcMeasureQueryPositionCacheKeyWithKeys = function(queryKey, positionKey) {
    return queryKey + "|" + positionKey;
};

KeyManager.prototype.calcEditabilityCacheKeyFromKeys = function(editStateKey, metricInterKey) {
    return "edited=" + editStateKey + "|checked=" + metricInterKey;
};

KeyManager.prototype.calcEditPositionKeyFromKeys = function(editKey, positionKey) {
    return editKey + "|" + positionKey;
};

KeyManager.prototype.calcEditConfigKey = function(editConfig) {
    return editConfig.coreEditMeasure.toString() + JSON.stringify(editConfig.editOptions); //TODO wasteful, should be faster and cached
};

KeyManager.prototype.calcEditabilityStateKey = function(editState) {
    var interKeys = [],
        i = 0;

    for (; i < editState.length; i++)
        interKeys.push(this.calcMetricInterKey(editState[i]));

    interKeys.sort();
    return interKeys.join(":");
};

KeyManager.prototype.calcViewTaskKey = function(viewId, taskName) {
    return viewId + "|" + taskName;
};

KeyManager.prototype.calcMetricInterKey = function(metricInter) {
    return queryutil.stringifyMetricIntersection(metricInter, true);
};

/**
 * @param {Field[]} fields
 * @return {String}
 */
KeyManager.prototype.makeFieldsKey = function(fields) {
    //since a DataProcessor only ever has one, unchanging, MAConfig, we
    //can use a key of just the field ids and rollup content for efficiency's sake (field ids
    //are unique within an MAConfig but not universally unique)
    
    var i = 0,
        flen = fields.length,
        key = '';

    for (; i < flen; i++) {
        key += fields[i].id + '_';
    }

    return key;
};

/**
 * @param {Field[]} fields
 * @param {RollupConfig[]} rollups
 * @return {String}
 */
KeyManager.prototype.makeFieldsRollupsKey = function(fields, rollups) {
    var i = 0,
        rlen = rollups.len,
        rollup,
        key = this.makeFieldsKey(fields) + "_rollups_";

    for (i=0; i < rlen; i++) {
        rollup = rollups[i];
        key += (rollup ? rollup.toString() : "undefined") + '_';
    }

    return key;
};


/**
 * @param {Field[]} fields
 * @param {RollupConfig[]} rollups
 * @param {Immutable.List<SliceConfigs>} sliceConfigs
 * @return {String}
 */
KeyManager.prototype.makeFieldsRollupsSliceKey = function(fields, rollups, sliceConfigs) {
    var subkey = this.makeFieldsRollupsKey(fields, rollups),
        i = 0,
        slen = sliceConfigs.size,
        key = subkey + "_slices_";

    //since a DataProcessor only ever has one, unchanging, MAConfig, we
    //can simply store the configured field ids associated with the slice configs
    //since if the sliceConfig changes it will mean a new data processor

    for (; i < slen; i++) {
        key += sliceConfigs.get(i).sourceField.id + "_";
    }

    return key;
};

},{"../querygen/util":260}],246:[function(require,module,exports){
/* global Promise */
"use strict";

var mac = require("../multiaxisconfig");
var KeyManager = require("./keymanager");
var MQG = require("measure-query-gen/src/MQG");
var lodash = require("lodash");

function ModelUtility(measureModel) {
    this.$measureModel = measureModel;
    this.$keyManager = new KeyManager();

    this.$innerFieldCache = new Map();
    this.$intersectionCache = new Map();
};
module.exports = ModelUtility;

ModelUtility.prototype.getModel = function() {
    return this.$measureModel;
};

ModelUtility.prototype.getKeyManager = function() {
    return this.$keyManager;
};

/**
 * @param {Field[]} fields
 * @return {Field[]}
 */
ModelUtility.prototype.calcInnerFields = function(fields) {
    var key = this.getKeyManager().makeFieldsKey(fields),
        innerFields = this.$innerFieldCache.get(key);

    if (!innerFields) {
        innerFields = calcInnerFields(fields, this.$measureModel);
        this.$innerFieldCache.set(key, innerFields);
    }

    return innerFields;
};

/**
 * @param {Field[]} fields
 * @param {MeasureModel} measureModel
 * @return {Field[]}
 */
function calcInnerFields(fields, measureModel) {
    //only level fields can be redundant
    var levelFields = fields.filter(function(f) {
            return f instanceof mac.LevelField;
        }),
        groupedFields = lodash.groupBy(levelFields, function(f) {
            return f.level.labelName;
        }),
        levelCompareFn = mac.compareLevelFields.bind(null, measureModel),
        innerLevelFields = lodash.values(lodash.mapValues(groupedFields, function(fields) {
            fields = fields.slice(); //copy so we can mutate
            fields.sort(levelCompareFn);
            //return first one
            return fields[0];
        }));

    //now we filter the original list to drop non-inner level fields..
    //we use the original input field list to retain the same ordering
    return lodash.uniq(fields.filter(function(f) {
        return !(f instanceof mac.LevelField) ||
            innerLevelFields.indexOf(f) > -1;
    }));
}

/**
 * @param {Field[]} fields
 * @return {MQG.Intersection}
 */
ModelUtility.prototype.calcIntersectionFromFields = function(fields) {
    var key = this.getKeyManager().makeFieldsKey(fields),
        inter = this.$intersectionCache.get(key);

        if (!inter) {
        var innerFields = this.calcInnerFields(fields),
            levelFields = innerFields.filter(function(f) {
                return f instanceof mac.LevelField;
            });

        inter = new MQG.Intersection(levelFields.map(function(f) {
            return mac.levelToQualifiedLevel(f.level);
        }));
        this.$intersectionCache.set(key, inter);
    }

    return inter;
};

},{"../multiaxisconfig":253,"./keymanager":245,"lodash":90,"measure-query-gen/src/MQG":1}],247:[function(require,module,exports){
"use strict";

var BinarySearcher = require("./binary_pos_search");
var data = require("./data");

/**
 * @typedef {Object} CachedData
 * @property {ResultTable} resultTable
 * @property {Boolean} dirty
 * @property {Number} saved
 */

/**
 * Creates a CachedData record from the given params
 *  
 * @param {ResultTable} resultTable the cached result table
 * @param {Boolean} [dirty] whether or not the data is dirty (undefined/false means clean)
 * @param {Number} [saved] last saved time
 * @returns {CachedData}
 */
function mkCachedData(resultTable, dirty, saved) {
    return { 
        resultTable: resultTable,
        dirty: dirty,
        saved: saved
    };
} 

function DataBox() {
    this.$initialize();
}

DataBox.prototype.$initialize = function() {
    //Map<QueryKey, ResultTable>
    this.$unmaskedQueryCache = new Map();

    //Map<QueryKey, Boolean>
    this.$unmaskedQueryIsDirty = new Map();
    
    //Map<QueryKey, Map<PositionKey, CachedData>>
    this.$maskedQueryCache = new Map();

    //Map<QueryKey, PositionSearcher>
    this.$positionSearcherCache = new Map();

    //Map<QueryKey, Map<mac.Intersection, PositionSearcher>>
    this.$querySearcherCache = new Map();

    this.initializeRequiredQueries();

    //Map<ResultTable, Map<Key, ResultTable>>
    this.$sortCaches = new Map();

    this.$updateVersion();
};

DataBox.prototype.initializeRequiredQueries = function() {
    //Map<QueryKey, Query>
    this.$requiredUnmaskedQueries = new Map();

    //Map<QueryKey, { query: {Query}, positionInfos: {Map<PosKey,PositionInfo>} }>>
    this.$requiredMaskedQueries = new Map();
};

DataBox.prototype.clearDataCache = function() {
    this.$initialize();
};

DataBox.prototype.getLastUpdated = function() {
    return this.$lastUpdated;
};

DataBox.prototype.$updateVersion = function() {
    this.$lastUpdated = performance.now(); 
};

////// REQUIRED QUERY/POS MANAGEMENT //////

DataBox.prototype.markMeasureQueryRequired = function(queryKey, query) {
    this.$requiredUnmaskedQueries.set(queryKey, {
        query: query
    });
};

DataBox.prototype.requiresUnmaskedQueryByKey = function(queryKey) {
    return this.$requiredUnmaskedQueries.has(queryKey);
};

DataBox.prototype.unmarkMaskedQueryPositionRequiredByKey = function(queryKey, positionKey) {
    var queryStorage = this.$requiredMaskedQueries.get(queryKey);
    if (queryStorage)
        queryStorage.positionInfos.delete(positionKey); 
};

DataBox.prototype.requiresMaskedQueryPositionForQueryKey = function(queryKey) {
    var queryStorage = this.$requiredMaskedQueries.get(queryKey);
    if (queryStorage)
        return queryStorage.positionInfos.size > 0;
};

DataBox.prototype.requiresMaskedQueryPositionForKeys = function(queryKey, positionKey) {
    var queryStorage = this.$requiredMaskedQueries.get(queryKey);
    return queryStorage && queryStorage.positionInfos.has(positionKey);
};

DataBox.prototype.markMaskedQueryPositionRequired = function(query, queryKey, positionInfo) {
    var posKey = positionInfo.key,
        requiredMaskedQuery = this.$getOrCreateRequiredMaskedQueries(queryKey, query);

    requiredMaskedQuery.positionInfos.set(posKey, positionInfo);
};

DataBox.prototype.$getOrCreateRequiredMaskedQueries = function(queryKey, query) {
    if (!this.$requiredMaskedQueries.has(queryKey))
        this.$requiredMaskedQueries.set(queryKey, {
            query: query,
            positionInfos: new Map()
        });

    return this.$requiredMaskedQueries.get(queryKey);
};

////// REQUIRED QUERY/POS MANAGEMENT //////


////// CLEAN/DIRTY MANAGEMENT //////

DataBox.prototype.markAllDirty = function() {
    var me = this,
        res,
        e,
        entries,
        cachedData;

    this.$unmaskedQueryCache.forEach(function(_, queryKey) {
        me.markUnmaskedQueryDirtyByKey(queryKey);
    });

    this.$maskedQueryCache.forEach(function(positionMap) {
        entries = positionMap.entries();
        //NOTE: this insanity is b/c uglify doesn't support es6 && Map.forEach is too slow
        for (; res = entries.next(), !res.done, e = res.value || [], cachedData = e[1];) {
            cachedData.dirty = true;
        }
    });
};

DataBox.prototype.markUnmaskedQueryDirtyByKey = function(queryKey) {
    this.$unmaskedQueryIsDirty.set(queryKey, true);
    this.$updateVersion();
};

DataBox.prototype.markUnmaskedQueryCleanByKey = function(queryKey) {
    this.$unmaskedQueryIsDirty.set(queryKey, false);
    this.$updateVersion();
};

DataBox.prototype.isUnmaskedQueryDirtyByKey = function(queryKey) {
    return this.$unmaskedQueryIsDirty.get(queryKey) === true;
};

DataBox.prototype.markMaskedQueryPositionDirtyByKey = function(queryKey, positionKey) {
    var positionMap = this.$maskedQueryCache.get(queryKey),
        cachedData;

    if (positionMap) {
        cachedData = positionMap.get(positionKey);
        if (cachedData) {
            cachedData.dirty = true;
        } 
    }
 
    this.$updateVersion();
};

DataBox.prototype.markMaskedQueryPositionCleanByKey = function(queryKey, positionKey) {
    var positionMap = this.$maskedQueryCache.get(queryKey),
        cachedData;

    if (positionMap) {
        cachedData = positionMap.get(positionKey);
        if (cachedData) {
            cachedData.dirty = false;
        } 
    }

    this.$updateVersion();
};

/**
 * Has data for the given query key and position key and that data is not dirty.
 * 
 * @param {String} queryKey
 * @param {String} positionKey
 * @returns {Boolean}
 */
DataBox.prototype.hasCleanMaskedQueryPosition = function(queryKey, positionKey) {
    var positionMap = this.$maskedQueryCache.get(queryKey),
        cachedData;

    if (positionMap) {
        cachedData = positionMap.get(positionKey);
    }

    return !!cachedData && cachedData.dirty !== true;
};

DataBox.prototype.getMaskedQueryPositionSavedByKey = function(queryKey, posKey) {
    var positionMap = this.$maskedQueryCache.get(queryKey),
        cachedData,
        saveTime;

    if (positionMap) {
        cachedData = positionMap.get(posKey);
        saveTime = cachedData && cachedData.saved;
    }

    return saveTime;
};

DataBox.prototype.markMaskedQueryPositionSavedByKey = function(queryKey, posKey, saveTime) {
    var positionMap = this.$maskedQueryCache.get(queryKey),
        cachedData;

    if (positionMap) {
        cachedData = positionMap.get(posKey).saved = saveTime;
    }

    this.$updateVersion();
};

////// CLEAN/DIRTY MANAGEMENT //////

////// OUTSTANDING QUERY COMPUTATION //////

/**
 * A query position being "outstanding" means one of the following:
 * 
 * 1. The query and position are required and have not yet been queried
 * 2. The query and position are required but the data we have in the cache is dirty 
 * 
 * @param {String} queryKey
 * @param {PositionInfo} positionInfo
 * @return {Boolean}
 */
DataBox.prototype.hasQueryPositionOutstandingByKey = function(queryKey, positionInfo) {
    var requiredQueryInfo = this.$requiredMaskedQueries.get(queryKey),
        positionMap = this.$maskedQueryCache.get(queryKey),
        posKey = positionInfo.key,
        cachedData = positionMap && positionMap.get(posKey),
        positionIsRequired = requiredQueryInfo && requiredQueryInfo.positionInfos.has(posKey);

    // is outstanding if the query position is required and either we don't have the data or it is dirty
    return positionIsRequired && (!cachedData || cachedData.dirty);
};

/**
 * @param {String} queryKey
 * @return {Boolean}
 */
DataBox.prototype.hasCleanUnmaskedQueryData = function(queryKey) {
    return this.hasUnmaskedQueryData(queryKey) && !this.isUnmaskedQueryDirtyByKey(queryKey);
};

/**
 * @return {Boolean}
 */
DataBox.prototype.getOutstandingUnmaskedQueries = function() {
    var outstanding = [],
        me = this;

    this.$requiredUnmaskedQueries.forEach(function(queryInfo, queryKey) {
        if (!me.hasCleanUnmaskedQueryData(queryKey))
            outstanding.push(queryInfo.query);
    });
    return outstanding;
};

/**
 * Returns all outstanding masked query positions for this data box.
 * 
 * A query position being "outstanding" means one of the following:
 * 
 * 1. The query and position are required and have not yet been queried
 * 2. The query and position are required but the data we have in the cache is dirty 
 * 
 * @returns Object[]
 */
DataBox.prototype.getOutstandingMaskedQueryPositions = function() {
    var outstanding = [],
        res,
        e,
        qsEntries = this.$requiredMaskedQueries.entries(),
        queryKey,
        queryStorage,
        query,
        cachedData,
        positionMap,
        positionInfo,
        posKey,
        posEntries;

    // NOTE: this insanity is b/c uglify doesn't support es6 && Map.forEach is too slow
    // 1. Loop through the required masked queries 
    for (; res = qsEntries.next(), !res.done, e = res.value || [], queryKey = e[0], queryStorage = e[1];) {
        positionMap = this.$maskedQueryCache.get(queryKey);
        query = queryStorage.query;
        posEntries = queryStorage.positionInfos.entries();

        // for each required masked query position, check to see if it has dirty data
        for (; res = posEntries.next(), !res.done, e = res.value || [], posKey = e[0], positionInfo = e[1];) {
            cachedData = positionMap && positionMap.get(posKey);
            if (!cachedData || cachedData.dirty)
                outstanding.push({ query: query, queryKey: queryKey, positionInfo: positionInfo });
        }
    }

    return outstanding;
};

////// OUTSTANDING QUERY COMPUTATION //////

////// STORING INCOMING DATA //////
DataBox.prototype.$getOrCreateMaskedQueryCache = function(queryKey) {
    var maskedQueryCache = this.$maskedQueryCache.get(queryKey);
    if (!maskedQueryCache) {
        maskedQueryCache = new Map();
        this.$maskedQueryCache.set(queryKey, maskedQueryCache);
    }
    return maskedQueryCache;
};

/**
 * Cache the given resultTable for the given query key and position(s). Will optionally
 * mark the data as "saved" if markSaved is true.
 * 
 * @param {String} queryKey
 * @param {PositionInfo[]} positionInfos
 * @param {ResultTable} resultTable
 * @param {Boolean} [markSaved] whether or not to record a saved time
 */
DataBox.prototype.storeResultTableForPositions = function(queryKey, positionInfos, resultTable, markSaved) {
    var posTableMap = this.$getOrCreateMaskedQueryCache(queryKey),
        i = 0,
        saveTime = performance.now(),
        posCt = positionInfos.length,
        dirty = !!markSaved, //if we're optimistically saving an update as the query value, don't clear the dirty state
        posKey;

    for (; i < posCt; i++) {
        posKey = positionInfos[i].key;
        // store the result table in the masked query position cache, mark it as clean (and optionally saved)
        posTableMap.set(posKey, mkCachedData(resultTable, dirty, markSaved && saveTime));
    }

    this.$updateVersion();
    this.$clearSearcherCache(queryKey);
};

DataBox.prototype.setUnmaskedMeasureQueryByKey = function(queryKey, queryResult) {
    this.$unmaskedQueryCache.set(queryKey, queryResult);
    this.markUnmaskedQueryCleanByKey(queryKey);

    this.$updateVersion();
    this.$clearSearcherCache(queryKey);
};
////// STORING INCOMING DATA //////

////// DATA RETRIEVAL //////
DataBox.prototype.hasQueryPositionData = function(queryKey, positionKey) {
    return this.hasUnmaskedQueryData(queryKey) || this.hasMaskedDataForPosition(queryKey, positionKey);
};

DataBox.prototype.hasUnmaskedQueryData = function(queryKey) {
    return this.$unmaskedQueryCache.has(queryKey);
};

DataBox.prototype.getUnmaskedQueryData = function(queryKey) {
    var queryResult = this.$unmaskedQueryCache.get(queryKey),
        resultTable;

    if (queryResult) {
        if (queryResult.resultTable)
            resultTable = this.$getSortedResultTable(queryResult.resultTable);

        return {
            queryTime: queryResult.queryTime,
            resultTable: resultTable
        };
    }
};

DataBox.prototype.$getSortedResultTable = function(resultTable, indices) {
    indices = indices || getKeyIndicesFromResultTable(resultTable);
    var sortCache = this.$getOrCreateSortCache(resultTable),
        sortIdxKey = JSON.stringify(indices),
        sortedResultTable = sortCache.get(sortIdxKey);

    if (!sortedResultTable) {
        sortedResultTable = data.sortResultTableByIndices(indices, this.$makeSortComparatorsForTable(resultTable, indices), resultTable);
        sortCache.set(sortIdxKey, sortedResultTable);
    }

    return sortedResultTable;
};

function getKeyIndicesFromResultTable(resultTable) {
    var colInfo = resultTable.columnInfo,
        keyLen = colInfo.length - 1,
        i = 0,
        indices = [];

    for (; i < keyLen; i++)
        indices.push(i);
    return indices;
}

DataBox.prototype.$makeSortComparatorsForTable = function(resultTable, indices) {
    return indices.map(function() {
        return function(rowKey, posKey) {
            if (rowKey < posKey)
                return -1;
            else if (rowKey > posKey)
                return 1;
            else
                return 0;
        };
    });
};

DataBox.prototype.$getOrCreateSortCache = function(resultTable) {
    var sortCache = this.$sortCaches.get(resultTable);

    if (!sortCache) {
        sortCache = new Map();
        this.$sortCaches.set(resultTable, sortCache);
    }

    return sortCache;
};

DataBox.prototype.hasMaskedDataForPosition = function(queryKey, positionKey) {
    return this.$getOrCreateMaskedQueryCache(queryKey).has(positionKey);
};

DataBox.prototype.getQueryPositionValue = function(query, formatter, queryKey, positionInfo, resultDataMap) {
    var searcher = this.$preparePositionSearcher(query, formatter, queryKey, resultDataMap),
        result = searcher.findPositionValue(positionInfo);

    if (result)
        result.lastSaved = searcher.getQueryTime() || this.getMaskedQueryPositionSavedByKey(queryKey, positionInfo.key);

    return result;
};

/**
 * @param {String} queryKey
 * @param {ResultDataMap} resultDataMap
 */
DataBox.prototype.$preparePositionSearcher = function(query, formatter, queryKey, resultDataMap) {
    var searcher = this.$getCachedPositionSearcher(queryKey, resultDataMap),
        unmaskedQueryData;

    if (!searcher) {
        searcher = new BinarySearcher(query, formatter, resultDataMap);
        if (this.hasUnmaskedQueryData(queryKey)) {
            unmaskedQueryData = this.getUnmaskedQueryData(queryKey);
            searcher.setSingleTable(unmaskedQueryData.resultTable, unmaskedQueryData.queryTime);
        } else {
            searcher.setPositionTableMap(this.$getOrCreateMaskedQueryCache(queryKey));
        }

        this.$cachePositionSearcher(queryKey, resultDataMap, searcher);
    }

    return searcher;
};

/**
 * @param {String} queryKey
 * @param {ResultDataMap} resultDataMap
 * @return {PositionSearcher}
 */
DataBox.prototype.$getCachedPositionSearcher = function(queryKey, resultDataMap) {
    var querySearcherCache = this.$querySearcherCache.get(queryKey);
    return querySearcherCache && querySearcherCache.get(resultDataMap.key);
};

DataBox.prototype.$clearSearcherCache = function(queryKey) {
    this.$querySearcherCache.delete(queryKey);
};

/**
 * @param {String} queryKey
 * @param {ResultDataMap} resultDataMap
 * @param {PositionSearcher} searcher
 */
DataBox.prototype.$cachePositionSearcher = function(queryKey, resultDataMap, searcher) {
    var positionSearcherCache = this.$querySearcherCache.get(queryKey);
    if (!positionSearcherCache) {
        positionSearcherCache = new Map(); 
    }

    positionSearcherCache = positionSearcherCache.set(resultDataMap.key, searcher);

    this.$querySearcherCache.set(queryKey, positionSearcherCache);
};
////// DATA RETRIEVAL //////

module.exports = DataBox;

},{"./binary_pos_search":240,"./data":241}],248:[function(require,module,exports){
"use strict";

var cubiql = require("../cubiql");
var queryutil = require("../querygen/util");
var querygen = require("../querygen/query");
var queryfilter = require("../querygen/filter");
var mac = require("../multiaxisconfig");
var mah = require("../multiaxisheading");
var MQG = require("measure-query-gen/src/MQG");
var assert = require("assert");
var lodash = require("lodash");
var util = require("../util");
var Immutable = require("immutable");
var Sort = require("../constant/sort");

var ModelUtility = require("./modelutility");
var qgutil = require("./queryutil");
var validity = require("./validity");
var formatter = require("../formatter");

var ConfigQueryTypes = {
    HEADER: "HEADER",
    SELECTED_SLICE: "SELECTED_SLICE",
    INTERSECTION: "INTERSECTION",
    INTERSECTION_UNMASKED: "INTERSECTION_UNMASKED"
};
Object.freeze(ConfigQueryTypes);

/**
 * The QueryGenerator class is used to generate MeasureQuery objects corresponding to configuration of immutable multiaxisconfig objects.
 * This class is not specific to a particular view (such as the pivot) but is at a lower level, i.e. at the multiaxisconfig level.  The
 * types of services it provides should always be in context of core modeler functionality.  Any changes made to support query generation
 * needed by a particular view should always be considered in the broader context.  For example, adding a method such as "generateChartQueriesForIntersection"
 * would probably not be the appropriate level of abstraction.  Instead, the needs of the Chart should be expressible via the MAConfig, which
 * the QueryGenerator is intended to interpret over.
 *
 * The services it provides primarily are to generate
 * *) the queries needed to query field header data
 * *) the queries needed to query the data configurations found at an intersection of fields 
 * *) the queries needed to query the selected slice of a slice configuration
 * *) some other miscellaneous types of queries such as level maps. 
 *
 * As well as some utility functions such as 
 * *) calculating the intersection for a list of Fields
 * *) calculating the innermost Fields from a list of Fields
 *
 * The main reason why QueryGenerator is a class instead of a set of pure functions is that some of these services can be slow enough not to be
 * ideal in a tight loop.  Therefore the QueryGenerator is capable of caching these computations.  By retaining an instance of a QueryGenerator
 * and using it for these services, clients transparently gain this performance advantage.
 *
 *  
 *
 * NOTE: this should be essentially stateless. It only exists to facilitate caching of query generation and
 * convenience of not passing the measure model to all query generation functions. Think carefully before
 * adding any other state to this class!
 *
 * @param {MeasureModel} measureModel
 * @param {MetricConfigs} metricConfigs
 */
function QueryGenerator(measureModel, metricConfigs) {
    this.$measureModel = measureModel;
    this.$metricConfigs = metricConfigs;
    this.$modelUtility = new ModelUtility(measureModel);
    this.$nameCache = new Immutable.Map();
    //Map<Immutable.List<Field>, {String, MeasureQuery}>
    this.$intersectionQueries = new Immutable.Map();
    this.$formatters = new Immutable.Map(); 
    this.$headerQueryCache = new Immutable.Map();
    this.$mapQueryCache = new Immutable.Map();
}

/**
 * A convenience method for, given a config and a list of ConfigQueryTypes, produce generate all measure query objects needed
 *
 * @param {MAConfig} config
 * @param {ConfigQueryType[]} queryTypes
 */
QueryGenerator.prototype.generateUnmaskedQueriesFromConfig = function(config, queryTypes) {
    var queries = new Immutable.List(),
        filteredSliceConfigs = config.sliceConfigs.filterNot(function(sc) { 
            return sc.get("sourceField") instanceof mac.MeasureGroupField;
        }),
        me = this;

    if (!config) return queries;

    if (queryTypes.indexOf(ConfigQueryTypes.HEADER) > -1) {
        config.axis.forEach(function(axisFields) {
            axisFields.forEach(function(axisField) {
                if (axisField instanceof mac.LevelField && !mac.isAllLevelField(axisField)) {
                    queries = queries.concat($getAllQueriesFromQueryLookup(me.generateHeaderQueries(axisField, filteredSliceConfigs)));
                } else if (axisField instanceof mac.DimensionField) {
                    axisField.fields.forEach(function(f, i) {
                        var fieldPair;

                        if (!mac.isAllLevelField(f)) {
                            queries = queries.concat($getAllQueriesFromQueryLookup(me.generateHeaderQueries(f, filteredSliceConfigs)));
                        }
                        //for all but the top field also query the mapping data
                        if (i > 0 && !mac.isAllLevelField(axisField.fields.get(i-1))) {
                            fieldPair = new Immutable.List([axisField.fields.get(i - 1), f]);
                            queries = queries.push(me.generateFieldMapQuery(fieldPair));
                        }
                    });
                }
            });
        });
    }

    if (queryTypes.indexOf(ConfigQueryTypes.SELECTED_SLICE) > -1) {
        config.sliceConfigs.forEach(function(sliceConfig) {
            if (sliceConfig.sourceField instanceof mac.LevelField)
                queries = queries.push(me.generateSelectedSliceQuery(sliceConfig, filteredSliceConfigs));
        });
    }

    if (queryTypes.indexOf(ConfigQueryTypes.INTERSECTION) > -1) {
        this.computeAllFieldListsWithRollups(config).forEach(function(flwr) {
            queries = queries.concat($getAllQueriesFromQueryLookup(
                me.generateIntersectionQueries(flwr.fieldList, flwr.rollupConfigs, filteredSliceConfigs, true)
            ));

            if (config.queryLevelFilterFlag) {
                queries = queries.push(me.generateFilteredFlagQuery(flwr.fieldList, filteredSliceConfigs));
            }
        });
    }

    return queries;
};

/**
 * @typedef {Object} FieldListWithRollups
 * @property {mac.Field[]} fieldList
 * @property {mac.RollupConfig[]} rollupConfigs
 *
 * @return {FieldListWithRollups}
 */
QueryGenerator.prototype.computeAllFieldListsWithRollups = function(maConfig) {
    var headerConfig = maConfig.headerConfig,
        mahTermsByAxis,
        unifiedTerm,
        heading,
        results = Immutable.Set();

    mahTermsByAxis = headerConfig.map(function(axisHeaderTerm) {
        var prototype = mah.makePrototypeFromMacTerm(axisHeaderTerm, maConfig);
        return prototype;
    });

    //to compute the cross product between axes, just wrap them all in a single cross term
   
    
    //TODO: this is temp fix
    //unifiedTerm = new mah.CrossTerm(undefined, lodash.flatten(terms));

    var terms = lodash.compact(mahTermsByAxis.valueSeq().toJS()),
        len = terms.length;

    terms = lodash.sortBy(terms, function(t, i) {
        if (t instanceof mah.ConcatTerm) {
            return len+i;
        } else {
            return i;
        }
    });
    unifiedTerm = new mah.CrossTerm(undefined, terms); 
    
    //TODO: should be like this?
    // unifiedTerm = new mah.CrossTerm(
    //     undefined,
    //     lodash.compact(mahTermsByAxis.valueSeq().toJS()));

    heading = mah.termToAxisHeading(unifiedTerm);

    //loop through headings to produce field combinations
    heading.getHeadingRange(0, heading.getLength()).forEach(function(row) {
        var result = {
            fieldList: row.fields,
            rollupConfigs: lodash.compact(row.rollups)
        };
        results = results.add(result);
    });

    return results.toArray();
};

function $getAllQueriesFromQueryLookup(queryObj) {
    var keys = Object.keys(queryObj),
        obj,
        len = keys.length,
        i = 0,
        queries = [];

    for (; i < len; i++) {
        obj = queryObj[keys[i]];
        if (lodash.isArray(obj))
            queries = queries.concat(obj);
        else
            queries.push(obj);
    }

    return queries;
}

QueryGenerator.prototype.generateHeaderQueries = function(field, sliceConfigs) {
    var key = new Immutable.List([field, sliceConfigs]),
        queries = this.$headerQueryCache.get(key);

    if (!queries) {
        if (field instanceof mac.LevelField) {
            queries = generateHeaderQueriesForLevelField(field, sliceConfigs, this.$measureModel);
        } else {
            throw new Error("can't generate header queries for field: ", field);
        }
        this.$headerQueryCache = this.$headerQueryCache.set(key, queries);
    }

    return queries;
};

QueryGenerator.prototype.generateSelectedSliceQuery = function(sliceConfig, sliceConfigs) {
    var key = new Immutable.List([sliceConfig, sliceConfigs]),
        query = this.$headerQueryCache.get(key);

    assert(sliceConfig.sourceField instanceof mac.LevelField, "Can only generate slice query for slices on level fields");

    if (!query) {
        query = generateSelectedSliceQuery(sliceConfig, sliceConfigs, this.$measureModel);
        this.$headerQueryCache = this.$headerQueryCache.set(key, query);
    }

    return query;
};

function computeIntersectionFromLevelFields(levelFields, measureModel) {
    var byLabel = lodash.groupBy(levelFields, function(f) {
            return f.level.labelName;
        });

    var narrowed = lodash.mapValues(byLabel,function(fields, label) {
        var dimName = fields[0].level.dimensionName,
            qls = fields.map(function(f) {
                return mac.levelToQualifiedLevel(f.level);
            });

        return measureModel.findLowestLevel(dimName, qls);
    });

    var result = lodash.values(narrowed).filter(function(ql) {
        return ql.level !== "ALL";
    }); 
    return new MQG.Intersection(result);
}

/**
 * For a particular set of fields, return a measure query that widens the constant '1' to the base intersection
 * of the fields and then dices it by the conjuncted set of all filters applied to the LevelFields in the fields
 *
 * @param {mac.Field[]} fieldList
 * @param {Immutable.List<mac.SliceConfigs>} sliceConfigs
 * @return {MeasureQuery}
 */
QueryGenerator.prototype.generateFilteredFlagQuery = function(fieldList, sliceConfigs) {
    var filteredSliceConfigs = sliceConfigs.filterNot(function(sc) { 
            return sc.get("sourceField") instanceof mac.MeasureGroupField;
        }),
        measureModel = this.$measureModel,
        levelFields = fieldList.filter(function(f) {
            return f instanceof mac.LevelField;
        }),
        levelFilters = lodash.flatten(levelFields.map(function(levelField) {
            return createQueryFiltersForLevelField(levelField, filteredSliceConfigs, measureModel);
        })),
        inter = computeIntersectionFromLevelFields(levelFields, measureModel),
        filters = flattenCompositeFilters(levelFilters);

    return {
        label: "Filtered intersection point query",
        measure: new querygen.ConstantTerm(1, querygen.Type.INT),
        inter: inter,
        interLabelMap: queryutil.calcSelfLabelMap(inter.qualified_level, true),
        aggMethodLookup: {},
        filter: filters.length ? combineFiltersForMeasure(undefined, inter, filters, measureModel) : undefined,
        mappedInter: inter,
        labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
        functionalQuery: true
    };
};

/**
 * @param {Immutable.List<mac.Field>} fieldList
 * @param {Immutable.List<mac.RollupConfig>} rollups
 * @param {Immutable.List<mac.SliceConfig>} sliceConfigs
 * @param {Boolean} includeFieldFilters
 * @return {Object<DataName, MeasureQuery>}
 */
QueryGenerator.prototype.generateIntersectionQueries = function(fieldList, rollups, sliceConfigs, includeFieldFilters) {
    var me = this,
        key = new Immutable.List([fieldList, rollups, sliceConfigs]),
        queries = this.$intersectionQueries.get(key);

    if (queries)
        return queries;

    queries = {};
    this.getDataConfigsForFields(fieldList).map(function(dataCfg) {
        queries[dataCfg.name] = me.generateIntersectionQueryForDataConfig(dataCfg, fieldList, rollups, sliceConfigs, includeFieldFilters);
    });

    this.$intersectionQueries = this.$intersectionQueries.set(key, queries);

    return queries;
};

QueryGenerator.prototype.calcInnerFields = function(fields) {
    return this.getModelUtil().calcInnerFields(fields);
};

QueryGenerator.prototype.calcIntersectionFromFields = function(fields) {
    return this.getModelUtil().calcIntersectionFromFields(fields);
};

QueryGenerator.prototype.generateIntersectionQueryForDataConfig = function(dataCfg, fieldList, rollups, sliceConfigs, includeFieldFilters) {
    var validityErrors = validity.checkIntersectionQueryValidity(dataCfg, fieldList, rollups, this.getModelUtil()),
        valid = validityErrors.length === 0,
        queryLabel = "intersection query for " + dataCfg.name;

    if (!valid)
        return {
            label: queryLabel,
            validityMessages: validityErrors
        };

    var measureModel = this.$measureModel,
        baseQuery = generateMeasureQueryForMeasure(dataCfg.measure, measureModel),
        //a map of labels (in terms of the dataCfg's measure labels) to any rollup configs
        rollupConfigsByMeasureLabel = qgutil.getRollupConfigsByMeasureLabel(baseQuery.inter, fieldList, rollups, this.getModelUtil()),
        aggMethodLookup = qgutil.generateAggMethodLookupForMeasure(dataCfg.measure, rollupConfigsByMeasureLabel, measureModel),
        filters = dataCfg.filters ? dataCfg.filters.map(function(f) {
           return createQueryFilterFromMACFilter(f, measureModel);
        }).toArray() : [];
        
    if (includeFieldFilters) {
        fieldList.forEach(function(f) {
            if (f.filters) {
                filters = filters.concat(f.filters.map(function(filter) {
                    return createQueryFilterFromMACFilter(filter, measureModel);
                }).toArray());
            }
        });
    }

    return {
        label: queryLabel,
        measure: baseQuery.measure,
        inter: baseQuery.inter,
        mappedInter: baseQuery.mappedInter,
        labelMap: queryutil.calcSelfLabelMap(baseQuery.inter.qualified_level),
        interLabelMap: baseQuery.interLabelMap,
        filter: filters.length ? combineFiltersForMeasure(baseQuery.measure, baseQuery.inter, filters, measureModel) : undefined,
        constrainByAncestor: baseQuery.constrainByAncestor,
        aggMethodLookup: aggMethodLookup,
        functionalQuery: true
    };    
};

/**
 * @param {Field[]} fieldList
 * @return {Immutable.List<DataConfig>}
 */
QueryGenerator.prototype.getDataConfigsForFields = function(fieldList) {
    var measureFields = fieldList.filter(function(field) {
            return field instanceof mac.MeasureField;
        }),
        levelFields = fieldList.filter(function(field) {
            return field instanceof mac.LevelField;
        }),
        dataCfgs = new Immutable.List(),
        fieldSet = Immutable.Set(levelFields);

    if (measureFields.length) {
        measureFields.forEach(function(measureField) {
            dataCfgs = dataCfgs.concat(measureField.dataPerFieldSet.get(fieldSet) || measureField.data);
        });
    }

    return dataCfgs;
};

/**
 * @param {Immutable.List<mac.LevelField>} fieldPair
 * @return {MeasureQuery}
 */
QueryGenerator.prototype.generateFieldMapQuery = function(fieldPair) {
    var query = this.$mapQueryCache.get(fieldPair);

    if (!query) {
        assert(fieldPair.size === 2, "Field Maps can only be generated for a list of exactly 2 fields");
        assert(fieldPair.get(0) instanceof mac.LevelField, "Must be a Level Field");
        assert(fieldPair.get(1) instanceof mac.LevelField, "Must be a Level Field");

        var parentField = fieldPair.get(0),
            childField = fieldPair.get(1),
            parentLevel = mac.levelToQualifiedLevel(parentField.level),
            childLevel = mac.levelToQualifiedLevel(childField.level),
            childInter = new MQG.Intersection(childLevel),
            levelMap = new querygen.LevelMap(childLevel, parentLevel),
            sortedFields = getSortedSameLabelFieldsForLevelField(parentField, fieldPair, this.$measureModel);

        assert(sortedFields.size === 2, "Both fields in pair need to be of same labelled dimension");

        query = {
            label: levelMap.name,
            measure: levelMap,
            inter: childInter,
            mappedInter: childInter,
            aggMethodLookup: {},
            labelMap: queryutil.calcSelfLabelMap([childLevel]),
            functionalQuery: true
        };
        this.$mapQueryCache.set(fieldPair, query);
    }

    return query;
};

QueryGenerator.prototype.calcCoreEditMeasure = function(dataCfg, editOptions) {
    if (dataCfg.customEdit) {
        return this.$calcCoreEditFromCustomEdit(dataCfg.customEdit, dataCfg, editOptions);
    } else if (dataCfg.measure.metric) {
        var metricConfig = this.$metricConfigs && this.$metricConfigs[dataCfg.measure.metric.name];
        if (metricConfig && metricConfig.headMetric)
            return dataCfg.measure.set("metric", this.$mapMetricToHeadMetric(dataCfg.measure.metric, metricConfig.headMetric, editOptions)).delete("labelMap");
        else
            return dataCfg.measure;
    } else {
        return dataCfg.measure;
    }
};

QueryGenerator.prototype.$mapMetricToHeadMetric = function(metric, headMetricName, editOptions) {
    var headMetricInfo = this.$measureModel.getMeasureInfo(headMetricName),
        headBaseInter = headMetricInfo.inter,
        matchedIndices = [],
        headMetricIntersection = metric.intersection.map(function(metricLevel) {
            var qlIndex = headBaseInter.qualified_level.findIndex(function(ql) {
                return metricLevel.labelName === cubiql.qlevel.getLabel(ql);
            });

            if (qlIndex > -1 && !matchedIndices.indexOf(qlIndex) > -1) {
                matchedIndices.push(qlIndex);
                return metricLevel; 
            }
        }).filter(lodash.identity);

    return metric.set("name", headMetricName)
        .set("intersection", headMetricIntersection);
}; 

QueryGenerator.prototype.$calcCoreEditFromCustomEdit = function(customEdit, dataCfg, editOptions) {
    assert(customEdit.editTarget, "CustomEdit must have editTarget");
    assert(customEdit.editTarget.metricName, "Currently only EditTargets with a metricName are supported");
    var targetMetricName = customEdit.editTarget.metricName,
        cfgMetric = this.$getCoreMetricFromMetric(dataCfg.measure),
        metric = cfgMetric && this.$mapMetricToHeadMetric(cfgMetric, targetMetricName, editOptions);

    assert(metric, "Couldn't calculate core edit metric for custom edit");

    return dataCfg.measure.delete("operator").set("metric", metric); 
};

QueryGenerator.prototype.$getCoreMetricFromMetric = function(measure) {
    assert(measure.metric || measure.operator, "Can't get core metric from a measure that is not either a metric or operator");
    if (measure.metric)
        return measure.metric;
    else if (measure.operator)
        return this.$getCoreMetricFromMetric(measure.operator.measures.get(0));
};

QueryGenerator.prototype.calcEditMetricIntersForMeasure = function(measure, editOptions) {
    if (!measure.metric)
        return [];

    var baseMetricInter = new MQG.MetricInter(measure.metric.name, mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, this.$measureModel))),
        metricInters = [],
        parentInter,
        pctParentConfig = editOptions.pctParentConfig;
    
    // if it's a dimension split, there are no editable metric intersections
    if (!qgutil.isDimensionSplit(measure.labelMap)) {
        metricInters = [new MQG.MetricInter(measure.metric.name, qgutil.invertIntersectionLabelling(baseMetricInter.inter, measure.labelMap))];
        
        if (pctParentConfig) {
            //add parent intersection
            parentInter = new MQG.Intersection(baseMetricInter.inter.qualified_level
                .map(function(ql) {
                    if (ql.dimension == pctParentConfig.parentLevel.dimensionName) {
                        ql = cubiql.cloneQualifiedLevel(ql);
                        ql.level = pctParentConfig.parentLevel.levelName;
                        return ql; 
                    } else
                        return ql;
                })
                .filter(function(ql) { 
                    return ql && ql.level !== "ALL";
                })
            );
            
            metricInters.push(new MQG.MetricInter(measure.metric.name, qgutil.invertIntersectionLabelling(parentInter, measure.labelMap)));
        }
    }

    return metricInters;
};

QueryGenerator.prototype.calcEditOptionsForDataCfg = function(dataCfg, fieldList, rollups, sliceConfigs) {
    if (dataCfg.measure.metric) {
        return this.calcEditOptionsForDataCfgForMetric(dataCfg, fieldList, rollups, sliceConfigs);
    } else {
        //for non-metric measures, just return an empty set of options
        return {};
    }
};

QueryGenerator.prototype.calcEditOptionsForDataCfgForMetric = function(dataCfg, fieldList, rollups, sliceConfigs) {
    var metricName = dataCfg.measure.metric.name,
        metricInfo = this.$measureModel.getMeasureInfo(metricName),
        options = {};

    options.customSpreadMethodAllowed = !metricInfo.recalc;
    options.pctParentConfig = this.calcPctParentEditConfig(dataCfg, metricName, fieldList);
    options.readonly = this.$metricConfigs[metricName] && this.$metricConfigs[metricName].readonly;
    
    return options;
};

QueryGenerator.prototype.calcPctParentEditConfig = function(dataCfg, fieldList) {
    var metricName = dataCfg.measure.metric.name,
        metricInfo = this.$measureModel.getMeasureInfo(metricName),
        pctParentCfg = this.$measureModel.getPctParentConfig(metricName);
    if (!pctParentCfg) return;

    var childLabelTargets = dataCfg.measure.labelMap.get(pctParentCfg.childLabel),
        mappedChildLabel = (childLabelTargets && childLabelTargets.get(0)) || pctParentCfg.childLabel,
        childLevel = dataCfg.measure.metric.intersection.find(function(lvl) {
            return lvl.labelName === mappedChildLabel;
        }) || $mkAllLevel(pctParentCfg.dimension, mappedChildLabel, this.$measureModel.getDefaultHierarchyName(pctParentCfg.dimension)),
        parentLevel = dataCfg.measure.metric.intersection.find(function(lvl) {
            return lvl.labelName === pctParentCfg.parentLabel;
        }) || $mkAllLevel(pctParentCfg.dimension, pctParentCfg.parentLabel, childLevel.hierarchyName);

    return {
        childLevel: childLevel,
        parentLevel: parentLevel
    };
};

QueryGenerator.prototype.calcQueryFormatters = function(fields) {
    var me = this,
        key = fields,
        formatters = this.$formatters.get(key);

    if (formatters) return formatters;

    formatters = {};
    this.getDataConfigsForFields(fields).map(function(dataCfg) {
        formatters[dataCfg.name] = me.calcFormatterForDataCfg(dataCfg, fields);
    });

    this.$formatters = this.$formatters.set(key, formatters);

    return formatters;
};

QueryGenerator.prototype.calcFormatterForDataCfg = function(dataCfg, fields) {
    if (!dataCfg.measure.metric) {
        //for non metrics just return a trivial formatter
        return formatter.getFormatter(undefined, "Simple");
    }

    var format = dataCfg.format || null,
        name = dataCfg.measure.metric.name,
        metricKind = this.$measureModel.getMeasureInfo(name).type.kind;

    return formatter.getFormatter(format, name, metricKind);
};

QueryGenerator.prototype.getModelUtil = function() {
    return this.$modelUtility;
};

function $mkAllLevel(dimName, labelName, hierarchyName) {
    return mac.mkLevel({
        dimensionName: dimName,
        labelName: labelName || dimName,
        hierarchyName: hierarchyName || "Default",
        levelName: "ALL"
    });
}

function generateHeaderQueriesForLevelField(levelField, sliceConfigs, measureModel) {
    //TODO make sure sort attribute queries don't get doubled up with data config queries

    var queries = {
        id: generateIdQuery(levelField, sliceConfigs, measureModel),
        "_sorts_": []
    };

    levelField.data.forEach(function(dataConfig) {
        queries[dataConfig.name] = generateHeaderQueryForDataConfig(dataConfig, levelField, sliceConfigs, measureModel);
    });

    levelField.sortConfigs.forEach(function(_, sortIndex) {
        queries._sorts_.push(generateHeaderQueryForSortConfig(sortIndex, levelField, sliceConfigs, measureModel));
    });

    return queries;
}

function fieldsHaveSameLabelledDimension(field1, field2) {
    var lvl1 = field1.level,
        lvl2 = field2.level;

    if (!lvl1 || !lvl2) return false;

    return (lvl1.dimensionName === lvl2.dimensionName) && 
        ((lodash.isUndefined(lvl1.labelName) && lodash.isUndefined(lvl2.labelName)) ||
         lvl1.labelName === lvl2.labelName);
}

function fieldsHaveSameDimension(field1, field2) {
    var lvl1 = field1.level,
        lvl2 = field2.level;

    if (!lvl1 || !lvl2) return false;

    return (lvl1.dimensionName === lvl2.dimensionName);
}

function getSliceFiltersForLevelField(levelField, sliceConfigs, measureModel) {
    var sliceFilters = Immutable.List(),
        levelFieldQL = mac.levelToQualifiedLevel(levelField.level),
        sameDimSliceConfigs,
        metricFilterLabels,
        applicableSliceConfigs;
    
    if (levelField.filterByAllSlicesInDimension) {
        sameDimSliceConfigs = sliceConfigs.filter(function(cfg) {
            var sameDim = fieldsHaveSameDimension(cfg.sourceField, levelField);
            
            return sameDim && cfg.sourceField.level && !measureModel.qLevelBelow(mac.levelToQualifiedLevel(cfg.sourceField.level), levelFieldQL);
        });
        
        sliceFilters = sameDimSliceConfigs.map(function(cfg) {
            var labelOverride = fieldsHaveSameDimension(cfg.sourceField, levelField) ? levelFieldQL.label : undefined;
            return generateFilterForSliceConfig(cfg, sliceConfigs, measureModel, labelOverride);
        });
    }


    // gather all labels that appear in any of the metric filters applied to the
    // level field
    metricFilterLabels = levelField.filters.reduce(function(reduction, filter) {
        if (!filter.measure.metric) {
            return reduction;
        }
        
        var measureFilterIntersection = mac.getIntersectionForMeasure(filter.measure);
        
        return reduction.concat(measureFilterIntersection
            .filter(function(level) {
                return level.labelName !== levelField.level.labelName;
            })
            .map(function(level) {
                return level.labelName;
            })
        );
    }, Immutable.List());

    applicableSliceConfigs = sliceConfigs.filter(function(cfg) {
        var sliceLevelLabel = cfg.sourceField.level.labelName;
        
        return metricFilterLabels.some(function(lbl) {
            return lbl === sliceLevelLabel;
        });
    });
    
    // create slice filters for all slice configs that share labels with levels
    // in the intersection of a metric filter
    sliceFilters = sliceFilters.concat(applicableSliceConfigs.map(function(cfg) {
        return generateFilterForSliceConfig(cfg, sliceConfigs, measureModel);
    }));
    
    return sliceFilters;
}


function createQueryFiltersForLevelField(levelField, sliceConfigs, measureModel) {
    var levelFieldIsASlice = sliceConfigs.find(function(cfg) {
            return cfg.sourceField.id === levelField.id;
        }),
        sliceFilters = levelFieldIsASlice ? new Immutable.List() : getSliceFiltersForLevelField(levelField, sliceConfigs, measureModel);

    return lodash.compact(levelField.filters.map(function(f) {
        return createQueryFilterFromMACFilter(f, measureModel);
    }).toArray().concat(sliceFilters.toArray()));
}


function getInterLabelMapFromMeasure(measure) {
    return (measure.labelMap && measure.labelMap.toJS()) || {};
}

function generateInterLabelMapFromCanonicalLevel(level) {
    var label = level.labelName, 
        dimension = level.dimensionName,
        interLabelMap = {};

    //since attributes are in terms of their dimension, create a map if this one is different
    if (label !== dimension)
        interLabelMap[dimension] = [label];

    return interLabelMap;
}

function generateIdQuery(levelField, sliceConfigs, measureModel) {
    var ql = mac.levelToQualifiedLevel(levelField.level),
        inter = new MQG.Intersection(ql),
        filters = flattenCompositeFilters(createQueryFiltersForLevelField(levelField, sliceConfigs, measureModel)),
        measure = new querygen.Attribute("id", ql);

    return {
        label: "Header query for id for field: " + levelField.id,
        measure: measure,
        inter: inter,
        interLabelMap: generateInterLabelMapFromCanonicalLevel(levelField.level),
        aggMethodLookup: {},
        filter: filters.length ? combineFiltersForMeasure(measure, inter, filters, measureModel) : undefined,
        mappedInter: inter,
        labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
        functionalQuery: true
    };
}

function generateHeaderQueryForSortConfig(sortIndex, levelField, sliceConfigs, measureModel) {
    var ql = mac.levelToQualifiedLevel(levelField.level),
        mappedInter = new MQG.Intersection(ql),
        sortConfig = levelField.sortConfigs.get(sortIndex),
        inter = sortConfig.measure.metric ? new MQG.Intersection(sortConfig.measure.metric.intersection.map(mac.levelToQualifiedLevel).toJS()) : mappedInter,

        labelMap = queryutil.calcSelfLabelMap(inter.qualified_level),

        queryMeasureResult = generateQueryMeasureFromMeasure(sortConfig.measure, measureModel, sliceConfigs),
        measure = queryMeasureResult.queryMeasure,
        interLabelMap = queryMeasureResult.interLabelMap,

        levelFilters = createQueryFiltersForLevelField(levelField, sliceConfigs, measureModel),
        higherLevelFilters = spliceQueryMeasureFilters(measure, inter, measureModel),
        filters = flattenCompositeFilters(higherLevelFilters.concat(levelFilters)),
        measureQueryFilters = filters.length ? combineFiltersForMeasure(measure, inter, filters, measureModel) : undefined,
        aggMethodLookup = qgutil.generateAggMethodLookupForMeasureAndIntersection(sortConfig.measure, queryMeasureResult.inter, interLabelMap, {}, measureModel);
    
    return {
        label: "Header query for sort config #" + sortIndex + "' for field: " + levelField.id,
        measure: measure,
        inter: inter,
        interLabelMap: interLabelMap,
        aggMethodLookup: aggMethodLookup,
        filter: measureQueryFilters,
        mappedInter: mappedInter,
        labelMap: labelMap,
        functionalQuery: true
    };
}

function generateHeaderQueryForDataConfig(dataConfig, levelField, sliceConfigs, measureModel) {
    var measure = dataConfig.measure,
        measureInter = mac.getIntersectionForMeasure(measure, measureModel),
        inter = mac.intersectionToMQGIntersection(measureInter),
        levelFilters = lodash.compact(createQueryFiltersForLevelField(levelField, sliceConfigs, measureModel, measure).concat(
            dataConfig.filters.map(function(f) {
               return createQueryFilterFromMACFilter(f, measureModel);
            }).toArray()
        )),
        higherLevelFilters = spliceQueryMeasureFilters(measure, inter, measureModel),
        filters = flattenCompositeFilters(higherLevelFilters.concat(levelFilters)),
        queryMeasure = generateQueryMeasureFromMeasure(measure, measureModel).queryMeasure,
        aggMethodLookup = qgutil.generateAggMethodLookupForMeasure(measure, {}, measureModel),
        interLabelMap = getInterLabelMapFromMeasure(measure);

    assert(measureInter.size === 1, "unexpected intersection for measure of header query");

    return {
        label: "Header query for data '" + dataConfig.name + "' for field: " + levelField.id,
        measure: queryMeasure,
        inter: inter,
        interLabelMap: interLabelMap, 
        aggMethodLookup: aggMethodLookup,
        filter: filters.length ? combineFiltersForMeasure(queryMeasure, inter, filters, measureModel) : undefined,
        mappedInter: inter,
        labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
        functionalQuery: true
    };
}

function createQueryFilterFromMACFilter(filter, measureModel) {
    var measure = generateQueryMeasureFromMeasure(filter.measure, measureModel).queryMeasure,
        inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(filter.measure, measureModel)),
        interLabelMap = getInterLabelMapFromMeasure(filter.measure),
        queries = [],
        comparisonByOperator = filter.comparisons.groupBy(function(c) {
           return c.operator;
        }),
        isMetric = !!filter.measure.metric, 
        aggMethodLookup = isMetric ?
            qgutil.generateAggMethodLookupForMetric(filter.measure.metric, filter.measure.labelMap, {}, measureModel)
            : {},
        innerFilterMeasure,
        innerFilterQuery;

    //if the only comparison operator is '=' AND
    //the only comparators are literals, then
    //we can use the more efficient special case of simply creating a LiteralRelation
    //and filtering by position of that
    if (inter.qualified_level.length === 1 && comparisonByOperator.keySeq().toJS().length === 1 &&
        comparisonByOperator.get("=") && comparisonByOperator.get("=").every(function(c) { return !lodash.isUndefined(c.comparator.literal); })) {

        return new queryfilter.MeasureQueryFilter(
            [generateLiteralRelationQuery(inter,
                comparisonByOperator.get("=").map(function(c) {
                    return [c.comparator.literal];
                }).toArray())], true, true);
    } else if (filter.comparisons.size) {
        //otherwise, map each comparison to a query and make a disjunctive by-position filter
        queries = filter.comparisons.map(function(c) {
            if (c.comparator.metric) {
                innerFilterMeasure = new querygen.Metric(c.comparator.metric.name);
                innerFilterQuery = {
                        label: "by metricName filter",
                        measure: innerFilterMeasure,
                        inter: mac.intersectionToMQGIntersection(mac.getIntersectionForMetric(c.comparator.metric, measureModel)),
                        mappedInter: new MQG.Intersection(),
                };

                if (queryutil.getMeasureValueType(innerFilterMeasure, measureModel) !== queryutil.getMeasureValueType(measure, measureModel))
                    innerFilterQuery = {
                        label: "cast filter metric value of " + innerFilterMeasure.name + " to filter measure type",
                        measure: new querygen.Cast(innerFilterQuery, queryutil.getMeasureValueType(measure, measureModel)),
                        inter: innerFilterQuery.inter,
                        mappedInter: innerFilterQuery.mappedInter
                    };

                return {
                    label: "measure filter " + measure.name + " " + c.operator + " " + c.comparator.metric.name,
                    measure: measure,
                    inter: inter,
                    mappedInter: inter,
                    interLabelMap: interLabelMap,
                    aggMethodLookup: aggMethodLookup,
                    labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
                    filter: new queryfilter.MeasureQueryFilter([innerFilterQuery],
                        false, false, { operator: c.operator})
                };
            } else if (!lodash.isUndefined(c.comparator.literal)) {
                return {
                    label: "measure filter " + measure.name + " " + c.operator + " " + c.comparator.literal,
                    measure: measure,
                    inter: inter,
                    mappedInter: inter,
                    interLabelMap: interLabelMap,
                    aggMethodLookup: aggMethodLookup,
                    labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
                    filter: new queryfilter.MeasureQueryFilter(
                        [generateLiteralRelationQuery(new MQG.Intersection(), [[c.comparator.literal]], undefined, queryutil.getMeasureValueType(measure, measureModel))],
                        true, false, { operator: c.operator })
                };
            }
        }).toArray();

        if (queries.length)
            return new queryfilter.MeasureQueryFilter(queries, true, true);
    } else {
        //if no comparisons at all, simply do a by-position filter using this measure
        return new queryfilter.MeasureQueryFilter([{
                label: "by-position filter using " + mac.stringifyFilter(filter),
                measure: measure,
                inter: inter,
                interLabelMap: interLabelMap,
                aggMethodLookup: aggMethodLookup,
                labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
                mappedInter: inter
            }], false, true);
    }
}

function getSortedSameLabelFieldsForLevelField(levelField, fields, measureModel) {
    var sortedMatchingFields = fields.filter(function(f) {
            if (!f.level)
                return false;
            else
                return fieldsHaveSameLabelledDimension(f, levelField);
        })
        .sort(function(a,b) {
            return mac.compareLevelFields(measureModel, a, b);
        })
        .reverse();

    return sortedMatchingFields;
}

function generateFilterForSliceConfig(sliceConfig, sliceConfigs, measureModel, overrideDimensionLabel) {
    var sliceQuery = generateSelectedSliceQuery(sliceConfig, sliceConfigs, measureModel),
        level = overrideDimensionLabel ? sliceConfig.sourceField.level.set("labelName", overrideDimensionLabel) : sliceConfig.sourceField.level,
        ql = mac.levelToQualifiedLevel(level),
        inter = new MQG.Intersection(ql);

    return new queryfilter.MeasureQueryFilter([{
            label: "filter for selected slice value of " + mac.mqgLevelToQName(ql),
            measure: new querygen.Attribute("id", ql), 
            inter: inter,
            mappedInter: inter,
            interLabelMap: generateInterLabelMapFromCanonicalLevel(level),
            aggMethodLookup: {},
            filter: new queryfilter.MeasureQueryFilter(
                [sliceQuery],
                false,
                false,
                {operator: "="}
            ),
            labelMap: queryutil.calcSelfLabelMap([ql])
        }], true, true);
}

function generateSelectedSliceQuery(sliceConfig, sliceConfigs, measureModel) {
    //generate the selected slice queries in order of priority
    //and unify them in an override chain
    var levelField = sliceConfig.sourceField,
        allSliceFields = sliceConfigs.map(function(sc) {
            return sc.sourceField;
        }),
        sameLabelFields = getSortedSameLabelFieldsForLevelField(levelField, allSliceFields, measureModel),
        indexInSameLabelOrder = sameLabelFields.indexOf(levelField),
        childLabelFields = sameLabelFields.filter(function(_, i) {
            return i > indexInSameLabelOrder;
        }),
        //find the lowest one in this label with a selected property
        selectedChildField = childLabelFields.findLast(function(f) {
            var sliceCfg = sliceConfigs.get(allSliceFields.indexOf(f));
            return sliceCfg.bySelection;
        }),
        selectedChildConfig = selectedChildField && sliceConfigs.get(allSliceFields.indexOf(selectedChildField)),
        //if the lowest field with a selection is lower than this one, use it's selection value
        idQuery = generateMeasureQueryForMeasure(mac.mkMeasure({attribute: { name: "id", level: levelField.level }}), measureModel),
        childFieldsWithSliceMetric = childLabelFields.filter(function(f) {
            var sliceCfg = sliceConfigs.get(allSliceFields.indexOf(f));
            return sliceCfg.byMeasure;
        }),
        selectedChildIdQuery,
        selectedIdQuery,
        selectedSliceQueries = [];

    //case 1, this level has a child with a specified value 
    if (selectedChildConfig) {
        selectedChildIdQuery = querygen.cloneMeasureQuery(idQuery);
        selectedChildIdQuery.filter = createQueryFilterFromMACFilter(mac.mkFilter({
            measure: { attribute: { name: "id", level: selectedChildConfig.sourceField.level } },
            comparisons: [{ operator: "=", comparator: {literal: selectedChildConfig.bySelection}}]
        }), measureModel);
        selectedSliceQueries.push($aggQueryToNullaryIntersection(selectedChildIdQuery));
    } else if (sliceConfig.bySelection) {
        //case 2, this level has a specified value
        selectedIdQuery = querygen.cloneMeasureQuery(idQuery);
        selectedIdQuery.filter = new queryfilter.MeasureQueryFilter([generateLiteralScalarQuery(sliceConfig.bySelection)], true, false, {operator: "="});

        selectedSliceQueries.push($aggQueryToNullaryIntersection(selectedIdQuery));
    } else {
        //since they're not mutually exclusive, cases 3 4 and 5 all get checked here
        //
        //case 3, there is a configured child metric name (we need one for each, in order of priority from lowest child to highest)
        childFieldsWithSliceMetric.reverse().forEach(function(f) {
            var sliceCfg = sliceConfigs.get(allSliceFields.indexOf(f)),
                selectedChildIdQuery = querygen.cloneMeasureQuery(idQuery);

            assert(sliceCfg.byMeasure.metric, "Only slices configured by a measure which is a Metric are currently supported");
            selectedChildIdQuery.filter = createQueryFilterFromMACFilter(mac.mkFilter({
                measure: { attribute: { name: "id", level: f.level } },
                comparisons: [{ 
                    operator: "=", 
                    comparator: { metric: { name: sliceCfg.byMeasure.metric.name } }
                }]
            }), measureModel);

            selectedSliceQueries.push($aggQueryToNullaryIntersection(selectedChildIdQuery));
        });

        //case 4, there is a configured metric for this level
        if (sliceConfig.byMeasure)
            selectedSliceQueries.push(generateByMeasureSelectedMemberQueryForField(sliceConfig.sourceField, sliceConfig.byMeasure, sliceConfigs, measureModel));

    } 
    //generate the default member query for the first member for this level in case other queries fail
    selectedSliceQueries.push(generateDefaultSelectedMemberQueryForField(sliceConfig.sourceField, sliceConfigs, measureModel));

    selectedSliceQueries = lodash.compact(selectedSliceQueries);
    assert(selectedSliceQueries.length, "Couldn't generate any slice queries for slice config!");

    return {
        label: "Overriden Selected Slice For " + mac.levelToQName(levelField.level), 
        measure: new querygen.OverriddenMeasureQuery(selectedSliceQueries),
        inter: selectedSliceQueries[0].inter,
        mappedInter: selectedSliceQueries[0].mappedInter,
        aggMethodLookup: selectedSliceQueries[0].aggMethodLookup,
        labelMap: selectedSliceQueries[0].labelMap,
        functionalQuery: true
    };
}

function generateByMeasureSelectedMemberQueryForField(levelField, measure, sliceConfigs, measureModel) {
    var baseMeasureQuery = generateMeasureQueryForMeasure(measure, measureModel),
        inter = baseMeasureQuery.mappedInter,
        valueType = queryutil.getMeasureValueType(baseMeasureQuery.measure, measureModel),
        query;

    if (valueType === "STRING") {
        query = baseMeasureQuery;
    } else if (valueType === "NAMED") {
        query = {
            label: "selected slice query of " + levelField.id + " by measure",
            measure: new querygen.Cast(baseMeasureQuery, "STRING"),
            inter: inter,
            mappedInter: inter,
            aggMethodLookup: {},
            labelMap: queryutil.calcSelfLabelMap(inter.qualified_level),
            functionalQuery: true
        };
    } else {
        throw new Error("Unable to use slice metric of type: " + valueType);
    }
    
    query = $aggQueryToNullaryIntersection(query);
    query.label = "Selected slice for " + levelField.id + " by " + measure.metric.name;

    return query;
}

function compareSliceConfigs(model, cfg1, cfg2) {
    return mac.compareLevelFields(model, cfg1.sourceField, cfg2.sourceField);
}

function generateDefaultSelectedMemberQueryForField(levelField, sliceConfigs, measureModel) {
    var baseIdQuery = generateIdQuery(levelField, sliceConfigs, measureModel),
        coreQuery = generateIdQuery(levelField, sliceConfigs, measureModel),
        query = coreQuery,
        label = levelField.level.labelName,
        cfgCompare = compareSliceConfigs.bind(null, measureModel),
        parentSliceConfigs = sliceConfigs.filter(function(cfg) {
            return fieldsHaveSameDimension(cfg.sourceField, levelField) &&
                mac.compareLevelFields(measureModel, cfg.sourceField, levelField) > 0;
        }),
        parentSliceConfig = parentSliceConfigs.size && parentSliceConfigs.sort(cfgCompare).last();

    if (parentSliceConfig) {
        query.filter = query.filter ?
            queryfilter.conjunctFilters([query.filter,generateFilterForSliceConfig(parentSliceConfig, sliceConfigs, measureModel)])
            :
            query.filter = generateFilterForSliceConfig(parentSliceConfig, sliceConfigs, measureModel);
    }
    
    //for each sort config dice query for it by the previous query (starting with coreQuery),
    //then find the min or max depending on sort direction
    levelField.sortConfigs.forEach(function(sortCfg, sortIndex) {
        var filteredSortQuery = generateHeaderQueryForSortConfig(sortIndex, levelField, sliceConfigs, measureModel),
            thisSortQuery = generateHeaderQueryForSortConfig(sortIndex, levelField, sliceConfigs, measureModel),
            sortMeasure = filteredSortQuery.measure; 

        //filter sort attribute by the last query
        filteredSortQuery.filter = new queryfilter.MeasureQueryFilter([query], true, true); 

        //now make a query representing the filtered agg of the sort member to get the highest/lowest one
        //depending on the sort order
        //since we just want one, the target intersection is nullary
        var aggedSortAttributeQuery = {
            label: "Min of Sort Attribute: " + queryutil.stringifyMeasure(sortMeasure) + " for " + mac.levelToQName(levelField.level), 
            measure: new querygen.FilteredMeasureQuery(filteredSortQuery),
            inter: new MQG.Intersection(),
            mappedInter: new MQG.Intersection(),
            aggMethodLookup: {},
            labelMap: {},
            functionalQuery: true
        };

        //set agg method based on sort order
        aggedSortAttributeQuery.aggMethodLookup[label] = {
            primitive: sortCfg.sortType === Sort.ASCENDING ? "MIN" : "MAX" 
        };
        
        // now filter the normal query by this attribute
        if (thisSortQuery.filter) {
            thisSortQuery.filter = queryfilter.conjunctFilters([thisSortQuery.filter, new queryfilter.MeasureQueryFilter([aggedSortAttributeQuery], false, false, { operator: "=" })]);
        } else {
            thisSortQuery.filter = new queryfilter.MeasureQueryFilter([aggedSortAttributeQuery], false, false, { operator: "=" });
        }
        
        query = thisSortQuery;
    });

    var finalQuery;
    //if the end isn't querying at id, filter the id query by it and return that instead
    //because ultimately we have to query for the id 
    if (!querygen.measuresEqual(baseIdQuery.measure, query.measure)) {
        finalQuery = querygen.cloneMeasureQuery(baseIdQuery);
        
        finalQuery.filter = new queryfilter.MeasureQueryFilter([query], true, true); 
    } else {
        finalQuery = query;
    }

    return $aggQueryToNullaryIntersection(finalQuery);
}

function $aggQueryToNullaryIntersection(query) {
    if (query.mappedInter.qualified_level.length === 0) return query;

    var query = {
        label: "Scalar version of inner query",
        measure: new querygen.FilteredMeasureQuery(query),
        inter: query.mappedInter,
        mappedInter: new MQG.Intersection(),
        aggMethodLookup: {},
        labelMap: {},
        functionalQuery: true
    };

    query.inter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql);
        query.aggMethodLookup[label] = {primitive: "MIN"};
    });

    return query;
}

function generateLiteralRelationQuery(inter, members, name, type) {
    var measure = new querygen.LiteralRelation(inter, members, name, type);

    return {
        label: "literal relation query: " + name,
        measure: measure,
        inter: inter,
        mappedInter: inter,
        aggMethodLookup: {},
        labelMap: queryutil.calcSelfLabelMap(inter.qualified_level)
    };
}

function generateLiteralScalarQuery(value) {
    return {
        label: "Literal scalar query = " + value,
        measure: new querygen.LiteralRelation(new MQG.Intersection(), [[value]], undefined, "STRING"),
        inter: new MQG.Intersection(),
        mappedInter: new MQG.Intersection(),
        aggMethodLookup: {},
        labelMap: {},
        functionalQuery: true
    };
}

/**
 * @return {querygen.MeasureQuery}
 */
function generateMeasureQueryForMeasure(measure, measureModel) {
    var inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, measureModel)),
        queryMeasureResult = generateQueryMeasureFromMeasure(measure, measureModel),
        m = queryMeasureResult.queryMeasure,
        interLabelMap = queryMeasureResult.interLabelMap,
        aggMethodLookup = qgutil.generateAggMethodLookupForMeasure(measure, {}, measureModel),
        //TODO replace when add the use of application measures, pct parent shouldn't be checked explicitly in here
        constrainByAncestor = measure.metric && measureModel.isPctParentMetric(measure.metric.name),
        parentLabel = constrainByAncestor && measureModel.getPctParentConfig(measure.metric.name).parentLabel,
        mappedInter = constrainByAncestor ? new MQG.Intersection(inter.qualified_level.filter(util.not(cubiql.qlevel.labelEquals(parentLabel)))) : inter;

    return {
        label: "measure query for " + queryutil.stringifyMeasure(m),
        measure: m, 
        inter: inter,
        interLabelMap: interLabelMap,
        aggMethodLookup: aggMethodLookup,
        mappedInter: mappedInter,
        constrainByAncestor: constrainByAncestor,
        labelMap: queryutil.calcSelfLabelMap(inter.qualified_level, inter.qualified_level)
    };
}

/**
 * Used to move filters above aggregation when possible. 
 * 
 * CAUTION: This function mutates the given measure!
 * 
 * If the measure (or any nested measure) have filters, this function determines
 * if those filters can be moved to the given intersection. If so, it MUTATES
 * the given measure and removes it's filters. The filters that are at or above the
 * given intersection are returned. If no filters were returned, then nothing was changed.
 * 
 * @param  {querygen.Measure} measure
 * @param  {MQG.Intersection} inter
 * @param  {MeasureModel} measureModel [description]
 * @return {filter.Filter[]}
 */
function spliceQueryMeasureFilters(measure, inter, measureModel) {
    if (measure instanceof querygen.FilteredMeasureQuery) {
        var innerMeasure = measure.measureQuery.measure,
            filter = measure.measureQuery.filter,
            commutedFilters = spliceQueryMeasureFilters(innerMeasure, inter, measureModel),
            allQueryFiltersHigher = areAllQueryFiltersHigher(filter, inter, measureModel),
            filters = [];
            
        if (allQueryFiltersHigher) {
            // strip filters from measure
            delete measure.measureQuery.filter;
            filters = [filter];
        }

        if (commutedFilters.length > 0) {
            filters.concat(commutedFilters);
        }
        
        return filters;
    } else {
        return [];
    }
}

function areAllQueryFiltersHigher(filter, inter, measureModel) {
    if (!filter) {
        return false;
    } else if (filter instanceof queryfilter.CompositeFilter) {
        return filter.filters && filter.filters.every(function(f) {
            return areAllQueryFiltersHigher(f, inter, measureModel);
        });
    } else if (filter instanceof queryfilter.MeasureQueryFilter) {
        return filter.queries && filter.queries.every(function(q) {
            return cubiql.isIntersectionEqualOrHigher(q.inter, inter, measureModel);
        });
    } else {
        throw new Error("Unknown filter of type:" + filter.constructor.name);
    }
}

/**
 * @param {mac.Measure} measure - the mac Measure to conver to a quergen.Measure
 * @param {MeasureModel} measureModel
 * @param {Object} sliceConfigs
 * 
 * @return {Object}
 * @property {querygen.Measure} queryMeasure - the generated query gen measure
 * @property {MQG.Intersection} inter - the intersection to query the query measure at
 * @property {Immutable.Map<SourceLabel, Immutable.List<TargetLabel>> interLabelMap
 * label map that says how to get from the base intersection of the given measure
 * to the intersection of the resulting measure
 */
function generateQueryMeasureFromMeasure(measure, measureModel, sliceConfigs) {
    if (measure.operator) {
        return generateQueryMeasureFromOperator(measure, measureModel, sliceConfigs);
    } else if (measure.metric) {
         return generateQueryMeasureFromMetricMeasure(measure, measureModel, sliceConfigs);
    } else if (measure.attribute) {
        return generateQueryMeasureFromAttribute(measure, measureModel, sliceConfigs);
    } else if (measure.application) {
        return generateQueryMeasureFromApplication(measure, measureModel, sliceConfigs);
    } else {
        assert(false ,"Don't know how to make query measure from measure type");
    }
}

function generateQueryMeasureFromOperator(measure, measureModel, sliceConfigs) {
    var operator = measure.operator,
        innerQueries = operator.measures.map(function(m) {
            return generateMeasureQueryForMeasure(m, measureModel, sliceConfigs);
        }).toArray();

    return { 
        queryMeasure: new querygen.Operator(innerQueries, operator.name),
        inter: mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, measureModel)),
        interLabelMap: getInterLabelMapFromMeasure(measure)
    };
}

function generateQueryMeasureFromMetricMeasure(measure, measureModel, sliceConfigs) {
    if (measure.metric.filters.size || (sliceConfigs && sliceConfigs.size))
        return generateFilteredMeasureQueryFromMetricMeasure(measure, measureModel, sliceConfigs);
    else
        return { 
            queryMeasure: new querygen.Metric(measure.metric.name),
            inter: measureModel.getMeasureInfo(measure.metric.name).inter,
            interLabelMap: getInterLabelMapFromMeasure(measure)
        };
}

function generateQueryMeasureFromAttribute(measure, measureModel) {
    var attribute = measure.attribute;
    assert(!!measureModel.getLevel(attribute.level.dimensionName, attribute.level.levelName), "Could not generate query for attribute due to invalid level.");
    var ql = mac.levelToQualifiedLevel(attribute.level),
        inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, measureModel)),
        interLabelMap = getInterLabelMapFromMeasure(measure);

    if (attribute.name === "label") { //for label we always use an override that falls back to id
        return { 
            queryMeasure: new querygen.OverriddenAttribute([
                new querygen.Attribute('label', ql),
                new querygen.Attribute('id', ql)
            ]),
            inter: inter,
            interLabelMap: interLabelMap
        };
    } else {
        return { 
            queryMeasure: new querygen.Attribute(attribute.name, ql),
            inter: inter,
            interLabelMap: interLabelMap
        };
    }
}

function generateQueryMeasureFromApplication(measure, measureModel, sliceConfigs) {
    var application = measure.application,
        queryMeasure = new querygen.Application(
            mac.signatureToMQGSignature(application.signature),
            generateAbstractionMeasure(application.abstraction, measureModel, sliceConfigs),
            application.interArgs.map(function(arg) {
                var inter = arg.intersection ? mac.intersectionToMQGIntersection(arg.intersection) : undefined;
                return new MQG.InterArgument(arg.name, inter);
            }).toArray(),
            application.exprArgs.map(function(arg) {
                var expr = arg.exprStr ? new MQG.Expr(undefined, undefined, arg.exprStr) : undefined;
                return new MQG.ExprArgument(arg.name, expr);
            }).toArray(),
            application.valueType
        );
        
    return { 
        queryMeasure: queryMeasure,
        inter: mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, measureModel)),
        interLabelMap: getInterLabelMapFromMeasure(measure)
    };
}

function generateAbstractionMeasure(abstraction) {
    return new querygen.Abstraction(
        new querygen.StringMeasure(abstraction.bodyStr),
        abstraction.interArgs.map(function(arg) {
            var inter = arg.intersection ? mac.intersectionToMQGIntersection(arg.intersection) : undefined;
            return new MQG.InterArgument(arg.name, inter);
        }).toArray(),
        abstraction.exprArgs.map(function(arg) {
            var expr = arg.exprStr ? new MQG.Expr(undefined, undefined, arg.exprStr) : undefined;
            return new MQG.ExprArgument(arg.name, expr);
        }).toArray()        
    );
}

function generateFilteredMeasureQueryFromMetricMeasure(measure, measureModel, sliceConfigs) {
    var metric = measure.metric,
        metricMeasure = new querygen.Metric(metric.name),
        filters = metric.filters.map(function(f) {
           return createQueryFilterFromMACFilter(f, measureModel);
        }),
        baseInter = getBaseIntersectionOfMetric(metric, measureModel),
        interLabelMap = getInterLabelMapFromMeasure(measure),
        innerInter = querygen.applyMultiLabelMapToIntersection(interLabelMap, baseInter),
        queryMeasure;

    if (sliceConfigs) {
        filters = filters.concat(sliceConfigs.map(function(cfg) {
            return generateFilterForSliceConfig(cfg, sliceConfigs, measureModel);
        }));
    }
    
    filters = flattenCompositeFilters(filters.toArray());
    
    queryMeasure = new querygen.FilteredMeasureQuery({
        label: "filtered query for " + metric.name,
        measure: metricMeasure, 
        interLabelMap: interLabelMap,
        inter: innerInter,
        aggMethodLookup: {},
        filter: combineFiltersForMeasure(measure, innerInter, filters, measureModel),
        mappedInter: innerInter,
        labelMap: queryutil.calcSelfLabelMap(innerInter.qualified_level)
    });
    
    return { 
        queryMeasure: queryMeasure, 
        inter: innerInter,
        interLabelMap: {}
    };
}

/**
 * Given a list of filters, pulls apart any conjuct CompositeFilters and adds
 * the contained filters to the list. If none of the given filters are CompositeFilters, the list
 * of filters returned will be the same size as the given list.
 * 
 * @param  {querfilter.Filter[]} filters a list of filters to flatten
 * @return {querfilter.Filter[]} a new list of filters with any conjunct CompositeFilters
 *                               split apart and added to the list.
 */
function flattenCompositeFilters(filters) {
    return filters.reduce(function(flattenedFilters, f) {
        if (f instanceof queryfilter.CompositeFilter && f.is_disjunction === false) {
            return flattenedFilters.concat(flattenCompositeFilters(f.filters));
        }
        flattenedFilters.push(f);
        
        return flattenedFilters;
    }, []);
}

function combineFiltersForMeasure(measure, inter, filters, measureModel) {
    var trees = $getFilterTreesForMeasure(measure, inter, filters, measureModel),
        filter = $combineFilterTreesToFilter(trees);

    return filter;
}

function getBaseIntersectionOfMetric(metric, measureModel) {
    return measureModel.getMeasureInfo(metric.name).inter;
}

/**
 * @param {FilterTree} filterTree
 * @return {queryfilter.Filter}
 */
function $filterTreeToFilter(filterTree) {
    var childrenFilter = $combineFilterTreesToFilter(filterTree.children),
        cleanFilter = queryfilter.cloneFilter(filterTree.filter);

    assert(!(cleanFilter instanceof queryfilter.PositionFilter) || 
           ((cleanFilter instanceof queryfilter.PositionFilter) && lodash.isUndefined(childrenFilter)), "a PositionFilter cannot have children!");

    if (childrenFilter)
        $applyChildrenFilterToFilter(cleanFilter, childrenFilter);

    return cleanFilter;
}

function $applyChildrenFilterToFilter(filter, childrenFilter) {
    if (filter instanceof queryfilter.MeasureQueryFilter) {
        filter.queries.forEach(function(q) {
            q.filter = queryfilter.conjunctFilters(lodash.compact([q.filter, childrenFilter]));
        });
    } else if (filter.measureQuery) {
        filter.measureQuery.filter = queryfilter.conjunctFilters(lodash.compact([filter.measureQuery.filter, childrenFilter]));
    } else {
        throw new Error("couldn't figure out how to apply children filter!");
    }
}

/**
 * @param {FilterTree[]} filterTrees
 * @return {queryfilter.Filter}
 */
function $combineFilterTreesToFilter(filterTrees) {
    var filters = filterTrees.map(function(tree) {
        return $filterTreeToFilter(tree);
    });

    return filters.length > 1 ? queryfilter.conjunctFilters(filters) : filters[0];
}

function $getFilterTreesForMeasure(measure, inter, filters, measureModel) {
    var partitionedFilters = util.partition(filters, function(f) {
            if (f.measureQuery && querygen.measuresEqual(measure, f.measureQuery.measure))
                return true;
            return false;
        }),
        filtersForMeasure = partitionedFilters[0],
        otherFilters = partitionedFilters[1],
        otherFilterTrees = $filtersToTrees(undefined, inter, otherFilters, measureModel),
        nullaryTrees = filters.filter(function(f) {
            return $getFilterIntersection(f).qualified_level.length === 0;
        }).map(function(f) {
            return {
                filter: f,
                children: []
            };
        });

    if (filtersForMeasure.length) {
        filtersForMeasure.forEach(function(f) {
            otherFilterTrees = [{
                filter: f,
                children: otherFilterTrees
            }];
        });
    }

    return [].concat(otherFilterTrees, nullaryTrees);
}

function $filtersToTrees(root, inter, filters, measureModel) {
    //clone out filters so we make have our own copies
    filters = filters.map(queryfilter.cloneFilter);

    var unsortedRankedFilters = $rankFilters(inter, filters.filter(function(f) {
            return !$filterHigherInTree(f, root);
        })),
        rankedFilters = $orderSingleDimensionFilters(unsortedRankedFilters, measureModel),
        rootFilters = rankedFilters.filter(function(f, rank) {
            var filterInter = $getFilterIntersection(f),
                overlappingLabels = cubiql.getOverlappingLabels(filterInter, inter),
                higherRankFilters = [];
                
            if (overlappingLabels.length) {
                higherRankFilters = rankedFilters.slice(0, rank).filter(function(higherF) {
                    var higherFilterInter = $getFilterIntersection(higherF),
                        higherOverlappingLabels = cubiql.getOverlappingLabels(higherFilterInter, inter),
                        filterLevel, higherFilterLevel,
                        lbl, 
                        i = 0;
                        
                    for(; i < overlappingLabels.length; i++) {
                        lbl = overlappingLabels[i];
                        filterLevel = filterInter.qualified_level.find(cubiql.qlevel.labelEquals(lbl));
                        higherFilterLevel = higherFilterInter.qualified_level.find(cubiql.qlevel.labelEquals(lbl));
                        if (!higherFilterLevel) {
                            return false;
                        }
                    }
                    
                    return overlappingLabels.every(function(lbl) {
                        if (higherOverlappingLabels.indexOf(lbl) === -1 || !measureModel.findHierarchiesWithLevels(filterLevel.dimension, [filterLevel.level, higherFilterLevel.level]).length) {
                            return false;
                        }
                        return true;
                    });
                });
            }

            return higherRankFilters.length === 0 && (overlappingLabels.length > 0 || filterInter.qualified_level.length === 0);
        }),
        roots = rootFilters.map(function(f) {
            return {
                root: root,
                filter: f
            };
        }),
        trees = roots.map(function(node) {
            return $filtersToTrees(node, $getFilterIntersection(node.filter), filters, measureModel);
        });
    assert(rankedFilters.length < filters.length || lodash.isUndefined(root), "big f up!");

    return roots.map(function(root, i) {
        root.children = trees[i];
        return root;
    });
} 

function $filterHigherInTree(filter, root) {
    if (lodash.isUndefined(root))
        return false;

    return queryutil.filtersEqual(root.filter, filter) || $filterHigherInTree(filter, root.root);
}

function $getFilterIntersection(filter) {
    if (filter instanceof queryfilter.PositionFilter)
        return filter.inter;
    else if (filter instanceof queryfilter.AttributeFilter)
        return new MQG.Intersection(filter.attribute.qualifiedLevel);
    else if (filter instanceof queryfilter.MeasureQueryFilter)
        return filter.queries[0].mappedInter;
    else if (filter instanceof queryfilter.CompositeFilter)
        return filter.filters[0].queries[0].mappedInter;
    else
        return filter.measureQuery.mappedInter;
}

function $orderSingleDimensionFilters(rankedFilters, measureModel) {
    //we want to find the single-dimension filters, 
    //group them by label, and sort those groups by their ordering,
    //then re-insert them at the point where the first occurrence was found and
    //then finally remove the original occurrences
    var singleDimFilters = rankedFilters.filter(function(f) {
            var filterInter = $getFilterIntersection(f);
            return filterInter.qualified_level.length === 1;
        }),
        singleDimFiltersByQLName = lodash.groupBy(singleDimFilters, function(f) {
            var filterInter = $getFilterIntersection(f);

            return mac.mqgLevelToQName(filterInter.qualified_level[0]);
        }),
        singleDimHierLabels  = singleDimFilters.map(function(f) {
            var filterInter = $getFilterIntersection(f);
            return {
                label: cubiql.qlevel.getLabel(filterInter.qualified_level[0]),
                hierarchy: cubiql.qlevel.getHierarchy(filterInter.qualified_level[0])
            }
        }),
        singleLabelFirstIndex = singleDimHierLabels.map(function(hierLabel) {
            return rankedFilters.findIndex(function(f) {
                var filterInter = $getFilterIntersection(f);
                return filterInter.qualified_level.length === 1 &&
                    cubiql.qlevel.getLabel(filterInter.qualified_level[0]) === hierLabel.label && 
                    cubiql.qlevel.getHierarchy(filterInter.qualified_level[0]) === hierLabel.hierarchy;
            });
        }),
        singleDimFiltersByHierLabel = lodash.reduce(singleDimFilters, function(groupedFilters, f, i) {
            var groupKey = $getHierarchyLabelKey(singleDimHierLabels[i].hierarchy, singleDimHierLabels[i].label);

            groupedFilters[groupKey] = groupedFilters[groupKey] || [];
            groupedFilters[groupKey].push(f);
            return groupedFilters;
        }, {}),
        sortedSingleDimFiltersByHierLabel = lodash.mapValues(singleDimFiltersByHierLabel, function(filters) {
            var qls = filters.map(function(f) {
                return $getFilterIntersection(f).qualified_level[0];
            });

            return cubiql.sortQualifiedLevelsByHierarchy(qls, measureModel);
        }),
        orderedRankedFilters = lodash.compact(lodash.flatten(rankedFilters.map(function(f, i) {
            var filterInter = $getFilterIntersection(f),
                singleDim = filterInter.qualified_level.length === 1,
                hierLabel;

            if (!singleDim) {
                return f;
            } else if (singleLabelFirstIndex.indexOf(i) > -1) {
                hierLabel = $getHierarchyLabelKey(cubiql.qlevel.getHierarchy(filterInter.qualified_level[0]), cubiql.qlevel.getLabel(filterInter.qualified_level[0]));

                return lodash.flatten(sortedSingleDimFiltersByHierLabel[hierLabel].map(function(ql) {
                    var qlName = mac.mqgLevelToQName(ql);
                    return singleDimFiltersByQLName[qlName]
                }));
            }
        })));

    return orderedRankedFilters;
}

function $getHierarchyLabelKey(hierarchy, label) {
    return hierarchy + ":" + label;
}

function $rankFilters(inter, filters) {
    return lodash.sortBy(filters, function(f) {
        var filterInter = $getFilterIntersection(f);
        return (cubiql.getOverlappingLabels(filterInter, inter).length*100 + filterInter.qualified_level.length)*-1
    });
}

module.exports.ConfigQueryTypes = ConfigQueryTypes;
module.exports.QueryGenerator = QueryGenerator;
module.exports.$combineFiltersForMeasure = combineFiltersForMeasure;
module.exports.$createQueryFiltersForLevelField = createQueryFiltersForLevelField;
module.exports.generateAbstractionMeasure = generateAbstractionMeasure;

},{"../constant/sort":203,"../cubiql":211,"../formatter":227,"../multiaxisconfig":253,"../multiaxisheading":254,"../querygen/filter":257,"../querygen/query":258,"../querygen/util":260,"../util":280,"./modelutility":246,"./queryutil":249,"./validity":251,"assert":undefined,"immutable":44,"lodash":90,"measure-query-gen/src/MQG":1}],249:[function(require,module,exports){
"use strict";

var cubiql = require("../cubiql");
var mac = require("../multiaxisconfig");
var Immutable = require("immutable");
var assert = require("assert");
var lodash = require("lodash");
var MQG = require("measure-query-gen/src/MQG");

var util = module.exports;

/**
 * @param {mac.Measure} editMeasure
 * @param {MeasureModel} measureModel
 * @return {Boolean}
 */
util.getSpreadMethodLookup = function(editMeasure, measureModel) {
    if (!editMeasure.metric) return;
    var metric = editMeasure.metric,
        metricInfo = measureModel.getMeasureInfo(metric.name),
        metricInter = metricInfo.inter,
        configuredInter = mac.intersectionToMQGIntersection(mac.getIntersectionForMetric(metric, measureModel)),
        defaultUpdateMethod = metricInfo.update_method,
        methodLookup = {},
        labelMap = editMeasure.labelMap || new Immutable.Map(),
        nonBaseLabels = [],
        satisfiedAllLabels = true;

    metricInter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            lableMapLabel = labelMap.get(label),
            mappedLabel = lableMapLabel ? lableMapLabel.toJS()[0] : label,
            targetQl = configuredInter.qualified_level.find(cubiql.qlevel.labelEquals(mappedLabel));

        if (!targetQl || ql.level !== targetQl.level)
            nonBaseLabels.push(label);
    });

    nonBaseLabels.forEach(function(lbl) {
        //TODO if can't find the lookup, satisfied is false
        if (!defaultUpdateMethod && !metricInfo.recalc)
            satisfiedAllLabels = false;
        else if (defaultUpdateMethod && defaultUpdateMethod.primitive && !defaultUpdateMethod.named)
            methodLookup[lbl] = defaultUpdateMethod.primitive;
        else if (defaultUpdateMethod && defaultUpdateMethod.named)
            methodLookup[lbl] = util.getNamedSpreadMethodForLabel(defaultUpdateMethod.named, lbl, measureModel);
    });

    if (satisfiedAllLabels)
        return methodLookup;
    else
        return;
}; 

/**
 * Returns the spread method for the 'label' parameter from the composite spread method 'namedSpread'
 * 
 * @param {String} namedSpread
 * @param {String} label
 * @param {MeasureModel} measureModel
 * @return {Immutable.Map}
 */
util.getNamedSpreadMethodForLabel = function(namedSpread, label, measureModel) {
    var spreadDef = measureModel.getSpreadDefinition(namedSpread),
        compositeMethods;
    assert(spreadDef, "Could not find spread by the name " + namedSpread);
    compositeMethods = spreadDef.get("spread").get("composite");

    return compositeMethods.find(function(compMethod) {
        return (compMethod.get("label") === label || compMethod.get("dimension") === label);
    });
};

/**
 * @param {mac.Metric} metric
 * @param {querygen.LabelMap} labelMap
 * @param {Object<Label, Rollupconfig>} rollupConfigsByMeasureLabel
 * @param {MeasureModel} measureModel
 * @return {AggMethodLookup}
 */
util.generateAggMethodLookupForMetric = function(metric, labelMap, rollupConfigsByMeasureLabel, measureModel) {
    var metricInfo = measureModel.getMeasureInfo(metric.name),
        metricInter = metricInfo.inter,
        defaultAggMethod = metricInfo.agg_method,
        isRecalc = !!metricInfo.recalc;

    return util.generateAggMethodLookupForIntersection(metricInter, defaultAggMethod, isRecalc, labelMap, rollupConfigsByMeasureLabel, measureModel); 
};

util.generateAggMethodLookupForIntersection = function(metricInter, defaultAggMethod, isRecalc, labelMap, rollupConfigsByMeasureLabel, measureModel) {
    var usedLabels = [],
        methodLookup = {},
        invertedLabelMap;
    
    if (isRecalc) return methodLookup;

    invertedLabelMap = util.invertLabelMap(labelMap);
    labelMap = Immutable.Map.isMap(labelMap) ? labelMap.toJS() : {};

    metricInter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            mappedTo = labelMap[label];

        if (!mappedTo || !mappedTo.length)
            usedLabels.push(label);
        else
            usedLabels = usedLabels.concat(mappedTo);
    });

    usedLabels.forEach(function(label) {
        var byLabelRollupCfg = rollupConfigsByMeasureLabel[label],
            method,
            baseLabel = invertedLabelMap.get(label) || label;

        if (!byLabelRollupCfg || !byLabelRollupCfg.methodName || byLabelRollupCfg.methodName === "DEFAULT")
            method = defaultAggMethod;
        else {
            method = util.generateAggMethodByName(byLabelRollupCfg.methodName, measureModel);
        }

        if (method) {
            if (!method.named) {
                methodLookup[label] = method; 
            } else {
                // if the method is named, look up the named method and insure that this label is covered by it,
                // this lookup needs to be done according to the base label (e.g. Product instead of Product2) since
                // that is how they are stored in the measure model
                var namedMethod = util.getNamedMethodForToLabel(method.named, baseLabel, measureModel);
                if (namedMethod) {
                    namedMethod = namedMethod.toJS();
                    namedMethod.label = label; //reset label to be the mapped label
                    methodLookup[label] = namedMethod;
                }
            }
        }
    });

    return methodLookup;
};


/**
 * @param {String} aggName
 * @param {String} label
 * @param {MeasureModel} measureModel
 * @return {Immutable.Map}
 */
util.getNamedMethodForToLabel = function(aggName, label, measureModel) {
    var agg = measureModel.getAggregation(aggName),
        compositeMethods;
    assert(agg, "Could not find aggregation by the name " + aggName);
    compositeMethods = agg.get("method").get("composite");

    return compositeMethods.find(function(compMethod) {
        return compMethod.get("label") === label;
    });
};

/**
 * @param {String} name
 * @param {MeasureModel} measureModel
 * @return {AggMethod}
 */
util.generateAggMethodByName = function(name, measureModel) {
    var aggDef = measureModel.getAggregation(name);
    if (aggDef) { //if we could find it then return instructions to use it as named
        return {
            named: name
        };
    } else {
        assert(measureModel.getPrimitiveAggMethods().indexOf(name), "Unknown primitive aggregation method '" + name + "'");
        return {
            primitive: name
        };
    }
};

/**
 * @param {mac.Measure} measure
 * @param {Object<Label, RollupConfig>} rollupConfigsByMeasureLabel
 * @param {MeasureModel} measureModel
 * @return {AggMethodLookup}
 */
util.generateAggMethodLookupForMeasure = function(measure, rollupConfigsByMeasureLabel, measureModel) {
    if (measure.metric)
        return util.generateAggMethodLookupForMetric(measure.metric, measure.labelMap, rollupConfigsByMeasureLabel, measureModel);
    else
        return {};
};

util.generateAggMethodLookupForMeasureAndIntersection = function(measure, inter, interLabelMap, rollupConfigsByMeasureLabel, measureModel) {
    if (measure.metric) {
        var metricInfo = measureModel.getMeasureInfo(measure.metric.name),
            defaultAggMethod = metricInfo.agg_method;
        return util.generateAggMethodLookupForIntersection(inter, defaultAggMethod, !!metricInfo.recalc, interLabelMap, {}, measureModel);        
    }
    else
        return {};
};

/**
 * @param {MQG.Intersection} targetInter
 * @param {Field[]} fieldList
 * @param {RollupConfig[]} rollups
 * @param {ModelUtility} modelUtil
 * @return {Object<Label, RollupConfig>}
 */
util.getRollupConfigsByMeasureLabel = function(targetInter, fieldList, rollups, modelUtil) {
    var rollupConfigsByMeasureLabel = {},
        innerFields = modelUtil.calcInnerFields(fieldList),
        innerLevelFields = innerFields.filter(function(f) { return f instanceof mac.LevelField; }),
        innerLevelFieldsByLabel = lodash.groupBy(innerLevelFields, function(f) {
            return f.level.labelName;
        });

    targetInter.qualified_level.map(function(ql) {
        var measureLabel = cubiql.qlevel.getLabel(ql),
            labelLevels = innerLevelFieldsByLabel[measureLabel],
            levelField = labelLevels && labelLevels[0],
            fieldIndex = levelField && fieldList.indexOf(levelField),
            rollup = levelField && fieldIndex > -1 && rollups[fieldIndex];
        assert(!labelLevels || labelLevels.length === 1, "Too many inner fields for the label: " + measureLabel);
        
        if (rollup)
            rollupConfigsByMeasureLabel[measureLabel] = rollup;
    });

    return rollupConfigsByMeasureLabel;
};

/**
 * Checks the labelMap to see if it has a split dimension mapping as indicated
 * by one label mapping to more than one other label. If labelMap is 
 * undefined, returns false.
 * 
 * @param  {MQG.LabelMap|undefined} labelMap
 * @return {Boolean}
 */
util.isDimensionSplit = function(labelMap) {
    if (!labelMap)
        return false;
    
    return labelMap.some(function(toList) {
        return toList.size > 1;
    });
};

/**
 * Inverts a label map such that every value is now a key and it's value was 
 * the previous key. 
 *
 * E.g. 
 * { "Product": ["Product2","Product"], "Calendar": ["Calendar"]} =>
 *  { "Product": "Product", "Product2": "Product", "Calendar": "Calendar" }
 * 
 * @param  {LabelMap} labelMap the label map to invert
 * @return {Immutable.Map}
 */
util.invertLabelMap = function(labelMap) {
    if (!labelMap) 
        return Immutable.Map();
        
    if (!Immutable.Map.isMap(labelMap))
        labelMap = Immutable.fromJS(labelMap);
    
    var invertedMap = labelMap.reduce(function(reduction, toLabels, fromLabel) {
        return toLabels.reduce(function(r, toLabel) {
            return r.set(toLabel, fromLabel);
        }, reduction);
    }, Immutable.Map());
    
    return invertedMap;
};

/**
 * Redefines the intersection in terms of base dimension labels instead of
 * the arbitrarily chosen labels defined by the LabelMap. This is needed b/c
 * editability checks only support dimension names as labels. If labelMap is
 * undefined, returns the original intersection.
 *
 * @throws {AssertionError} if the labelMap contains a dimension split
 * 
 * @param  {MQG.Intersection} intersection
 * @param  {MQG.LabelMap|undefined} labelMap
 * @return {MQG.Intersection}
 */
util.invertIntersectionLabelling = function(intersection, labelMap) {
    assert(!util.isDimensionSplit(labelMap), "Cannot invert the labelling of a split dimension.");
    
    if (!labelMap) 
        return intersection;
    
    var invertedMap = util.invertLabelMap(labelMap),
        relabelledQLs = intersection.qualified_level.map(function(ql) {
            var label = invertedMap.has(ql.label) ? invertedMap.get(ql.label) : ql.label;
            return new MQG.QualifiedLevel(ql.dimension, ql.level, ql.hierarchy, label);
        });
    
    return new MQG.Intersection(relabelledQLs);
};

},{"../cubiql":211,"../multiaxisconfig":253,"assert":undefined,"immutable":44,"lodash":90,"measure-query-gen/src/MQG":1}],250:[function(require,module,exports){
"use strict";

var assert = require("assert");
var MQG = require("measure-query-gen/src/MQG");
var mac = require("../multiaxisconfig");
var cubiql = require("../cubiql");
var util = require("../util");
var querygen = require("../querygen/query");
var queryutil = require("../querygen/util");
var maquerygen = require("./querygen.js");
var lodash = require("lodash");

var ug = module.exports;

ug.createRequestForEdits = function(edits, userLocks, model, metricsConfig) {
    var updateRequests = [],
        lockExprs = [];

    lodash.forEach(lodash.groupBy(edits, function(edit) {
        return edit.editConfig.coreEditMeasure.toString() + edit.edit.isDelete + edit.edit.spreadMethod;
    }), function(editGroup) {
        var exampleEdit = editGroup[0],
            editConfig = exampleEdit.editConfig,
            coreEditMeasure = exampleEdit.editConfig.coreEditMeasure,
            valueType = getMeasureMQGType(model.getMeasureInfo(coreEditMeasure.metric.name), model),
            isDelete = exampleEdit.edit.isDelete,
            inputSig = ug.computeInputSignatureForEdit(coreEditMeasure, editConfig, model),
            distribution = ug.computeDistributionFromEditMeasure(coreEditMeasure, isDelete, model),
            spreadKind = exampleEdit.edit.spreadMethod ? {primitive: exampleEdit.edit.spreadMethod} : undefined,
            valueColumn = [],
            keyColumnPosKeys = ug.computeKeyPositionKeys(coreEditMeasure, editConfig, model),
            keyColumnIds = keyColumnPosKeys.map(function() {
                return [];
            }),
            dataColumns;

        assert(coreEditMeasure.metric, "Currently only implementing edits for metrics");

        editGroup.forEach(function(edit) {
            var i = 0,
                position = edit.positionInfo.position,
                editPayload = edit.edit;

            for (; i < keyColumnPosKeys.length; i++) {
                keyColumnIds[i].push(position[keyColumnPosKeys[i]]);
            }

            valueColumn.push(editPayload.data);
        });

        dataColumns = inputSig.intersection.qualified_level.map(function(ql, i) {
            var type = model.getAttributeType("id", ql.dimension, ql.level);

            return ug.mkColumn(new MQG.Type(type), keyColumnIds[i], model);
        }); 

        dataColumns.push(ug.mkColumn(valueType, valueColumn, model));

        if (editConfig.editOptions.pctParentConfig) {
            lockExprs = lockExprs.concat(ug.generatePctParentLockExprs(editConfig, dataColumns, model));
        }

        var updateExpr = new MQG.UpdateExpr(
            isDelete ? "REMOVE" : "SPREAD",
            coreEditMeasure.metric.name,
            distribution ? [new MQG.UpdateTransform(spreadKind, distribution)] : []
        );

        updateRequests.push(new MQG.UpdateRequest(
            updateExpr,
            ug.createSource(editConfig, dataColumns, isDelete, model)
        ));
    });

    lockExprs = lockExprs.concat(ug.computeLocks(edits, userLocks || [], model, metricsConfig));

    return new MQG.Request(undefined, updateRequests, undefined, undefined, lockExprs); 
};

ug.generatePctParentLockExprs = function(editConfig, dataColumns, model) {
    var coreEditMeasure = editConfig.coreEditMeasure, 
        pctParentConfig = editConfig.editOptions.pctParentConfig,
        signature = ug.computeInputSignatureForEdit(coreEditMeasure, editConfig, model),
        inter = signature.intersection,
        parentIntersection = new MQG.Intersection(inter.qualified_level.map(function(ql) {
            if (ql.dimension == pctParentConfig.parentLevel.dimensionName)
                return cubiql.relabelQL(mac.levelToQualifiedLevel(pctParentConfig.parentLevel), cubiql.qlevel.getLabel(ql));
            else
                return ql;
        }).filter(function(ql) { 
            return ql.level !== "ALL";
        })),
        lockExpr = createNeutralConstantExprAt(signature.type.type, parentIntersection, model)
            .diceBy(new MQG.LiteralExpr("GENERAL", signature, dataColumns));

    //TODO will have to fix when you can edit non-metrics
    return new MQG.Lock(coreEditMeasure.metric.name, lockExpr, true);
};

ug.createSource = function(editConfig, dataColumns, isDelete, model) {
    if (isDelete)
        return ug.createDeleteSource(editConfig, dataColumns, model);
    else
        return ug.createEditSource(editConfig, dataColumns, model);
};

ug.createEditSource = function(editConfig, dataColumns, model) {
    var coreEditMeasure = editConfig.coreEditMeasure,
        signature = ug.computeInputSignatureForEdit(coreEditMeasure, editConfig, model),
        inter = signature.intersection,
        backingMetric = coreEditMeasure.metric.name,
        metricInfo = model.getMeasureInfo(backingMetric),
        editLiteral = new MQG.LiteralExpr("GENERAL", signature, dataColumns),
        parentIntersection,
        pctParentConfig,
        defaultLookup = {};

    if (editConfig.editOptions.pctParentConfig) {
        pctParentConfig = editConfig.editOptions.pctParentConfig;
        parentIntersection = new MQG.Intersection(inter.qualified_level.map(function(ql) {
            if (ql.dimension == pctParentConfig.parentLevel.dimensionName)
                return cubiql.relabelQL(mac.levelToQualifiedLevel(pctParentConfig.parentLevel), cubiql.qlevel.getLabel(ql));
            else
                return ql;
        }).filter(function(ql) { 
            return ql.level !== "ALL";
        }));
        metricInfo.inter.qualified_level.forEach(function(ql) {
            defaultLookup[ql.label] = querygen.getAggMethod(undefined, model.getMeasureInfo(backingMetric));
        });

        return querygen.explicitAggExpr(new MQG.MetricExpr(backingMetric), parentIntersection, defaultLookup, model)
            .prev()
            .widen(inter)
            .multiply(editLiteral);
    } else if (editConfig.dataConfig.customEdit) {
        var absMeasure = maquerygen.generateAbstractionMeasure(editConfig.dataConfig.customEdit.inputAbstraction);
        var inputSig = mac.signatureToMQGSignature(editConfig.dataConfig.customEdit.inputValueSignature);
        inputSig.intersection.qualified_level = inter.qualified_level.concat(inputSig.intersection.qualified_level);
        editLiteral = new MQG.LiteralExpr("GENERAL", inputSig, dataColumns);
        var appMeasure = new querygen.Application(
            inputSig,
            absMeasure,
            [new MQG.InterArgument('inter', signature.intersection)],
            [new MQG.ExprArgument('input', editLiteral)]
        );
        var expr = querygen.createApplicationExpr(appMeasure, model);
        queryutil.cleanMQGExpr(expr);

        return expr;
    } else {
        return editLiteral;
    }
};

ug.createDeleteSource = function(editConfig, dataColumns, model) {
    var coreEditMeasure = editConfig.coreEditMeasure,
        metricName = coreEditMeasure.metric.name,
        valueType = getMeasureMQGType(model.getMeasureInfo(coreEditMeasure.metric.name)),
        signature = ug.computeInputSignatureForEdit(coreEditMeasure, editConfig, model),
        positionSignature = ug.computeInputSignatureForEdit(coreEditMeasure, editConfig, model),
        metricInfo = model.getMeasureInfo(metricName),
        defaultLookup = {},
        positionOnlyColumns = dataColumns.slice(0, dataColumns.length - 1),
        positionLiteral,
        sourceExpr;

    //remove value type to make position only    
    positionSignature.type = undefined;
    positionLiteral = new MQG.LiteralExpr("GENERAL", positionSignature, positionOnlyColumns);

    metricInfo.inter.qualified_level.forEach(function(ql) {
        defaultLookup[ql.label] = querygen.getAggMethod(undefined, model.getMeasureInfo(metricName));
    });

    sourceExpr = querygen.createMeasureExpr(new querygen.Metric(coreEditMeasure.metric.name), signature.intersection, {}, defaultLookup, model);

    if (positionSignature.intersection.qualified_level.length)
        sourceExpr = sourceExpr.diceBy(positionLiteral);

    sourceExpr = sourceExpr.prev();

    //why do we drop strings for only string deletes? its a mystery only the measure service knows
    if (metricInfo.type && metricInfo.type.kind === "STRING")
        sourceExpr = sourceExpr.drop();
    return sourceExpr;
};

ug.computeInputSignatureForEdit = function(coreEditMeasure, editConfig, model) {
    var measureInfo = model.getMeasureInfo(coreEditMeasure.metric.name),
        valueType = getMeasureMQGType(measureInfo),
        inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(coreEditMeasure, model)),
        interLabelMap = (coreEditMeasure.labelMap && coreEditMeasure.labelMap.toJS()) || {},
        baseLabelInter = querygen.reverseMultiLabelMapOnIntersection(interLabelMap, inter);

    if (editConfig.editOptions.pctParentConfig)
        baseLabelInter = new MQG.Intersection(baseLabelInter.qualified_level.filter(util.not(cubiql.qlevel.labelEquals(editConfig.editOptions.pctParentConfig.parentLevel.labelName))));

    //TODO will have to support SET types when we have multi-edits per-cell
    return new MQG.BaseSignature(baseLabelInter, new MQG.ValueType("SINGLETON", valueType));
};

ug.computeKeyPositionKeys = function(coreEditMeasure, editConfig, model) {
    var inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(coreEditMeasure, model));

    if (editConfig.editOptions.pctParentConfig)
        inter = new MQG.Intersection(inter.qualified_level.filter(util.not(cubiql.qlevel.labelEquals(editConfig.editOptions.pctParentConfig.parentLevel.labelName))));
        
    return inter.qualified_level.map(mac.mqgLevelToQName);
};

ug.computeDistributionFromEditMeasure = function(coreEditMeasure, isDelete, model) {
    //TODO handle non-metrics
    var metricName = coreEditMeasure.metric.name,
        measureInfo = model.getMeasureInfo(coreEditMeasure.metric.name),
        inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(coreEditMeasure, model)),
        baseInter = model.getMeasureInfo(metricName).inter;

        //only need distribution if not at base or if a delete on a STRING for some reason..
    if (!cubiql.intersectionEqual(inter, baseInter) && !(isDelete && measureInfo.type.kind === "STRING")) {
        return baseInter.qualified_level.map(function (pos) {
            var qLevel = {
                    dimension: pos.dimension,
                    level: pos.level
                },
                matchingInterLevel = inter.qualified_level.find(cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(pos))),
                //the hierarchy is that of the same-label level from the actual edit inter, unless it isn't there in which
                //case we use the one of the position, if available
                hierarchy = matchingInterLevel ? 
                    matchingInterLevel.hierarchy
                    :
                    "hierarchy" in pos && pos.hierarchy !== undefined ? pos.hierarchy : undefined;

            qLevel.hierarchy = hierarchy;

            return qLevel;
        });
    }
};

/**
 * @param {MQG.Type} mqgType
 * @param {(String|Number)[]} values
 *
 * @return {MeasureProtocol.Column} column of values
 */
ug.mkColumn = function(mqgType, values, model) {
    var type = getTypeOfMQGType(mqgType, model);
    return new MQG.Column(type, values.map(cubiql.getParser(type)));
};

ug.computeLocks = function(edits, userLocks, model, metricsConfig) {
    var locks = {},
        metrics = {};

    edits.forEach(function(edit) {
        //TODO handle this when non-metric edit measures anymore
        var coreEditMeasure = edit.editConfig.coreEditMeasure,
            name = coreEditMeasure.metric.name;
        if (!metrics[name])
            metrics[name] = true;
    });

    lodash.forEach(metrics, function(_, metricName) {
        var metricConfig = metricsConfig && metricsConfig[metricName];

        if (metricConfig) {
            locks[metricName] = metricConfig.locks || [];
        }
    });

    userLocks.forEach(function(lock) {
        var metricName = lock.editConfig.coreEditMeasure.metric.name,
            positionFn = lock.editConfig.positionFn,
            existigLocks = locks[metricName] || [],
            lockPositions = lock.positions.map(function(p) {
                return positionFn([p.members]);
            }),
            userLocks = lodash.flatten(lockPositions.map(function(p) {
                return lock.editConfig.metricInters.map(function(mi, i) {
                    return { qualifiedLevels: mi.inter.qualified_level, members: p[i].members, historical: false };
                });
            }));
            
        locks[metricName] = existigLocks.concat(userLocks);
    });
    
    var metricLocks = lodash.chain(locks)
        .map(function(metricLocks, metricName){
            var metricInfo = model.getMeasureInfo(metricName),
                baseInter = metricInfo.inter;

            return metricLocks.map(function (lock) {
                // historical locks are nonconvertible, to avoid materializing updates on those positions
                var convertible = !lock.historical,
                    valueType = getMeasureMQGType(metricInfo, model),
                    //the dicer that allows only the positions we want to lock
                    lockDicer = lock.historical ? 
                        //for historical locks, use the metric that shows this (dropping any pointless value if it exists
                        (new MQG.MetricExpr(lock.name))
                        :
                        //for non-historical locks, create a literal expression for the lock positions     
                        createLockLiteralExpr(model, lock.qualifiedLevels, lock.members, valueType),
                    //the lock intersection is the bas for historicals, or whatever the lock says it is for non-historical
                    targetIntersection = lock.historical ? new MQG.Intersection(baseInter.qualified_level) : new MQG.Intersection(lock.qualifiedLevels),
                    lockExpr = createNeutralConstantExprAt(valueType, targetIntersection, model).diceBy(lockDicer);

                return new MQG.Lock(metricName, lockExpr, convertible);
            });
        }).value();

    return Array.prototype.concat.apply([], metricLocks);
};

/**
 * Create an update request that creates a new instance of the level w/ the given id and label.
 * @param  {QualifiedLevel} level  Level a new instance will be created for.
 * @param  {string}         id     ID of the new instance.
 * @param  {string}         label  Label of the new instance.
 * @return {MQG.Request}           Request that needs to be sent to create a new instance.
 */
ug.createRequestForLevelCreation = function(level, id, label) {
    var qLevel = new MQG.QualifiedLevel(level.dimensionName, level.levelName),
        idParamExpr = new MQG.ParamExpr("id-" + id, new MQG.BaseSignature(new MQG.Intersection(["String.String.String"]))),
        labelParamExpr = new MQG.ParamExpr("label-" + id,
            new MQG.BaseSignature(new MQG.Intersection([qLevel]), new MQG.ValueType("SINGLETON", new MQG.Type("string")))),
        updates = [
            new MQG.UpdateRequest(
                new MQG.UpdateExpr("SPREAD", new MQG.Target(qLevel), []),
                idParamExpr
            ),

            new MQG.UpdateRequest(
                new MQG.UpdateExpr("SPREAD", new MQG.Target(mac.levelAttributeToMQGAttribute(level, "label")), []),
                labelParamExpr
            )
        ],
        relations = [
            new MQG.RelationBinding(
                idParamExpr,
                new MQG.LiteralExpr("GENERAL",
                    new MQG.BaseSignature(new MQG.Intersection(["String.String.String"])),
                    [new MQG.Column("STRING", id)]
                )
            ),
            new MQG.RelationBinding(
                labelParamExpr,
                new MQG.LiteralExpr("GENERAL",
                    new MQG.BaseSignature(new MQG.Intersection([qLevel]), new MQG.ValueType("SINGLETON", new MQG.Type("string"))),
                    [new MQG.Column("STRING", id), new MQG.Column("STRING", label)]
                )
            )
        ];

    return new MQG.Request(undefined, updates, relations);
};

/**
 * Create an LiteralExpr for locking
 *
 * @param {MeasureModel} model
 * @param {MeasureProtocol.QualifiedLevel[]} qualifiedLevels
 * @param {(String|Number)[]} members
 * @param {MQG.Type} mqgType
 *
 * @retrurn {MQG.LiteralExpr}
 */
function createLockLiteralExpr(model, qualifiedLevels, members, mqgType) {
    var neutralValue = getNeutralElementForMQGType(mqgType, model),
        columnValues,
        memberTypes,
        columns,
        signature;

    if (lodash.isArray(members[0])) {
        members.push(lodash.map(lodash.range(0, members[0].length), function() {
            return neutralValue;
        }));
    } else {
        members.push(neutralValue);
    }

    memberTypes = qualifiedLevels.map(function(pos) {
        return new MQG.Type(model.getAttributeType("id", pos.dimension, pos.level));
    }).concat([mqgType]);

    columns = memberTypes.map(function(type, i) {
        columnValues = members[i];
        return ug.mkColumn(type, lodash.isArray(columnValues) ? columnValues : [columnValues], model);
    });

    signature = new MQG.BaseSignature(new MQG.Intersection(qualifiedLevels), new MQG.ValueType("SINGLETON", mqgType)); 

    return new MQG.LiteralExpr("GENERAL", signature, columns);
}

function getNeutralElementForMQGType(mqgType, model) {
    var primType = getTypeOfMQGType(mqgType, model);

    return cubiql.getParser(primType)(cubiql.getNeutralElement(primType));
}

/**
 * Create a Constant expression that widens the neutral value of the type to the given intersection
 *
 * @param {MQG.Type} mqgType
 * @param {MQG.Intersection} intersection
 * @retrurn {MQG.Expr}
 */
function createNeutralConstantExprAt(mqgType, intersection, model) {
    var value = getNeutralElementForMQGType(mqgType, model),
        primType = getTypeOfMQGType(mqgType, model);

    assert(!lodash.isUndefined(value), "Couldn't get a value of type '" + JSON.stringify(mqgType) + "'");
    return new MQG.ConstantExpr(value, primType)
        .widenBy(intersection);
}

/**
 * TODO this is redundant with other parts of the code that get types, re-use those
 *
 * Returns the measure's type.
 *
 * @param {MeasureModel} model
 * @param {MeasureInfo} measureInfo
 *
 * @return {MQG.Type} The measure's type
 */
function getMeasureMQGType(measureInfo) {
    return measureInfo.type && new MQG.Type(measureInfo.type.kind, measureInfo.type.named);
}

function getTypeOfMQGType(mqgType, model) {
    if (!mqgType.named)
        return mqgType.kind;
    else
        return model.getBackingType(mqgType.named);
}

},{"../cubiql":211,"../multiaxisconfig":253,"../querygen/query":258,"../querygen/util":260,"../util":280,"./querygen.js":248,"assert":undefined,"lodash":90,"measure-query-gen/src/MQG":1}],251:[function(require,module,exports){
"use strict";

var queryutil = require("../querygen/util");
var qgutil = require("./queryutil");
var lodash = require("lodash");
var mac = require("../multiaxisconfig");
var cubiql = require("../cubiql");
var MQG = require("measure-query-gen/src/MQG");

var v = module.exports;

/**
 * Returns an array of validation error messags (empty if not invalid)
 *
 * @param {mac.DataConfig} dataCfg
 * @param {mac.Field[]} fieldList
 * @param {mac.RollupConfig[]} rollups
 * @param {ModelUtility} modelUtility
 * @return {String[]}
 */
v.checkIntersectionQueryValidity = function(dataCfg, fieldList, rollups, modelUtility) {
    var messages = [];

    if (!messages.length)
        messages = messages.concat(v.checkForIllegalFields(dataCfg, fieldList));
    if (!messages.length)
        messages = messages.concat(v.checkForIllegalSplitting(dataCfg, fieldList, modelUtility));
    if (!messages.length)
        messages = messages.concat(v.checkForIllegalAggregation(dataCfg, fieldList, rollups, modelUtility));

    return messages;
};

v.checkForIllegalFields = function(dataCfg, fieldList) {
    var measureFields = fieldList.filter(function(field) {
            return field instanceof mac.MeasureField;
        }),
        messages = [];

    if (measureFields.length > 1)
        messages.push("Cannot display values from two metrics in one cell (" + measureFields.map(function(f) { return f.fieldLabel; }).join(", ") + ")");

    return messages;
};

v.checkForIllegalSplitting = function(dataCfg, fieldList, modelUtility) {
    var measure = dataCfg.measure,
        messages = [],
        model = modelUtility.getModel();

    if (measure.metric) {
        var metricInfo = model.getMeasureInfo(measure.metric.name),
            inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, model)),
            isSplit = qgutil.isDimensionSplit(measure.labelMap);

        if (isSplit && metricInfo.recalc) {
            messages.push("Metric " + measure.metric.name + " cannot be queried for this intersection, " + queryutil.stringifyIntersection(inter) + ", because it requires dimension splitting and recalc metrics cannot be queried with split dimensions.");
        }
    }

    return messages;
};

v.checkForIllegalAggregation = function(dataCfg, fieldList, rollups, modelUtility) {
    var measure = dataCfg.measure,
        messages = [];

    if (measure.metric) {
        var metric = measure.metric,
            model = modelUtility.getModel(),
            inter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, model)),
            metricInfo = model.getMeasureInfo(metric.name),
            baseMetricInter = $applyLabelMapToInter(metricInfo.inter, measure.labelMap),
            rollupCfgsByLabel,
            aggMethodLookup,
            aggregatingLevels;

        //if its a recalc, skip
        if (metricInfo.recalc)
            return messages;

        //if it isn't an agg at all, skip
        if (cubiql.intersectionEqual(baseMetricInter, inter, true, true))
            return messages;
            
        //it isn't legal to query below an intersection
        if ($interBelowInter(inter, baseMetricInter, model).length)
            messages.push("Query is at " + queryutil.stringifyIntersection(inter) + " which is below the intersection of " + metric.name + ": " + queryutil.stringifyIntersection(baseMetricInter));

        if (!$areSameLabeledLevelsReachable(inter, baseMetricInter, model)) {
            messages.push("Query is at " + queryutil.stringifyIntersection(inter) + " which is not reachable from the intersection of " + metric.name + ": " + queryutil.stringifyIntersection(baseMetricInter));
        }

        aggregatingLevels = $interBelowInter(baseMetricInter, inter, model);
        rollupCfgsByLabel = qgutil.getRollupConfigsByMeasureLabel(inter, fieldList, rollups, modelUtility); 
        aggMethodLookup = qgutil.generateAggMethodLookupForMeasure(measure, rollupCfgsByLabel, model);
        //if for the levels being aggregated, check if there are any methods not defined, if so, illegal
        aggregatingLevels.forEach(function(ql) {
            var label = cubiql.qlevel.getLabel(ql);
            if (lodash.isUndefined(aggMethodLookup[label]))
                messages.push("Unable to aggregate " + metric.name + " along the " + label + " labelled dimension because no aggregation method could be found.");
        });
    }

    return messages;
};

/**
 * Determine whether all levels in inter2 are reachable from the same labelled
 * levels in inter1. This can happen when there is a split dimension on a 
 * measure that has a higher level in it's base intersection, e.g. it's base
 * intersection is at week instead of day.
 *
 * @param {MQG.Intersection} inter1
 * @param {MQG.Intersection} inter2
 * @param {MeasureModel} measureModel
 * @return {MQG.QualifiedLevel[]}
 */
function $areSameLabeledLevelsReachable(inter1, inter2, measureModel) {
    var inter1LevelsReachable = [];

    inter1.qualified_level.forEach(function(ql1) {
        var label = cubiql.qlevel.getLabel(ql1),
            dim = cubiql.qlevel.getDimension(ql1),
            ql2 = inter2.qualified_level.find(cubiql.qlevel.labelEquals(label)),
            isAtAll = !ql2,
            isSameLevel = cubiql.qLevelEqual(ql1, ql2),
            hasHighestLevel = ql2 && !!measureModel.findHighestLevel(dim, [ql1, ql2]);

        if (isAtAll || isSameLevel || hasHighestLevel)
            inter1LevelsReachable.push(ql1);
    });

    return inter1LevelsReachable.length === inter1.qualified_level.length;
}

/**
 * Determine whether inter1 is below inter2, returns the levels in inter1 which are below inter2
 *
 * @param {MQG.Intersection} inter1
 * @param {MQG.Intersection} inter2
 * @param {MeasureModel} measureModel
 * @return {MQG.QualifiedLevel[]}
 */
function $interBelowInter(inter1, inter2, measureModel) {
    var inter1LevelsBelow = [];

    inter1.qualified_level.forEach(function(ql1) {
        var label = cubiql.qlevel.getLabel(ql1),
            dim = cubiql.qlevel.getDimension(ql1),
            ql2 = inter2.qualified_level.find(cubiql.qlevel.labelEquals(label)),
            highestLevel = ql2 && measureModel.findHighestLevel(dim, [ql1, ql2]);

        //the base is above if it doesn't have this label at all b/c
        //that's equivalent to being at ALL
        if (!ql2 || (!cubiql.qLevelEqual(ql1, ql2) && highestLevel && cubiql.qLevelEqual(highestLevel, ql2)))
            inter1LevelsBelow.push(ql1);
    });

    return inter1LevelsBelow;
}

function $applyLabelMapToInter(inter, labelMap) {
    if (!labelMap) return inter;

    var newLevels = [];

    inter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            mappedTo = labelMap.get(label);

        if (!mappedTo || !mappedTo.size) {
            newLevels.push(ql);
        } else {
            mappedTo.forEach(function(tgtLabel) {
                newLevels.push(cubiql.relabelQL(ql, tgtLabel));
            });
        }
    });

    return new MQG.Intersection(newLevels);
}

function $metricQueryIsValid(metricQuery, measureModel) {
    return !$metricBaseAboveQueryInter(metricQuery, measureModel) &&
        ($metricBaseSameAsQueryInter(metricQuery, measureModel) || $metricHasDefaultAggMethod(metricQuery, measureModel) || $isRecalcMetric(metricQuery, measureModel));
}

/**
 * Returns true if the query's intersection is same as the metric's base intersection.
 * @param {MeasureQuery} metricQuery
 * @param {MeasureModel} measureModel
 * @returns {Boolean}
 */
function $metricBaseSameAsQueryInter(metricQuery, measureModel) {
    return cubiql.intersectionEqual(measureModel.getMeasureInfo(metricQuery.measure.name).inter, metricQuery.inter, true, true);
}

},{"../cubiql":211,"../multiaxisconfig":253,"../querygen/util":260,"./queryutil":249,"lodash":90,"measure-query-gen/src/MQG":1}],252:[function(require,module,exports){

"use strict";

module.exports = ViewTaskManager;

function ViewTaskManager(keyManager) {
    this.$metricInterStorage = new Map();
    this.$keyManager = keyManager;

    //Map<VTKey, Object>
    this.$headingStorage = new Map();

    //Map<VTKey, VTDataCache>
    this.$dataCaches = new Map();
}

ViewTaskManager.prototype.getKeyManager = function() {
    return this.$keyManager;
};

ViewTaskManager.prototype.$getOrCreateHeadingStorage = function(viewId, taskName) {
    var vtKey = this.getKeyManager().calcViewTaskKey(viewId, taskName);
    if (!this.$headingStorage.has(vtKey))
        this.$headingStorage.set(vtKey, {});

    return this.$headingStorage.get(vtKey);
};

ViewTaskManager.prototype.getHeadingData = function(viewId, taskName) {
    var storage = this.$getOrCreateHeadingStorage(viewId, taskName);
    return storage && storage.headingData;
};

ViewTaskManager.prototype.setHeadingData = function(viewId, taskName, headingData) {
    var storage = this.$getOrCreateHeadingStorage(viewId, taskName);
    storage.headingData = headingData;
    storage.updatedTime = performance.now(); 
};

ViewTaskManager.prototype.$getOrCreateMetricReferenceStorage = function(metricKey, metricInter) {
    if (!this.$metricInterStorage.has(metricKey))
        this.$metricInterStorage.set(metricKey, {
            metricInter: metricInter,
            associatedViewTasks: new Map()
        });

    return this.$metricInterStorage.get(metricKey);
};

ViewTaskManager.prototype.associateMetricInter = function(viewId, taskName, metricInter) {
    var km = this.getKeyManager(),
        metricKey = km.calcMetricInterKey(metricInter),
        vtKey = km.calcViewTaskKey(viewId, taskName), 
        metricReferenceStorage = this.$getOrCreateMetricReferenceStorage(metricKey, metricInter);

    if (metricReferenceStorage.associatedViewTasks.has(vtKey))
        return false;
    else {
        metricReferenceStorage.associatedViewTasks.set(vtKey, true);
        return true;
    }
};

/**
 * @return {MetricInter[]}
 */ 
ViewTaskManager.prototype.getDereferencedMetricInters = function() {
    var derefed = [];

    this.$metricInterStorage.forEach(function(metricInterStorage) {
        if (metricInterStorage.associatedViewTasks.size === 0)
            derefed.push(metricInterStorage.metricInter);
    });

    return derefed;
};

ViewTaskManager.prototype.dissociateAllMetricInters = function(viewId, taskName) {
    var vtKey = this.getKeyManager().calcViewTaskKey(viewId, taskName);

    this.$metricInterStorage.forEach(function(metricInterStorage) {
        metricInterStorage.associatedViewTasks.delete(vtKey);
    });
};

ViewTaskManager.prototype.dissociateMetricInter = function(viewId, taskName, metricInter) {
    var km = this.getKeyManager(),
        metricKey = km.calcMetricInterKey(metricInter),
        vtKey = km.calcViewTaskKey(viewId, taskName), 
        metricReferenceStorage = this.$getOrCreateMetricReferenceStorage(metricKey);

    if (metricReferenceStorage.associatedViewTasks.has(vtKey)) {
        metricReferenceStorage.associatedViewTasks.delete(vtKey);
        return true;
    } else {
        return false;
    }
};

ViewTaskManager.prototype.$getOrCreateDataCache = function(viewId, taskName) {
    var vtKey = this.getKeyManager().calcViewTaskKey(viewId, taskName);
    if (!this.$dataCaches.has(vtKey))
        this.$dataCaches.set(vtKey, new DataCache());

    return this.$dataCaches.get(vtKey);
};

ViewTaskManager.prototype.getDataCache = function(viewId, taskName) {
    return this.$getOrCreateDataCache(viewId, taskName);
};

ViewTaskManager.prototype.clearDataCache = function(viewId, taskName) {
    var vtKey = this.getKeyManager().calcViewTaskKey(viewId, taskName);
    if (this.$dataCaches.has(vtKey))
        this.$dataCaches.delete(vtKey);
};

/**
 * @typedef {Object} QueryPosCache
 * @property {MeasureQuery} query
 * @property {Map<PositionKey, {position: {Position}, value: {Object}}>} posValue
 */

function DataCache() {
    //Map<QueryKey, QueryPosCache>
    this.$queryPosCache = new Map();
}

DataCache.prototype.$getOrCreatePosCache = function(queryKey) {
    if (!this.$queryPosCache.has(queryKey))
        this.$queryPosCache.set(queryKey, new Map());

    return this.$queryPosCache.get(queryKey);
};

DataCache.prototype.cacheValue = function(queryKey, posKey, position, value, resultDataMap) {
    var posCache = this.$getOrCreatePosCache(queryKey);
    posCache.set(getCacheKey(position, resultDataMap), {cacheTime: performance.now(), value: value});
};

DataCache.prototype.getQueryPositionValue = function(queryKey, positionInfo, resultDataMap) {
    var posCache = this.$getOrCreatePosCache(queryKey);
    return posCache.get(getCacheKey(positionInfo.position, resultDataMap));
};

function getCacheKey(position, resultDataMap) {
    var i = 0,
        usedKeyMaps = resultDataMap.usedKeyMaps,
        key = "";

    for (; i < usedKeyMaps.length; i++)  {
         key += position[usedKeyMaps[i].qName] + "|";
    }

    return key;
}

},{}],253:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var lodash = require("lodash");
var cubiql = require("./cubiql");
var querygen = require("./querygen/query");
var MQG = require("measure-query-gen/src/MQG");
var assert = require("assert");

var mac = module.exports;

function ValidationError(message) {
  this.message = message;
}
ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;

mac.ValidationError = ValidationError;

/**
 * @constant {number} FieldTypes
 */
var FieldTypes = Object.freeze({
    MEASURE: 1,
    LEVEL: 2,
    DIMENSION: 3,
    MEASURE_GROUP: 4,
    ATTRIBUTE: 5,
    LEVEL_MAP: 6
});

function mkArray(arr, mkFn) {
    return new Immutable.List((arr || []).map(mkFn));
}

/**
 * @typedef {Immutable.Record} Level
 * @prop {String} labelName
 * @prop {String} dimensionName
 * @prop {String} hierarchyName
 * @prop {String} levelName
 */
var Level = Immutable.Record({
    labelName: undefined,
    dimensionName: undefined,
    hierarchyName: undefined,
    levelName: undefined
});

function mkLevel(obj) {
    if (!obj) return;
    if (obj instanceof Level) return obj;
    return new Level({
        labelName: obj.labelName,
        dimensionName: obj.dimensionName,
        hierarchyName: obj.hierarchyName,
        levelName: obj.levelName
    });
}

function qualifiedLevelToLevel(ql, model) {
    var dim = cubiql.qlevel.getDimension(ql),
        levelName =  cubiql.qlevel.getLevel(ql);
    return new Level({
        labelName: cubiql.qlevel.getLabel(ql),
        dimensionName: dim, 
        hierarchyName: cubiql.qlevel.getHierarchy(ql) || model.getDefaultHierarchyName(dim, levelName),
        levelName: levelName
    });
}

function levelToQualifiedLevel(level) {
    return new MQG.QualifiedLevel(
        level.dimensionName,
        level.levelName,
        level.hierarchyName,
        level.labelName
    );
}

function levelAttributeToMQGAttribute(level, attributeName) {
    return [level.dimensionName, level.levelName, attributeName].join(".");
}

function levelToQName(level) {
    var qName = level.dimensionName + ":" + level.labelName + ":" + level.hierarchyName + ":" + level.levelName;

    return qName;
}

function mqgLevelToQName(ql) {
    var qName = cubiql.qlevel.getDimension(ql) + ":" + cubiql.qlevel.getLabel(ql),
        hierName = cubiql.qlevel.getHierarchy(ql);

    if (hierName)
        qName += ":" + hierName;

    return qName += ":" + cubiql.qlevel.getLevel(ql);
}

function qNameToMQGLevel(qName) {
    var parts = qName.split(":");
    if (parts.length === 3) {
        return new MQG.QualifiedLevel(parts[0], parts[2], undefined, parts[1]);
    } else if (parts.length === 4) {
        return new MQG.QualifiedLevel(parts[0], parts[3], parts[2], parts[1]);
    } else {
        throw new Error("unable to parse qName: " + qName);
    }
}

function isAllLevel(l) {
    return l.levelName === "ALL";
}

/**
 * Union type representing a measure (metric, attribute, ..)
 *
 * @typedef {Immutable.Record} Measure
 * @prop {Metric} metric - exclusive with other props
 * @prop {Attribute} attribute - exclusive with other props
 * @prop {Operator} operator - exclusive with other props 
 * @prop {Immutable.Map<SourceLabel, Immutable.List<TargetLabel>> [labelMap] a mapping from a label of the measure's native intersection to another label.  If only one TargetLabel is provided, then a simple relabel will be applied.  If multiple are provided, it will be be a split (in the case of multiple mappings, if the source label is not also mapped to itself, it will be first relabelled to the first target label, then the target label will be split to the remaining labels).
 *
 * so for a Measure who's intersection was defined as (A,B,C,D), with a label map of {A: [E], B: [B,F], C: [G,H]} then resulting
 *  intersection would be (E, B, F, G, H, D)
 */
var Measure = Immutable.Record({
    metric: undefined,
    attribute: undefined,
    application: undefined,
    operator: undefined,
    labelMap: undefined
});

function getMeasureValueType(measure, measureModel) {
    if (measure.metric)
        return getMetricValueType(measure.metric, measureModel);
    else if (measure.attribute)
        return getAttributeValueType(measure.attribute, measureModel);
    else if (measure.operator)
        return getOperatorValueType(measure.operator, measureModel);
    else {
        assert(false, "no implementation for this measure type");
    }
}

function getMetricValueType(metric, measureModel) {
    var measureInfo = measureModel.getMeasureInfo(metric.name),
        type;

    if (measureInfo.type)
        type = querygen.Type[measureInfo.type.kind];
    else 
        type = querygen.Type.NONE;

    return type;
}

function getAttributeValueType(attribute, measureModel) {
    return measureModel.getAttributeType(attribute.name, attribute.level.dimensionName, attribute.level.levelName);
}

function getOperatorValueType(operator, measureModel) {
    return getMeasureValueType(operator.measures.get(0), measureModel);
}

function mkMeasure(obj) {
    if (!obj) return;
    return new Measure({
        metric: mkMetric(obj.metric),
        attribute: mkAttribute(obj.attribute),
        operator: mkOperator(obj.operator),
        application: mkApplication(obj.application),
        labelMap: obj.labelMap 
    });
}

function findAggConfigPathInMeasure(measure) {
    if (measure.metric)
        return ["metric", "aggConfig"];
}

/**
 * @typedef {Immutable.Record} AggConfig
 * @prop {String} [methodName] - the name of the agg method to use for all levels in the intersection
 * @prop {Immutable.Map<String,String>} [labelMethodMap] - a map keyed by dimension label name and equal to agg method name for specifying per-label. Takes precedence over methodName property if both are provided.
 */
var AggConfig = Immutable.Record({
    methodName: undefined,
    labelMethodMap: undefined
});

function mkAggConfig(obj) {
    if (!obj) return;
    return new AggConfig({
        methodName: obj.methodName,
        labelMethodMap: lodash.isUndefined(obj.labelMethodMap) ? undefined : new Immutable.Map(obj.labelMethodMap)
    });
}

function getMethodForLabel(aggConfig, label) {
    if (aggConfig.labelMethodMap.has(label))
        return aggConfig.labelMethodMap.get(label);
    else
        return aggConfig.methodName;
}

/**
 * @typedef {Immutable.Record} Metric
 * @prop {String} name - the name of the metric
 * @prop {Intersection} [intersection] - the intersection at which to query the metric (by default the base intersection of the Metric)
 * @prop {String} [intersectionVar] - a variable name indicating the intersection at which to query this metric. Exclusive with 'intersection' 
 * @prop {AggConfig} [aggConfig] - optional override for how to aggregate the metric to the intersection
 * @prop {Immutable.List<Filter>} [filters] - filters to apply BEFORE applying the intersection to the metric.  In other words these filters apply UNDER any aggregation.
 */
var Metric = Immutable.Record({
    name: undefined,
    intersection: undefined,
    intersectionVar: undefined,
    aggConfig: undefined,
    filters: Immutable.List()
});

function mkMetric(obj) {
    if (!obj) return;
    return new Metric({
        name: obj.name,
        intersection: mkIntersection(obj.intersection),
        intersectionVar: obj.intersectionVar,
        aggConfig: mkAggConfig(obj.aggConfig),
        filters: mkArray(obj.filters, mkFilter)
    });
}

/**
 * @typedef {Immutable.Record} Attribute
 * @prop {String} name - the name of the attribute
 * @prop {Level} level - the level the attribute is for
 * @prop {Intersection} [intersection] - an optional intersection to widen the attribute too (defaults to level) 
 * @prop {Immutable.List<Filter>} [filters] - filters to limit the attribute by
 */
var Attribute = Immutable.Record({
    name: undefined,
    filters: Immutable.List(),
    level: undefined,
    intersection: undefined
});

function mkAttribute(obj) {
    if (!obj) return;
    return new Attribute({
        name: obj.name,
        level: mkLevel(obj.level),
        filters: mkArray(obj.filters, mkFilter),
        intersection: mkIntersection(obj.intersection)
    });
}

/**
 * @typedef {Immutable.Record} Operator
 * @prop {String} name - the name of the operator in the measure model to apply (either a builtin Operator a user-defined oen)
 * @prop {Immutable.List<Measure>} measures - a list of Measures to apply the operator to.  Whether or not the provided list of measures is compatible with the 
 *                                            implementation of the Operator is not checked (and misuse will result in a measure service error) 
 */
var Operator = Immutable.Record({
    name: undefined,
    measures: Immutable.List()
});

function mkOperator(obj) {
    if (!obj) return;
    return new Operator({
        name: obj.name,
        measures: mkArray(obj.measures, mkMeasure)
    });
}

/**
 * @typedef {Immutable.Record} Application
 *
 * Slightly modified form of the measure service idea of an Application, an Application configuration allows
 * a configuration to bind the intersection arguments of an abstraction to the intersection(s) at a given
 * intersection of the multi-axis view.  Unlike the measure service version it does not currently support expression bindings but we
 * may add it in the future
 *
 * TODO only slightly supported (auto-binds base intersection to first position argument only) for now, full implementation to follow
 *
 * @property {Immutable.List<InterArg>} interArgs
 * @property {Immutable.List<ExprArg>} exprArgs
 * @property {Abstraction} abstraction
 * @property {Signature} signature
 */
var Application = Immutable.Record({
    interArgs: Immutable.List(),
    exprArgs: Immutable.List(),
    abstraction: undefined,
    signature: undefined
});

function mkApplication(obj) {
    if (!obj) return;
    assert(obj.interArgs && obj.interArgs.length === 1, "We currently only support Applications with a single intersection argument.");
    assert(obj.signature, "Application must have a base signature.");
    return new Application({
        interArgs: mkArray(obj.interArgs, mkInterArg),
        exprArgs: mkArray(obj.exprArgs, mkExprArg),
        abstraction: mkAbstraction(obj.abstraction),
        signature: mkSignature(obj.signature)
    });
}

var Signature = Immutable.Record({
    intersection: undefined,
    type: undefined
});

function mkSignature(obj) {
    if (!obj) return;
    return new Signature({
        intersection: mkIntersection(obj.intersection),
        type: mkValueType(obj.type)
    });
}
/**
 *
 * @property {String} kind - "SINGLETON" or "SINGLE"
 * @property {Type} type
 */
var ValueType = Immutable.Record({
    kind: undefined,
    type: undefined
});

function mkValueType(obj) {
    if (!obj) return;
    return new ValueType({
        kind: obj.kind,
        type: mkType(obj.type)
    });
}

/**
 * @param {String} kind
 * @param {String} [named]
 */
var Type = Immutable.Record({
    kind: undefined,
    named: undefined
});

function mkType(obj) {
    if (!obj) return;
    return new Type({
        kind: obj.kind,
        named: obj.named
    });
}

/**
 * @typedef {Immutable.Record} Abstraction
 * An abstract expression.
 *
 * TODO simplified support, full implementation to come.
 *
 * @property {Immutable.List<InterArg>} interArgs
 * @property {Immutable.List<ExprArg>} exprArgs
 * @property {String} bodyStr - the abstraction cubiql formula, currently only the string version is supported
 */
var Abstraction = Immutable.Record({
    interArgs: Immutable.List(),
    exprArgs: Immutable.List(),
    bodyStr: undefined
});

function mkAbstraction(obj) {
    if (!obj) return;
    return new Abstraction({
        interArgs: mkArray(obj.interArgs, mkInterArg),
        exprArgs: mkArray(obj.exprArgs, mkExprArg),
        bodyStr: obj.bodyStr
    });
}

var InterArg = Immutable.Record({
    name: undefined,
    intersection: undefined //default intersection 
});

function mkInterArg(obj) {
    if (!obj) return;
    return new InterArg({
        name: obj.name,
        intersection: mkIntersection(obj.intersection)
    });
}

var ExprArg = Immutable.Record({
    name: undefined,
    exprStr: undefined
});

function mkExprArg(obj) {
    if (!obj) return;
    return new ExprArg({
        name: obj.name,
        exprStr: obj.exprStr
    });
}

/**
 * @typedef {Immutable.List<Level>} Intersection
 */

/**
 * @param {Object[]} array - array of objects to convert to levels
 * @return {Intersection}
 */
function mkIntersection(array) {
    if (!array) return;
    return new Immutable.List(array.map(mkLevel));
}

/**
 * @param {Intersection} inter
 * @return {MQG.Intersection}
 */
function intersectionToMQGIntersection(inter) {
    return new MQG.Intersection(inter.map(function(level) {
        return levelToQualifiedLevel(level);
    }).toArray());
}

function mqgIntersectionToIntersection(mqgInter, model) {
    return new Immutable.List(mqgInter.qualified_level.map(function(ql) {
        return qualifiedLevelToLevel(ql, model);
    }));
}

function getIntersectionForMeasure(measure, measureModel) {
    if (measure.metric)
        return getIntersectionForMetric(measure.metric, measureModel);
    else if (measure.attribute)
        return getIntersectionForAttribute(measure.attribute, measureModel);
    else if (measure.operator)
        return getIntersectionForOperator(measure.operator, measureModel);
    else if (measure.application)
        // TODO support multiple intersection arguments.
        return measure.application.interArgs.get(0).intersection;
    else
        assert(false, "Don't know how to get intersection for measure: " + measure.toString());
}

function getIntersectionForOperator(operator, measureModel) {
    return getIntersectionForMeasure(operator.measures.get(0), measureModel);
}

function getIntersectionForAttribute(attribute, measureModel) {
    return attribute.intersection || mkIntersection([attribute.level]);
}

function getIntersectionForMetric(metric, measureModel) {
    //defaults to base intersection if there is none
    var inter = metric.intersection || mqgIntersectionToIntersection(measureModel.getMeasureInfo(metric.name).inter, measureModel);

    return inter;
}

/**
 * A configuration of data to request as part of a field
 * @typedef {Immutable.Record} DataConfig
 *
 * @prop {String} name - the name to refer to this data by
 * @prop {Measure} measure - the measure to query for this data
 * @prop {List<Filter>} filters - any filters to use to dice this measure (above any aggregation)
 * @prop {String} [format] - the format string for the data by. Optional. 
 */
var DataConfig = Immutable.Record({
    name: undefined,
    measure: undefined,
    filters: Immutable.List(),
    format: undefined,
    customEdit: undefined
});

function mkDataConfig(obj) {
    if (!obj) return;
    return new DataConfig({
        name: obj.name,
        measure: mkMeasure(obj.measure),
        filters: mkArray(obj.filters, mkFilter),
        format: obj.format,
        customEdit: mkEditConfig(obj.customEdit)
    });
}

/**
 * @typedef {Immutable.Record} EditAttribute
 *
 * @property {String} name the name of the attribute
 * @property {Level} level the level the attribute is for
 */
var EditAttribute = Immutable.Record({
    name: undefined,
    level: undefined
});

function mkEditAttribute(obj) {
    if (!obj) return;
    return new EditAttribute({
        name: obj.name,
        level: mkLevel(obj.level)
    });
}

/**
 * Union type of exclusive attributes representing the target
 *
 * @typedef {Immutable.Record} EditTarget
 * 
 * @property {String} metricName
 * @property {EditAttribute} attribute
 */
var EditTarget = Immutable.Record({
    metricName: undefined,
    attribute: undefined
});

function mkEditTarget(obj) {
    if (!obj) return;
    return new EditTarget({
        metricName: obj.metricName,
        attribute: mkEditAttribute(obj.attribute)
    });
}

/**
 * A configuration of an edit to process on the grid 
 * @typedef {Immutable.Record} EditConfig
 *
 * @property {String} name
 * @property {EditTarget} editTarget
 * @property {Abstraction} inputAbstraction - an abstraction that takes an exprArg of named 'input' which will compute the input to use.  Defaults to the abstraction "fun (input) in input
 * @property {Signature} inputSignature - the signature which is the subset of the signature of the actual input passed to the abstraction.  The input applied to the abstraction must have at least the intersection of this signature, and the same value type
 */
var EditConfig = Immutable.Record({
    name: undefined,
    editTarget: undefined,
    inputAbstraction: undefined,
    inputValueSignature: undefined
});

function mkEditConfig(obj) {
    if (!obj) return;
    return new EditConfig({
        name: obj.name,
        editTarget: mkEditTarget(obj.editTarget),
        inputAbstraction: mkAbstraction(obj.inputAbstraction),
        inputValueSignature: mkSignature(obj.inputValueSignature)
    });
}

/**
 * A field that represents a measure
 * @typedef {Immutable.Record} MeasureField
 *
 * @typedef {Immutable.Set<String>} FieldIdSet
 * 
 * @prop {String} id - the id 
 * @prop {FieldTypes} type - the type of the field
 * @prop {String} fieldLabel - the label that will be displayed when the field appears on the grid
 * @prop {DataConfig[]} data - a list of configurations for each piece of data needed for this field.  This is the default set of data retrieved
 * @prop {ImmutableMap<FieldIdSet, DataConfig[]>} dataPerFieldSet - a list of configurations for a particular set of field ids. This overrides the 'data' property if present when generating queries for a matching field set
 */
var MeasureField = Immutable.Record({
    id: undefined,
    fieldLabel: undefined,
    data: Immutable.List(),
    dataPerFieldSet: Immutable.Map(),
    type: FieldTypes.MEASURE
});

function mkMeasureField(obj) {
    if (!obj) return;
    return new MeasureField({
        id: obj.id,
        fieldLabel: obj.fieldLabel,
        data: mkArray(obj.data, mkDataConfig),
        dataPerFieldSet: mkDataPerFieldSet(obj.dataPerFieldSet)
    });
}

function mkDataPerFieldSet(obj) {
    if (!obj) return new Immutable.Map();
    assert(obj instanceof Immutable.Map, "Can't currently automatically convert dataPerFieldSet to Immutable, so it must be done by hand");
    return obj;
}

function findDataConfigPathInMeasureField(field, dataConfigName) {
    var index = field.data.findIndex(function(dataConfig) {
        return dataConfig.name === dataConfigName;
    });

    if (!lodash.isUndefined(index))
        return ["data",index];
}

/**
 * A SortConfig is simply a configuration of a measure and direction to sort it.  This is enough to support sorting by attributes or measure values.
 * Any SortConfig used for a Field (e.g. a LevelField) needs to have a measure which has the same intersection as the Field.  For example,
 * if a SortConfig was used on a LevelField for Product:sku, its measure would need to be at that intersection.  When sorting by value, the prior
 * concept of 'sort positions' is subsumed by the fact that a measure which uses a Metric can define a filter under aggregation to use, which
 * is equivalent.
 *
 * @typedef {Immutable.Record} SortConfig
 * @prop {String} sortType - the direction of the sort
 * @prop {Measure} measure - the measure that provides the values to sort by
 */
var SortConfig = Immutable.Record({
    sortType: undefined,
    measure: undefined,
});

function mkSortConfig(obj) {
    if (!obj) return;
    return new SortConfig({
        sortType: obj.sortType,
        measure: mkMeasure(obj.measure)
    });
}

/**
 * The configuration of a slice. The selected slice for a field is determined in the following priority: 
 *  1. if bySelection is configured (either coming from config or UI selection), that takes priority
 *  2. if byMeasure is configured
 *  3. computed from the minimum sort value based on the sortConfig 
 *
 * @typedef {Immutable.Record} SliceConfig
 * @prop {LevelField|MeasureGroupField} sourceField
 * @prop {Measure} [byMeasure] - optional. A scalar measure that returns either the member ID or the actual level member entity (if for a level field) to set the slice 
 * @prop {String} [bySelection] - optional. The member ID that sets the slice
 */
var SliceConfig = Immutable.Record({
    sourceField: undefined,
    byMeasure: undefined,
    bySelection: undefined
});

function mkSliceConfig(obj) {
    if (!obj) return;
    return new SliceConfig({
        sourceField: validateInstance(obj.sourceField, [LevelField, MeasureGroupField], "sourceField for a SliceConfig must be either a LevelField or MeasureGroupField"),
        byMeasure: mkMeasure(obj.byMeasure),
        bySelection: obj.bySelection
    });
}

/**
 * @typedef {String|Number|Boolean} Value
 *
 * @typedef {Immutable.Record} Comparator
 * @prop {Value} literal - if a literal value, that value (exclusive with metric)
 * @prop {Metric} metric - a metric (assumed to be scalar currently) to use the value of when comparing
 */
var Comparator = Immutable.Record({
    literal: undefined,
    metric: undefined
});

function mkComparator(obj) {
    if (!obj) return;
    return new Comparator({
        literal: obj.literal,
        metric: mkMetric(obj.metric)
    });
}

/**
 * @typedef {Immutable.Record} Comparison
 * @prop {String} operator - one of the legal operators to compare with
 * @prop {Comparator} comparator - the item to compare to
 */
var Comparison = Immutable.Record({
    operator: undefined,
    comparator: undefined
});

function mkComparison(obj) {
    if (!obj) return;
    return new Comparison({
        operator: obj.operator,
        comparator: mkComparator(obj.comparator)
    });
}

/**
 * A representation of a filter which, given a Measure and list of Comparisons, will provide
 * a list of positions that can be used to filter whatever uses this filter.
 *
 * @typedef {Immutable.Record} Filter
 * @prop {Measure} measure - the Measure being filtered 
 * @prop {Comparison[]} [comparisons] - comparison filters to apply to this measure before using it as a filter. Optional.
 */
var Filter = Immutable.Record({
    measure: undefined, 
    comparisons: Immutable.List() 
});

var stringifyFilter = mac.stringifyFilter = function(filter) {
    return "Filter { measure: " + stringifyMeasure(filter.measure) + ", comparisons: " + stringifyComparisons(filter.comparisons) + "}";
};

var stringifyComparisons = mac.stringifyComparisons = function(comparisons) {
    return "[" + comparisons.map(stringifyComparison).join("\n") + "]";
};

var stringifyComparison = mac.stringifyComparison = function(comparison) {
    return "Comparison { operator: " + comparison.operator + ", comparator: " + stringifyComparator(comparison.comparator) + "}";
};

var stringifyComparator = mac.stringifyComparator = function(comparator) {
    return "Comparator { " +
        (!lodash.isUndefined(comparator.literal) ? "literal: " + comparator.literal : "") +
        (!lodash.isUndefined(comparator.metric) ? "metric: " + stringifyMetric(comparator.metric) : "") +
    "}";

};

var stringifyMeasure = mac.stringifyMeasure = function(measure) {
    return "Measure { " +
        (measure.metric ? "metric: " + stringifyMetric(measure.metric) + "," : "") +
        (measure.attribute ? "attribute: " + stringifyAttribute(measure.attribute) + "," : "") +
        (measure.operator ? "operator: " + measure.operator : "") +
        "}";
};

var stringifyMetric = mac.stringifyMetric = function(metric) {
    return "Metric { name: " + metric.name + "," +
        "intersection: " + stringifyIntersection(metric.intersection) + "," +
        (metric.aggConfig ? + "aggConfig: " + JSON.stringify(metric.aggConfig.toJS()) + "," : "") +
        (metric.filters ? + "filters: " + stringifyFilters(metric.filters) : "") +
    "}";
};

var stringifyAttribute = mac.stringifyAttribute = function(attribute) {
    return "Attribute { name: " + attribute.name + "," +
        "level: " + stringifyLevel(attribute.level) + "," +
        (attribute.filters ? + "filters: " + stringifyFilters(attribute.filters) : "") +
    "}";

};

var stringifyLevel = mac.stringifyLevel = function(level) {
    return mac.levelToQName(level);
};

var stringifyIntersection = mac.stringifyIntersection = function(inter) {
    return "[" + inter.map(stringifyLevel).join(", ") + "]";
};

var stringifyFilters = mac.stringifyFilters = function(filters) {
    return "[" + filters.map(stringifyFilter).join(", ") + "]";
};

function mkFilter(obj) {
    if (!obj) return;
    return new Filter({
        measure: mkMeasure(obj.measure),
        comparisons: mkArray(obj.comparisons, mkComparison)
    });
}

/**
 * A configuration of how a rollup value at a level should be calculated
 *
 * @typedef {Immutable.Record} RollupConfig
 * @prop {String} [methodName] - if specified, sets the name of the aggregation method used for this level's dimension when rolling up. 
 * @prop {Immutable.List<Filter>} [filters] - optional filters to apply before aggregating. 
 */
var RollupConfig = Immutable.Record({
    methodName: undefined,
    filters: Immutable.List()
});

function mkRollupConfig(obj) {
    if (!obj) return;
    return new RollupConfig({
        methodName: obj.methodName,
        filters: mkArray(obj.filters, mkFilter)
    });
}

var LevelDisplayMode = Object.freeze({
    OUTLINE: "OUTLINE",
    NONE: "NONE"
});

/**
 * A field that represents a level in a dimension
 *
 * @typedef {Immutable.Record} LevelField
 * @prop {String} id - the id 
 * @prop {Level} level
 * @prop {String} fieldLabel - the label that will be displayed when the field appears on the grid
 * @prop {Immutable.List<DataConfig>} data - list of data configurations to query for the headers of this field
 * @prop {Immutable.List<SortConfig>} [sortConfigs]
 * @prop {Immutable.List<Filter>} [filters] - list of filters that are conjuncted to filter (directly or indirectly) the positions in this level
 * @prop {Boolean} [filterByAllSlicesInDimension] - whether to filter this level by any slice in the same dimension, even if the label of the dimension differs. Defaults to false.
 * @prop {Immutable.List<RollupConfig>} [rollupConfigs] - 
 * @prop {LevelDisplayMode} [displayMode] - what mode to display this level in, defaults to LevelDisplayMode.OUTLINE 
 * @prop {FieldTypes} type - the type of the field
 */
var LevelField = Immutable.Record({
    id: undefined,
    fieldLabel: undefined,
    level: undefined,
    data: Immutable.List(),
    sortConfigs: Immutable.List(),
    filters: Immutable.List(),
    filterByAllSlicesInDimension: false,
    rollupConfigs: Immutable.List(),
    displayMode: LevelDisplayMode.OUTLINE,
    type: FieldTypes.LEVEL
});

/**
 * Checks if the given field is an instance of LevelField.
 * @param  {Immutable.Map}  field
 * @return {Boolean}  true if the given field is instance of LevelField.
 */
function isLevelField(field) {
    return field instanceof LevelField;
}

function mkLevelField(obj) {
    if (!obj) return;
    return new LevelField({
        id: obj.id,
        fieldLabel: obj.fieldLabel,
        level: mkLevel(obj.level),
        data: mkArray(obj.data, mkDataConfig),
        sortConfigs: mkArray(obj.sortConfigs, mkSortConfig),
        filters: mkArray(obj.filters, mkFilter),
        filterByAllSlicesInDimension: obj.filterByAllSlicesInDimension || false,
        rollupConfigs: mkArray(obj.rollupConfigs, mkRollupConfig),
        displayMode: obj.displayMode || LevelDisplayMode.OUTLINE
    });
}

function isAllLevelField(f) {
    return isAllLevel(f.level);
}

function updateLevelPropertyInLevelField(levelField, propertyName, value, includeSortConfigs) {
    includeSortConfigs = !!includeSortConfigs; 
    var returnField = levelField.setIn(["level", propertyName], value);

    if (includeSortConfigs) {
        returnField = returnField.updateIn(["sortConfigs"], function(sortConfigs) {
                return sortConfigs.map(function(sortConfig) {
                    if (sortConfig.measure.attribute)
                        return sortConfig.setIn(["measure","attribute","level", propertyName], value);
                    else
                        return sortConfig;
                });
            }).updateIn(["data"], function(dataCfgs) {
                return dataCfgs.map(function(dataCfg) {
                    if (dataCfg.measure.attribute)
                            return dataCfg.setIn(["measure","attribute","level", propertyName], value);
                        else
                            return dataCfg;
                });
            });
    }

    return returnField;
}

function updateDimensionLabelInLevelField(field, dimensionLabel) {
    return updateLevelPropertyInLevelField(field, "labelName", dimensionLabel, true);
}

function updateHierarchyInLevelField(levelField, hierarchyName, includeSortConfigs) {
    return updateLevelPropertyInLevelField(levelField, "hierarchyName", hierarchyName, true);
}

/**
 * @param {LevelField} field
 * @param {Filter} filter
 * @return {LevelField}
 */
function addFilterToLevelField(filter, f) {
    return f.set("filters", f.filters.push(filter));
}

/**
 * A field that represents a group of levels within a dimension
 * @typedef {Immutable.Record} DimensionField
 * 
 * @prop {String} id - the id 
 * @prop {FieldTypes} type - the type of the field
 * @prop {String} fieldLabel - the label that will be displayed when the field appears on the grid
 * @prop {String} dimension - the dimension name
 * @prop {Immutable.List<LevelField>} - a list of level fields in this dimension group
 */
var DimensionField = Immutable.Record({
    id: undefined,
    fieldLabel: undefined,
    dimension: undefined,
    dimensionLabel: undefined,
    hierarchy: undefined,
    fields: Immutable.List(),
    type: FieldTypes.DIMENSION
});

function mkDimensionField(obj) {
    if (!obj) return;
    return new DimensionField({
        id: obj.id,
        fieldLabel: obj.label,
        dimension: obj.dimension,
        dimensionLabel: obj.dimensionLabel,
        hierarchy: obj.hierarchy,
        fields: (obj.fields || []).map(function(f) {
            return validateInstance(f, [LevelField], "Only LevelFields are allowed in the fields on a DimensionField");
        })
    });
}

/**
 * A field that represents a group of measures, e.g. the -:Measures field
 * @typedef {Immutable.Record} MeasureGroupField
 * 
 * @prop {String} id - the id 
 * @prop {FieldTypes} type - the type of the field
 * @prop {String} fieldLabel - the label that will be displayed when the field appears on the grid
 * @prop {Immutable.List<MeasureField>} - a list of measure fields in this measure group
 */
var MeasureGroupField = Immutable.Record({
    id: undefined,
    fieldLabel: undefined,
    fields: Immutable.List(),
    type: FieldTypes.MEASURE_GROUP
});

function mkMeasureGroupField(obj) {
    if (!obj) return;
    return new MeasureGroupField({
        id: obj.id,
        fieldLabel: obj.fieldLabel,
        fields: new Immutable.List((obj.fields || []).map(function(f) {
            return validateInstance(f, [MeasureField], "Only MeasureFields are allowed in the fields on a MeasureGroupField");
        }))
    });
}

/**
 * Compares two LevelFields based on their order in the dimension.
 * 
 * @param  {MeasureModel} model
 * @param  {LevelField} a
 * @param  {LevelField} b
 * @return {Number} -1 if a is lower than b, 0 if equal, 1 if b is greater than a
 */
function compareLevelFields(model, a, b) {
    var aLvl,
        bLvl;
    if (a.get("id") === b.get("id"))
        return 0;

    aLvl = levelToQualifiedLevel(a.level);
    bLvl = levelToQualifiedLevel(b.level);
    
    return model.qLevelBelow(aLvl, bLvl) ? -1 : 1;
}

function validateInstance(obj, validConstructors, errorMessage) {
    var valid = false,
        i = 0;
    
    for (; i < validConstructors.length; i++) {
        if (obj instanceof validConstructors[i]) {
            valid = true;
            break;
        }
    }

    assert(valid, errorMessage);
    return obj;
}

/**
 * A Record that represents the entire pivot state for one pivot. The pivot
 * store stores one MultiAxisConfig per pivot grid.
 *
 * @typedef {Immutable.Record}
 * @property {String} id -the id of the pivot
 * @property {Immutable.Map} axis - each key is the name of an axis the value
 *                                  is an list of Fields on that axis
 * @property {Immutable.Map<GroupName, MeasureGroup>} measureGroups - a list of MeasureGroup fields that are local to this
 * MAConfig.  As opposed to MeasureGroup fields saved in the fieldstore that are accessible to all views
 * @property {Boolean} [useDefaultHeaderConfig] - whether to compute the default headerConfig from the configured axis fields or not
 * @property {Boolean} [queryLevelFilterFlag] - whether or not to add an intersection query to determine if any cells are filtered out but still
 *                                              appear b/c their headings are not filtered
 * @property {Immutable.Map<AxisName, Term>} headerConfig
 * 
 * @property {Boolean} isNonEmpty - whether or not to show empty headers
 */
var MAConfig = Immutable.Record({
    id: undefined,
    axis: Immutable.Map({ 
        X: Immutable.List(),
        Y: Immutable.List(),
        Z: Immutable.List()
    }),
    measureGroups: Immutable.Map(),
    isNonEmpty: false,
    sliceConfigs: Immutable.List(),
    useDefaultHeaderConfig: true,
    queryLevelFilterFlag: false,
    headerConfig: Immutable.Map()
});

/**
 * Return list of axis names in the config that have some field configured and are not just empty
 * @param {MAConfig} config
 * @return {String[]}
 */
function getUsedAxes(config) {
    var used = [];

    config.axis.forEach(function(fields, axisName) {
        if (fields.size)
            used.push(axisName);
    });

    return used;
}
/**
 * @param {String} [fieldId] fieldId if a field generated this ConcatTerm
 * @param {Immutable.List<CrossTerm|ConcatTerm|FieldTerm|NestTerm>} terms
 */
var CrossTerm = Immutable.Record({
    fieldId: undefined,
    terms: Immutable.List()
});

/**
 * @param {String} [fieldId] fieldId if a field generated this ConcatTerm
 * @param {Immutable.List<CrossTerm|ConcatTerm|FieldTerm|NestTerm>} terms
 */
var ConcatTerm = Immutable.Record({ 
    fieldId: undefined,
    terms: Immutable.List()
});

/**
 * @param {String} fieldId
 */
var FieldTerm = Immutable.Record({ 
    fieldId: undefined
});

/**
 * @param {String} [fieldId] fieldId if a field generated this NestTerm
 * @param {Immutable.List<FieldTerm>} fieldTerms
 */
var NestTerm = Immutable.Record({
    fieldId: undefined,
    fieldTerms: Immutable.List()
});

var PlaceholderTerm = Immutable.Record({
    fieldId: undefined
});

/**
 * @param {MAConfig} config
 * @return {String[]}
 */
function getOrderedAxes(config) {
    //for now just use the alphabetical ordering
    return config.axis.keySeq().toJS();
}

/**
 * Gets a field from one of the axis based on the given id and type
 * 
 * @param  {MultiAxisConfig}  config
 * @param  {String}  fieldId
 * @param  {String} [optionalAxisName] an optional axis name to search
 * @return {Immutable.List<Field>}
 */
function getField(config, fieldId, optionalAxisName) {
    return getAxisFields(config, function(f) { return f && f.get("id") === fieldId; }, optionalAxisName).first();
}

/**
 * Given a compareFn and an optional axis name, filters all fields by the
 * given compareFn. If you do not pass an optionalAxisName, then it will
 * filter on all axes.
 * 
 * @param  {MultiAxisConfig} config
 * @param  {Function}  filterFn
 * @param  {String} [optionalAxisName]
 * @return {Immutable.List<Field>}
 */
function getAxisFields(config, filterFn, optionalAxisName) {
    return config.get("axis").reduce(function(reduction, fields, axisName) {
        if (optionalAxisName && optionalAxisName !== axisName)
            return reduction;
        
        fields.forEach(function(f) {
            if (f.has("fields")) {
                reduction = reduction.concat(f.get("fields").filter(filterFn));
            }
            
            if (filterFn(f)) {
                reduction = reduction.push(f);
            }
        });

        return reduction;
    }, Immutable.List());
}

/**
 * @param {MAConfig} config
 * @param {MeasureGroupField} measureGroup
 * @param {MeasureField} measureField
 * @param {MeasureField} [before]
 */
mac.addMeasureToGroup = function(config, measureGroup, measureField, before) {
    // we look up the current measure group just in case the parameter is stale
    var group = config.measureGroups.get(measureGroup.id);
    assert(group, "Couldn't find measure group for " + measureGroup.id + " in config");
    var prevFields = group.fields,
        prevIdx = prevFields.indexOf(measureField),
        axisField,
        beforeIdx;

    // remove it if it already existed (allows moving)
    if (prevIdx >= 0)
        prevFields = prevFields.delete(prevIdx);
        
    beforeIdx = prevFields.indexOf(before);

    if (beforeIdx >= 0) {
        group = group.set("fields", prevFields.splice(beforeIdx, 0, measureField)); 
    } else {
        group = group.set("fields", prevFields.push(measureField));
    }
    
    config = config.setIn(["measureGroups", group.id], group);

    return mac.refreshMeasureGroupFieldOnAxis(config, group);
};


mac.removeMeasureFieldFromGroup = function(config, groupId, measureField) {
    var group = config.measureGroups.get(groupId),
        fieldIdx;
    assert(group, "Couldn't find a measure group by the name " + groupId + " on this configuration");

    fieldIdx = group.fields.indexOf(measureField);
    assert(fieldIdx > -1, "Couldn't find field '" + measureField.id + "' in the measure group '" + groupId + "'");
    group = group.set("fields", group.fields.delete(fieldIdx));
    config = config.update("measureGroups", function(measureGroups) {
        return measureGroups.set(groupId, group);
    });
    
    return mac.refreshMeasureGroupFieldOnAxis(config, group);
};

mac.refreshAllMeasureGroupFieldsOnAxes = function(config) {
    config.measureGroups.forEach(function(group) {
        config = mac.refreshMeasureGroupFieldOnAxis(config, group);
    });

    return config;
};

mac.refreshMeasureGroupFieldOnAxis = function(config, group) {
    var axisField = getField(config, group.id);
    if (axisField) {
        axisField = axisField.set("fields", group.fields);

        config = mac.replaceField(config, axisField);
        config = mac.regenerateHeaderConfig(config);
    }

    return config;
};
    
/**
 * @param {MAConfig} config
 * @param {Field} field
 * @return {MAConfig}
 */
mac.removeField = function(config, field) {
    var path = mac.findPathToField(config, field);

    if (path && path.length) {
        config = config.deleteIn(path);
        config = mac.regenerateHeaderConfig(config);
    }

    return config;
};

/**
 * Finds a previous instance of the field in an axis and replaces it with
 * the given field. If field is not found, returns the original state.
 * @param  {MAConfig} config
 * @param  {Field} field
 * @param  {Field} [replacedField] optional field identifying which field to replace with field. Defaults to a field matching the id of 'field'
 * @return {MAConfig} the new state
 */
mac.replaceField = function(config, field, replacedField) {
    replacedField = replacedField || field;
    var path = mac.findPathToField(config, replacedField);
    
    if (path.length) {
        config = config.setIn(path, field);
        config = mac.regenerateHeaderConfig(config);
    }

    return config;
};

/**
 * Finds the path to the given field on an axis for use with Immutable's
 * *In functions (e.g. getIn, setIn). If an optionalAxiName is given,
 * only search within that axis. This is mostly necessary b/c fields
 * may or may not be grouped inside other fields.
 * 
 * @param  {MAConfig}  state
 * @param  {Field}  field
 * @param  {String} [optionalAxisName]
 * @return {String[]}
 */
mac.findPathToField = function(state, field, optionalAxisName) {
    var path = [];

    state.get("axis").some(function(fields, axisName) {
        // if we provided an optional axisName, only look in that axis
        if (optionalAxisName && axisName !== optionalAxisName)
            return false;

        return fields.some(function(f, fIdx) {
            var foundField = field.id === f.id; 

            // is a group of fields
            if (f.has("fields") && !foundField) {
                // go deeper
                foundField = f.get("fields").some(function(childField, childIdx) {
                    if (childField.id === field.id) {
                        path = ["axis"].concat(axisName, fIdx, "fields", childIdx);
                        return true;
                    }
                });
            } else {
                if (foundField) {
                    path = ["axis"].concat(axisName, fIdx);
                }
            }
            return foundField;
        });
    });

    return path;
};

/**
 * @param {MAConfig} config
 * @param {MeasureField} field
 * @return {String[]}
 */
mac.findPathToMeasureFieldInGroup = function(config, field) {
    var path = [],
        grpCt = config.measureGroups.size,
        i = 0;

    config.measureGroups.forEach(function(measureGroup, groupName) {
        if (path.length) return;
        var idx = measureGroup.fields.indexOf(field);

        if (idx > -1) {
            path = ["measureGroups", groupName, "fields", idx];
        }
    });

    return path;
};

mac.regenerateHeaderConfig = function(config) {
    if (config.useDefaultHeaderConfig)
        return mac.generateDefaultHeaderConfig(config);
    else
        return config;
};
/**
 * Analyzes the axes of a config and updates its headerConfig to represent the default header organization for an MAConfig
 *
 * @param {MAConfig} multiAxisConfig
 * @return {MAConfig}
 */
mac.generateDefaultHeaderConfig = function(multiAxisConfig) {
    multiAxisConfig.axis.entrySeq().forEach(function(entry) {
        var axisName = entry[0],
            axisFields = entry[1],
            concatTerms = [], //the default construction is to concatenate measure fields on either end
                              //with the cross of other terms
            crossTerms = [],
            currentTerm;

        axisFields.forEach(function(axisField) {
            if (axisField instanceof mac.MeasureField) {
                //just add to concat terms
                concatTerms.push(new mac.FieldTerm({fieldId: axisField.id}));
            } else if (axisField instanceof mac.LevelField) {
                //simply add to cross terms
                crossTerms.push(new mac.FieldTerm({fieldId: axisField.id}));
            } else if (axisField instanceof mac.DimensionField) { 
                //add the nest term of the levels to the cross terms
                if (axisField.fields.size) 
                    crossTerms.push(new mac.NestTerm({
                        fieldId: axisField.id,
                        fieldTerms: axisField.fields.map(function(levelField) {
                            return new mac.FieldTerm({fieldId: levelField.id});
                        })
                    }));
            } else if (axisField instanceof mac.MeasureGroupField) {
                //for measure groups, make a concat term containing each measure, then add
                //to the cross terms
                if (axisField.fields.size)
                    crossTerms.push(new mac.ConcatTerm({
                        fieldId: axisField.id,
                        terms: axisField.fields.map(function(measureField) {
                            return new mac.FieldTerm({fieldId: measureField.id});
                        })
                    }));
                else
                    crossTerms.push(new mac.PlaceholderTerm({
                        fieldId: axisField.id
                    }));
            }
        });

        if (concatTerms.length) {
            currentTerm = new mac.ConcatTerm({
                terms: new Immutable.List(concatTerms)
            });

            if (crossTerms.length)
                currentTerm = currentTerm.set("terms", currentTerm.terms.push(new mac.CrossTerm({ terms: new Immutable.List(crossTerms)})));
        } else {
            currentTerm = new mac.CrossTerm({
                terms: new Immutable.List(crossTerms)
            });
        }

        multiAxisConfig = multiAxisConfig.update("headerConfig", function(headerConfig) {
            return headerConfig.set(axisName, currentTerm);
        });
    });

    return multiAxisConfig;
}

/**
 * @param {Immutable.List<LevelField>} levelFields
 * @param {MeasureModel} measureModel
 * @return {Hierarchy}
 */
mac.getHierarchyForLevelFields = function(levelFields, measureModel) {
    var levelNames = [],
        dimensionNames = [];

    levelFields.forEach(function(f) {
        if (f.level.levelName !== "ALL") { //all works for any hierarchy so skip
            levelNames.push(f.level.levelName);
            dimensionNames.push(f.level.dimensionName);
        }
    });

    dimensionNames = lodash.uniq(dimensionNames);

    assert(dimensionNames.length === 1, "Bad number of dimensionNames found: " + dimensionNames.length)

    return measureModel.findHierarchiesWithLevels(dimensionNames[0], levelNames)[0];
};

mac.addFieldToAxis = function(config, axisName, field, before) {
    var fields = config.axis.get(axisName),
        prevIdx = fields.indexOf(field),
        beforeIdx;

    // remove it if it already existed (allows moving)
    if (prevIdx >= 0)
        fields = fields.delete(prevIdx);
        
    beforeIdx = fields.indexOf(before);

    if (beforeIdx >= 0) {
        fields = fields.splice(beforeIdx, 0, field); 
    } else {
        fields = fields.push(field);
    }
    
    config = config.setIn(["axis", axisName], fields);
    config = mac.regenerateHeaderConfig(config);

    return config;
};

/**
 * Return Intersection object representing the lowest intersection of the table (i.e. that of non-rollup cells)
 *
 * @param {MultiAxisConfig} config
 * @return {mac.Intersection}
 */  
mac.getBaseIntersection = function(config) {
    return mac.getBaseLevelFields(config).map(function(field) {
        return field.level;
    });
};

/**
 * Return a list of level fields representing the lowest intersection of the table (i.e. that of non-rollup cells)
 *
 * @param {MultiAxisConfig} config
 * @return {Immutable.List<Field>}
 */  
mac.getBaseLevelFields = function(config) {
    return config.axis.reduce(function(reduction, _, axisName) {
        return reduction.concat(mac.getLowestLevelFieldsOnAxis(config, axisName));
    }, Immutable.List());
};

/**
 * Return a config with the only field left on the axis if found
 *
 * @param {MultiAxisConfig} config
 * @param {string} axisName
 * @return {MultiAxisConfig}
 */
mac.removeLevelsFromAxis = function(config, axisName) {
    var axisFields = config.getIn(["axis", axisName]).filter(function(field) {
        return !(field instanceof mac.LevelField || field instanceof mac.DimensionField);
    });

    return config.setIn(["axis", axisName], axisFields);
};

mac.getOuterLabelOfMeasure = function(measure, label) {
    return (measure.labelMap && measure.labelMap.get(label)) || label;
};

/**
 * Returns the lowest LEVEL fields in each dimension on the axis.
 * 
 * @param  {MAConfig} config
 * @param  {String} axisName
 * @return {Immutable.List<LevelField>}
 */
mac.getLowestLevelFieldsOnAxis = function(config, axisName) {
    return config.getIn(["axis", axisName]).map(function(field) {
        return field.get("type") === FieldTypes.DIMENSION ? field.get("fields").last() : field;
    }).filter(function(field) {
        return field.get("type") === FieldTypes.LEVEL;
    });
};

mac.signatureToMQGSignature = function(signature) {
    return new MQG.BaseSignature(
        intersectionToMQGIntersection(signature.intersection),
        new MQG.ValueType(
            signature.type.kind,
            new MQG.Type(signature.type.type.kind, signature.type.type.named)
        ));
};

mac.enableOutlineForField = function(field) {
    return field.set("displayMode", LevelDisplayMode.OUTLINE);
};

mac.disableOutlineForField = function(field) {
    return field.set("displayMode", LevelDisplayMode.NONE);
};

mac.setRollupForField = function(field, rollupMethodName) {
    return field.set("rollupConfigs", new Immutable.List([
        mkRollupConfig({
            methodName: rollupMethodName
        })
    ]));
};

mac.removeRollupForField = function(field) {
    return field.delete("rollupConfigs");
};

/**
* Returns true if the given intersection is at or above the metric's base intersection.
* 
* @param {String} metricName
* @param {Intersection} inter
* @param {MeasureModel} measureModel
*
* @return {Boolean}
 */
mac.aggIntersectionIsValidForMetric = function(metricName, inter, measureModel) {
    return !querygen.metricBaseAboveInter(metricName, intersectionToMQGIntersection(inter), measureModel);
};

module.exports.MAConfig = MAConfig; 
module.exports.getUsedAxes = getUsedAxes;

module.exports.CrossTerm = CrossTerm;
module.exports.ConcatTerm = ConcatTerm;
module.exports.PlaceholderTerm = PlaceholderTerm;
module.exports.NestTerm = NestTerm;
module.exports.FieldTerm = FieldTerm;

module.exports.getOrderedAxes= getOrderedAxes;
module.exports.getAxisFields = getAxisFields;
module.exports.getField = getField;

module.exports.Level = Level;
module.exports.mkLevel = mkLevel;
module.exports.qualifiedLevelToLevel = qualifiedLevelToLevel;
module.exports.levelToQualifiedLevel = levelToQualifiedLevel;
module.exports.levelAttributeToMQGAttribute = levelAttributeToMQGAttribute;
module.exports.levelToQName = levelToQName;
module.exports.mqgLevelToQName = mqgLevelToQName;
module.exports.qNameToMQGLevel = qNameToMQGLevel;
module.exports.isAllLevel = isAllLevel;

module.exports.getIntersectionForMeasure = getIntersectionForMeasure;
module.exports.getIntersectionForMetric = getIntersectionForMetric;
module.exports.intersectionToMQGIntersection = intersectionToMQGIntersection;
module.exports.mqgIntersectionToIntersection = mqgIntersectionToIntersection;

module.exports.LevelDisplayMode = LevelDisplayMode; 

module.exports.SliceConfig = SliceConfig;
module.exports.mkSliceConfig = mkSliceConfig;

module.exports.SortConfig = SortConfig;
module.exports.mkSortConfig = mkSortConfig;

module.exports.RollupConfig = RollupConfig;
module.exports.mkRollupConfig = mkRollupConfig;

module.exports.LevelField = LevelField;
module.exports.isLevelField = isLevelField;
module.exports.compareLevelFields = compareLevelFields;
module.exports.mkLevelField = mkLevelField;
module.exports.addFilterToLevelField = addFilterToLevelField;
module.exports.updateHierarchyInLevelField = updateHierarchyInLevelField;
module.exports.updateDimensionLabelInLevelField = updateDimensionLabelInLevelField;
module.exports.isAllLevelField = isAllLevelField;

module.exports.MeasureField = MeasureField;
module.exports.mkMeasureField = mkMeasureField;

module.exports.Metric = Metric;
module.exports.mkMetric = mkMetric;

module.exports.Attribute = Attribute;
module.exports.mkAttribute = mkAttribute;

module.exports.Operator = Operator;
module.exports.mkOperator = mkOperator;

module.exports.Measure = Measure;
module.exports.mkMeasure = mkMeasure;

module.exports.getMeasureValueType = getMeasureValueType;
module.exports.findDataConfigPathInMeasureField = findDataConfigPathInMeasureField;

module.exports.DataConfig = DataConfig;
module.exports.mkDataConfig = mkDataConfig;

module.exports.EditConfig = EditConfig;
module.exports.mkEditConfig = mkEditConfig;

module.exports.findAggConfigPathInMeasure = findAggConfigPathInMeasure;

module.exports.AggConfig = AggConfig;
module.exports.mkAggConfig = mkAggConfig;

module.exports.Filter = Filter;
module.exports.mkFilter = mkFilter;
module.exports.Comparator = Comparator;
module.exports.mkComparator = mkComparator;
module.exports.Comparison = Comparison;
module.exports.mkComparison = mkComparison;

module.exports.mkIntersection = mkIntersection;

module.exports.DimensionField = DimensionField;
module.exports.mkDimensionField = mkDimensionField;

module.exports.MeasureGroupField = MeasureGroupField;
module.exports.mkMeasureGroupField = mkMeasureGroupField;

module.exports.mkArray = mkArray;

module.exports.FieldTypes = FieldTypes;

},{"./cubiql":211,"./querygen/query":258,"assert":undefined,"immutable":44,"lodash":90,"measure-query-gen/src/MQG":1}],254:[function(require,module,exports){
"use strict";

var oop = require("pivottable/src/lib/oop");
var assert = require("assert");
var lodash = require("lodash");
var mac = require("./multiaxisconfig");

var headings = module.exports;

headings.LOADING_MEMBER_ID = "__LOADING__";
headings.INVALID_MEMBER_ID = "__INVALID__";
headings.UNASSIGNED_MEMBER_ID = "__UNASSIGNED__";

headings.makePrototypeFromMacTerm = function(headerTerm, maConfig) {
    var terms,
        field,
        outlineFieldTerms,
        actualFieldTerms;

    if (headerTerm instanceof mac.PlaceholderTerm) {
        return new PlaceholderTerm(headerTerm.fieldId);
    } if (headerTerm instanceof mac.ConcatTerm) {
        terms = lodash.compact(headerTerm.terms.map(function(term) {
            return headings.makePrototypeFromMacTerm(term, maConfig);
        }).toArray());

        if (terms.length)
            return new ConcatTerm(headerTerm.fieldId, terms);
    } else if (headerTerm instanceof mac.CrossTerm) {
        terms = lodash.compact(headerTerm.terms.map(function(term) {
            return headings.makePrototypeFromMacTerm(term, maConfig);
        }).toArray());

        if (terms.length)
            return new CrossTerm(headerTerm.fieldId, terms);
    } else if (headerTerm instanceof mac.NestTerm) {
        if (headerTerm.fieldTerms.size)
            outlineFieldTerms = headerTerm.fieldTerms.filter(function(ft) {
                var field = mac.getField(maConfig, ft.fieldId);
                return field.displayMode === mac.LevelDisplayMode.OUTLINE;
            });

            actualFieldTerms = outlineFieldTerms.map(function(ft) {
                var field = mac.getField(maConfig, ft.fieldId),
                    fieldIdx = headerTerm.fieldTerms.findIndex(function(pft) {
                        return ft.fieldId === pft.fieldId;
                    }),
                    parentFields = headerTerm.fieldTerms.slice(0, fieldIdx).map(function(pt) {
                        return mac.getField(maConfig, pt.fieldId);
                    });

                return headings.makePrototypeFieldTermForField(field, parentFields);
            }).toArray();

            if (actualFieldTerms.length === 1) {
                return actualFieldTerms[0];
            }

            return new NestTerm(
                headerTerm.fieldId,
                actualFieldTerms,
                lodash.compact(actualFieldTerms.map(function(ft, i) {
                    if (i < actualFieldTerms.length - 1) {
                        return headings.makePrototypeNestMapForFieldTerms(maConfig, ft, actualFieldTerms[i+1]);
                    }
                }))
            );
    } else if (headerTerm instanceof mac.FieldTerm) {
        field = mac.getField(maConfig, headerTerm.fieldId);
        assert(field, "Couldn't find field referenced by field term: ", headerTerm.fieldId);
        return headings.makePrototypeFieldTermForField(field);
    } else {
        throw new Error("couldn't make term into MAH Term");
    }
};

headings.makePrototypeNestMapForFieldTerms = function(maConfig, parentFieldTerm, childFieldTerm) {
    var parentField = mac.getField(maConfig, parentFieldTerm.fieldId),
        childField = mac.getField(maConfig, childFieldTerm.fieldId),
        mappings = childFieldTerm.members.map(function(m) {
            var parent;
            if (m.config.rollup) {
                parent = parentFieldTerm.members.find(function(pm) {
                    return pm.config.rollup === m.config.rollup;
                });
            }
            return [m.id, parent ? parent.id : "proto"];
        });

    return new FieldMap(parentField, childField, mappings);
};

headings.makePrototypeFieldMember = function(field) {
    return new Member("proto", "proto", {field: field});
};

headings.makePrototypeFieldTermForField = function(field, parentFields) {
    var members = [];

    parentFields && parentFields.forEach(function(f) {
        var parentMember = headings.makePrototypeFieldMember(f);
        if (f.rollupConfigs) {
            f.rollupConfigs.forEach(function(rc) {
                var cfg = {
                        rollup: rc,
                        id: parentMember.id,
                        label: parentMember.label
                    },
                    rollupId = headings.mkRollupMemberId(rc, f.id, parentMember.id);

                Object.keys(parentMember.config).forEach(function(key) {
                    cfg[key] = parentMember.config[key];
                });

                members.push(new Member(rollupId, rollupId, cfg));
            });
        }
    });

    members.push(headings.makePrototypeFieldMember(field));

    return new FieldTerm(field, members);
};

var TermTypes = Object.freeze({
    CROSS: 1,
    CONCAT: 2,
    NEST: 3,
    FIELD: 4
});

var FieldMap = headings.FieldMap = function(parentField, childField, mapping) {
    this.parentField = parentField;
    this.childField = childField;
    this.mapping = mapping;
};

var CrossTerm = headings.CrossTerm = function(fieldId, terms) {
    this.fieldId = fieldId;
    this.terms = terms;
};

var ConcatTerm = headings.ConcatTerm = function(fieldId, terms) {
    this.fieldId = fieldId;
    this.terms = terms;
};

var FieldTerm = headings.FieldTerm = function(field, members) {
    this.fieldId = field.id;
    this.field = field;
    this.members = members;
};

var NestTerm = headings.NestTerm = function(fieldId, fieldTerms, maps) {
    this.fieldId = fieldId;
    this.fieldTerms = fieldTerms;
    this.maps = maps;
};

var PlaceholderTerm = headings.PlaceholderTerm = function(fieldId) {
    this.fieldId = fieldId;
};

var Member = headings.Member = function(id, label, config) {
    this.id = id;
    this.label = label;
    this.config = config;
};

var Heading = headings.Heading = function(id, label, config) {
    this.id = id;
    this.label = label;
    this.config = config;
};

/**
 * An array of different Columns objects, because a heading change between
 * different Columns over its length
 * @typedef {ColumnSet[]} ColumnSets
 *
 * @typedef {Object} ColumnSet
 * @property {ColumnInfo[]} columns
 * @property {Number} length
 *
 * @typedef {Object} ColumnInfo
 * @property {mac.Field} field
 * @property {Number} length
 *
 */
headings.AxisHeading = AxisHeading;
function AxisHeading(term, path) {
    this.$term = term;
    this.$path = path || [];

    if (term && term.fieldId) {
        this.$path = this.$path.concat([term.fieldId]);
    }
}

AxisHeading.prototype.getLength = function() {
    return this.$length;
};

function $runOnHeadings(axisHeadings, fnName) {
    var i = 0,
        numberOfHeadings = axisHeadings.length;

    for (; i < numberOfHeadings; i++) {
        if (axisHeadings[i][fnName]()) {
            return true;
        }
    }

    return false;
}

AxisHeading.prototype.hasLoadingHeadings = function() {
    return $runOnHeadings(this.$axisHeadings, "hasLoadingHeadings");
};

AxisHeading.prototype.hasAllHeadingsInvalid = function() {
    return lodash.every(this.$axisHeadings, function(heading) {
        return heading.hasAllHeadingsInvalid();
    });
};

AxisHeading.prototype.$adjustRange = function(start, end) {
    start = Math.min(start, this.getLength());
    end = Math.min(end, this.getLength());
    var len = end - start;

    return {
        start: start,
        end: end,
        len: len
    };
};

AxisHeading.prototype.getHeadingRange = function(start, end) {
    var actualRange = this.$adjustRange(start, end),
        i = actualRange.start,
        rows = [];

    for (; i < actualRange.end; i++) {
        rows.push(this.getHeadingRow(i));
    }

    return rows;
};

/**
 * @typedef {Object} Row
 * @property {Heading[]} headers
 * @property {String[]} members - array of member ids for field-bearing headers
 * @property {mac.Field[]} fields - array of fields indexed the same as 'members'
 * @property {mac.RollupConfig[]} rollups - array of rollup configurations indexed the same as 'members' and 'fields'.  May be undefined.
 */

/**
 * @param {Number} rowNum
 * @return {Row}
 */
AxisHeading.prototype.getHeadingRow = function(rowNum) {
    var row = {
            headers: [],
            members: []
        },
        fields = [],
        rollups = [],
        members = this.getHeadingMembers(rowNum),
        colSet = this.getColumnSetAt(rowNum),
        member,
        i = 0;

    for (; i < members.length; i++) {
        member = members[i];
        row.headers.push(memberToHeading(member));
        if (member.config.field) { //only accumulate row member/fields for headings with a field
            row.members.push(member.config.id || member.id); //config can override the id for membership
            fields.push(member.config.field);
            rollups.push(member.config.rollup);
        }

        row.hasInvalidHeadings = row.hasInvalidHeadings || member.config.invalidHeadings;
    }

    row.colSet = colSet;
    row.fields = fields;
    row.rollups = rollups;
    return row;
};

AxisHeading.prototype.$findColumnSetIndexForFieldPos = function(fieldPos) {
    var columnSets = this.getColumnSets(),
        fieldPosFieldNames = Object.keys(fieldPos),
        columnSet,
        columnSetFieldNames,
        i = 0;

    fieldPosFieldNames.sort(); //sort for comparing to headings easily

    for (; i < columnSets.length; i++) {
        columnSet = columnSets[i];
        columnSetFieldNames = columnSet.columns.map(function(col) { return col.field.id; });
        columnSetFieldNames.sort();

        if (lodash.isEqual(columnSetFieldNames, fieldPosFieldNames)) {
            return i;
        }
    }
};

/**
 * Given a full or partial field position, find all columnsets that contain all of the fields defined in the position
 * @param {FieldPosition} fieldPos
 * @return {ColumnSet[]}
 */
AxisHeading.prototype.$findMatchingColumnSetsForFieldPos = function(fieldPos) {
    var columnSets = this.getColumnSets(),
        fieldPosFieldNames = Object.keys(fieldPos),
        columnSet,
        columnSetCols,
        colsLen,
        i = 0,
        fieldName,
        fieldNamesLen = fieldPosFieldNames.length,
        match,
        matching = [],
        j, k;

    for (; i < columnSets.length; i++) {
        columnSet = columnSets[i];
        columnSetCols = columnSet.columns;
        colsLen = columnSetCols.length;
        match = true;
        for (j = 0; j < fieldNamesLen && match; j++) {
            match = false;
            fieldName = fieldPosFieldNames[j];
            for (k = 0; k < colsLen; k++) {
                if ((columnSetCols[k].field && columnSetCols[k].field.id === fieldName) ||
                    columnSetCols[k].path[0] === fieldName)
                    match = true;
            }
        }
        if (match)
            matching.push(columnSet);
    }

    return matching;
};

AxisHeading.prototype.$findColumnSetOffset = function(setIndex) {
    var columnSets = this.getColumnSets(),
        i  = 0,
        offset = 0;

    for (; i < setIndex; i++) {
        offset += columnSets[i].length;
    }

    return offset;
};

/**
 * Given a full or partial field position, find all matching rows.
 * @param {FieldPosition} fieldPos
 * @param {Function} [filter] filter callback
 * @return {Number[]}
 */
AxisHeading.prototype.findMatchingRowNums = function(fieldPos, filter) {
    var columnSets = this.$findMatchingColumnSetsForFieldPos(fieldPos),
        colSet,
        matchingRows = [],
        i = 0,
        j,
        rows,
        rowCt;

    for (; i < columnSets.length; i++) {
        colSet = columnSets[i];

        if (lodash.isFunction(filter) ? filter(colSet) : true) {
            rows = this.findMatchingRowNumsInColSet(colSet, fieldPos);
            rowCt = rows.length;
            for (j = 0; j < rowCt; j++) {
                matchingRows.push(rows[j]);
            }
        }
    }


    //sorting because col sets can be interleaved
    return matchingRows.sort(function(a, b) {
        return a - b;
    });
};

function $findColumnMemberIndices(fieldPos, column) {
    var columnMemberIndices = [],
        field = column.field,
        fieldColumnMembers = column.members,
        posFieldMember = field && fieldPos[field.id],
        memberIndex;

    if (posFieldMember) {
        memberIndex = $findMemberIndex(posFieldMember, fieldColumnMembers);
        if (!lodash.isUndefined(memberIndex))
            columnMemberIndices = [memberIndex];
    } else if (!field) {
        //if no field, just a single-row for placeholder
        return [0];
    } else {
        //if there isn't a position for this field, every member in this column can be used
        for (var j = 0; j < fieldColumnMembers.length; j++) {
            columnMemberIndices.push(j);
        }
    }

    return columnMemberIndices;
}

function $findColumnMemberIndicesForRedundantColumns(fieldPos, columns) {
    var matchingRowsByColumn = [],
        columnMemberIndices = [],
        memberRowMapMember,
        posFieldMember,
        colCt = columns.length,
        i, j;

    for (i = colCt - 1; i >= 0; i--) {
        posFieldMember = fieldPos[columns[i].field.id];
        if (i === colCt - 1) {
            // base level
            matchingRowsByColumn.push($findColumnMemberIndices(fieldPos, columns[i]));
        } else if (posFieldMember) {
            // is non-base member, look it up in the memberRowMap
            columnMemberIndices = [];

            memberRowMapMember = columns[i].memberRowMap.get(posFieldMember.id);

            if (memberRowMapMember) {
                for (j = memberRowMapMember.start; j < memberRowMapMember.start + memberRowMapMember.length; j++) {
                    columnMemberIndices.push(j);
                }
                matchingRowsByColumn.push(columnMemberIndices);
            }
        }
    }

    return lodash.intersection.apply(lodash, matchingRowsByColumn);
}

function $adjustMatchingRows(step, columnMemberIndices, matchingRows) {
    var adjustedRows = [],
        memberOffset,
        matchLen = matchingRows.length,
        j, k;

    //now for all of the indices in this column that match, we should make a matching row from
    //the ones found so far that incorporates this index
    for (j = 0; j < columnMemberIndices.length; j++) {
        memberOffset = columnMemberIndices[j] * step;

        for (k = 0; k < matchLen; k++) {
            adjustedRows.push(memberOffset + matchingRows[k]); //add the offset to the existing match
        }
    }

    return adjustedRows;
}

/**
 * Given a full or partial field position, find all matching rows in a particular colSet
 * @param {ColSet} colSet
 * @param {FieldPosition} fieldPos
 * @return {Number[]}
 */
AxisHeading.prototype.findMatchingRowNumsInColSet = function(colSet, fieldPos) {
    var offset = colSet.offset,
        columns = colSet.columns,
        colGroup,
        i,
        matchingRows = [],
        columnMemberIndices,
        isRedundant,
        // group redundant columns together so they can be processed together
        columnGroups = columns.reduce(function(groups, c, colIdx, cols) {
            var isRedundant = c.redundant || (cols[colIdx-1] && cols[colIdx-1].redundant);

            if (isRedundant) {
                //creating a new group when no groups or if the previous has redundant columns
                if (groups.length === 0 || !cols[colIdx-1].redundant) {
                    groups.push([c]);
                } else {
                    groups[groups.length - 1].push(c);
                }
            } else {
                groups.push([c]);
            }

            return groups;
        }, []),
        colGroupCt = columnGroups.length;

    //walk inside-out multiplying matching rows by the steps
    for (i = colGroupCt-1; i >= 0; i--) {
        colGroup = columnGroups[i];
        isRedundant = colGroup.length > 1;
        if (!isRedundant) {
            columnMemberIndices = $findColumnMemberIndices(fieldPos, colGroup[0]);
        } else {
            columnMemberIndices = $findColumnMemberIndicesForRedundantColumns(fieldPos, colGroup);
        }
        // if we're not the innermost column, apply this column's indices to the rows found so far`
        if (i < colGroupCt - 1) {
            matchingRows = $adjustMatchingRows(colGroup[0].step, columnMemberIndices, matchingRows);
        } else {
            //if we're the innermost column, just initialize the matched rows with the found indices
            matchingRows = columnMemberIndices;
        }
    }

    return matchingRows.map(function(index) {
        return index + offset;
    });
};

AxisHeading.prototype.findRowNumForFieldPos = function(fieldPos) {
    var columnSetIndex = this.$findColumnSetIndexForFieldPos(fieldPos);

    if (lodash.isUndefined(columnSetIndex)) return;
    var columnSet = this.getColumnSets()[columnSetIndex],
        offset = columnSet.offset,
        columns = columnSet.columns,
        colCt = columns.length,
        columnMemberIndex,
        column,
        field,
        posFieldMember,
        i = 0,
        rowNum = offset;

    for (; i < colCt; i++) {
        column = columns[i];
        field = column.field;
        posFieldMember = fieldPos[field.id];
        assert(posFieldMember, "No position member for for field " + field.id);
        if (!column.redundant) {
            columnMemberIndex = $findMemberIndex(posFieldMember, column.members);
            if (lodash.isUndefined(columnMemberIndex)) //we won't find it b/c this column doesn't line up
                return;
            rowNum += columnMemberIndex * column.step;
        }
    }

    return rowNum;
};

function $findMemberIndex(posFieldMember, members) {
    var posId = posFieldMember.id,
        rollupFieldId = posFieldMember.rollupFieldId,
        memberCt = members.length,
        member,
        i = 0;

    for (; i < memberCt; i++) {
        member = members[i];
        if (rollupFieldId) {
             if (member.config.rollup && member.config.id === rollupFieldId)
                 return i;
        } else {
            if (member.id === posId)
                return i;
        }
    }
}

/**
 * @param {String} fieldId
 * @return {AxisHeading}
 */
AxisHeading.prototype.getHeadingForField = function(fieldId) {
    if (this.$term.fieldId === fieldId) return this;

    var heading,
        headings = this.$axisHeadings || {},
        len = headings.length,
        i = 0;

    for (; i < len; i++) {
        if (heading) break;
        heading = headings[i].getHeadingForField(fieldId);
    }

    return heading;
};

headings.CrossAxisHeading = CrossAxisHeading;
function CrossAxisHeading(term) {
    AxisHeading.apply(this, arguments);

    var path = this.$path;

    this.$axisHeadings = term.terms.map(function(term) {
        return headings.termToAxisHeading(term, path);
    });

    this.$length = this.$axisHeadings.length ? this.$axisHeadings.reduce(function(len, axisHeading) {
        return len * (axisHeading.getLength() || 0);
    }, 1) : 0;
}
oop.inherits(CrossAxisHeading, AxisHeading);

CrossAxisHeading.prototype.$calculateRelativeRows = function(rowNum) {
    var relativeRows = [],
        currRow = rowNum,
        relativeRow,
        axisHeading,
        step = this.getLength(),
        i = 0;

    //loop left-to-right for terms
    for (; i < this.$axisHeadings.length; i++) {
        axisHeading = this.$axisHeadings[i];
        //the step for the axis headings is the last step divided by their own length
        step = step / axisHeading.getLength();
        //the relative row num for this heading is the absolute rowNum modulo the step

        relativeRow = Math.floor(currRow / step);
        currRow = currRow - relativeRow * step;
        relativeRows.push(relativeRow);
    }

    return relativeRows;
};

/**
 * @return {ColumnSet[]}
 */
CrossAxisHeading.prototype.getColumnSets = function() {
    if (this.$columnSets) return this.$columnSets;
    //ok we need to produce sets which contain the cross-product, which is a bit complicated
    //step 1) get the Sets for each heading
    var subColumnSets = this.$axisHeadings.map(function(h) {
            return h.getColumnSets();
        }),
        subColSetCt = subColumnSets.length,
        leftSubColSet,
        rightmostSubColSet,
        i;

    if (!subColumnSets.length) return [];
    if (subColumnSets.length === 1) return subColumnSets[0];

    rightmostSubColSet = subColumnSets[subColSetCt - 1];

    //step 2) working right-to-left, we cross the terms, each step of
    //which makes a subterm that is the right-most term in the next iteration.
    for (i = subColSetCt-2; i >= 0; i--) {
        leftSubColSet = subColumnSets[i];
        rightmostSubColSet = $crossColumnSets(leftSubColSet, rightmostSubColSet);
    }

    this.$columnSets = rightmostSubColSet;
    return this.$columnSets;
};

/*
 * @typedef {Object} ColumnSet
 * @property {ColumnInfo[]} columns
 * @property {Number} length
 *
 * @typedef {Object} ColumnInfo
 * @property {mac.Field} field
 * @property {Number} length
 *
 */
/**
 * @param {ColumnSets} leftSets
 * @param {ColumnSets} rightSets
 * @return {ColumnSets}
 */
function $crossColumnSets(leftSets, rightSets) {
    assert(leftSets && rightSets);

    var combinedSets = [],
        leftSetsLen = leftSets.length,
        rightSetsLen = rightSets.length,
        leftSet,
        leftSetLen,
        rightSet,
        rightSetCol,
        rightSetsTotalLen,
        setOffset,
        leftOffset,
        rightOffset,
        combinedColOffset,
        i = 0, j, k;

    //the total size of the right side is the factor by which the step of the left columns will increase
    rightSetsTotalLen = rightSets.reduce(function(tot, set) { return tot + set.length; }, 0);

    //for each left set, cross it with each right side to produce the combined sets
    for (; i < leftSetsLen; i++) {
        leftSet = leftSets[i];
        leftSetLen = leftSet.length;
        setOffset = setOffset || leftSet.offset;

        //adjust the step value of the left set's columns..
        //since we're crossing, that means multiply the step value of each left column
        //by the length of the entire right side
        for (j = 0; j < leftSet.columns.length; j++) {
            leftSet.columns[j].step *= rightSetsTotalLen;

            //for any non-top level columns, update their repeat distance
            if (j > 0) {
                leftSet.columns[j].repeatDistance = leftSet.columns[j].step * leftSet.columns[j].length;
            }
        }

        //now for each right set make a combined set with the left and recompute the offset/length
        for (j = 0; j < rightSetsLen; j++) {
            rightSet = rightSets[j];
            //need to set this for any columns which weren't repeating before
            for (k = 0; k < rightSet.columns.length; k++) {
                rightSetCol = rightSet.columns[k];
                if (!rightSetCol.repeatDistance) {
                    rightSetCol.repeatDistance = rightSetCol.step * rightSetsTotalLen;
                }

                //removing repeat distance if the left set is interleaved
                //and then set the correct repeat distance on the next iteration
                //or the interleaved set is the first one, that means no repeat distance at all
                if (leftSet.columns[0].interleaved) {
                    rightSetCol.repeatDistance = undefined;

                    //when faced with the interleaved set, then fixing the length of the last column
                    if (k === rightSet.columns.length - 1) {
                        rightSetCol.length = leftSet.length * rightSetsTotalLen;
                    }
                }
            }

            // compute offset - include all of the interleaved sets in the calcuation
            leftOffset = leftSet.interleaved ? leftSet.offset * rightSet.length:  0
            rightOffset = rightSet.interleaved ? rightSet.offset : 0

            combinedSets.push({
                columns: [].concat(leftSet.columns.map(lodash.clone), rightSet.columns.map(lodash.clone)),
                offset: (leftSet.interleaved || rightSet.interleaved) ? leftOffset + rightOffset : setOffset,
                length: leftSet.length * rightSet.length,
                interleaved: leftSet.interleaved || rightSet.interleaved
            });

            if (!rightSet.interleaved) {
                setOffset += leftSet.length * rightSet.length;
            }
        }
    }

    return combinedSets;
}

CrossAxisHeading.prototype.getColumnSetAt = function(rowNum) {
    var colSets = this.getColumnSets(),
        ct = colSets.length,
        colSet,
        colCt,
        firstCol,
        firstColEnd,
        col,
        i = 0,
        foundColSet,
        colRangeStart,
        colRangeEnd;

    for (; i < ct; i++) {
        if (foundColSet) break;
        colSet = colSets[i];
        colCt = colSet.columns.length;
        firstCol = colSet.columns[0];
        firstColEnd = this.$getColumnSetSize(colSet) + colSet.offset;
        //skip if rowNum not even inside this column set area
        if (!(rowNum < firstColEnd && rowNum >= colSet.offset)) continue;

        col = colSet.columns[colCt-1];
        colRangeStart = colSet.offset;
        colRangeEnd = colRangeStart + col.length;
        //loop jumping the range by the repeat distance to see if the row fits in here
        while(rowNum >= colRangeStart) {
            //oh its within the range, success
            if (rowNum < colRangeEnd) {
                foundColSet = colSet;
                break;
            }
            colRangeStart += col.repeatDistance;
            colRangeEnd += col.repeatDistance;
        }
    }

    return colSet;
};

CrossAxisHeading.prototype.getHeadingMembers = function(rowNum) {
    var relativeRows = this.$calculateRelativeRows(rowNum),
        relativeRow,
        i = 0,
        j,
        submembers,
        members = [];

    for (; i < relativeRows.length; i++) {
        relativeRow = relativeRows[i];
        submembers = this.$axisHeadings[i].getHeadingMembers(relativeRow);
        for (j = 0; j < submembers.length; j++)
            members.push(submembers[j]);
    }

    return members;
};

headings.ConcatAxisHeading = ConcatAxisHeading;
function ConcatAxisHeading(term) {
    AxisHeading.apply(this, arguments);

    var path = this.$path;

    this.$axisHeadings = term.terms.map(function(term) {
        return headings.termToAxisHeading(term, path);
    });

    this.$length = this.$axisHeadings.reduce(function(len, axisHeading) {
        return len + axisHeading.getLength();
    }, 0);
}
oop.inherits(ConcatAxisHeading, AxisHeading);

ConcatAxisHeading.prototype.getHeadingMembers = function(rowNum) {
    var relativeRow = rowNum,
        axisHeading,
        me = this,
        i = 0;

    for (; i < this.$axisHeadings.length; i++) {
        axisHeading = this.$axisHeadings[i];
        //if the relative row occurs within the axis heading use it
        if (relativeRow < axisHeading.getLength())
            return axisHeading.getHeadingMembers(relativeRow);
        else //if it doesn't, subtract out this length to get the row relative to the rest of headers after this one
            relativeRow -= axisHeading.getLength();
    }

    //no members found
    return [];
};

ConcatAxisHeading.prototype.getColumnSetAt = function(rowNum) {
    var axisHeadings = this.$axisHeadings,
        ct = axisHeadings.length,
        offset = 0,
        heading,
        i,
        colSet;

    for (i = 0; i < ct; i++) {
        heading = axisHeadings[i];

        if (rowNum >= offset && rowNum < offset + heading.getLength()) {
            break;
        }

        offset += heading.getLength()
    }

    colSet = heading.getColumnSetAt(rowNum - offset);

    return lodash.extend({}, colSet, {offset: colSet.offset + offset});
};

/**
 * Compute the total number of rows a colset spans, including interleaved rows from other colsets
 *
 * @param {ColumnSet} colSet
 * @return {Number}
 */
CrossAxisHeading.prototype.$getColumnSetSize = function(colSet) {
    var firstCol = colSet.columns[0];

    return firstCol ? firstCol.length * (firstCol.step || 1) : 0;
};

/**
 * @return {ColumnSet[]}
 */
ConcatAxisHeading.prototype.getColumnSets = function() {
    if (this.$columnSets)
        return this.$columnSets;

    var absOffset = 0,
        me = this;

    this.$columnSets = Array.prototype.concat.apply([], this.$axisHeadings.map(function(h) {
        var columnSets = h.getColumnSets();

        columnSets = columnSets.map(function(colSet) {
            //adjust the offset for the column sets
            //creating new object because to avoid overriding offset
            //in the original column set
            return lodash.extend({}, colSet, {
                offset: colSet.offset + absOffset,
                interleaved: true,
                columns: colSet.columns.map(function(col) {
                    return lodash.extend({}, col, {interleaved: true});
                })
            });
        });

        absOffset += h.getLength();

        return columnSets;
    }));

    return this.$columnSets;
};

headings.NestAxisHeading = NestAxisHeading;
function NestAxisHeading(term) {
    AxisHeading.apply(this, arguments);

    assert(term.maps.length, "Can't have NestAxisHeading with no field mappings");
    assert(term.fieldTerms.length > 1, "Must have more than fieldTerm in to make an AxisHeading from a NestTerm");
    assert(term.maps.length === term.fieldTerms.length - 1, "Nested headings require a fieldmap for each pair of axis headings");

    var me = this;

    this.$childToParentMaps = [];
    this.$parentToChildrenMaps = [];
    this.$idMaps = term.fieldTerms.map(function(fieldTerm) {
        var members = fieldTerm.members,
            member,
            map = new Map(),
            i = 0;

        for (; i < members.length; i++) {
            member = members[i];
            map.set(member.id, member);
        }

        return map;
    });

    term.maps.forEach(function(fieldMap) {
        var mapping = fieldMap.mapping,
            parentToChildMap = new Map(),
            pair,
            parentId,
            i = 0;

        for (; i < mapping.length; i++) {
            pair = mapping[i];
            parentId = pair[1];
            if (!parentToChildMap.has(parentId))
                parentToChildMap.set(parentId, [pair[0]]);
            else
                parentToChildMap.get(parentId).push(pair[0]);
        }
        me.$parentToChildrenMaps.push(parentToChildMap);
        me.$childToParentMaps.push(new Map(mapping));
    });
    this.$axisHeadings = term.fieldTerms.map(function(term) {
        return headings.termToAxisHeading(term, me.$path);
    });

    //the length is the child's length from the lowest fieldMap
    this.$length = this.$axisHeadings[this.$axisHeadings.length - 1].getLength();
}
oop.inherits(NestAxisHeading, AxisHeading);

NestAxisHeading.prototype.$getMemberById = function(fieldIdx, memberId) {
    return this.$idMaps[fieldIdx].get(memberId);
};

NestAxisHeading.prototype.getHeadingMembers = function(rowNum) {
    var mapIdx = this.$term.maps.length - 1,
        child = this.$axisHeadings[this.$axisHeadings.length - 1].getHeadingMembers(rowNum)[0], //we know there's exactly one member b/c its a field
        parentId,
        parent,
        map,
        members = [];

    //we start from child out.. i.e. the row jumps us to the child in the lowest axisHeading,
    //then we walk up from there accumulating parents
    for (; mapIdx >= 0; mapIdx--) {
        map = this.$childToParentMaps[mapIdx];
        parentId = map.get(child.id);

        if (!parentId) {
            parent = this.$createUnassignedParentMember();
        } else {
            //the mapIdx is the same as the parent's field index
            parent = this.$getMemberById(mapIdx, parentId);
        }
        members.push(child);
        //use this parent as the child for the next loop
        child = parent;
    }
    members.push(parent);
    members.reverse();

    return members;
};

NestAxisHeading.prototype.getColumnSetAt = function(rowNum) {
    if (rowNum >= 0 && rowNum < this.getLength()) {
        return this.getColumnSets()[0];
    }
};

NestAxisHeading.prototype.$getMemberRowMap = function() {
    var mappings = this.$parentToChildrenMaps.reduceRight(function(reduction, map, idx, list) {
        var newMap = new Map(),
            rowIndex = 0,
            childMap;

        // for the mapping to the lowest level
        if (idx === list.length - 1) {
            map.forEach(function(members, parentId) {
                var memberLen = members.length;
                newMap.set(parentId, { start: rowIndex, length: memberLen });
                rowIndex += memberLen;
            });
        } else { // for all higher level mappings
            childMap = reduction[0];
            map.forEach(function(members, parentId) {
                var start = childMap.get(members[0]).start,
                    childSize = members.reduce(function(size, memberId) {
                        return size + childMap.get(memberId).length;
                    }, 0);

                newMap.set(parentId, { start: start, length: childSize });
            });
        }

        reduction.unshift(newMap);
        return reduction;
    }, []);

    return mappings;
};

/**
 * @return {ColumnSets}
 */
NestAxisHeading.prototype.getColumnSets = function() {
    //only one column set for a nest which is just the combined set of the fields in it
    if (this.$columnSets) return this.$columnSets;
    var fieldColumnSets = this.$axisHeadings.map(function(h) {
            return h.getColumnSets()[0];
        }),
        lastColSet = fieldColumnSets[fieldColumnSets.length - 1],
        lastCol = lastColSet.columns[0],
        memberRowMap = this.$getMemberRowMap();

    this.$columnSets = [{
        columns: fieldColumnSets.map(function(set, i) {
            var col = set.columns[0];
            return {
                field: col.field,
                length: lastCol.length,
                members: col.members,
                step: col.step,
                path: col.path,
                //redundant means this column's rows are determined by another column (For nested ones, every parent column is redundant)
                redundant: i < fieldColumnSets.length - 1,
                memberRowMap: memberRowMap[i]
            };
        }),
        offset: 0, //always 0 since there's just one set
        length: this.getLength()
    }];

    return this.$columnSets;
};

NestAxisHeading.prototype.$createUnassignedParentMember = function() {
    return new Member(headings.UNASSIGNED_MEMBER_ID, "", {});
};

headings.FieldAxisHeading = FieldAxisHeading;
function FieldAxisHeading(term) {
    AxisHeading.apply(this, arguments);

    this.$length = term.members.length;
}
oop.inherits(FieldAxisHeading, AxisHeading);

FieldAxisHeading.prototype.getHeadingForField = function(fieldId) {
    if (this.$term.field.id === fieldId)
        return this;
};

FieldAxisHeading.prototype.hasLoadingHeadings = function() {
    return this.$term.members && this.$term.members[0] && this.$term.members[0].config.loading;
};

FieldAxisHeading.prototype.hasAllHeadingsInvalid = function() {
    return !!this.$term.members && lodash.every(this.$term.members, lodash.property("config.invalidHeadings"));
};

FieldAxisHeading.prototype.getHeadingMembers = function(rowNum) {
    var member = this.$term.members[rowNum];
    if (member)
        return [member];
    else
        return [];
};

FieldAxisHeading.prototype.getColumnSetAt = function(/* rowNum */) {
    return this.getColumnSets()[0];
};

/**
 * @return {ColumnSets}
 */
FieldAxisHeading.prototype.getColumnSets = function() {
    return [{
        columns: [{
            field: this.$term.field,
            length: this.getLength(),
            members: this.$term.members,
            path: this.$path,
            step: 1
        }],
        offset: 0, //always 0 since there's just one set
        length: this.getLength()
    }];
};

function EmptyAxisHeading() {
    AxisHeading.apply(this, arguments);

    this.$length = 0;
}
oop.inherits(EmptyAxisHeading, AxisHeading);

EmptyAxisHeading.prototype.hasLoadingHeadings = function() {
    return false;
};

EmptyAxisHeading.prototype.hasInvalidHeadings = function() {
    return false;
};

EmptyAxisHeading.prototype.getColumnSetAt = function(/*rowNum*/) {
    return {
        columns: [],
        length: 0
    };
};

EmptyAxisHeading.prototype.getColumnSets = function() {
    return [];
};

EmptyAxisHeading.prototype.getHeadingMembers = function(/*rowNum*/) {
    return [[]];
};

EmptyAxisHeading.prototype.findRowNumForFieldPos = function(/*fieldPos*/) {
    //empty ones can never have it!
    return;
};

EmptyAxisHeading.prototype.getHeadingForField = function(/*fieldId*/) {
    //there's no field for Empty so always undefined
    return;
};

var PLACEHOLDER_ID = "_PLACEHOLDER_";
var PLACEHOLDER_LABEL = "";
var PLACEHOLDER_CONFIG = { placeholder: true };

function PlaceholderAxisHeading(term) {
    AxisHeading.apply(this, arguments);

    if (term)
        this.$fieldId = term.fieldId;
    this.$length = 1;
    this.$member = new Member(PLACEHOLDER_ID, PLACEHOLDER_LABEL, PLACEHOLDER_CONFIG);
}
oop.inherits(PlaceholderAxisHeading, AxisHeading);

PlaceholderAxisHeading.prototype.hasLoadingHeadings = function() {
    return false;
};

PlaceholderAxisHeading.prototype.hasAllHeadingsInvalid = function() {
    return false;
};

PlaceholderAxisHeading.prototype.findRowNumForFieldPos = function(/*fieldPos*/) {
    //placeholders can never have it!
    return;
};

PlaceholderAxisHeading.prototype.getColumnSetAt = function(rowNum) {
    if (rowNum === 0)
        return this.getColumnSets()[0];
};

PlaceholderAxisHeading.prototype.getColumnSets = function() {
    return [{
        columns: [{
            length: 1,
            step: 1,
            path: []
        }],
        offset: 0,
        length: this.getLength()
    }];
};

PlaceholderAxisHeading.prototype.getHeadingMembers = function(rowNum) {
    if (rowNum === 0)
        return [this.$member];
    else
        return [];
};

PlaceholderAxisHeading.prototype.getHeadingForField = function(fieldId) {
    if (this.$fieldId === fieldId)
        return this;
};

var axisHeadingToTerm = headings.axisHeadingToTerm = function(heading) {
    return heading.$term;
};

headings.termToAxisHeading = function(term, path) {
    if (term instanceof FieldTerm)
        return new FieldAxisHeading(term, path);
    else if (term instanceof NestTerm)
        return new NestAxisHeading(term, path);
    else if (term instanceof CrossTerm)
        return new CrossAxisHeading(term, path);
    else if (term instanceof ConcatTerm)
        return new ConcatAxisHeading(term, path);
    else if (term instanceof PlaceholderTerm)
        return new PlaceholderAxisHeading(term);
    else
        throw new Error("Unhandleable term type: " + JSON.stringify(term.type));
};

function memberToHeading(member) {
    return new Heading(
        member.id,
        member.label,
        member.config
    );
}

var HeadingData = headings.HeadingData = function(axisHeadings, slicePosition, multiAxisConfig) {
    this.$axisHeadings = axisHeadings;
    this.$slicePosition = slicePosition;
    this.$config = multiAxisConfig;
    this.$usedAxes = mac.getUsedAxes(multiAxisConfig);
    this.$axes = multiAxisConfig.axis.keySeq().toJS();
};

HeadingData.prototype.hasLoadingHeadings = function() {
    var axisHeadings = lodash.compact(lodash.values(this.$axisHeadings));

    return $runOnHeadings(axisHeadings, "hasLoadingHeadings");
};

HeadingData.prototype.hasOnlyInvalidHeadings = function() {
    var axisHeadings = lodash.compact(lodash.values(this.$axisHeadings));

    return $runOnHeadings(axisHeadings, "hasAllHeadingsInvalid");
};

HeadingData.prototype.isLoadingSlice = function() {
    var fieldId;

    for (fieldId in this.$slicePosition) {
        if (this.$slicePosition[fieldId] && this.$slicePosition[fieldId].loading) {
            return true;
        }
    }

    return false;
};

HeadingData.prototype.getColumnSets = function(axisName) {
    return this.getHeadingAxisInfo(axisName).getColumnSets();
};

HeadingData.prototype.getAxes = function() {
    return this.$axes;
};

HeadingData.prototype.getUsedAxes = function() {
    return this.$usedAxes;
};

HeadingData.prototype.isAxisUsed = function(axisName) {
    return this.$usedAxes.indexOf(axisName) >= 0;
};

HeadingData.prototype.getSlicePosition = function() {
    var fieldId,
        position = {};

    for (fieldId in this.$slicePosition) {
        position[fieldId] = this.$slicePosition[fieldId].id;
    }

    return position;
};

HeadingData.prototype.getSelectedSliceFieldPos = function(fields) {
    var invalidFieldPos = false,
        position = this.getSlicePosition(),
        fieldPos = {};

    fields.forEach(function(f) {
        var id;

        //if the field is a measure group, the slice position refers to the measure field id
        if (f instanceof mac.MeasureGroupField) {
            id = position[f.id];
            if (!id) invalidFieldPos = true;
            fieldPos[id] = { id: id };
        } else if (f instanceof mac.DimensionField) {
            if (!f.fields.size) invalidFieldPos = true;
            f.fields.forEach(function(cf) {
                id = position[cf.id];
                if (!id) invalidFieldPos = true;
                fieldPos[cf.id] = { id: id };
            });
        } else {
            id = position[f.id];
            if (!id) invalidFieldPos = true;
            fieldPos[f.id] = {id: id };
        }
    });

    if (!invalidFieldPos)
        return fieldPos;
};


HeadingData.prototype.getHeadingAxisInfo = function(axisName) {
    var headings = this.$axisHeadings[axisName];
    if (!headings) {
        //if this axis is used, that means the heading just isn't populated for some reason so give the the Empty
        if (this.$usedAxes.indexOf(axisName) > -1)
            headings = new EmptyAxisHeading();
        else //if it isn't used at all, then we just use a placeholder heading
            headings = new PlaceholderAxisHeading();
    }

    return headings;
};

/**
 * @typedef {Object} FieldMemberId
 * @property {String} id
 * @property {String} [rollupFieldId] if the member is a rollup member, the field that it comes from
 *
 * @param {Object<FieldId, FieldMemberId>} fieldPos
 * @return {Object<AxisName, Number>}
 */
HeadingData.prototype.findCoordForFieldPos = function(fieldPos) {
    //find this position in the crossedd axes
    var that = this,
        usedAxisInfos = this.getUsedAxes().map(this.getHeadingAxisInfo.bind(this)),
        crossedHeaders = new CrossAxisHeading(new CrossTerm(undefined, usedAxisInfos.map(function(axis) {
            return axisHeadingToTerm(axis);
        }))),
        //find the coord on the header, which will be linearized (i.e. a single number along the multipled-out length
        linearCoord = crossedHeaders.findRowNumForFieldPos(fieldPos),
        coord = {};

    // initialize all axes coord to 0
    this.getAxes().forEach(function(a) {
        if (that.getUsedAxes().indexOf(a) === -1) {
            coord[a] = 0;
        }
    });

    //from outside to inside, use integer division with each total length of the nested axes to find the rownum for each axis
    //e.g. if X has 10 items, Y has 20 items, Z has 3 items and we cross them, we get a single heading which is 600 items long.
    //if the linearized coord is 213, then the coordinates break down as:
    // X = floor(213 / 60) = 3 <- 60 is the length of Y * Z (20 * 3)
    //   now the row number for Y*Z is 213 - 3*60 (the X coordinate times the length of the Y*Z headings) = 33
    // Y = floor(33 / 3) = 11 <- 3 is the length of Z
    //   now the row number for Z is 33 - 11*3 (the Y coordinate times the length of the Z heading) = 0
    //Therefore the linearized coordinate 213 in X*Y*Z corresponds to the coordinate: { X: 3, Y: 11, Z: 0}
    //   { X: 3, Y: 11, Z: 0 }

    if (!lodash.isUndefined(linearCoord)) {
        this.getUsedAxes().forEach(function(axis, i) {
            if (i < usedAxisInfos.length - 1) {
                //find the size of the children
                var combinedChildLen = usedAxisInfos.slice(i+1, usedAxisInfos.length)
                        .reduce(function(p, axisInfo) { return p * axisInfo.getLength(); }, 1),
                    axisCoord = Math.floor(linearCoord / combinedChildLen);

                coord[axis] = axisCoord;

                //update linearCoord to be relative only to the combined children
                linearCoord -= axisCoord * combinedChildLen;
            } else {
                coord[axis] = linearCoord; //what remains is simply the coordinate for the last axis
            }
        });

        return coord;
    }
    //otherwise undefined is returned, no coordinate was found
};

HeadingData.prototype.getRowNumByMemberOffset = function(axisName, colIdx, rowNum, offset) {
    return this.getHeadingAxisInfo(axisName).getRowNumByMemberOffset(colIdx, rowNum, offset);
};

AxisHeading.prototype.getRowNumByMemberOffset = function(colIdx, rowNum, offset) {
    var row = this.getHeadingRow(rowNum),
        fields = row.fields.slice(0,colIdx+1),
        rowMembers = row.members.slice(0, colIdx+1),
        range = offset > 0 ? [rowNum+1, this.getLength()] : [0, rowNum-1],
        headingLen = this.getLength(),
        size = range[1]-range[0],
        midpoint,
        thisRow,
        isDiffRow = function(inRow) {
            var i = 0,
                inMembers = inRow.members.slice(0, colIdx+1),
                field,
                inField,
                sameFields,
                inRowFields = inRow.fields.slice(0, colIdx+1);

            //if there's a different number of fields, we take it to be different
            if (inRow.fields.length !== row.fields.length)
                return true;

            for (; i <= colIdx; i++) {
                field = fields[i];
                inField = inRowFields[i];

                sameFields = (lodash.isUndefined(field) && lodash.isUndefined(inField)) ||
                    (!lodash.isUndefined(field) && !lodash.isUndefined(inField) && field.id === inField.id);

                if (!sameFields)
                    return true;

                if (inMembers[i] !== rowMembers[i])
                    return true;
            }

            return false;
        },
        result = -1;

    //adjust ranges to be legal
    range[0] = range[0] >= 0 ? range[0] : 0;
    range[1] = range[1] < headingLen ? range[1] : headingLen - 1;

    while(size > 0) {
        midpoint = size < 2 ? (offset > 0 ? range[0] : range[1]) : range[0] + Math.floor(size / 2);
        thisRow = this.getHeadingRow(midpoint);
        //if the row is a different row, narrow range so this is the furthest row
        //i.e. it might be the right row but its definitely the closest candidate
        //so we leave it in the range
        if (isDiffRow(thisRow)) {
            //if offset positive, the range is before and including the row, so this row redefines the ending boundary
            if (offset > 0)
                range[1] = midpoint;
            //if offset negative, the range is after and including the row, so this row redefines the starting boundary
            else
                range[0] = midpoint;
        } else {
            //if row is not a different row, narrow the range so that the next row further than the midpoint
            //is the near boundary since the different row must occur further away
            //if offset positive, the range starts after this row
            if (offset > 0)
                range[0] = midpoint+1;
            //if offset negative, the range ends before this row
            else
                range[1] = midpoint-1;
        }

        //adjust ranges to be legal
        range[0] = range[0] >= 0 ? range[0] : 0;
        range[1] = range[1] < headingLen ? range[1] : headingLen - 1;

        size = range[1]-range[0];
    }

    if (size === 0) {
        result = range[0];
    } else if (size === 1) {
        if (offset > 0)
            result = range[0];
        else
            result = range[1];
    }

    if (result === rowNum || result < 0 || result >= headingLen || !isDiffRow(this.getHeadingRow(result)))
        return;
    else
        return result;
};

/**
 * Generates an identifier for a rollup heading.
 * @param {Object} rollupConfig - The rollup config object.
 * @param {String} parentFieldId - The parent's field identifier (Color:colorfamily).
 * @param {String} parentId - The parent's identifier (Black).
 * @returns {String} - The rollup heading identifier (DEFAULT:Color:colorfamily[Black]).
 */
headings.mkRollupMemberId = function(rollupConfig, parentFieldId, parentId) {
    return (rollupConfig.methodName || "DEFAULT") + ":" + parentFieldId + "[" + parentId + "]";
};

headings.mkRollupMemberConfig = function(rollupConfig, parentMember) {
    var cfg = {
        rollup: rollupConfig,
        id: parentMember.id,
        label: parentMember.label
    };
    Object.keys(parentMember.config).forEach(function(key) {
        cfg[key] = parentMember.config[key];
    });

    return cfg;
};

},{"./multiaxisconfig":253,"assert":undefined,"lodash":90,"pivottable/src/lib/oop":117}],255:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var lodash = require("lodash");
var cubiql = require("./cubiql");
var util = require("./util");
var mac = require("./multiaxisconfig");
var querygen = require("./querygen/query");
var modstate = require("./modelerstate");
var MAConfig = mac.MAConfig;
var FieldTypes = mac.FieldTypes;
var assert = require("assert");
var ch = require("./view/pivot/config_helper");
var fh = require("./helpers/fieldhelpers");

var pch = module.exports;

var AXIS_MAP = {
    "Z": "slice",
    "X": "x",
    "Y": "y"
};

/**
 * @param {ModelerState} modelerState
 * @param {String} viewId
 * @param {PivotConfig} pivotConfig
 * 
 * @return {MAConfig}
 */
function pivotConfigToMultiAxisConfig(modelerState, viewId, pivotConfig) {
    pivotConfig = ch.convertOldPivotConfigToNew(pivotConfig, viewId);
    if (!pivotConfig.axis)
        pivotConfig.axis = {};

    //first construct the sliceConfigs for the slices
    var multiAxisConfig = new MAConfig({
        id: viewId,
        axis: Immutable.fromJS({ 
            X: [],
            Y: [],
            Z: []
        })
    });

    multiAxisConfig = multiAxisConfig.setIn(["measureGroups","-:Measures"], getCanonicalMeasureGroup(modelerState, pivotConfig, "-:Measures"));
    
    multiAxisConfig = attachAxisFields(modelerState, multiAxisConfig, pivotConfig);
    multiAxisConfig = attachVisibleMeasures(modelerState, multiAxisConfig, pivotConfig);
    multiAxisConfig = applyPivotConfigFilters(modelerState, multiAxisConfig, pivotConfig);
    multiAxisConfig = mac.generateDefaultHeaderConfig(multiAxisConfig);
    multiAxisConfig = attachSliceConfigs(multiAxisConfig, pivotConfig);
    multiAxisConfig = pch.updateConfig(modelerState, multiAxisConfig); 

    return multiAxisConfig;
}

/**
 * An object that maps field names to filters, e.g.
 * {
 *   "Product:sku": {
 *      "sku-1": true,
 *      "sku-2": true
 *   },
 *   "Sales":
 *      name: "Sales", 
 *      displayName: "Sales", 
 *      intersection: [{"qualifiedName": "Product:sku"}],
 *      inclusive: true, 
 *      isMeasure: true, 
 *      max: 410.49, 
 *      min: 0
 *   }
 * }
 * @typedef {Object<QName, (PivotConfigLevelFieldFilter|PivotConfigMeasureFieldFilter)>} PivotConfigFilter
 */
function applyPivotConfigFilters(modelerState, multiAxisConfig, pivotConfig) {
    var filterObj = pivotConfig.filter || {};

    lodash.forEach(filterObj, function(filter, key) {
        if (cubiql.isMeasure(key)) {
            multiAxisConfig = applyPivotConfigMetricFilter(modelerState, pivotConfig, multiAxisConfig, key, filter); 
        }
        else
            multiAxisConfig = applyPivotConfigLevelFilter(modelerState, multiAxisConfig, key, filter); 
    });

    multiAxisConfig = applyMaskFilters(modelerState, multiAxisConfig, pivotConfig.maskFilter);
    
    return multiAxisConfig;
}

function applyFilterToAllLevelFields(multiAxisConfig, filter) {
    function applyFilter(field) {
        return mac.addFilterToLevelField(filter, field);
    }
    
    return applyFunctionToAllLevelFields(multiAxisConfig, applyFilter);
}

function applyFunctionToAllLevelFields(multiAxisConfig, fn) {
    ["X","Y","Z"].forEach(function(axisName) {
        multiAxisConfig = multiAxisConfig.updateIn(["axis", axisName], function(axisFields) {
            return axisFields.map(function(f) {
                if (f instanceof mac.LevelField) {
                    return fn(f);
                } else if (f instanceof mac.DimensionField) {
                    return f.update("fields", function(fields) {
                        return fields.map(fn);
                    });
                } else {
                    return f;
                }
            });
        });
    });

    return multiAxisConfig;
}

/**
 *
 * A filter for a level field, e.g.
 * {
 *    "sku-1": true,
 *    "sku-2": true
 * }
 * @typedef {Object<LevelMemberName, Boolean>} PivotConfigLevelFieldFilter
 */

function applyPivotConfigLevelFilter(modelerState, multiAxisConfig, qName, levelFilter) {
    function applyFilter(field) {
        var filter = pch.createPositionFilterForField(modelerState, field, qName, levelFilter);
        
        if (filter) {
            return mac.addFilterToLevelField(filter, field);
        }
        
        return field;
    }

    return applyFunctionToAllLevelFields(multiAxisConfig, applyFilter);
}
pch.applyPivotConfigLevelFilter = applyPivotConfigLevelFilter;

/**
 * Creates a mac.Filter for the given field based on the given qName / levelFilter
 * combination. Handles properly labeling of the generated filter. Can return 
 * undefined if no filter is generated.
 * 
 * @param  {ModelerState} modelerState
 * @param  {mac.Field} field     the field for which to generate the filter
 * @param  {String} qName        the qualified name of the level which is being filtered
 * @param  {Object} levelFilter  a map where they keys are the level member ids
 * @return {mac.Filter|undefined} a filter or undefined if the filter should be applied
 */
pch.createPositionFilterForField = function(modelerState, field, qName, levelFilter) {
    var qualifiedLevel = cubiql.parseDimLvl(qName),
        level = mac.qualifiedLevelToLevel(qualifiedLevel, modelerState.measureModel),
        memberIds = Object.keys(levelFilter),
        hierarchies;

    // we compare without labels since the pivot config specification has no
    // concept of labels
    if (qualifiedLevel.dimension === field.level.dimensionName) {
        hierarchies = modelerState.measureModel
            .findHierarchiesWithLevels(level.dimensionName, [level.levelName, field.level.levelName])
            .map(function(h) { return h.name; });

        // levels are in the same dimension but do not share a hierarchy, no
        // need to apply a filter
        if (hierarchies.length === 0) {
            return;
        }

        // account for field being in a non-default hierarchy
        level = level.set("hierarchyName", hierarchies.indexOf(field.level.hierarchyName) > -1 ? field.level.hierarchyName : hierarchies[0]);
        level = level.set("labelName", field.level.labelName);
    }

    return new mac.Filter({
        measure: new mac.Measure({
            attribute: new mac.Attribute({
                name: "id",
                level: level
            })
        }),
        comparisons: new Immutable.List(memberIds.map(function(memberId) {
            return new mac.Comparison({
                operator: "=",
                comparator: new mac.Comparator({
                    literal: memberId
                })
            });
        }))
    });
};

/**
 * A filter for a specific measure, e.g.
 * {
 *     name: "Sales", 
 *     displayName: "Sales", 
 *     inclusive: true, 
 *     isMeasure: true, 
 *     intersection: [{"qualifiedName": "Product:sku"}],
 *     max: 410.49, 
 *     min: 0
 * }
 * @typedef {Object} PivotConfigMeasureFieldFilter
 * @prop {String} name - the name of the measure
 * @prop {String} displayName - the display name of the measure, not sure why necessary
 * @prop {Boolean} inclusive - whether or not the range filter is inclusive
 * @prop {Boolean} isMeasure - whether or not this is a measure.. not sure why necessary
 * @prop {Number} max - maximum of range
 * @prop {Number} min - minimum of range
 */

function applyPivotConfigMetricFilter(modelerState, pivotConfig, multiAxisConfig, key, filter) {
    var measureAxis = ch.findAxisForMeasureField(multiAxisConfig, key),
        validAttributeConfig = measureAxis ? mac.removeLevelsFromAxis(multiAxisConfig, measureAxis) : multiAxisConfig,
        intersection = mac.getBaseIntersection(validAttributeConfig),
        filterFields = intersection.map(function(level) {
            // Look up the field in the multiAxisConfig
            var fields = mac.getAxisFields(validAttributeConfig, function(f) {
                return f instanceof mac.LevelField && 
                    f.level.levelName === level.levelName && f.level.dimensionName === level.dimensionName;
            });
            
            if (fields.size) {
                return fields.get(0);
            } else {
                //or if it isn't a field actually on the table, just use the standard level
                return getCanonicalField(modelerState, pivotConfig, { 
                    qualifiedName: cubiql.qualifiedLevelToQualifiedName(mac.levelToQualifiedLevel(level))
                });
            }
        }),
        measure = new mac.Measure({
            metric: new mac.Metric({
                name: key
            })
        }),
        interAndLabelMap = computeIntersectionAndLabelMapForMetricAndFields(modelerState, measure.metric, multiAxisConfig, filterFields),
        pivotBaseIntersection = $removeZAxisSplits(modelerState, mac.getBaseIntersection(validAttributeConfig), multiAxisConfig),
        isFilterAtBase = cubiql.intersectionEqual(
                mac.intersectionToMQGIntersection(interAndLabelMap.intersection),
                mac.intersectionToMQGIntersection(pivotBaseIntersection),
                true); 

    // Only apply metric filters if they are the base intersection of the pivot
    if (!isFilterAtBase)
        return multiAxisConfig;

    measure = measure.setIn(["metric", "intersection"], interAndLabelMap.intersection)
                .set("labelMap", interAndLabelMap.labelMap);

    [filter.max, filter.min].forEach(function(val, i) {
        var isMax = i === 0, //we know its the max if its the first in the adhoc list made to iterate over
            operator;

        if (!lodash.isUndefined(val)) {
            operator = isMax ?
                (filter.inclusive ? "<=" : "<") :
                (filter.inclusive ? ">=" : ">");

            //create and apply a filter for the max/min if it is defined
            multiAxisConfig = applyFilterToAllLevelFields(multiAxisConfig, new mac.Filter({ 
                measure: measure,
                comparisons: new Immutable.List([
                    new mac.Comparison({
                        operator: operator,
                        comparator: new mac.Comparator({
                            literal: val
                        })
                    })
                ])
            }));
        }
    });

    return multiAxisConfig;
}
pch.applyPivotConfigMetricFilter = applyPivotConfigMetricFilter;


function applyPivotConfigMeasureAggregateToMeasureField(field, pivotConfigAgg) {
    var methodName = pivotConfigAgg.method !== "DEFAULT" ? pivotConfigAgg.method : undefined,
        dataConfigPath,
        dataConfig,
        aggConfigPath;

    dataConfigPath = mac.findDataConfigPathInMeasureField(field, "value");
    assert(dataConfigPath && dataConfigPath.length > 0, "Couldn't find data config path for value when applying ", pivotConfigAgg);
    dataConfig = field.getIn(dataConfigPath);

    aggConfigPath = mac.findAggConfigPathInMeasure(dataConfig.measure);
    assert(aggConfigPath && aggConfigPath.length, "Couldn't find agg config path for value when applying ", pivotConfigAgg);

    return field.updateIn(dataConfigPath.concat(["measure"], aggConfigPath), function(aggConfig) {
        if (aggConfig)
            return aggConfig.set("methodName", methodName);
        else
            return mac.mkAggConfig({methodName: methodName});
    });
}

/**
 * @typedef {Object} PivotConfigAxis
 * @prop {AxisField[]} x - the field objects on the x axis
 * @prop {AxisField[]} y - the field objects on the y axis
 * @prop {AxisField[]} slice - the field objects on the slice axis
 * @prop {AxisField[]} z - the field objects representing the measure fields in the Visible Measures group
 *
 * @typedef {Object} AxisField
 * @prop {String} qualifiedName - the qualified level name of the level if level field, or just the metric name if a metric, or -:Measures for the canonical visible measures group
 * @prop {String} value - for AxisFields on slice, this is an optional property that specifies the selected member id of that field (either level member id or metric name depending on which field it is)
 * 
 * @typedef {Object} ScrollPositions
 * @prop {Number} scrollTop
 * @prop {Number} scrollLeft
 *
 * @typedef {Object} DropdownMeasureFilter
 * @prop {String} qualifiedName - the metric name which occurs on the pivot and should have its options filtered 
 * @prop {String} filterMeasure - the name of the measure to filter the options by
 * @prop {String} [valueLabel] - optionally the dimension label that defines which key in the filterMeasure's intersection should bind to the value type of the filtered metric. Required if there are multiple occurrences of the dimension in filterMeasure's intersection
 *
 * @typedef {Object} SliceValueMeasure
 * @prop {String} qualifiedName - the qualifiedName of the slice field to set with a measure
 * @prop {String} measure - the name of the metric that specifies the slice
 *
 * @typedef {Object} QualifiedLevel
 * @prop {String} dimension
 * @prop {String} level
 *
 * @typedef {Object} SortPosition
 * @prop {QualifiedLevel} qualifiedLevel
 * @prop {String} memberId
 *
 * @typedef {Object} SortByMeasureValue
 * @prop {String} metricName
 * @prop {String} floatingAxis
 * @prop {SortPosition[]} sortPositions
 * @prop {Sort} [sortOrder]
 */


function applySortByMeasureToField(modelerState, config, intersection, field, sortByMeasure) {
    var measureModel = modelerState.measureModel,
        // pull out the lowest sort position per dimension/hierarchy
        sortPositions = lodash.chain(sortByMeasure.sortPositions || [])
            .groupBy(function(sp) {
                var ql = sp.qualifiedLevel;
                return ql.dimension + "$" + ql.hierarchy;
            })
            .map(function(sortPositions) {
                var qls = sortPositions.map(function(sp) { return sp.qualifiedLevel; }),
                    lowestLevel = measureModel.findLowestLevel(sortPositions[0].qualifiedLevel.dimension, qls);
                    
                return sortPositions.find(function(sp) { return sp.qualifiedLevel === lowestLevel; });
            })
            .flatten()
            .filter(function(sortPosition) {
                return sortPosition.qualifiedLevel.level !== "ALL";
            })
            .value(),
        // sort positions must, by definition, have their fields on the pivottable,
        // so we can safely look up the corresponding field on the MAConfig
        sortPositionFields = sortPositions.map(function(sp) { 
            var macField = mac.getField(config, cubiql.qualifiedLevelToQualifiedName(sp.qualifiedLevel)); 
            if (macField) {
                return macField;
            } else {
                return fh.getFieldFromQualifiedName(modelerState.fields, cubiql.qualifiedLevelToQualifiedName(sp.qualifiedLevel));
            }
        }),
        sliceFields = mac.getAxisFields(config, function(f) { 
            return f instanceof mac.LevelField;
        }, "Z"),
        metricName = sortByMeasure.metricName,
        metricInfo = metricName && modelerState.measureModel.getMeasureInfo(metricName),
        kind = metricInfo && metricInfo.type.kind,
        sortMetric = mac.mkMetric({ name: metricName }),
        interAndLabelMap = computeIntersectionAndLabelMapForMetricAndFields(modelerState, sortMetric, config, Immutable.List([field]).concat(sortPositionFields).concat(sliceFields)),
        //attach an operator entity-valued ones to get the label back
        valueMeasure = mac.mkMeasure({
            labelMap: interAndLabelMap.labelMap,
            metric: sortMetric.merge({
                intersection: interAndLabelMap.intersection,
                filters: Immutable.List(sortPositions).map(function(sortPos) {
                    return mac.mkFilter({
                        measure: {
                            attribute: {
                                name: "id",
                                level: mac.qualifiedLevelToLevel(sortPos.qualifiedLevel, measureModel)
                            }
                        },
                        comparisons: [{
                            operator: "=",
                            comparator: {
                                literal: sortPos.memberId
                            }
                        }]
                    });
                })
            })
        }),
        operatorName = (kind && kind === "NAMED" && "AttributeMapping_label") || undefined,
        measure = operatorName ? new mac.Measure({
            operator: new mac.Operator({
                name: operatorName,
                measures: new Immutable.List([valueMeasure])
            })
        }) : valueMeasure;

    return field.update("sortConfigs", function(cfgs) {
        //first filter out existing measure value sorts if they exist for some reason
        cfgs = cfgs.filter(function(cfg) {
            return !cfg.measure.metric;
        });

        return cfgs.splice(0, 0, new mac.SortConfig({
            sortType: sortByMeasure.sortOrder,
            measure: measure
        }));
    });
}

/**
 *
 * @typedef {Object} PivotConfig
 * @prop {PivotConfigAxis} axis
 * @prop {PivotConfigFilter} filter
 * @prop {PivotConfigAggregate} aggregate
 * @prop {String[]} maskFilter - a list of metric names to use as mask filters
 * @prop {Boolean} isNonEmpty - whether or not pivot should display only empty rows
 * @prop {ScrollPositions} scrollPositions
 * @prop {Direction} moveSelectionDirection
 * @prop {DropdownMeasureFilter[]} dropdownMeasureFilter
 * @prop {SliceValueMeasure[]} sliceValueMeasure
 * @prop {SortByMeasureValue} [sort-by-measure-value]
 */

function applyMaskFilters(modelerState, multiAxisConfig, maskFilters) {
    maskFilters = maskFilters || [];
    maskFilters.forEach(function(metricName) {
        var metricInfo = modelerState.measureModel.getMeasureInfo(metricName),
            baseInter = mac.mqgIntersectionToIntersection(metricInfo.inter, modelerState.measureModel),
            baseInterFields = metricInfo.inter.qualified_level.map(function(ql) {
                var qlName = cubiql.qualifiedLevelToQualifiedName(ql);
                return mac.getField(multiAxisConfig, qlName) || fh.getFieldFromQualifiedName(modelerState.fields, qlName);
            }),
            measure = mac.mkMeasure({
                metric: {
                    name: metricName,
                    //mask filters are done at the base intersection of the metric
                    intersection: baseInter
                }
            });
        
        function applyFilter(field) {
            //relable the field if the field dimension is in the base intersection
            var fieldDimName = field instanceof mac.LevelField && field.level.dimensionName,
                updatedInterFields,
                fs,
                filter;

            updatedInterFields = baseInterFields.map(function(interField) {
                if (interField.getIn(["level", "dimensionName"]) === fieldDimName) {
                    interField = interField.setIn(["level", "labelName"], field.level.labelName);
                }
                return interField;
            });
            fs = Immutable.List(updatedInterFields);
            
            filter = new mac.Filter({
                measure: $applyFieldSetToMeasure(modelerState, measure, multiAxisConfig, fs)
            });

            return mac.addFilterToLevelField(filter, field);
        }

        multiAxisConfig = applyFunctionToAllLevelFields(multiAxisConfig, applyFilter);
    });

    return multiAxisConfig;
}
pch.applyMaskFilters = applyMaskFilters;

function pivotConfigSliceAxisFieldToSliceConfig(pivotAxisField, axisField, sliceValueMeasures) {
    var qName = pivotAxisField.qualifiedName,
        config,
        sliceValueMeasure;

    config = new mac.SliceConfig({
        sourceField: axisField
    });

    if (pivotAxisField.value) {
        config = config.set("bySelection", pivotAxisField.value);
    } else {
        sliceValueMeasure = sliceValueMeasures.find(function(m) {
            return m.qualifiedName === qName;
        });

        if (sliceValueMeasure) {
            config = config.set("byMeasure", new mac.Measure({
                metric: new mac.Metric({
                    name: sliceValueMeasure.measure
                })
            }));
        }
    }

    return config;    
}

function attachAxisFields(modelerState, multiAxisConfig, pivotConfig) {
    var axisMap = {
            "Z": "slice",
            "X": "x",
            "Y": "y"
        },
        levelSort = pivotConfig.sort || {},
        sortByMeasure = pivotConfig["sort-by-measure-value"] || {};

    lodash.forEach(axisMap, function(pivotConfigAxisName, axisName) {
        var pivotConfigAxisFields = lodash.compact(pivotConfig.axis[pivotConfigAxisName] || []),
            fields = new Immutable.List(pivotConfigAxisFields.map(function(axisField) {
                var field = getCanonicalField(modelerState, pivotConfig, axisField),
                    fieldSort = levelSort[field.id];

                if (field instanceof mac.LevelField && fieldSort) {
                    field = field.set("sortConfigs", new Immutable.List([mac.mkSortConfig({
                        sortType: fieldSort.sortType,
                        measure: {
                            attribute: {
                                name: fieldSort.sortAttr || "label",
                                level: field.level
                            } 
                        }
                    })]));
                }

                return field;
            })),
            groupedFields,
            levelCompareFn = mac.compareLevelFields.bind(null, modelerState.measureModel),
            applySortByMeasure = sortByMeasure.floatingAxis === pivotConfigAxisName,
            foundDimensions = [];

        groupedFields = fields.groupBy(function(f) {
            if (f instanceof mac.LevelField) {
                foundDimensions.push(f.level.dimensionName);
                return Immutable.Map({ type: FieldTypes.DIMENSION, name: f.level.dimensionName });
            } else if (f instanceof mac.MeasureField) {
                return Immutable.Map({ type: FieldTypes.MEASURE, name: f.get("id") });
            } else if (f instanceof mac.MeasureGroupField) {
                return Immutable.Map({ type: FieldTypes.MEASURE_GROUP, name: f.get("id") });
            } else {
                throw new Error("Unknown field type " + JSON.stringify(f));
            }
        });

        foundDimensions = lodash.uniq(foundDimensions);
        if (applySortByMeasure)
            assert(foundDimensions.length === 1, "More than one dimension found on floating axis when using sort-by-measure: ", foundDimensions);

        //build up inferred group fields and set up other field information
        multiAxisConfig = multiAxisConfig.setIn(["axis", axisName], groupedFields.entrySeq().map(function(entry) {
            var group = entry[0],
                fields = entry[1],
                field,
                hierarchy,
                dimensionName,
                dimensionLabel;

            if (group.get("type") === FieldTypes.DIMENSION) {
                hierarchy = mac.getHierarchyForLevelFields(fields, modelerState.measureModel);
                if (!hierarchy) {
                    throw new mac.ValidationError("Fields " + fields.map(function(f){ return f.id; }).join(",") + 
                        " are in the same dimension but do not share a hierarchy. They cannot be on the same axis.");
                }
                assert(hierarchy, "couldn't determine hierarchy");
                dimensionName = group.get("name");
                dimensionLabel = pch.findAvailableDimensionLabel(dimensionName, multiAxisConfig);

                if (fields.size === 1) {
                    field = fields.get(0);
                    field = field.set("filterByAllSlicesInDimension", true);
                    field = mac.updateDimensionLabelInLevelField(field, dimensionLabel);
                    field = mac.updateHierarchyInLevelField(field, hierarchy.name);

                    return field;
                } else {
                    return modstate.fields.getField(modelerState.fields, dimensionName, FieldTypes.DIMENSION)
                        .set("fields", fields.sort(levelCompareFn).reverse().map(function(f, i) {
                            // force outline for innermost level fields and all level fields on slice
                            if (i === fields.size - 1 || axisName === "Z") {
                                f = f.set("displayMode", "OUTLINE");
                            }
                            //if this is the last field (i.e. lowest), apply the sort by measure value config
                            f = f.set("filterByAllSlicesInDimension", true);
                            return mac.updateDimensionLabelInLevelField(mac.updateHierarchyInLevelField(f, hierarchy.name), dimensionLabel);
                        }))
                        .set("hierarchy", hierarchy.name)
                        .set("dimensionLabel", dimensionLabel);
                }
            } else {
                return fields.get(0);
            }
        }).toList());
    });

    multiAxisConfig = multiAxisConfig.update("axis", function(axisMap) {
        return axisMap.map(function(fields, axisName) {
            var applySortByMeasure = sortByMeasure.floatingAxis === AXIS_MAP[axisName];
            return fields.map(function(f) {
                if (applySortByMeasure) {
                    if (f instanceof mac.DimensionField) {
                        return f.updateIn(["fields", f.fields.size - 1], function(cf) {
                            return applySortByMeasureToField(modelerState, multiAxisConfig, new Immutable.List([cf.level]), cf, sortByMeasure);
                        });
                    } else if (f instanceof mac.LevelField) {
                        return applySortByMeasureToField(modelerState, multiAxisConfig, new Immutable.List([f.level]), f, sortByMeasure);
                    } else {
                        return f;
                    }
                } else {
                    return f;
                }
            });
        });
    });

    return multiAxisConfig;
}

//this is just a simple cut at this which overshoots certainly
function computeAllFieldSetsForMeasures(config) {
    var crossArrays = [], //array of arrays which we will cross
        fieldSets = new Immutable.List([new Immutable.List()]);//array of arrays with the field ids

    function crossWithFieldSets(arr) {
        var oldSetLen = fieldSets.size,
            fieldSet,
            i = 0,
            j;

        for (; i < oldSetLen; i++) {
            fieldSet = fieldSets.get(i);
            for (j = 0; j < arr.size; j++) {
                fieldSets = fieldSets.push(fieldSet.concat(arr.get(j)));
            }
        }
    }

    config.axis.forEach(function(axisFields) {
        axisFields.forEach(function(f) {
            var setArr = new Immutable.List(),
                i = 0;

            if (f instanceof mac.LevelField)
                setArr = setArr.push(new Immutable.List([f]));
            else if (f instanceof mac.DimensionField) {
                //add set for all outline fields in this dimension (i.e. base case)
                setArr = setArr.push(f.fields.filter(function(f) {
                    return f.displayMode === mac.LevelDisplayMode.OUTLINE;
                }));
                //for each parent field, if it has a rollup config add a set
                //of the outline parent fields through the rollup one
                for (; i < f.fields.size-1; i++) {
                    if (f.fields.get(i).rollupConfigs.size) {
                        setArr = setArr.push(f.fields.slice(0,i+1).filter(function(f, j) {
                            return f.displayMode === mac.LevelDisplayMode.OUTLINE ||
                                j === i; //always include the rollup field
                        }));
                    }
                }

            }

            if (setArr.size)
                crossArrays.push(setArr);
        });
    });

    crossArrays.forEach(function(arr) {
        crossWithFieldSets(arr);
    });

    //Add field set containing all base level fields only
    fieldSets = fieldSets.push(mac.getBaseLevelFields(config));

    return fieldSets;
}

function attachVisibleMeasures(modelerState, multiAxisConfig, pivotConfig) {
    var visibleMeasures = pivotConfig.axis.z || [],
        pivotAggregates = lodash.values(pivotConfig.aggregate || {}),
        pivotMeasureAggs = pivotAggregates.filter(function(agg) { return cubiql.isMeasure(agg.qualifiedName); }),
        pivotMeasureAggsByName = lodash.groupBy(pivotMeasureAggs, "qualifiedName");


    visibleMeasures.forEach(function(m) {
        var measureField = getCanonicalField(modelerState, pivotConfig, m),
            pivotAggs = pivotMeasureAggsByName[m.qualifiedName];

        if (pivotAggs) {
            assert(pivotAggs.length === 1, "Too many aggregate configurations found for " + m.qualifiedName);
            measureField = applyPivotConfigMeasureAggregateToMeasureField(measureField, pivotAggs[0]);
        }    
        multiAxisConfig = mac.addMeasureToGroup(multiAxisConfig, multiAxisConfig.measureGroups.get("-:Measures"), measureField);
    });

    return multiAxisConfig;
}

function $fieldLabelFilter(label) {
    return function(field) {
        return field instanceof mac.LevelField && field.level.labelName === label;
    };
}

function applyIntersectionToAllMeasureFieldDataConfigs(modelerState, field, config) {
    var dataPerFieldSet = new Immutable.Map(),
        measureAxis = ch.findAxisForMeasureField(config, field.id),
        defaultDataConfig = field.data;

    function setData(fieldSet) {
        dataPerFieldSet = dataPerFieldSet.set(fieldSet.toSet(), defaultDataConfig.map(function(dataCfg) {
            return dataCfg.set("measure", $applyFieldSetToMeasure(modelerState, dataCfg.measure, config, fieldSet))
                .set("filters", $applyFieldSetToFilters(modelerState, dataCfg.filters, config, fieldSet));
        }));
    }

    if (field instanceof mac.MeasureField && measureAxis) {
        config =  mac.removeLevelsFromAxis(config, measureAxis);
    }

    computeAllFieldSetsForMeasures(config).forEach(setData);

    return field.set("dataPerFieldSet", dataPerFieldSet);
}

function $applyFieldSetToFilters(modelerState, filters, config, fs) {
    filters = filters || new Immutable.List();
    return filters.map(function(f) {
        return f.update("measure", function(measure) {
            return $applyFieldSetToMeasure(modelerState, measure, config, fs);
        });
    });
}

function $applyFieldSetToMeasure(modelerState, measure, config, fs) {
    if (measure.metric)
        return $applyFieldSetToMetricMeasure(modelerState, measure, config, fs);
    else if (measure.attribute)
        return $applyFieldSetToAttributeMeasure(modelerState, measure, config, fs);
    else if (measure.operator)
        return $applyFieldSetToOperatorMeasure(modelerState, measure, config, fs);
    else
        assert(false, "Data cfg is neither a metric nor attribute!");
}

function $applyFieldSetToOperatorMeasure(modelerState, measure, config, fieldSet) {
    return measure.updateIn(["operator","measures"], function(measures) {
        return measures.map(function(m) {
            return $applyFieldSetToMeasure(modelerState, m, config, fieldSet);
        });
    });
}

function $applyFieldSetToMetricMeasure(modelerState, measure, config, fieldSet) {
    var metric = measure.metric,
        interAndLabelMap = computeIntersectionAndLabelMapForMetricAndFields(modelerState, metric, config, fieldSet.toList(), measure.labelMap);

    //note that because we only did this for ones that match in the fieldset, we're implicitly aggregating 
    //labels in the metric base intersection not in the fieldset to "ALL"
    return measure.set("metric", metric.set("intersection", interAndLabelMap.intersection))
        .set("labelMap", interAndLabelMap.labelMap);
}

function $applyFieldSetToAttributeMeasure(modelerState, measure, config, fs) {
    if (!measure.attribute.intersection)
        return measure;

    var attr = measure.attribute,
        level = attr.level,
        configuredInter = mac.intersectionToMQGIntersection(mac.getIntersectionForMeasure(measure, modelerState.measureModel)),
        baseInter = mac.intersectionToMQGIntersection(mac.mkIntersection([level.set("labelName", level.dimensionName)])),
        //we need to figure out if we need to hold one of the labels fixed (i.e. not bound to one of the fields).
        //In order to do we check to see if it has been relabelled away from the dimension and
        //see if that new label occurs in the configured intersection.  If so, the new label is unbound
        isRelabelled = level.labelName !== level.dimensionName,
        levelLabelUnbound = isRelabelled && configuredInter.qualified_level.some(cubiql.qlevel.labelEquals(level.labelName)),
        unboundLabels = levelLabelUnbound ? [level.labelName] : [],
        interAndLabelMap = computeIntersectionAndLabelMapForInterAndFields(modelerState, baseInter, configuredInter, config, fs, unboundLabels, measure.labelMap);

    return measure.set("attribute", measure.attribute.set("intersection", interAndLabelMap.intersection))
        .set("labelMap", interAndLabelMap.labelMap);
}

/**
 * Returns the first hierarchy name from the 'dimensionName' dimension that contains all the input level names.
 * If the preferredHierarchyName is specified, then it returns that name if it is found to be one of the
 * many hierarchies that contains all the input levels. 
 *  
 * @param {MeasureModel} measureModel
 * @param {String} dimensionName
 * @param {String[]} levelNames
 * @param {String} preferredHierarchyName
 * @returns {String|undefined} hierarchy name if found
 */
function $getCommonHierarchy(measureModel, dimensionName, levelNames, preferredHierarchyName) {
    assert(levelNames.length > 0);
    var hierarchies = measureModel.findHierarchiesWithLevels(dimensionName, levelNames).map(function(h) { return h.name; });
    return preferredHierarchyName && hierarchies.indexOf(preferredHierarchyName) > -1 ? preferredHierarchyName : hierarchies[0];
}

function computeIntersectionAndLabelMapForMetricAndFields(modelerState, metric, config, fields, existingLabelMap) {
    var metricInfo = metric && modelerState.measureModel.getMeasureInfo(metric.name),
        baseInter = metricInfo && metricInfo.inter,
        configuredInter = metric.intersection ? mac.intersectionToMQGIntersection(metric.intersection) : baseInter,
        intersection = new Immutable.List(),
        unmatchedBaseLevels = [],
        labelMap = existingLabelMap || new Immutable.Map(),
        //a level is unbound if it has a label customized over the base intersection labels
        unboundLevels = configuredInter.qualified_level.filter(function(ql) {
            return baseInter.qualified_level.find(cubiql.qlevel.dimensionEquals(cubiql.qlevel.getDimension(ql))) &&
                !baseInter.qualified_level.some(cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(ql)));
        });

    function $addLabelMap(srcLabel, targetLabel) {
        if (!labelMap.get(srcLabel))
            labelMap = labelMap.set(srcLabel, new Immutable.List());

        labelMap = labelMap.update(srcLabel, function(targets) {
            return targets.push(targetLabel);
        });
    }
    
    //first gather the labels/dimensions that actually match a field, and add those to the intersection 
    configuredInter.qualified_level.forEach(function(ql) {
        var baseLabel = cubiql.qlevel.getLabel(ql),
            sameLabelFields = fields.filter($fieldLabelFilter(baseLabel)),
            lowestField = sameLabelFields.size && sameLabelFields.last(),
            hierarchyName;

        if (lowestField) {
            hierarchyName = $getCommonHierarchy(modelerState.measureModel, cubiql.qlevel.getDimension(ql), [ cubiql.qlevel.getLevel(ql), lowestField.level.levelName ], lowestField.level.hierarchyName);
            // Add the level to the intersection only if there is a hierarchy that has both the ql and the lowestField
            if (hierarchyName) {
                intersection = intersection.push(lowestField.level.set("hierarchyName", hierarchyName));
            }

            //remove all fields matching this label from the intersection b/c 
            //the intersection only defined by the lowest one
            fields = fields.filter(util.not($fieldLabelFilter(baseLabel)));
            //add self map
            $addLabelMap(baseLabel, baseLabel);
        } else {
            unmatchedBaseLevels.push(ql);
        }
    }); 

    //now iterate through any remaining unmatched field labels
    //  if the dimension occurs in the base intersection, add a level for it with this label (which will split the dimension)
    //  and add a label map from the base intersection label to the field's label
    fields.groupBy(function(f) { 
        return f instanceof mac.LevelField && f.level.labelName;
    }).forEach(function(fields) {
        //only use lowest one
        var field = fields.size && fields.last(),
            dimName = field instanceof mac.LevelField && field.level.dimensionName,
            labelName = dimName && field.level.labelName,
            baseLevel = dimName && configuredInter.qualified_level.find(function(ql) {
                return cubiql.qlevel.dimensionEquals(dimName)(ql) && !unboundLevels.some(cubiql.qlevel.qLevelEqual(ql, true));
            }),
            baseLabel = baseLevel && cubiql.qlevel.getLabel(baseLevel),
            pctParentCfg = modelerState.measureModel.getPctParentConfig(metric.name),
            parentField,
            hierarchyName,
            interQl;

        if (baseLevel) {
            $addLabelMap(baseLabel, labelName);
            hierarchyName = $getCommonHierarchy(modelerState.measureModel, cubiql.qlevel.getDimension(baseLevel), [ cubiql.qlevel.getLevel(baseLevel), field.level.levelName ], field.level.hierarchyName);
            // Add the level to the intersection only if there is a hierarchy that has both the ql and the lowestField
            if (hierarchyName) {
                intersection = intersection.push(field.level.set("hierarchyName", hierarchyName));
            }
        }    

        //     check if there is a second-to-last field and if so
        //     add it to the intersection using the parent label with no map
        if (fields.size > 1 && pctParentCfg && pctParentCfg.dimension === dimName) { 
            parentField = fields.get(fields.size - 2);

            interQl = parentField.level;
            hierarchyName = $getCommonHierarchy(modelerState.measureModel, cubiql.qlevel.getDimension(baseLevel), [ cubiql.qlevel.getLevel(baseLevel), interQl.levelName ], interQl.hierarchyName);
            // Add the level to the intersection only if there is a hierarchy that has both the ql and the lowestField
            if (hierarchyName) {
                interQl = interQl.set("hierarchyName", hierarchyName);
            }
            intersection = intersection.push(interQl.set("labelName", pctParentCfg.parentLabel));
        }
    });
    
    intersection = intersection.concat(unboundLevels.map(function(ql) {
        return mac.qualifiedLevelToLevel(ql, modelerState.measureModel);
    }));

    //drop 'ALL' levels from the intersection
    intersection = intersection.filter(function(lvl) {
        return lvl.levelName !== "ALL";
    });

    //NOTE: Special treatment for when there are multiple fields from the same dimension. The special
    //behavior is to simply drop the ones that come from the Z-axis.  This is kind of weird behavior but is currently done
    //to support 'recalc' measures as much as possible, because they don't allow splits.  Note that because 'sliceConfigs'
    //are a separately applied configuration, any filtering caused by those will still affect the configuration.  The
    //only consequence of dropping them from the intersection here is to change the intersection at which the measure is queried.
    intersection = $removeZAxisSplits(modelerState, intersection, config);
    //now trim the label map to remove targets that no longer exist
    labelMap = $trimLabelMap(labelMap, intersection, baseInter);

    return {
        intersection: intersection,
        labelMap: labelMap
    };
}

function computeIntersectionAndLabelMapForInterAndFields(modelerState, baseInter, configuredInter, config, fields, unboundLabels, existingLabelMap) {
    var intersection = new Immutable.List(),
        labelMap = existingLabelMap || new Immutable.Map();

    function $addLabelMap(srcLabel, targetLabel) {
        if (!labelMap.get(srcLabel))
            labelMap = labelMap.set(srcLabel, new Immutable.List());

        labelMap = labelMap.update(srcLabel, function(targets) {
            return targets.push(targetLabel);
        });
    }

    //first gather the labels/dimensions that actually match a field, and add those to the intersection 
    configuredInter.qualified_level.forEach(function(ql) {
        var baseLabel = cubiql.qlevel.getLabel(ql),
            sameLabelFields = fields.filter($fieldLabelFilter(baseLabel)),
            lowestField = sameLabelFields.size && sameLabelFields.last();

        if (lowestField) {
            intersection = intersection.push(lowestField.level);
            //remove all fields matching this label from the intersection b/c 
            //the intersection only defined by the lowest one
            fields = fields.filter(util.not($fieldLabelFilter(baseLabel)));
            //add self map
            $addLabelMap(baseLabel, baseLabel);
        }
    }); 

    //now iterate through any remaining unmatched field labels
    //  if the dimension occurs in the base intersection, add a level for it with this label (which will split the dimension)
    //  and add a label map from the base intersection label to the field's label
    fields.groupBy(function(f) { 
        return f instanceof mac.LevelField && f.level.labelName;
    }).forEach(function(fields) {
        //only use lowest one
        var field = fields.size && fields.last(),
            dimName = field instanceof mac.LevelField && field.level.dimensionName,
            labelName = dimName && field.level.labelName,
            baseLevel = dimName && configuredInter.qualified_level.find(function(ql) {
                return cubiql.qlevel.dimensionEquals(dimName)(ql) && unboundLabels.indexOf(cubiql.qlevel.getLabel(ql)) === -1;
            }),
            baseLabel = baseLevel && cubiql.qlevel.getLabel(baseLevel);
            
        if (baseLevel) {
            $addLabelMap(baseLabel, labelName);
            intersection = intersection.push(field.level);
        }    
    });

    intersection = intersection.concat(configuredInter.qualified_level.filter(function(ql) {
        return unboundLabels.indexOf(cubiql.qlevel.getLabel(ql)) > -1;
    }).map(function(ql) { return mac.qualifiedLevelToLevel(ql, modelerState.measureModel); }));

    //drop 'ALL' levels from the intersection
    intersection = intersection.filter(function(lvl) {
        return lvl.levelName !== "ALL";
    });

    //NOTE: Special treatment for when there are multiple fields from the same dimension. The special
    //behavior is to simply drop the ones that come from the Z-axis.  This is kind of weird behavior but is currently done
    //to support 'recalc' measures as much as possible, because they don't allow splits.  Note that because 'sliceConfigs'
    //are a separately applied configuration, any filtering caused by those will still affect the configuration.  The
    //only consequence of dropping them from the intersection here is to change the intersection at which the measure is queried.
    intersection = $removeZAxisSplits(modelerState, intersection, config);
    //now trim the label map to remove targets that no longer exist
    labelMap = $trimLabelMap(labelMap, intersection, baseInter);

    return {
        intersection: intersection,
        labelMap: labelMap
    };
}


/**
 * @param {modelerState} modelerState
 * @param {mac.Intersection} intersection
 * @param {mac.MAConfig} config
 * @return {mac.Intersection}
 */
function $removeZAxisSplits(modelerState, intersection, config) {
    var zLevelFields = mac.getAxisFields(config, function(f) {
            return f instanceof mac.LevelField;
        }, "Z"),
        xLevelFields = mac.getAxisFields(config, function(f) {
            return f instanceof mac.LevelField;
        }, "X"),
        yLevelFields = mac.getAxisFields(config, function(f) {
            return f instanceof mac.LevelField;
        }, "Y"),
        levelsByDim = intersection.groupBy(function(lvl) { return lvl.dimensionName; });

    return intersection.filter(function(lvl) {
        var dim = lvl.dimensionName,
            thisDimLevels = levelsByDim.get(dim),
            labelIsOnZ = zLevelFields.find(function(f) {
                return f.level.labelName === lvl.labelName;
            }),
            xOrYLevels = labelIsOnZ && thisDimLevels.filter(function(thisLvl) {
                return xLevelFields.find(function(f) {
                    return f.level.labelName === thisLvl.labelName;
                }) || yLevelFields.find(function(f) {
                    return f.level.labelName === thisLvl.labelName;
                });
            }),
            sharesHierarchyWithXorY = xOrYLevels && xOrYLevels.some(function(thisLvl) {
                //if thisLvl and lvl share a hierarchy
                var sharedHierarchy = modelerState.measureModel.getHierarchyWith(dim, [thisLvl.levelName, lvl.levelName]);
                return !!sharedHierarchy;
            });

        //if this level is on the Z and shares a hierarchy with an X or Y level, we're going to remove it
        return !sharesHierarchyWithXorY;
    });
}

pch.removeZAxisSplitsFromFields = function(fields, config) {
    var zLevelFields = config.axis.get("Z").filter(function(f) {
            return f instanceof mac.LevelField;
        }),
        levelsByDim = fields.groupBy(function(f) { return f.level.dimensionName; });
    
    return fields.filter(function(f) {
        var dim = f.level.dimensionName;
        //if this dimension shows up more than once in the intersection (albeit under different labels)
        //remove the level(s) for that dimension that appear on the Z axis
        if (levelsByDim.get(dim).size > 1) {
            return !zLevelFields.find(function(zf) {
                return f.level.labelName === zf.level.labelName;
            });
        } else {
            return true;
        }
    });
};

/**
 * Remove labelMap targets that are not in the given intersection.
 *
 * @param {mac.LabelMap} labelMap
 * @param {mac.Intersection} intersection
 * @param {mac.Intersection} baseInter
 * @return {mac.LabelMap}
 */
function $trimLabelMap(labelMap, intersection, baseInter) {
    var labelsInIntersection = intersection.map(function(lvl) {
        return lvl.labelName;
    });

    return labelMap
        .filter(function(targetLabels, srcLabel) {
            var identity = targetLabels.size === 1 && srcLabel === targetLabels.get(0);
            return !identity && baseInter.qualified_level.some(cubiql.qlevel.labelEquals(srcLabel));
        })
        .map(function(targetLabels) {
            return targetLabels.filter(function(lbl) {
                return labelsInIntersection.indexOf(lbl) > -1;
            });
        });
}

function attachSliceConfigs(multiAxisConfig, pivotConfig) {
    var sliceConfigs = new Immutable.List(), 
        slicePivotAxisFields = pivotConfig.axis.slice || [],
        pivotConfigSliceValueMeasures = pivotConfig.sliceValueMeasure || [];

    multiAxisConfig.axis.get("Z").forEach(function(axisField) {
        var sliceLevelFieldToSliceConfig = function(levelField) {
                var level = levelField.level,
                    pivotAxisField = slicePivotAxisFields.find(function(f) {
                        var lvl = cubiql.parseDimLvl(f.qualifiedName);
                        return cubiql.qlevel.getLevel(lvl) === level.levelName;
                    });

                return pivotConfigSliceAxisFieldToSliceConfig(pivotAxisField, levelField, pivotConfigSliceValueMeasures);
            },
            sliceMeasureGroupFieldToSliceConfig = function(measField) {
                var pivotAxisField = slicePivotAxisFields.find(function(f) {
                        return f.qualifiedName === measField.id;
                    });
                return pivotConfigSliceAxisFieldToSliceConfig(pivotAxisField, axisField, pivotConfigSliceValueMeasures);
            };

        if (axisField instanceof mac.LevelField)
            sliceConfigs = sliceConfigs.push(sliceLevelFieldToSliceConfig(axisField));
        else if (axisField instanceof mac.DimensionField)
            sliceConfigs = sliceConfigs.concat(axisField.fields.map(sliceLevelFieldToSliceConfig));
        else if (axisField instanceof mac.MeasureGroupField)
            sliceConfigs = sliceConfigs.push(sliceMeasureGroupFieldToSliceConfig(axisField));
    });

    return multiAxisConfig.set("sliceConfigs", sliceConfigs);
}

function getCanonicalMeasureGroup(modelerState, pivotConfig, groupName) {
    var grp = modstate.fields.getCanonicalMeasureGroup(modelerState.fields, groupName);
    return grp.set("fields", grp.fields.map(function(cf) {
        return adjustDataConfigForCanonicalMeasureField(modelerState, pivotConfig, cf);
    }));
} 

/**
 * @param {ModelerState} modelerState
 * @param {PivotConfig} pivotConfig
 * @param {PivotConfigAxisField} axisField
 * @return {mac.Field}
 */
function getCanonicalField(modelerState, pivotConfig, axisField) {
    var qualifiedName = axisField.qualifiedName,
        field = modstate.fields.getFieldFromQualifiedName(modelerState.fields, qualifiedName);
    
    assert(!!field, "Could not find field with qualifiedName: " + qualifiedName);

    if (field instanceof mac.MeasureField)
        field = adjustDataConfigForCanonicalMeasureField(modelerState, pivotConfig, field);
    else if (field instanceof mac.MeasureGroupField)
        field = field.set("fields", field.fields.map(function(cf) {
            return adjustDataConfigForCanonicalMeasureField(modelerState, pivotConfig, cf);
        }));
    else if (field instanceof mac.LevelField) {
        //default display mode to outline
        field = field.set("displayMode", mac.LevelDisplayMode[axisField.displayMode] || mac.LevelDisplayMode.OUTLINE);
        if (axisField.rollup)
            field = field.set("rollupConfigs", new Immutable.List([
                mac.mkRollupConfig({
                    methodName: axisField.rollup.methodName 
                })
            ]));
    }
        
    return field;
}

pch.getVisibleMeasureGroup = function(config) {
    return config.measureGroups.get("-:Measures");
};

pch.getVisibleMeasureFields = function(config) {
    var measureGroup = this.getVisibleMeasureGroup(config);
    return measureGroup ? measureGroup.fields : Immutable.List();
};

/**
 * compute which display type to use for a metric given a modeler state
 * @param {ModelerState} modelerState
 * @param {MetricInfo} metricInfo
 * @return {String}
 */
pch.computeDisplayType = function(modelerState, metricInfo) {
    var metricConfig = modstate.pivotconfig.getMetricConfig(modelerState.pivotConfig, metricInfo.name),
        measureDisplayType = metricConfig && metricConfig.cellType,
        metricFormat = modstate.pivotconfig.getMetricFormat(modelerState.pivotConfig, metricInfo.name),
        defaultDisplayType = pch.getDefaultDisplayTypeForMeasureType(metricInfo.type, metricFormat);

    return measureDisplayType || defaultDisplayType;
};

/**
 * compute default display type for a given measure type/format
 * @param {Type} type
 * @param {String|undefined} format
 * @return {String}
 */
pch.getDefaultDisplayTypeForMeasureType = function(type, format) {
    return type.kind.toLowerCase() === "boolean" ? "checkbox" : (type.kind.toLowerCase() === "named" ? "dropdown" :
        (format && lodash.includes(format, "%") ? "percentage" : "text"));
};

function adjustDataConfigForCanonicalMeasureField(modelerState, pivotConfig, field) {
    var metricInfo = modelerState.measureModel.getMeasureInfo(field.id);
    assert(metricInfo, "Can't adjust data config for measure field '" + field.id + "' b/c can't find a metric for it in model");

    var displayType = pch.computeDisplayType(modelerState, metricInfo);

    if (displayType === "dropdown") {
        return adjustDataConfigForDropdownMeasure(modelerState, pivotConfig, metricInfo, field);
    } else {
        return field;
    }
}

function $findPivotDropdownFilterForMetric(pivotConfig, metricName) {
    return (pivotConfig.dropdownMeasureFilter || []).find(function(f) {
        return f.qualifiedName === metricName;
    });
}

function adjustDataConfigForDropdownMeasure(modelerState, pivotConfig, metricInfo, field) {
    var valueQl = cubiql.parseDimLvl(modelerState.measureModel.getLevelNameByPredicate(metricInfo.type.named)),
        entityLabelAttr = valueQl.dimension + '.' + valueQl.level + '.label',
        valueLabel = cubiql.legalizeLabel(metricInfo.name + "Value"),
        labelMap = new Immutable.Map(), 
        dropdownFilter = $findPivotDropdownFilterForMetric(pivotConfig, metricInfo.name),
        valueLevel;

    labelMap = labelMap.set(valueQl.dimension, new Immutable.List([valueLabel]));

    valueQl.label = valueLabel;
    valueLevel = mac.qualifiedLevelToLevel(valueQl, modelerState.measureModel);

    //get the sort value for the items in the dropdown
    var defaultSort = modstate.pivotconfig.getLevelDefaultSort(modelerState.pivotConfig, valueLevel);

    var optionSortCfg = new mac.DataConfig({
        name: "optionSort",
        measure: new mac.Measure({
            attribute: new mac.Attribute({
                name: defaultSort.sortAttr, 
                level: valueLevel
            }),
            labelMap: labelMap
        })
    });

    field = field.update("data", function(dcs) { 
        var valueDC = dcs.find(function(dc) {
            return dc.name === "value";
        });

        dcs = dcs.concat([
            //map the value to its label for display
            valueDC.set("name", "selectedDataLabel").update("measure", function(valueMeasure) {
                //wrap the internal value measure in an operator that gets the label of the entity
                return new mac.Measure({ 
                    operator: new mac.Operator({ 
                        name: "AttributeMapping_label",
                        measures: new Immutable.List([valueMeasure])
                    })
                });
            }).set("customEdit", mac.mkEditConfig({
                name: "byLabel",
                editTarget: {
                    metricName: metricInfo.name
                },
                inputValueSignature: {
                    intersection: new Immutable.List([]),
                    type: {
                        kind: "SINGLETON",
                        type: {
                            kind: querygen.Type.STRING
                        }
                    }
                },
                inputAbstraction: {
                    interArgs: [{
                        name: "inter"
                    }, {
                        name: "valueInter",
                        intersection: new Immutable.List([valueLevel])
                    }],
                    exprArgs: [{
                        name: "input"
                    }, {
                        name: "labelAttr",
                        exprStr: valueLabel + ":" + entityLabelAttr
                    }],
                    bodyStr: "demote " + valueLabel + " in #(min (demote String in (dice ((promote input) @ (inter & valueInter & {String})) by (promote labelAttr))) @ (inter & valueInter))"
                }
            })),

            //get the labels to show in the dropdown
            new mac.DataConfig({
                name: "optionLabels",
                measure: new mac.Measure({
                    attribute: new mac.Attribute({
                        name: "label",
                        level: valueLevel
                    }),
                    labelMap: labelMap
                })
            }),
            optionSortCfg
        ]);

        if (dropdownFilter) {
            /*
            "dropdownMeasureFilter" : [{
                "qualifiedName": "SkuColor",
                "filterMeasure": "ValidColor",
                "valueLabel": "Label2"
            }]
           */
            var filterLevelMap = new Immutable.Map(); 
            filterLevelMap = filterLevelMap.set(dropdownFilter.valueLabel || valueLevel.dimensionName, new Immutable.List([valueLevel.labelName]));
            var filterIntersection = new Immutable.List(modelerState.measureModel.getMeasureInfo(dropdownFilter.filterMeasure).inter.qualified_level.map(function(ql) {
                    if (dropdownFilter.valueLabel) {
                        if (cubiql.qlevel.labelEquals(dropdownFilter.valueLabel)(ql))
                            ql = cubiql.relabelQL(ql, valueLevel.labelName);
                    } else {
                        //if no value label specified, we do it by dimension
                        if (cubiql.qlevel.dimensionEquals(valueLevel.dimensionName)(ql))
                            ql = cubiql.relabelQL(ql, valueLevel.labelName);
                    }
                    return mac.qualifiedLevelToLevel(ql, modelerState.measureModel);
                })),
                firstNonValueLevelOfDimIdx = filterIntersection.findIndex(function(lvl) {
                    return lvl.dimensionName === valueLevel.dimensionName && lvl.labelName !== valueLevel.labelName; 
                }),
                //TODO admittedly awkard relabelling.  Making the attribute's intersection bind the default labelling
                //for the first non-value labelled level 
                filterAttrInter = firstNonValueLevelOfDimIdx === -1 ?
                    filterIntersection :
                    filterIntersection.setIn([firstNonValueLevelOfDimIdx, "labelName"], valueLevel.dimensionName),
                dc = new mac.DataConfig({
                    name: "optionIds",
                    measure: new mac.Measure({
                        attribute: new mac.Attribute({
                            name: "id", 
                            level: valueLevel,
                            intersection: filterAttrInter
                        }),
                        labelMap: new Immutable.Map(valueLevel.labelName !== valueLevel.dimensionName ? [[valueLevel.dimensionName, new Immutable.List([valueLevel.labelName])]] : undefined)
                    }),
                    filters: new Immutable.List([mac.mkFilter({
                        measure: {
                            metric: {
                                name: dropdownFilter.filterMeasure,
                                intersection: filterIntersection 
                            },
                            labelMap: filterLevelMap
                        }
                    })])
                });
            
            // add the optionsIds config.
            dcs = dcs.push(dc);
            
            // add the optionsFilter config. Here it is the same as the optionIds except for the name.
            dcs = dcs.push(dc.set("name", "optionsFilter"));
        } else {
            //get the ids to show in the dropdown
            dcs = dcs.push(new mac.DataConfig({
                name: "optionIds",
                measure: new mac.Measure({
                    attribute: new mac.Attribute({
                        name: "id",
                        level: valueLevel
                    }),
                    labelMap: labelMap
                })
            }));
        }

        return dcs;
    });

    return field;
}

pch.pivotConfigToMultiAxisConfig = pivotConfigToMultiAxisConfig;

pch.getUsedDimensionLabels = function(config) {
    var usedLabels = [];

    config.axis.forEach(function(axisFields) {
        axisFields.forEach(function(field) {
            if (field instanceof mac.LevelField) {
                usedLabels.push(field.level.labelName);
            } else if (field instanceof mac.DimensionField) {
                assert(field.dimensionLabel, "DimensionField '" + field.id + "' has no label!"); 
                usedLabels.push(field.dimensionLabel);
            }
        });
    });

    return lodash.uniq(usedLabels);
};

pch.findAvailableDimensionLabel = function(dimensionName, config) {
    var labels = pch.getUsedDimensionLabels(config), 
        i = 2,
        candidateLabel = dimensionName + i;

    if (labels.indexOf(dimensionName) > -1) {
        while(labels.indexOf(candidateLabel) > -1) {
            i++;
            candidateLabel = dimensionName +i;
        }
        return candidateLabel;
    } else {
        return dimensionName;
    }
};

/**
 * Given a config, return a new config updated to calculate the proper intersections and label maps
 * for all MeasureField DataConfigs
 * @param {ModelerState} modelerState
 * @param {MAConfig} multiAxisConfig
 * @return {MAConfig}
 */
pch.updateIntersectionForAllMeasureFields = function(modelerState, multiAxisConfig) {
    multiAxisConfig = mac.refreshAllMeasureGroupFieldsOnAxes(multiAxisConfig.set("measureGroups", multiAxisConfig.measureGroups.map(function(group) { 
        return group.set("fields", group.fields.map(function(f) {
            return applyIntersectionToAllMeasureFieldDataConfigs(modelerState, f, multiAxisConfig);
        }));
    })));
    
    multiAxisConfig = multiAxisConfig.update("axis", function(axis) {
        return axis.mapEntries(function(entry) {
            var axisName = entry[0],
                fields = entry[1];
            
            fields = fields.map(function(f) {
                // measure field directly on an axis
                if (f instanceof mac.MeasureField) {
                    return applyIntersectionToAllMeasureFieldDataConfigs(modelerState, f, multiAxisConfig);
                } else {
                    return f;
                }
            });
            
            return [axisName, fields];
        });
    });
    
    return multiAxisConfig;
};

/**
 * check over config and make any adjustments to follow the pivot config conventions
 *
 * @param {ModelerState} modelerState
 * @param {MAConfig} config
 * @return {MAConfig}
 */
pch.updateConfig = function(modelerState, config) {
    config = pch.updateIntersectionForAllMeasureFields(modelerState, config);

    //now that we have all known fields, we can calculate intersections and update measure field configs
    return config.update("axis", function(axis) {
        return axis.map(function(fields) {
            return fields.map(function(f) {
                if (f instanceof mac.MeasureField)
                    return applyIntersectionToAllMeasureFieldDataConfigs(modelerState, f, config);
                else
                    return f;
            });
        });
    });
};

},{"./cubiql":211,"./helpers/fieldhelpers":229,"./modelerstate":239,"./multiaxisconfig":253,"./querygen/query":258,"./util":280,"./view/pivot/config_helper":289,"assert":undefined,"immutable":44,"lodash":90}],256:[function(require,module,exports){
/* globals Promise */
    "use strict";
    
    var util = require("./util");
    var lodash = require("lodash");
    
    /**
     * This is a module  to help build promises and chain functions to promises.
     * It's biggest advantage is that it will automatically log errors that
     * would be silently swallowed by the promise. A second advantage are
     * the onSuccess and onFailure functions that facilitate creating
     * independent execution branches.
     * 
     * Example:
     * 
     * function notifyingPromise(fn, dispatcher, startAction, successAction, failAction, logError) {
     *      var shouldLogError = logError === undefined ? true : logError;
     *   
     *      var wrappedPromise = dispatcher.handleViewAction(startAction)
     *          .then(fn);
     *   
     *      wrappedPromise.then(function() {
     *          return dispatcher.handleViewAction(successAction);
     *      });
     *      wrappedPromise.catch(function() {
     *          return dispatcher.handleViewAction(failAction);
     *      });
     *      if (shouldLogError)
     *          wrappedPromise.catch(logError);
     *   
     *      return wrappedPromise;
     * }
     * 
     * Could be written as:
     * 
     * function notifyingPromise(fn, dispatcher, startAction, successAction, failAction, logError) {
     *      return PromiseBuilder.do(dispatcher.handlerViewAction(startAction))
     *          .thenDo(fn)
     *          .onSuccess(dispatcher.handlerViewAction(successAction))
     *          .onFailure(dispatcher.handlerViewAction(failAction))
     *          .build();
     *  }
     * 
     * Note that the complexify of notifyingPromise comes from the fact that we
     * need to assign the promise to intermediate promises so that we can
     * log errors and so that we can dispatch payloads without chaining these
     * functions to the promise that will be returned by the action.
     * 
     * The reason why we don't want to write:
     * 
     *      return someAction()
     *          .then(doSomething)
     *          .catch(util.logError)
     *          .then(doSomethingElse)
     * 
     * is that the above will log the error but will also "resolve" the exception.
     * In most cases, however, we don't want to resolve the exception so that
     * because the error will prevent the successful execution of chained functions
     * like `doSomethingElse` above.
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @param {boolean} logError - logs any errors caught in the promise. Defaults to true
     */
    function PromiseBuilder(logError) {
        this.$logError = logError === undefined ? true : logError;
        this.$promise = Promise.resolve();
    }
    
    /**
     * Creates a PromiseBuilder with an initial function or promise.
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     */
    PromiseBuilder.do = function(fnOrPromise, logError) {
        logError = !lodash.isUndefined(logError) ? logError : this.$logError;
        return new PromiseBuilder(logError).thenDo(fnOrPromise);
    };
    
    /**
     * Executes a function when the PromiseBuilder resolves successfully
     * IMPORTANT: Does not chain function to action
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @return {ActionPromise} the original action promise
     */
    PromiseBuilder.prototype.onSuccess = function(fnOrPromise) {
        this.thenDo(fnOrPromise, this.$logError);
        return this;
    };
    
    /**
     * Executes a function when the PromiseBuilder fails
     * IMPORTANT: Does not chain function to action
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @return {ActionPromise} the original action promise
     */
    PromiseBuilder.prototype.onFailure = function(fnOrPromise) {
        this.catchAndRecover(fnOrPromise, this.$logError);
        return this;
    };
    
    PromiseBuilder.prototype.$chain = function(thenOrCatch, fnOrPromise, logError) {
        logError = !lodash.isUndefined(logError) ? logError : this.$logError;
        var me = this,
            promiseBuilder = new PromiseBuilder(logError);
            
        promiseBuilder.$promise = this.$promise[thenOrCatch](function() {
            return me.$asPromise(fnOrPromise, arguments);
        });
        
        if (this.$logError)
            promiseBuilder.$promise.catch(util.logError);

        return promiseBuilder;  
    };
    
    /**
     * Executes a function when the PromiseBuilder fails
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @return {ActionPromise} a new PromiseBuilder with the function chained to it
     */
    PromiseBuilder.prototype.catchAndRecover = function(fnOrPromise, logError) {
        return this.$chain("catch", fnOrPromise, logError);  
    };
    
    /**
     * Executes a function when the PromiseBuilder resolves successfully
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @return {ActionPromise} a new PromiseBuilder with the function chained to it
     */
    PromiseBuilder.prototype.thenDo = function(fnOrPromise, logError) {
        return this.$chain("then", fnOrPromise, logError);  
    };
    
    /**
     * Returns the promise object built by this builder.
     * 
     * @return {Promise}
     */
    PromiseBuilder.prototype.build = function() {
        return this.$promise;
    };
    
    PromiseBuilder.prototype.$asPromise = function(fnOrPromise, args) {
        var promise;
        promise = fnOrPromise || Promise.resolve();
        if (fnOrPromise instanceof PromiseBuilder) {
            promise = fnOrPromise.$promise;
        }
        else if (lodash.isFunction(fnOrPromise)) {
            promise = new Promise(function(resolve, reject) {
                var result = fnOrPromise.apply(fnOrPromise, args);
                resolve(result && result.$promise || result);
            });
        }
        else if (fnOrPromise instanceof Promise) {
            promise = fnOrPromise;
        }
        return promise;
    };
    
    /**
     * Creates a promise that handle timeouts: if the promise does not resolve
     * or reject in timeoutMillisec, it will be rejected with an Error()
     * 
     * @param {function|Promise|PromiseBuilder} fnOrPromise
     * @param {int} timeoutMillisec - defaults to 60000
     * @throws {PromiseTimeoutError}
     * @return {Promise}
     */
    PromiseBuilder.handleTimeout = function(fnOrPromise, timeoutMillisec) {
        var promise = PromiseBuilder.prototype.$asPromise(fnOrPromise);
        timeoutMillisec = timeoutMillisec || 60000 * 5;
        return new Promise(function(resolve, reject) {
            var timerId = setTimeout(function() {
                reject(new PromiseTimeoutError());
            }, timeoutMillisec);
            
            promise.then(function() {
                clearTimeout(timerId);
                return resolve.apply(promise, arguments);
            });
            promise.catch(function() {
                clearTimeout(timerId);
                return reject.apply(promise, arguments);
            });
        });
    };
    
    // Create a new object, that prototypally inherits from the Error constructor.
    // copied from http://stackoverflow.com/questions/1382107
    function PromiseTimeoutError(message) {
        this.constructor.prototype.__proto__ = Error.prototype;
        //FIXME: I don't like Firefox
        Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
        this.name = this.constructor.name;
        this.message = message;
    }
    PromiseTimeoutError.prototype = new Error();
    PromiseTimeoutError.prototype.constructor = PromiseTimeoutError;
    
    PromiseBuilder.PromiseTimeoutError = PromiseTimeoutError;
    
    module.exports = PromiseBuilder;

},{"./util":280,"lodash":90}],257:[function(require,module,exports){
/* global Promise */
"use strict";

/**
 * Functions and types relating to defining a filter for a query, applying those filters to expressions, and generating MQG types from those filters
 */

var assert = require("assert");
var cubiql = require("../cubiql");
var util = require("../util");
var inherits = require("inherits");
var lodash = require("lodash");
var MQG = require("measure-query-gen/src/MQG");
var querygen = require("./query");
var queryutil = require("./util");
var timsort = require("timsort");


var queryfilter = exports;

 /**
 * @class 
 * @property {FilterType} type
 */
function Filter(type) {
    this.type = type;
}
queryfilter.Filter = Filter;

function $cloneFilter(f) {
    if (lodash.isUndefined(f))
        return f;

    if (f instanceof CompositeFilter)
        return $cloneCompositeFilter(f);
    else if (f instanceof MetricFilter)
        return $cloneMetricFilter(f);
    else if (f instanceof AttributeFilter)
        return $cloneAttributeFilter(f);
    else if (f instanceof PositionFilter)
        return $clonePositionFilter(f);
    else if (f instanceof MeasureQueryFilter)
        return $cloneMeasureQueryFilter(f);
    else {
        throw new Error("Can't clone filter, of unknown type:" + JSON.stringify(f));
    }
}
queryfilter.cloneFilter = $cloneFilter;

/**
 * A filter that simply stores a list of measure queries to filter by.
 *
 * @param {MeasureQuery[]} queries
 * @param {Boolean} [disjunctive] - whether the filter is disjunctive or not. Defaults to false. 
 * @param {Boolean} [byPosition] - exclusive with byValue, denotes that the filter should dice an expression
 * @param {ByValueConfig} [byValue] - exclusive with byPosition, denotes that the filter should filter an expression
 *
 * @typedef {Object} ByValueConfig
 * @property {String} operator
 */
inherits(MeasureQueryFilter, Filter);
function MeasureQueryFilter(queries, disjunctive, byPosition, byValue) {
    Filter.call(this, "MEASURE_QUERY");
    this.queries = queries;
    this.disjunctive = disjunctive;
    this.byPosition = byPosition;
    this.byValue = byValue;
}
queryfilter.MeasureQueryFilter = MeasureQueryFilter;

function $cloneMeasureQueryFilter(f) {
    var byValueClone = lodash.isUndefined(f.byValue) ? undefined : lodash.clone(f.byValue);
    return new MeasureQueryFilter(f.queries.map(querygen.cloneMeasureQuery), f.disjunctive, f.byPosition, byValueClone);
}

inherits(CompositeFilter, Filter);
/**
 * Composition of other filters
 *
 * @class
 * @property {FilterType} type always equal to COMPOSITE
 * @property {Boolean} is_disjunction 
 * @property {Filter[]} filters
 */
function CompositeFilter(filters, is_disjunction) {
    Filter.call(this, "COMPOSITE");
    //PFL: temporarily disabling this due to performance issues
    assert(!is_disjunction, "disjunctive composite filters not yet supported");

    this.filters = filters;
    this.is_disjunction = is_disjunction;
}
queryfilter.CompositeFilter = CompositeFilter;

function $cloneCompositeFilter(filter) {
    return new CompositeFilter(filter.filters.map($cloneFilter), filter.is_disjunction);
}

inherits(MetricFilter, Filter);
/**
 * @class
 * @property {FilterType} type always equal to METRIC
 * @property {Metric} metric
 * @property {Type} valueType
 * @property {Comparison[]} comparisons
 * @property {MeasureQuery} measureQuery optional measureQuery to define the metric, rather than using a simple Metric expression
 */
function MetricFilter(metric, valueType, comparisons, measureQuery) {
    Filter.call(this, 'METRIC');

    this.metric = metric;
    this.valueType = valueType;
    this.comparisons = comparisons;
    this.measureQuery = measureQuery;
}
queryfilter.MetricFilter = MetricFilter;

function $cloneMetricFilter(filter) {
    return new MetricFilter(
        filter.metric,
        filter.valueType,
        filter.comparisons.map($cloneComparison),
        querygen.cloneMeasureQuery(filter.measureQuery)
    );
}

/**
 * @class 
 * @property {Type} valueType
 * @property {FilterType} type always equal to ATTRIBUTE
 * @property {Attribute|OverriddenAttribute} attribute
 * @property {Comparison[]} comparisons
 * @property {MeasureQuery} measureQuery optional measureQuery to define the metric, rather than using a simple Metric expression
 */
function AttributeFilter(attribute, type, comparisons, measureQuery) {
    Filter.call(this, 'ATTRIBUTE');

    this.attribute = attribute;
    this.valueType = type;
    this.comparisons = comparisons;
    this.measureQuery = measureQuery;
}
queryfilter.AttributeFilter = AttributeFilter;

function $cloneAttributeFilter(filter) {
    return new AttributeFilter(
        filter.attribute,
        filter.valueType,
        filter.comparisons.map($cloneComparison),
        querygen.cloneMeasureQuery(filter.measureQuery)
    );
}

/**
 * @class 
 * @property {Type} valueType
 * @property {MQG.Intersection} inter 
 * @property {RelationComparison[]} relationComparisons
 */
function PositionFilter(inter, relationComparisons) {
    Filter.call(this, "POSITION");

    this.inter = inter;
    this.relationComparisons = relationComparisons;
}
queryfilter.PositionFilter = PositionFilter;

function $clonePositionFilter(filter) {
    return new PositionFilter(
        filter.inter,
        filter.relationComparisons
    );
}

/**
 * @typedef {Object} Param
 * @property {String} name
 * @property {String[]} members
 *
 * @typedef {Object} Relation
 * @property {String} name
 * @property {MQG.Intersection} inter
 * @property {String[]} members
 */

/**
 * A definition of how the check the truth value of a filter
 * @class
 */
function Comparison() {
}
queryfilter.Comparison = Comparison;

function $cloneComparison(c) {
    if (c instanceof ParamComparison) {
        return new ParamComparison(
            c.comparison,
            c.name,
            c.members
        );
    } else if (c instanceof RelationComparison) {
        return new RelationComparison(
            c.comparison,
            c.name,
            c.inter,
            c.members
        );
    } else if (c instanceof PositionComparison) {
        return new PositionComparison();
    } else if (c instanceof MeasureComparison) {
        return new MeasureComparison(c.inter, c.measureName);
    } else if (c instanceof ValueComparison) {
        return new ValueComparison();
    } else {
        throw new Error("Unknown comparison to clone");
    }
}

/**
 * A comparison that filters based on values from a param 
 * @class
 */
function ParamComparison(comparison, paramName, members) {
    this.comparison = comparison;
    this.name = paramName;
    this.members = members;
    this.members.sort();
}
inherits(ParamComparison, Comparison);
queryfilter.ParamComparison = ParamComparison;

/**
 * A comparison that filters based on values from a relation 
 * @class
 */
function RelationComparison(comparison, relationName, inter, members) {
    this.comparison = comparison;
    this.name = relationName;
    this.inter = inter;
    this.members = members;
    timsort.sort(this.members);
}
inherits(RelationComparison, Comparison);
queryfilter.RelationComparison = RelationComparison;

/**
 * A comparison that filters based on values from a measure
 * @class
 */
function MeasureComparison(inter, measureName) {
    this.inter = inter;
    this.measureName = measureName;
}
inherits(MeasureComparison, Comparison);
queryfilter.MeasureComparison = MeasureComparison;

/**
 * A comparison that filters based on whether there is any value at all
 * @class
 */
function PositionComparison() {
}
inherits(PositionComparison, Comparison);
queryfilter.PositionComparison = PositionComparison;

/**
 * A comparison that filters based on the value of the measure query
 * @class
 */
function ValueComparison() {
}
inherits(ValueComparison, Comparison);
queryfilter.ValueComparison = ValueComparison;


/**
 * @readonly
 * @enum {String}
 */
var FilterType = {
    METRIC: 'METRIC',
    ATTRIBUTE: 'ATTRIBUTE',
    COMPOSITE: 'COMPOSITE',
    POSITION: 'POSITION',
    MEASURE_QUERY: 'MEASURE_QUERY',
};
queryfilter.FilterType = FilterType;

/**
 * @param {Filter} filter
 * @return {FilterType}
 */
function $getFilterType(filter) {
    assert(filter.type, "type for filter undefined");
    return FilterType[filter.type];
}

/**
 * @param {MQG.QualifiedLevel|MQG.Intersection} inter
 * @param {String[][]|String[]} members
 * @return {String}
 */
queryfilter.genRelationName = function(inter, members) {
    inter = inter.qualified_level ? inter : new MQG.Intersection(inter);
    timsort.sort(members);
    var hashCode = util.hashCode(queryutil.stringifyIntersection(inter) + JSON.stringify(members)); 
    if (hashCode < 0)
        hashCode = "neg" + (hashCode*-1)

    return "relation_" + hashCode; 
};

/**
 * @param {String[]} members
 * return {String}
 */
queryfilter.genParamName = function(members) {
    members.sort();
    var hashCode = util.hashCode(JSON.stringify(members));
    if (hashCode < 0)
        hashCode = "neg" + (hashCode*-1)

    return "param_" + hashCode;
};

/**
 * @param {Filter[]} filters
 */
queryfilter.conjunctFilters = function(filters) {
    if (!filters.length)
        return;
    if (filters.length === 1)
        return filters[0];

    var filtersToUse = [];
    filters.forEach(function(f) {
        //collapse nested conjuncted filter if possible
        if (f instanceof CompositeFilter && f.is_disjunction === false) {
            filtersToUse = [].concat(filtersToUse, f.filters);
        } else {
            filtersToUse.push(f);
        }
    });

    filtersToUse = lodash.uniq(filtersToUse, queryutil.stringifyQueryFilter);
    return new CompositeFilter(filtersToUse, false);
};

/**
 * Given two lists of param bindings, concatenate them and 
 * collapse duplicate bindings.  It is an error to have
 * the same parameter with different members.
 *
 * @param {MQG.ParamBinding[]} params1
 * @param {MQG.ParamBindng[]} params2
 * @return {MQG.ParamBinding[]}
 */
queryfilter.concatParamBinding = function(params1, params2) {
    params1 = lodash.isUndefined(params1) ? [] : params1; 
    params2 = lodash.isUndefined(params2) ? [] : params2; 

    //TODO: should validate same-name params have same members

    return lodash.uniq([].concat(params1,params2), function(pb) {
        return pb.param.name;
    });
};

/**
 * Given two lists of relation bindings, concatenate them and 
 * collapse duplicate bindings.  It is an error to have
 * the same relation with different members.
 *
 * @param {MQG.RelationBinding[]} relations1
 * @param {MQG.RelationBinding[]} relations2
 * @return {MQG.RelationBinding[]}
 */
queryfilter.concatRelationBinding = queryfilter.concatParamBinding; //same function can merge both at the moment coincidentally

/**
 * @param {Filter} filter
 * @return {MQG.RelationBinding}
 */
queryfilter.filterToParamBinding =
queryfilter.filterToRelationBinding = function(filter) {
    var bindings = [],
        type,
        typeParser,
        mqgType;

    switch($getFilterType(filter)) {
        case FilterType.POSITION:
            filter.relationComparisons.forEach(function(c) {
                var memberColumns = lodash.unzip(c.members);
                if (c instanceof RelationComparison) {
                    bindings = queryfilter.concatRelationBinding(bindings, [
                        new MQG.RelationBinding(
                            new MQG.ParamExpr(c.name, c.inter, undefined),
                            new MQG.LiteralExpr("GENERAL", new MQG.BaseSignature(c.inter),
                                c.inter.qualified_level.map(function(ql, i) {
                                    return new MQG.Column(new MQG.Type("STRING"), memberColumns[i]);
                                }) 
                            )
                        )
                    ]);
                }
            });
            break;
        case FilterType.COMPOSITE:
            filter.filters.forEach(function(f) {
                bindings = queryfilter.concatRelationBinding(bindings, queryfilter.filterToRelationBinding(f));
            });
    }

    return bindings;
};

function BadFilterError(msg) {
    this.msg = msg;
}

function FilterGenerator(measureModel) {
    this.$measureModel = measureModel;
}
queryfilter.FilterGenerator = FilterGenerator;

FilterGenerator.prototype.$validateMetricFilter = function(filter) {
    if (!this.$measureModel.getMeasureInfo(filter.metric.name))
        throw new BadFilterError("Invalid metric used in filter: " + filter.metric.name);
};

FilterGenerator.prototype.$validateAttributeFilter = function(filter) {
    var ql = filter.attribute.qualifiedLevel,
        dim = cubiql.qlevel.getDimension(ql),
        levelName = cubiql.qlevel.getLevel(ql),
        level = this.$measureModel.getLevel(dim, levelName),
        levelAttr = level && this.$measureModel.getLevelAttr(level, filter.attribute.name);

    if (!level) {
        throw new BadFilterError("Invalid level used in filter: " + cubiql.qualifiedLevelToQualifiedName(ql));
    } else if (!levelAttr) {
        throw new BadFilterError("Invalid level attribute used in filter: " + cubiql.qualifiedLevelToQualifiedName(ql) + "." + filter.attribute.name);
    }
    
};

FilterGenerator.prototype.$validateFilter = function(filter) {
    var ftype = $getFilterType(filter);
    switch(ftype) {
        case FilterType.COMPOSITE:
            filter.filters.forEach(this.$validateFilter.bind(this));
            break;
        case FilterType.METRIC:
            this.$validateMetricFilter(filter);
            break;
        case FilterType.ATTRIBUTE:
            this.$validateAttributeFilter(filter);
            break;
    }
};

FilterGenerator.prototype.$filterToDicers = function(filter, expr) {
    var ftype = $getFilterType(filter);
    assert(ftype === FilterType.METRIC || ftype === FilterType.ATTRIBUTE || ftype === FilterType.POSITION, "invalid filter to convert to dicer");
    switch (ftype) {
        case FilterType.METRIC:
            return this.$metricFilterToDicers(filter);
        case FilterType.ATTRIBUTE:
            return this.$attributeFilterToDicers(filter);
        case FilterType.POSITION:
            return this.$positionFilterToDicers(filter);
    }
};

FilterGenerator.prototype.$attributeFilterToDicers = function(filter) {
    var relationComparisons = filter.comparisons.filter(function(c) {
            return c instanceof RelationComparison;
        }),
        measureComparisons = filter.comparisons.filter(function(c) {
            return c instanceof MeasureComparison;
        }),
        positionComparisons = filter.comparisons.filter(function(c) {
            return c instanceof PositionComparison;
        }),
        valueComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ValueComparison;
        }),
        paramComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ParamComparison;
        }),
        dicers = [],
        clonedFilter = queryfilter.cloneFilter(filter);

    dicers = [].concat(dicers, measureComparisons.map($measureComparisonToDicer));    

    if (valueComparisons.length) {
        assert(filter.measureQuery, "Can't have value comparison without a measure query!");
        assert(queryutil.getMeasureValueType(filter.attribute, this.$measureModel) == queryutil.getMeasureValueType(filter.measureQuery.measure, this.$measureModel), "Can't do value comparison between different types");
        assert(valueComparisons.length === filter.comparisons.length, "ValueComparisons must be the only comparisons in a filter");
        dicers.push(
            querygen.createMeasureExpr(filter.attribute, new MQG.Intersection(filter.attribute.qualifiedLevel), {}, this.$measureModel)
                .filterBy(new MQG.Comparison("=", querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel)))
        );
    } else {
        if (positionComparisons.length || filter.measureQuery.filter) {
            //if it is a position comparison with no filter, or the measure query is not the pure attribute, just return the query expression to use as the dicer
            dicers.push(querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel));
        }
        
        if (paramComparisons.length) {
            dicers.push(this.applyFilterToExpr(
                filter.attribute,
                querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel),
                filter
            ));
        }

        //special case, we only use relation comparisons, then we
        //can just use a param dicer instead of creating an attribute expression 
        if (relationComparisons.length && filter.comparisons.length === relationComparisons.length) {
            dicers.push($relationComparisonToDicer(relationComparisons[0]));
        }
    }
    return dicers;
};

FilterGenerator.prototype.$metricFilterToDicers = function(filter) {
    return [this.applyFilterToExpr(
        filter.metric,
        querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel),
        filter
    )];
};


FilterGenerator.prototype.$positionFilterToDicers = function(filter) {
    return filter.relationComparisons.map($relationComparisonToDicer);
};

/**
 * @param {querygen.Measure} measure
 * @param {MQG.Expr} expr
 * @param {Filter}
 * @return {MQG.Expr}
 */
FilterGenerator.prototype.applyFilterToExpr = function(measure, expr, filter) {
    this.$validateFilter(filter);
    if (filter instanceof MeasureQueryFilter) {
        expr = this.$applyMeasureQueryFilterToExpr(expr, filter);
    } else if (filter instanceof PositionFilter) {
        expr = this.$applyPositionFilterToExpr(expr, filter);
    } else if (measure instanceof querygen.Metric) {
        expr = this.$applyFilterToMetric(measure, expr, filter);
    } else if (measure instanceof querygen.Attribute || measure instanceof querygen.OverriddenAttribute) {
        expr = this.$applyFilterToAttribute(measure, expr, filter);
    } else if (measure instanceof querygen.ConstantTerm) {
        expr = this.$applyFilterToConstantTerm(measure, expr, filter);
    } else if (measure instanceof querygen.FilteredMeasureQuery) {
        expr = this.applyFilterToExpr(measure.measureQuery.measure, expr, filter);
    }

    return expr;
};

FilterGenerator.prototype.$applyMeasureQueryFilterToExpr = function(expr, filter) {
    assert(!filter.byValue || !filter.byPosition, "byValue and byPosition are exclusive options for a MeasureQueryFilter but both are used on ", filter);
    var me = this,
        queryExprs = filter.queries.map(function(q) {
            return querygen.createExprForMeasureQuery(q, me.$measureModel);
        });

    if (filter.byValue) {
        return expr.filterBy(queryExprs.map(function(e) {
            return new MQG.Comparison(filter.byValue.operator, e);
        }), filter.disjunctive);
    } else if (filter.byPosition) {
        return expr.diceBy(queryExprs, filter.disjunctive);
    }
};

FilterGenerator.prototype.$mergeAttributeFilters = function(targetInter, targetFilter, sourceFilter) {
    var overlappingLabels = cubiql.getOverlappingLabels(targetInter, sourceFilter.measureQuery.mappedInter),
        hasOverlap = overlappingLabels.length > 0,
        sourceAttr = sourceFilter.attribute,
        sourceLevel = sourceAttr.qualifiedLevel,
        targetAttr = targetFilter.attribute,
        targetLevel = targetAttr.qualifiedLevel,
        dimension = cubiql.qlevel.getDimension(sourceAttr.qualifiedLevel),
        label = cubiql.qlevel.getLabel(sourceAttr.qualifiedLevel),
        filter;

    //check if filters are of the same label, and if so merge them
    if (cubiql.qlevel.labelEquals(label)(targetLevel)) {
        //if they are the same level, reassign the filter to the conjunction of the two    
        if (cubiql.qLevelEqual(targetLevel, sourceLevel)) {
            filter = queryfilter.conjunctFilters([targetFilter, sourceFilter]);
        } else {
        //if they are not of the same level, just replace with the lowest level filter
            if (cubiql.qLevelEqual(sourceLevel, this.$measureModel.findLowestLevel(dimension, [sourceLevel, targetLevel])))
                filter = sourceFilter;
            else
                filter = targetFilter;
        }
    } else if (hasOverlap) { 
    //if not, if the query overlaps w/ this filter, reassign the filter to the conjunction of the two
        filter = queryfilter.conjunctFilters([sourceFilter, targetFilter]);
    }

    return filter;
};

FilterGenerator.prototype.applyPositionFilterToMeasureQuery = function(measureQuery, positionFilter) {
    var overlappingLabels = cubiql.getOverlappingLabels(measureQuery.mappedInter, positionFilter.inter),
        hasOverlap = overlappingLabels.length > 0;

    //apply filter to measureQuery's filter if it exists
    //otherwise if query's intersection overlaps attribute's label, just use this filter
    if (!lodash.isUndefined(measureQuery.filter)) {
        //measureQuery.filter = this.applyAttributeFilterToFilter(measureQuery.mappedInter, measureQuery.filter, attributeFilter);
        measureQuery.filter = queryfilter.conjunctFilters([measureQuery.filter, positionFilter]);
    } else if (hasOverlap) {
        //if no filter, if there is an overlap, just assign this filter
        measureQuery.filter = positionFilter;
    }
};

FilterGenerator.prototype.applyAttributeFilterToMeasureQuery = function(measureQuery, attributeFilter) {
    var overlappingLabels = cubiql.getOverlappingLabels(measureQuery.mappedInter, attributeFilter.measureQuery.mappedInter),
        label = cubiql.qlevel.getLabel(attributeFilter.attribute.qualifiedLevel),
        hasOverlap = overlappingLabels.length > 0;

    //apply filter to measureQuery's filter if it exists
    //otherwise if query's intersection overlaps attribute's label, just use this filter
    if (!lodash.isUndefined(measureQuery.filter)) {
        //measureQuery.filter = this.applyAttributeFilterToFilter(measureQuery.mappedInter, measureQuery.filter, attributeFilter);
        measureQuery.filter = queryfilter.conjunctFilters([measureQuery.filter, attributeFilter]);
    } else if (hasOverlap) {
        //if no filter, if there is an overlap, just assign this filter
        measureQuery.filter = attributeFilter;
    }
};

/**
 * In-place apply an attributeFilter in an optimal fashion to a filter,
 * which might involve all of 
 *  1) merging with existing filters of the same attribute
 *  2) being added to the filter of the measureQuery of an existing filter
 *  3) replacing existing filters made redundant by this attribute filter (i.e. attribute filters for a qualified level higher in a hierarchy than this level
 *  4) 1, 2 or 3 being applied to subfilters found by walking through the layers of measureQuery/filters
 *
 * @param {MQG.Intersection} targetInter the intersection being considered when applying the filter
 * @param {Filter} filter
 * @param {AttributeFilter} attributeFilter
 */
FilterGenerator.prototype.applyAttributeFilterToFilter = function(targetInter, filter, attributeFilter) {
    var me = this;

    if (filter instanceof AttributeFilter) { 
        return this.$mergeAttributeFilters(targetInter, filter, attributeFilter);
    } else if (filter instanceof CompositeFilter) {
        //for a composite filter, apply to each 
        filter.filters = filter.filters.map(function(f) {
            return me.applyAttributeFilterToFilter(targetInter, f, attributeFilter);
        });
        return filter;
    } else if (filter instanceof MetricFilter) {
    //  if not an attribute filter, apply attribute filter to measure query of the filter
        this.applyAttributeFilterToMeasureQuery(filter.measureQuery, attributeFilter);
        return filter;
    }
};

FilterGenerator.prototype.$applyFilterToConstantTerm = function(constTerm, expr, filter) {
    if (filter instanceof CompositeFilter) {
        return this.$applyCompositeFilterToConstantTerm(constTerm, expr, filter);
    } else if (filter instanceof PositionFilter) {
        return this.$applyPositionFilterToConstantTerm(expr, filter);
    } else if (filter instanceof MeasureQueryFilter) {
        return this.$applyMeasureQueryFilterToExpr(expr, filter);
    } else {
        throw new Error("Unknown filter type: " + filter);
    }
};

FilterGenerator.prototype.$applyCompositeFilterToConstantTerm = function(constTerm, expr, filter) {
    var me = this;

    filter.filters.forEach(function(f) {
        expr = me.$applyFilterToConstantTerm(constTerm, expr, f);
    });

    return expr;
};

FilterGenerator.prototype.$applyPositionFilterToConstantTerm = function(expr, filter) {
    return this.$applyPositionFilterToExpr(expr, filter);
};

FilterGenerator.prototype.$applyFilterToAttribute = function(attr, expr, filter) {
    if (filter instanceof MetricFilter) {
        return this.$applyMetricFilterToAttribute(attr, expr, filter);
    } else if (filter instanceof AttributeFilter) {
        return this.$applyAttributeFilterToAttribute(attr, expr, filter);
    } else if (filter instanceof CompositeFilter) {
        return this.$applyCompositeFilterToAttribute(attr, expr, filter);
    } else if (filter instanceof PositionFilter) {
        return this.$applyPositionFilterToAttribute(expr, filter);
    }
};

FilterGenerator.prototype.$applyCompositeFilterToAttribute = function(attr, expr, filter) {
    var me = this,
        attrLabel = attr.qualifiedLevel && cubiql.qlevel.getLabel(attr.qualifiedLevel),
        parts = util.partition(filter.filters, function(f) {
            return me.$isFilterForAttribute(attr, f);
        }),
        sameAttrFilters = parts[0],
        otherFilters = parts[1],
        exprInter = querygen.getIntersectionOfExpr(expr, false, this.$measureModel);

    sameAttrFilters.forEach(function(f) {
        expr = me.$applyAttributeFilterToAttribute(attr, expr, f);
    });

    otherFilters.forEach(function(f) {
        if (f instanceof CompositeFilter) {
            expr = me.$applyCompositeFilterToAttribute(attr, expr, f);
        } else if (f instanceof MetricFilter) {
            expr = me.$applyMetricFilterToAttribute(attr, expr, f);
        } else if (f instanceof PositionFilter) {
            expr = me.$applyPositionFilterToAttribute(expr, f);
        } else if (f instanceof AttributeFilter) {
            expr = me.$applyAttributeFilterToAttribute(attr, expr, f);
        } else if (f instanceof MeasureQueryFilter) {
            expr = me.$applyMeasureQueryFilterToExpr(expr, f);
        } else {
            assert(false, "unhandled filter type");
        }
    });

    return expr;
};

FilterGenerator.prototype.$applyPositionFilterToExpr = function(expr, filter) {
    var relationComparisons = filter.relationComparisons;

    return expr.diceBy(filter.relationComparisons.map($relationComparisonToDicer), false);
};

FilterGenerator.prototype.$applyPositionFilterToAttribute = function(expr, filter) {
    return this.$applyPositionFilterToExpr(expr, filter);
};

FilterGenerator.prototype.$applyMetricFilterToAttribute = function(attr, expr, filter) {
    return expr.diceBy(this.$filterToDicers(filter), false);
};

FilterGenerator.prototype.$applyAttributeFilterToAttribute = function(attr, expr, filter) {
    var paramComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ParamComparison;
        }),
        relationComparisons = filter.comparisons.filter(function(c) {
            return c instanceof RelationComparison;
        }),
        positionComparisons = filter.comparisons.filter(function(c) {
            return c instanceof PositionComparison;
        }),
        valueComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ValueComparison;
        }),
        measureComparisons = filter.comparisons.filter(function(c) {
            return c instanceof MeasureComparison;
        });

    //relation comparisons applied for filters on the same attribute as the filter and on others
    if (relationComparisons.length > 0)
        expr = expr.diceBy(relationComparisons.map($relationComparisonToDicer), false);

    if (this.$isFilterForAttribute(attr, filter)) {
        if (paramComparisons.length > 0) {
            expr = expr.filterBy($paramComparisonsToMQGComparisons(paramComparisons, filter.valueType.toLowerCase()), false);
        } else if (measureComparisons.length > 0) {
            expr = expr.diceBy(this.$filterToDicers(filter), false);
        } else if (positionComparisons.length > 0) {
            expr = expr.diceBy(this.$filterToDicers(filter), false);
        }  else if (valueComparisons.length) {
            assert(queryutil.getMeasureValueType(attr, this.$measureModel) == queryutil.getMeasureValueType(filter.measureQuery.measure, this.$measureModel), "Can't do value comparison between different types");
            assert(filter.measureQuery, "Can't have value comparison without a measure query!");
            expr = expr.filterBy(new MQG.Comparison("=", querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel)));
        } else if (!relationComparisons.length) {
            throw new Error("Invalid filter for attr: " + JSON.stringify(attr));
        }
    } else {
        if (positionComparisons.length > 0 || paramComparisons.length > 0 || measureComparisons.length > 0 || valueComparisons.length > 0) {
            expr = expr.diceBy(this.$filterToDicers(filter), false);
        }
    }
    return expr;
};

FilterGenerator.prototype.$isFilterForAttribute = function(attr, filter) {
    if (attr instanceof querygen.OverriddenAttribute)
        attr = attr.attributes[0];

    return filter instanceof AttributeFilter && 
        filter.attribute.name === attr.name &&
        cubiql.qLevelEqual(filter.attribute.qualifiedLevel, attr.qualifiedLevel, true);
};

FilterGenerator.prototype.$applyFilterToMetric = function(metric, expr, filter) {
    if (filter instanceof MetricFilter) {
        return this.$applyMetricFilterToMetric(metric, expr, filter);
    } else if (filter instanceof AttributeFilter) {
        return this.$applyAttributeFilterToMetric(metric, expr, filter);
    } else if (filter instanceof CompositeFilter) {
        return this.$applyCompositeFilterToMetric(metric, expr, filter);
    } else if (filter instanceof PositionFilter) {
        return this.$applyPositionFilterToMetric(expr, filter);
    } else {
        throw new Error("Unknown filter type: " + filter);
    }
};

/**
 * @param {querygen.Metric} metric
 * @param {queryfilter.Filter} filter
 * @return {Boolean}
 */
FilterGenerator.prototype.$isFilterForMetric = function(metric, filter) {
    return filter instanceof MetricFilter && metric.name === filter.metric.name;
};

/**
 * @param {querygen.Metric} metric
 * @param {MQG.Expr} expr
 * @param {queryfilter.CompositeFilter} filter
 * @return {MQG.Expr}
 */
FilterGenerator.prototype.$applyCompositeFilterToMetric = function(metric, expr, filter) {
    var me = this,
        parts = util.partition(filter.filters, function(f) {
            return me.$isFilterForMetric(metric, f);
        }),
        sameMetricFilters = parts[0],
        otherFilters = parts[1],
        dicers = [];

    sameMetricFilters.forEach(function(f) {
        expr = me.$applyMetricFilterToMetric(metric, expr, f);
    });

    otherFilters.forEach(function(f) {
        if (f instanceof CompositeFilter) {
            expr = me.$applyCompositeFilterToMetric(metric, expr, f);
        } else if (f instanceof PositionFilter) {
            expr = me.$applyPositionFilterToMetric(expr, f);
        } else if (f instanceof MeasureQueryFilter) {
            expr = me.$applyMeasureQueryFilterToExpr(expr, f);
        } else {
            dicers = [].concat(dicers, me.$filterToDicers(f));
        }
    });

    return expr.diceBy(dicers, false);
};

FilterGenerator.prototype.$applyPositionFilterToMetric = function(expr, filter) {
    var relationComparisons = filter.relationComparisons;

    return expr.diceBy(filter.relationComparisons.map($relationComparisonToDicer), false);
};

/**
 * @param {querygen.Metric} metric
 * @param {MQG.Expr} expr
 * @param {queryfilter.AttributeFilter} filter
 * @return {MQG.Expr}
 */
FilterGenerator.prototype.$applyAttributeFilterToMetric = function(metric, expr, filter) {
    var dicer,
        relationComparisons = filter.comparisons.filter(function(c) {
            return c instanceof RelationComparison;
        }),
        paramComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ParamComparison;
        }),
        measureComparisons = filter.comparisons.filter(function(c) {
            return c instanceof MeasureComparison;
        }),
        positionComparisons = filter.comparisons.filter(function(c) {
            return c instanceof PositionComparison;
        }),
        valueComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ValueComparison;
        }),
        cloneFilter;

    //TODO the special case of relations should not be used when there is a filter
    if (relationComparisons.length > 0)
        expr = expr.diceBy(relationComparisons.map($relationComparisonToDicer), false);

    if (paramComparisons.length || measureComparisons.length || positionComparisons.length || valueComparisons.length ||
       filter.measureQuery.filter || filter.measureQuery.measure instanceof querygen.FilteredMeasureQuery) {
        cloneFilter = $cloneFilter(filter);
        
        cloneFilter.comparisons = cloneFilter.comparisons.filter(function(c) {
            return !(c instanceof RelationComparison || c instanceof ParamComparison);
        });
        expr = expr.diceBy(this.$filterToDicers(cloneFilter), false);
    }

    return expr;
};

/**
 * @param {querygen.Metric} metric
 * @param {MQG.Expr} expr
 * @param {queryfilter.MetricFilter} filter
 * @return {MQG.Expr}
 */
FilterGenerator.prototype.$applyMetricFilterToMetric = function(metric, expr, filter) {
    var paramComparisons,
        dicer;

    if (metric.name === filter.metric.name) {
        paramComparisons = filter.comparisons.filter(function(c) {
            return c instanceof ParamComparison;
        });

        //if (filter.measureQuery.filter)
            //expr = this.applyFilterToExpr(metric, expr, filter.measureQuery.filter);
        var filterExpr = querygen.createExprForMeasureQuery(filter.measureQuery, this.$measureModel);
        if (queryutil.exprContainsExpr(filterExpr, expr))
            expr = filterExpr;
        
        if (paramComparisons.length > 0)
            expr = expr.filterBy($paramComparisonsToMQGComparisons(paramComparisons, filter.valueType.toLowerCase()), false);
        return expr;
    } else {
        return expr.diceBy(this.$filterToDicers(filter), false);
    }
};

/**
 * @param {Comparison} comp
 * @return {MQG.Expr}
 */
function $relationComparisonToDicer(comp) {
    assert(comp instanceof RelationComparison, "Comparison is not a relation comparison");
    return new MQG.ParamExpr(
        comp.name,
        cubiql.cloneIntersection(comp.inter),
        undefined
    );
}

/**
 * @param {Comparison} comp
 * @param {String} type
 * @return {MQG.Comparison}
 */
function $paramComparisonToMQGComparison(comp, type) {
    assert(comp instanceof ParamComparison, "Comparison is not a param comparison");
    return new MQG.Comparison(
        comp.comparison, 
        new MQG.ParamExpr(comp.name, new MQG.Intersection([]), new MQG.Type(type))
    );
}

function $paramComparisonsToMQGComparisons(comps, valueType) {
    return comps.map(function(c) {
        return $paramComparisonToMQGComparison(c, valueType);
    });
}

/**
 * Get the cubiql expression for the measure comparison used for getting value to be compared from a measure.
 * For example, this is used by the slices that store the selected value in a measure.
 *
 * @param {Comparison} comp
 * @return {MQG.Expr}
 */
function $measureComparisonToDicer(comp) {
    assert(comp instanceof MeasureComparison, "Comparison is not a measure comparison");

    // using a HISTOGRAM agg to coerce the value into a key, but should switch to a PromoteExpr once it's implemented in the measure service
    return new MQG.MetricExpr(comp.measureName)
        .aggBy("HISTOGRAM", new MQG.Intersection([]))
        .relabelBy(new MQG.LabelMap("Bin", comp.inter.qualified_level[0].dimension))
        .drop();
}

},{"../cubiql":211,"../util":280,"./query":258,"./util":260,"assert":undefined,"inherits":45,"lodash":90,"measure-query-gen/src/MQG":1,"timsort":148}],258:[function(require,module,exports){
/* global Promise */
"use strict";

var assert = require("assert");
var cubiql = require("../cubiql");
var util = require("../util");
var inherits = require("inherits");
var lodash = require("lodash");
var queryfilter = require("./filter");
var queryresults = require("./results");
var queryutil = require("./util");
var MQG = require("measure-query-gen/src/MQG");

var querygen = module.exports;

/** 
 * Workflow:
 *
 * MeasureQueries[] -> MeasureServiceQuery[] 
 *   - querygen.measureQueriesToServiceQueries
 *
 * MeasureServiceQuery[] -> MeasureServiceRequest
 *   - querygen.serviceQueriesToServiceRequest
 *
 *
 * @typedef {String} Label
 * @typedef {String} DimensionName
 * @typedef {String} MetricName
 *
 * @typedef {Object} AggMethod
 * @param {MeasureProtocol.AggExpr.Method.Primitive} primitive agg method primitive
 * @param {MeasureProtocol.AggExpr.Method.CompositeComponent} composite agg method composite (exclusive with primitive)
 * @param {Boolean} isDefault
 * @param {Boolean} isRecalc
 *
 * @typedef {Object<Label, AggMethod>} AggMethodLookup
 *
 *
 * @typedef {Object.<Number,String>} LevelMap //map from an number to a level, used to map possibly relabelled QLs to an original index 
 * @typedef {Object.<Label,Label>} LabelMap //map from an label to a label, used to map possibly relabelled QLs to an original label 
 * @typedef {Object<SrcLabel, TargetLabel[]>} MultiLabelMap //supports mapping a single label to multiple target labels
 *
 * @typedef {Object} MeasureServiceRequest
 * @property {MQG.Request} request the actual request
 * @property {queryresults.ResponseProcessor} responseProcessor processor for reading results from the request 
 *
 * @typedef {Object} MeasureQuery
 * @property {String} label an optional label for the measure query to use for retrieving results later 
 * @property {Measure} measure the measure to query
 * @property {MQG.Intersection} inter the intersection to query the measure at
 * @property {AggMethodLookup} aggMethodLookup a lookup table for the aggregation method to use for each dimension
 * @property {queryfilter.Filter} filter 
 * @property {Boolean} constrainByAncestor whether or not to constrain same-dimension QualifiedLevels in the intersection by an Ancestor relationship (default: True)
 * @property {MQG.Intersection} mappedInter (optional) intersection to which to map the final measure expr to. Used to attempt to conform query expressions to a commonly-labelled intersection
 * @property {LabelMap} labelMap (optional) label map to use mapping to mappedInter
 * @property {MultiLabelMap} interLabelMap (optional) label mapping from the base labels of the measure to the labels used in the 'inter' Intersection
 * @property {String[]} [validityMessages] if present, indicates the set of messages denoting that this query is invalid and why
 *
 * @typedef {Object} MeasureServiceQuery
 * @property {MeasureQuery} sourceQuery 
 * @property {MQG.Intersection} inter the intersection of the expression, in the sort order the measure service will use for the predicate representing the expression
 * @property {MQG.Expr} expr the expression for this query
 * @property {MQG.Expr} sortIndexExpr (optional) the expression returning the sort index for this query 
 * @property {MQG.ParamBinding[]} params
 * @property {MQG.RelationBinding[]} relations
 */

/**
 * @readonly
 * @enum {String}
 */
querygen.Type = {
    NONE: 'NONE',
    INT: 'INT',
    FLOAT: 'FLOAT',
    DECIMAL: 'DECIMAL',
    STRING: 'STRING',
    NAMED: 'NAMED',
    BOOLEAN: 'BOOLEAN'
};

var METHOD = {
    COLLECT: "COLLECT",
    AMBIG: "AMBIG",
    TOTAL: "TOTAL",
    MIN: "MIN",
    MAX: "MAX",
    COUNT: "COUNT",
    MODE: "MODE",
    COUNT_DISTINCT: "COUNT_DISTINCT"
};

/** {Object} validAggMethods map from types to list of valid aggregation methods, where
 *     {String[]} validAggMethods[type]
 */
var validAggMethods =
    (function () {
        var allAggMethods = Object.keys(METHOD);
        return {
            "INT": allAggMethods,
            "FLOAT": allAggMethods,
            "DECIMAL": allAggMethods,
            "BOOLEAN": ["MIN", "MAX", "AMBIG", "COLLECT"],
            "STRING": ["MIN", "MAX", "AMBIG", "COLLECT"],
            "NAMED": ["MIN", "MAX", "MODE", "AMBIG", "COLLECT"]
        };
    }());

/**
 * Constructs an agg method a metric in order of priority:
 *   the explicit parameter, the default in the metamodel, a locally chosen fall back by type.
 *
 * @param  {(string|undefined)} explicitAggMethod
 * @param  {MeasureProtocol.Metric} metric
 * @return {AggMethod}
 */
querygen.getAggMethod = function(explicitAggMethod, metric) {
    var isRecalc = !lodash.isUndefined(metric.recalc),
        metamodelAggMethod = metric.agg_method && metric.agg_method,
        useDefault = explicitAggMethod === undefined ||  explicitAggMethod === "undefined" || explicitAggMethod === "DEFAULT",
        preferredAggMethod = useDefault ? metamodelAggMethod : explicitAggMethod,
        type,
        result = {},
        aggMethod,
        isPositionOnly = lodash.isUndefined(metric.type);

    if (isRecalc || isPositionOnly) {
        aggMethod = "COLLECT";
    } else {
        type = metric.type.kind;
        if (lodash.isString(preferredAggMethod)) {
            if (type && validAggMethods.hasOwnProperty(type) && validAggMethods[type].indexOf(preferredAggMethod) !== -1) {
                aggMethod = preferredAggMethod;
            }
        } else {
            aggMethod = preferredAggMethod;
        }
    }

    if (lodash.isString(aggMethod)) {
        result.primitive = aggMethod;
        result.isDefault = metamodelAggMethod && aggMethod === metamodelAggMethod.primitive;
    } else if (lodash.isObject(aggMethod)) {
        result.primitive = aggMethod.primitive;
        result.composite = aggMethod.composite;
        result.named = aggMethod.named;
        result.isDefault = metamodelAggMethod && useDefault;
        assert(result.named || result.composite || result.primitive, "aggMethod should have either composite or primitive");
    }
    result.isDefault = isRecalc ? false : result.isDefault;
    result.isRecalc = isRecalc;

    return result;
};

/**
 * @class 
 */
function Measure() {} 

querygen.Measure = Measure;

inherits(FilteredMeasureQuery, Measure);
/**
 * A Metric but with a filter applied internally. Used to, for example, query an aggregate over a filter
 *
 * @class
 * @param {MeasureQuery} measureQuery
 */
function FilteredMeasureQuery(measureQuery) {
    this.name = measureQuery.measure.name;
    this.measureQuery = measureQuery;
}
querygen.FilteredMeasureQuery = FilteredMeasureQuery;

inherits(OverriddenMeasureQuery, Measure);

function OverriddenMeasureQuery(measureQueries) {
    this.measureQueries = measureQueries;
}
querygen.OverriddenMeasureQuery = OverriddenMeasureQuery;

inherits(FixedLevel, Measure);
/**
 * @class
 * @param {MQG.QualifiedLevel} qualifiedLevel
 * @param {String} id
 * @param {Type} valueType
 */
function FixedLevel(qualifiedLevel, id, valueType) {
    this.qualifiedLevel = qualifiedLevel;
    this.id = id;
    this.valueType = valueType;
}
querygen.FixedLevel = FixedLevel;

inherits(ConstantTerm, Measure);
/**
 * @class
 * @param {String|Number} constantValue
 * @param {Type} type
 */
function ConstantTerm(constantValue, type) {
    this.name = "Constant(" + type + ") = " + constantValue;
    this.constantValue = constantValue;
    this.type = type;
}
querygen.ConstantTerm = ConstantTerm;

inherits(LiteralRelation, Measure);
/**
 * @class
 * @param {MQG.Intersection} inter
 * @param {String[][]} members
 * @param {String} name  optional
 */
function LiteralRelation(inter, members, name, type) {
    this.inter = inter;
    this.members = members;
    this.name = lodash.isUndefined(name) ? queryfilter.genRelationName(inter, members) : name;
    this.type = type;
}
querygen.LiteralRelation = LiteralRelation;

inherits(Metric, Measure);
/**
 * @class
 * @param {String} name
 */
function Metric(name) {
    this.name = name;
}
querygen.Metric = Metric;
 
inherits(Attribute, Measure); 
querygen.cloneMetric = function(metric) {
    return new Metric(metric.name);
};
/**
 * @class 
 * @param {String} name
 * @param {MQG.QualifiedLevel} qualifiedLevel
 */
function Attribute(name, qualifiedLevel) { 
    this.name = name;
    this.qualifiedLevel = qualifiedLevel;
}
querygen.Attribute = Attribute;

inherits(LevelMap, Measure); 
/**
 * @class
 * @param {MQG.QualifiedLevel} childLevel
 * @param {MQG.QualifiedLevel} parentLevel
 */
function LevelMap(childLevel, parentLevel) {
    this.childLevel = childLevel;
    this.parentLevel = parentLevel;
}
querygen.LevelMap = LevelMap;

inherits(OverriddenAttribute, Measure);
/**
 * @class
 * @param {Attribute[]} array of attributes
 * @param {String} name of the attribute
 */
function OverriddenAttribute(attributes) {
    this.attributes = attributes;
    this.name = attributes[0].name; 
    this.qualifiedLevel = attributes[0].qualifiedLevel;
}
querygen.OverriddenAttribute = OverriddenAttribute;

inherits(Cast, Measure);
/**
 * Casts a measure query's value to the given type.
 * 
 * @class
 * @param {MeasureQuery} measureQuery
 * @param {Type} type
 */
function Cast(measureQuery, type) {
    this.measureQuery = measureQuery;
    this.type = type;
}
querygen.Cast = Cast;

inherits(Operator, Measure);
/**
 * Applies a named operator to the given measure
 * 
 * @class
 * @param {MeasureQuery[]} measureQueries
 * @param {String} name the name of the operator
 */
function Operator(measureQueries, name) {
    this.measureQueries = measureQueries;
    this.name = name;
}
querygen.Operator = Operator;

inherits(Application, Measure);
/**
 * @class
 * @param {Signature} signature
 * @param {Abstraction} abstraction
 * @param {InterArg[]} interArgs
 * @param {ExprArg[]} exprArgs
 */
function Application(signature, abstraction, interArgs, exprArgs) {
    this.signature = signature;
    this.interArgs = interArgs;
    this.exprArgs = exprArgs;
    this.abstraction = abstraction;
}
querygen.Application = Application;

inherits(Abstraction, Measure);
/**
 * @class
 * @param {MeasureExpr} expr
 * @param {InterArg[]} interArgs
 * @param {ExprArg[]} exprArgs
 */
function Abstraction(expr, interArgs, exprArgs) {
    this.interArgs = interArgs;
    this.exprArgs = exprArgs;
    this.expr = expr;
}
querygen.Abstraction = Abstraction;

inherits(StringMeasure, Measure);
/**
 * @class
 * @param {String} str the cubiql expression 
 */
function StringMeasure(str) {
    this.str = str;
}
querygen.StringMeasure = StringMeasure;

/**
 * @param {Measure} measure1
 * @param {Measure} measure2
 * @return {Boolean}
 */
querygen.measuresEqual = function(measure1, measure2) {
    if (measure1 instanceof Attribute && measure2 instanceof Attribute) {
        return measure1.name === measure2.name && cubiql.qLevelEqual(measure1.qualifiedLevel, measure2.qualifiedLevel);
    } else if (measure1 instanceof Metric && measure2 instanceof Metric) {
        return measure1.name === measure2.name;
    } else if (measure1 instanceof OverriddenAttribute && measure2 instanceof OverriddenAttribute) {
        return measure1.attributes.length === measure2.attributes.length &&
            measure1.attributes.every(function(meas1) {
                return measure2.attributes.some(function(meas2) {
                    return querygen.measuresEqual(meas1,meas2);
                });
            });
    }

    return false;
};

/**
 * @param {MeasureQuery[]} measureQueries
 * @param {MeasureModel} measureModel
 * @return {MeasureServiceQuery[]}
 */
querygen.measureQueriesToServiceQueries = function(measureQueries, measureModel) {
    return measureQueries.map(function(mq) {
        return querygen.measureQueryToMeasureServiceQuery(mq, measureModel);
    });
};

/**
 * @param {MeasureServiceQuery[]} serviceQueries
 * @param {MeasureModel} measureModel
 * @return {MeasureServiceRequest}
 */
querygen.serviceQueriesToServiceRequest  = function(serviceQueries, measureModel, reportPrefix) {
    var queryRequests = [],
        reportProcessors = [],
        params = [],
        relations = [],
        serviceQueryGroups = lodash.groupBy(serviceQueries, function(sq) {
            return queryutil.stringifyIntersection(sq.inter, true);
        });

    Object.keys(serviceQueryGroups).forEach(function(interStr) {
        var reportName = lodash.isUndefined(reportPrefix) ? reportPrefix : reportPrefix + '_' + performance.now(),
            queries = serviceQueryGroups[interStr],
            res = querygen.serviceQueriesToQueryRequest(queries, reportName, measureModel);
        queryRequests.push(res.queryRequest);
        reportProcessors.push(res.reportProcessor);
    });

    //     One note is that its possible that two service queries will have
    //     conflicting values for the same param/relation, which means
    //     they will need to be in two different requests.. probably
    //     solvable by independent naming

    //combine all of the params
    serviceQueries.forEach(function(sq) {
        params = queryfilter.concatParamBinding(params, sq.params);
    });

    //combine all of the relations
    serviceQueries.forEach(function(sq) {
        relations = queryfilter.concatRelationBinding(relations, sq.relations);
    });
    
    return {
        request: new MQG.Request(queryRequests, undefined, [].concat(params, relations)),
        responseProcessor: new queryresults.ResponseProcessor(reportProcessors)
    };
};

/**
 * @param {MeasureServiceQuery[]} serviceQueries
 * @param {String} reportName optional report name, defaults to 'generatedReportXXX' where XXX is the result of performance.now()
 * @return {{queryRequest: {QueryRequest}, reportProcessor: {queryresults.ReportProcessor}}
 */
querygen.serviceQueriesToQueryRequest = function(serviceQueries, reportName, measureModel) {
    reportName = lodash.isUndefined(reportName) ? 'generatedReport' + performance.now() : reportName;
    assert(serviceQueries.length > 0, 'need to pass more than zero serviceQueries to make QueryRequest');

    var inter = serviceQueries[0].inter,
        //Optimization: convert queries for 'id' attributes for levels in the intersection to key requests
        //and drop them from the query expressions 
        fixedAndUnfixedQueries = util.partition(serviceQueries, function(sq) {
            return sq.sourceQuery.measure instanceof FixedLevel;
        }),
        fixedQueries = fixedAndUnfixedQueries[0],
        keyRequests = inter.qualified_level.map(function(ql) {
                return {
                    qualified_level: ql, 
                    attribute: 'id' 
                };
            })
            .filter(function(kr) {
                //we can avoid key requests for levels for which there is a fixed level query
                return !fixedQueries.some(function(sq) {
                    return cubiql.qLevelEqual(sq.sourceQuery.qualifiedLevel, ql);
                }); 
            }),
        exprs = fixedAndUnfixedQueries[1].map(function(q) {
            //important to guard with this assertion to insure that we only reorder, not actually widen the intersection
            assert(cubiql.intersectionEqual(inter, q.inter, true), "Somehow service query expression does not match others");
            return $widenExpr(q.expr, inter, measureModel);
        });

    exprs.forEach(function(e) {
        queryutil.cleanMQGExpr(e);
    });
    return {
        queryRequest: new MQG.QueryRequest(reportName, keyRequests, exprs, true),
        reportProcessor: new queryresults.ReportProcessor(inter, [].concat(fixedAndUnfixedQueries[1], fixedQueries), keyRequests)
    };
};

/**
 * Check whether a measure query is valid, throws errors if it isn't
 * 
 * @param {MeasureQuery} measureQuery
 * @param {MeasureModel} measureModel
 */
querygen.validateMeasureQuery = function(measureQuery, measureModel) {
    //for now, only check is for OverriddenMeasureQuery measures
    if (measureQuery.measure instanceof querygen.OverriddenMeasureQuery) {
        measureQuery.measure.measureQueries.forEach(function(mq) {
            assert(cubiql.intersectionEqual(mq.mappedInter, measureQuery.mappedInter), "OverriddenMeasureQuery mappedInter must match all underlying measure queries");
            assert(lodash.isUndefined(measureQuery.filter), "an OverriddenMeasureQuery may not have a filter"); //TODO maybe this can be supported later
            querygen.validateMeasureQuery(mq, measureModel);
        });
    } else if (measureQuery.measure instanceof querygen.FilteredMeasureQuery) {
        querygen.validateMeasureQuery(measureQuery.measure.measureQuery);
    }
};

querygen.queryIsValid = function(measureQuery) {
    return !(measureQuery.validityMessages && measureQuery.validityMessages.length);
};

/**
 * Determine whether the intersection is below the metric's base
 *
 * @param {String} metricName
 * @param {MQG.Intersection} queryMetricInter
 * @param {MeasureModel} measureModel
 * @return {Boolean}
 */
var $metricBaseAboveInter = querygen.metricBaseAboveInter  = function(metricName, queryMetricInter, measureModel) {
    var baseMetricInter = measureModel.getMeasureInfo(metricName).inter,
        hasQueryLevelBelowBase = false;

    queryMetricInter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            dim = cubiql.qlevel.getDimension(ql),
            baseQl = baseMetricInter.qualified_level.find(cubiql.qlevel.labelEquals(label));

        if (!baseQl || 
            (!cubiql.qLevelEqual(baseQl, ql) && cubiql.qLevelEqual(measureModel.findHighestLevel(dim, [ql, baseQl]), baseQl)))
            hasQueryLevelBelowBase = true;
    });

    return hasQueryLevelBelowBase;
};

function $metricBaseAboveQueryInter(metricQuery, measureModel) {
    return $metricBaseAboveInter(metricQuery.measure.name, metricQuery.inter, measureModel);
}

/**
 * @param {MeasureQuery} measureQuery
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.createExprForMeasureQuery = function(measureQuery, measureModel) {
    //create the measure expression at the target metric intersection
    querygen.validateMeasureQuery(measureQuery, measureModel);
    
    measureQuery.inter = cubiql.cloneIntersection(measureQuery.inter);
    measureQuery.mappedInter = cubiql.cloneIntersection(measureQuery.mappedInter);

    var expr = querygen.createMeasureExpr(measureQuery.measure, measureQuery.inter, measureQuery.interLabelMap, measureQuery.aggMethodLookup, measureModel),
        filterGenerator = new queryfilter.FilterGenerator(measureModel);

    if (!expr) return;

    if (measureQuery.constrainByAncestor)
        expr = $applyAncestorConstraint(expr, measureModel);

    //filters are applied after mapping because they're in the mapped intersection's labels
    if (measureQuery.filter) {
        expr = filterGenerator.applyFilterToExpr(measureQuery.measure, expr, measureQuery.filter);
    }
    
    //now move expression to mappedInter
    expr = querygen.moveExprToQueryInter(expr, measureQuery.mappedInter, measureQuery.labelMap, measureQuery.aggMethodLookup, measureModel);

    return expr;
};

/**
 * @param {MeasureQuery} measureQuery
 * @param {MeasureModel} measureModel
 * @return {MeasureServiceQuery} 
 */
querygen.measureQueryToMeasureServiceQuery = function(measureQuery, measureModel) {
    var serviceQuery = {
            sourceQuery: measureQuery,
            inter: measureQuery.mappedInter,
            params: [],
            relations: []
        },
        filters = $findFilters(measureQuery),
        literalRelationMeasures;

    serviceQuery.expr = querygen.createExprForMeasureQuery(measureQuery, measureModel);

    filters.forEach(function(f) {
        serviceQuery.relations = [].concat(serviceQuery.relations, queryfilter.filterToRelationBinding(f)); 
    });

    literalRelationMeasures = $findLiteralRelationMeasures(measureQuery);

    literalRelationMeasures.forEach(function(measure) {
        var memberColumns = lodash.unzip(measure.members),
            type = measure.type,
            typeParser = type && cubiql.getParser(type),
            valueColumn = type && new MQG.Column(type, memberColumns[measure.inter.qualified_level.length].map(typeParser)),
            columnObjects = [].concat(
                measure.inter.qualified_level.map(function(ql, i) {
                    return new MQG.Column("STRING", memberColumns[i]);
                }),
                valueColumn ? [valueColumn] : []
            ),
            valueType = type ? new MQG.ValueType("SINGLETON", new MQG.Type(measure.type)) : undefined;

        serviceQuery.relations.push(
            new MQG.RelationBinding(
                new MQG.ParamExpr(measure.name, measure.inter, measure.type),
                new MQG.LiteralExpr("GENERAL", 
                    new MQG.BaseSignature(measure.inter, valueType), 
                columnObjects)
            )
        );
    });

    return serviceQuery;
};

function $findFiltersFromCompositeFilter(filter) {
    var filters = [];

    filter.filters.forEach(function(f) {
        if (f instanceof queryfilter.CompositeFilter) {
            filters = filters.concat($findFiltersFromCompositeFilter(f));
        } else {
            filters.push(f);
        }
    });

    return filters;
}

function $findFilters(measureQuery) {
    var filters = [];
    if (!measureQuery) 
        return filters;

    if (measureQuery.filter) {
        if (measureQuery.filter instanceof queryfilter.CompositeFilter) {
            $findFiltersFromCompositeFilter(measureQuery.filter).forEach(function(f) {
                filters.push(measureQuery.filter);
                filters = [].concat(filters, $findFilters(f.measureQuery));
            });
        } else {
            filters.push(measureQuery.filter);
            filters = [].concat(filters, $findFilters(measureQuery.filter.measureQuery));
        }
    }

    if (measureQuery.measure instanceof FilteredMeasureQuery)
        filters = [].concat(filters, $findFilters(measureQuery.measure.measureQuery));

    if (measureQuery.measure instanceof OverriddenMeasureQuery)
        filters = [].concat(filters, lodash.flatten(measureQuery.measure.measureQueries.map($findFilters)));

    if (measureQuery.measure instanceof Cast)
        filters = [].concat(filters, $findFilters(measureQuery.measure.measureQuery));

    if (measureQuery.measure instanceof Operator)
        filters = [].concat(filters, lodash.flatten(measureQuery.measure.measureQueries.map($findFilters)));

    return filters;
}

function $findLiteralRelationMeasures(measureQuery) {
    var measures = [];
    if (!measureQuery)
        return measures;

    if (measureQuery.measure instanceof LiteralRelation)
        measures.push(measureQuery.measure);

    if (measureQuery.filter)
        measures = [].concat(measures, $findLiteralRelationMeasuresFromFilter(measureQuery.filter));

    if (measureQuery.measure instanceof FilteredMeasureQuery)
        measures = [].concat(measures, $findLiteralRelationMeasures(measureQuery.measure.measureQuery));

    if (measureQuery.measure instanceof OverriddenMeasureQuery)
        measures = [].concat(measures, lodash.flatten(measureQuery.measure.measureQueries.map($findLiteralRelationMeasures)));

    if (measureQuery.measure instanceof Cast)
        measures = [].concat(measures, $findLiteralRelationMeasures(measureQuery.measure.measureQuery));

    if (measureQuery.measure instanceof Operator)
        measures = [].concat(measures, lodash.flatten(measureQuery.measure.measureQueries.map($findLiteralRelationMeasures)));

    return measures;
}

function $findLiteralRelationMeasuresFromFilter(filter) {
    var measures = [];
    if (!filter)
        return measures;

    if (filter.measureQuery) {
        measures = [].concat(measures, $findLiteralRelationMeasures(filter.measureQuery));
    } else if (filter instanceof queryfilter.CompositeFilter) {
        filter.filters.forEach(function(f) {
            measures = [].concat(measures, $findLiteralRelationMeasuresFromFilter(f));
        });
    } else if (filter instanceof queryfilter.MeasureQueryFilter) {
        filter.queries.forEach(function(q) {
            measures = [].concat(measures,  $findLiteralRelationMeasures(q));
        });
    }

    return measures;
}

querygen.getCoreMeasure = function(measure) {
    if (measure instanceof FilteredMeasureQuery) {
        return querygen.getCoreMeasure(measure.measureQuery.measure);
    } else if (measure instanceof OverriddenMeasureQuery) {
        return querygen.getCoreMeasure(measure.measureQueries[0].measure);
    } else {
       return measure;
    } 
};

/**
 * Move an expression to a target intersection if possible through a combination of
 * aggregation and relabelling
 *
 * @param {MQG.Expr} expr
 * @param {MQG.Intersection} targetInter
 * @param {LabelMap} labelMap
 * @param {AggMethodLookup} aggMethodLookup
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.moveExprToQueryInter = function(expr, targetInter, labelMap, aggMethodLookup, measureModel) {
    // There are three basic operations here: 
    //  1) Move the expression to the correct intersection in terms of its own labels.
    //     In order to do this, we have to relabel the expression's levels, calculate
    //     the new base intersection (which may have changed if the label map converts more
    //     than one intersection the same label), and then aggregate the original expression
    //     to the correct base intersection _IN THE ORIGINAL LABELS_. At the end of this step,
    //     you have an expression, not relabelled, at a potentially different intersection.
    //
    //  2) Now relabel the properly aggregated intersection if necessary
    //
    //  3) Now, if necessary, widen the relabelled, aggregated intersection to the final intersection.
    //     This will occur if, even after relabelling, the expression simply doesn't have some 
    //     labels in the target intersection
    
    var exprInter = querygen.getIntersectionOfExpr(expr, false, measureModel),
        // apply the label map to the original intersection
        relabelledExprInter = querygen.applyLabelMapToIntersection(labelMap, exprInter),
        // now using the relabelled intersection's levels, find the base intersection 
        levelsInTarget = relabelledExprInter.qualified_level.filter(function(ql) {
            var label = cubiql.qlevel.getLabel(ql);
            return targetInter.qualified_level.some(cubiql.qlevel.labelEquals(label));
        }),
        relabelledBaseInter = querygen.calcBaseIntersection(levelsInTarget, measureModel),
        reducedBaseLevels = [], 
        reducedBaseInter;

    // now, from the relabelling base intersection, figure out the originally-labelled levels that
    // correspond to the new intersection and make an intersection from it
    exprInter.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            mappedLabel = labelMap[label] || label,
            matches = relabelledBaseInter.qualified_level.filter(cubiql.qlevel.labelEquals(mappedLabel)),
            higherLevel,
            relabeledLevel;

        if (matches.length > 0 && cubiql.qLevelEqual(ql, matches[0])) {
            higherLevel = targetInter.qualified_level.find(function(inter) { return inter.label === matches[0].label; });
            if (higherLevel) {
                relabeledLevel = cubiql.cloneQualifiedLevel(ql);
                relabeledLevel.level = higherLevel.level;
                reducedBaseLevels.push(relabeledLevel);
            } else {
                reducedBaseLevels.push(ql);            
            }
        }      
    });

    reducedBaseInter = new MQG.Intersection(reducedBaseLevels);
    
    //if the intersection changed, aggregate to it 
    expr = querygen.explicitAggExpr(expr, reducedBaseInter, aggMethodLookup, measureModel);

    //now apply the relabelling to the expression
    expr = querygen.applyLabelMapToExpr(labelMap, expr, measureModel);
    
    //now widen the relabelled expression to the target intersection
    //if necessary 
    expr = $widenExpr(expr, targetInter, measureModel);

    return expr;
};

/**
 * Given an expression, apply the ancestor constraint to any dimensions which
 * occur more than once in the intersection.  e.g.:
 *
 *   If the input expression is @ ( childProduct:sku, parentProduct:class, Location:store, Calendar:week )
 *   the dice will be applied such that parentProduct:class must be an ancestor of childProduct:sku.
 *
 * @param {MQG.Expr} expr
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
function $applyAncestorConstraint(expr, measureModel) {
    var inter = querygen.getIntersectionOfExpr(expr, false, measureModel),
        qlsByDim = lodash.groupBy(inter.qualified_level, 'dimension'),
        multiLevelDims = Object.keys(qlsByDim).filter(function(dim) {
            return qlsByDim[dim].length > 1;
        }),
        ancestorDicers;

    //for any dimensions with multiple QLs in this intersection,
    //determine which is parent and which is child, then produce
    //an ancestor expression
    ancestorDicers = multiLevelDims.map(function(dim) {
        var qls = qlsByDim[dim];
        assert(qls.length === 2, "Only support ancestor constraints for exactly 2 levels currently");
        //sort by hierarchy 
        qls = cubiql.sortQualifiedLevelsByHierarchy(qls, measureModel);

        //first is child, second is parent
        return new MQG.Ancestor(
            dim, 
            cubiql.qlevel.getLevel(qls[0]), // child level
            cubiql.qlevel.getLevel(qls[1]), // parent level
            "tempChildLabel", // child label
            cubiql.qlevel.getLabel(qls[1]) // parent label
        ).relabelBy([new MQG.LabelMap("tempChildLabel", cubiql.qlevel.getLabel(qls[0]))]);
    });

    if (ancestorDicers.length > 0)
        return expr.diceBy(ancestorDicers, false); //is a conjunction of all ancestors, because all are required
    else 
        return expr;
}

/**
 * @param {Measure} measure
 * @param {MQG.Intersection} inter
 * @param {AggMethodLookup} aggMethodLookup
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.createMeasureExpr = function(measure, inter, interLabelMap, aggMethodLookup, measureModel) {
    if (measure instanceof Metric) {
        return querygen.createMetricExpr(measure, inter, interLabelMap, aggMethodLookup, measureModel);
    } else if (measure instanceof OverriddenAttribute) {
        return querygen.createOverriddenAttributeExpr(measure, inter, interLabelMap, measureModel);
    } else if (measure instanceof Attribute) {
        return querygen.createAttributeExpr(measure.name, measure.qualifiedLevel, inter, interLabelMap, measureModel);
    } else if (measure instanceof ConstantTerm) {
        return querygen.createConstantTermExpr(measure, inter);
    } else if (measure instanceof LiteralRelation) {
        return querygen.createLiteralRelationExpr(measure);
    } else if (measure instanceof FixedLevel) {
        return querygen.createFixedLevelExpr(measure);
    } else if (measure instanceof LevelMap) {
        return querygen.createLevelMapExpr(measure, measureModel);
    } else if (measure instanceof FilteredMeasureQuery) {
        return querygen.createFilteredMeasureQueryExpr(measure, inter, interLabelMap, aggMethodLookup, measureModel);
    } else if (measure instanceof OverriddenMeasureQuery) {
        return querygen.createOverriddenMeasureQueryExpr(measure, measureModel);
    } else if (measure instanceof Cast) {
        return querygen.createCastExpr(measure, inter, aggMethodLookup, measureModel);
    } else if (measure instanceof Operator) {
        return querygen.createOperatorExpr(measure, inter, aggMethodLookup, measureModel);
    } else if (measure instanceof Application) {
        return querygen.createApplicationExpr(measure, measureModel);
    } else {
        throw new Error("can't create measure expr");
    }
};

querygen.createFilteredMeasureQueryExpr = function(measure, inter, interLabelMap, aggMethodLookup, measureModel) {
    var measureQuery = measure.measureQuery,
        unaggregatedMQExpr = querygen.createExprForMeasureQuery(measureQuery, measureModel),
        coreMeasure = querygen.getCoreMeasure(measureQuery.measure),
        metricInfo,
        isRecalc = false;

    if (coreMeasure instanceof Metric) {
        metricInfo = measureModel.getMeasureInfo(coreMeasure.name);
        isRecalc = metricInfo.recalc;
        
        if (unaggregatedMQExpr instanceof MQG.AppExpr) {
            // pull up the inner AppExpr b/c recalcs always create an AppExpr at the base intersection
            // which is effectively a no-op
            unaggregatedMQExpr = unaggregatedMQExpr.application.abstraction;
        }
        
        assert(!isRecalc || unaggregatedMQExpr instanceof MQG.MetricExpr || unaggregatedMQExpr instanceof MQG.RelabelExpr, "Not possible to aggregate multiple nested levels of filter queries for recalcs.");
    }

    return querygen.aggAndRelabelExpr(unaggregatedMQExpr, inter, interLabelMap, aggMethodLookup, isRecalc, measureModel);
};

querygen.createOverriddenMeasureQueryExpr = function(measure, measureModel) {
    var queryExprs = measure.measureQueries.map(function(mq) {
        return querygen.createExprForMeasureQuery(mq, measureModel);
    }); 

    return new (Function.prototype.bind.apply(MQG.OverrideExpr, [null].concat(queryExprs)));
};

/**
 * @param {LevelMap} measure
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.createLevelMapExpr = function(measure, measureModel) {
    //TODO assertion to force same-hierarchy
    //TODO will it ever be incorrect to use 'id' here? If so probably have to ask measureModel for the refmode
    var mapExpr = new MQG.AttributeExpr(measure.parentLevel, 'id');

    return $widenExpr(mapExpr, new MQG.Intersection(measure.childLevel), measureModel);
};

/**
 * @param {ConstantTerm} measure
 * @return {MQG.Expr}
 */
querygen.createFixedLevelExpr = function(measure) {
    return undefined; 
};

/**
 * @param {ConstantTerm} measure
 * @param {MQG.Intersection} inter
 * @return {MQG.Expr}
 */
querygen.createConstantTermExpr = function(measure, inter) {
    var expr = new MQG.ConstantExpr(measure.constantValue, measure.type);
    if (inter)
        expr = expr.widenBy(inter);

    return expr;
};

querygen.createLiteralRelationExpr = function(measure) {
    return new MQG.ParamExpr(
        measure.name,
        cubiql.cloneIntersection(measure.inter),
        measure.type
    );
};

querygen.createAbstractionExpr = function(measure, measureModel) {
    assert(measure.expr instanceof StringMeasure, "Only support string measures in abstractions currently");
    
    return new MQG.AbsExpr(measure.interArgs, measure.exprArgs, querygen.createStringMeasureExpr(measure.expr));
};

querygen.createStringMeasureExpr = function(stringMeasure) {
    return new MQG.Expr(undefined, undefined, stringMeasure.str);
};

querygen.createApplicationExpr = function(measure, measureModel) {
    var expr = new MQG.AppExpr(querygen.createAbstractionExpr(measure.abstraction, measureModel), measure.interArgs, measure.exprArgs);
    expr.$signature = measure.signature;
    return expr;
};

function generateRelabelsAndSplits(interLabelMap) {
    var relabelMaps = [],
        splitMaps = [];
    
    interLabelMap = interLabelMap || {};

    Object.keys(interLabelMap).forEach(function(srcLabel) {
        var targetLabels = interLabelMap[srcLabel].slice(); //copy so we can modify
        if (!targetLabels.length) return;
        //if the source label doesn't show up in the target labels, 
        //we need to apply a relabel from the source to the first target label
        //then removing the first target label (or the same-label target if it exists),
        if (targetLabels.indexOf(srcLabel) === -1) {
            relabelMaps.push(new MQG.LabelMap(srcLabel, targetLabels[0]));
            //CHANGE SRC LABEL for any future splits b/c its been relabelled to this target
            srcLabel = targetLabels[0];
            targetLabels = targetLabels.slice(1, targetLabels.length);
        }

        //create a split from the source label to any other target labels
        if (targetLabels.length) {
            targetLabels.forEach(function(targetLabel) {
                if (targetLabel !== srcLabel)
                    splitMaps.push(new MQG.LabelMap(srcLabel, targetLabel));
            });
        }
    });
    
    return {
        relabelMaps: relabelMaps,
        splitMaps: splitMaps
    };
}

querygen.generateRelabelsAndSplits = generateRelabelsAndSplits;

function applyRelabelsAndSplits(expr, relabelMaps, splitMaps) {
    if (relabelMaps.length)
        expr = expr.relabelBy(relabelMaps);

    if (splitMaps.length)
        expr = new MQG.SplitExpr(expr, splitMaps); 
        
    return expr;
}

/**
 * @param {MQG.Expr}  expr 
 * @param {MQG.Intersection} inter
 * @param {MultiLabelMap} interLabelMap
 * @param {AggMethodLookup} aggMethodLookup
 * @param {Boolean} isRecalc
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.aggAndRelabelExpr = function(expr, inter, interLabelMap, aggMethodLookup, isRecalc, measureModel) {
    //step 1, for any src labels which are keys of the interLabelMap
    var relabelsAndSplits = generateRelabelsAndSplits(interLabelMap),
        relabelMaps = relabelsAndSplits.relabelMaps,
        splitMaps = relabelsAndSplits.splitMaps;

    if (!isRecalc) {
        //step 3, apply any relabels and splits
        expr = applyRelabelsAndSplits(expr, relabelMaps, splitMaps);
        //step 4, explicitly aggregate
        expr = querygen.explicitAggExpr(expr, inter, aggMethodLookup, measureModel);
    } else {
        //recalcs can't be split
        assert(!splitMaps.length, "Recalc exprs " + queryutil.stringifyExpr(expr) + " cannot be used in a split-dimension query.");

        //For recalcs, there is a somewhat different path. All relabelling has to be done after aggregation
        //so reverse the prior labelling in the intersection that is applied.
        if (expr instanceof MQG.RelabelExpr) {
            var relabelMappings = expr.relabel.map,
                // relabel inter to match the base labels
                invertedInter = inter.qualified_level && inter.qualified_level.map(function(ql) {
                    relabelMappings.forEach(function(mapping) {
                        if (ql.label === mapping.target) {
                            ql = cubiql.relabelQL(ql, mapping.source);
                        }
                    });
                    
                    return ql;
                });
                
            expr.relabel.expr.application.inter_arg = [new MQG.InterArgument("inter", new MQG.Intersection(invertedInter))];
        } else {
            expr = new MQG.AppExpr(expr, 
               new MQG.InterArgument('inter', 
                   new MQG.Intersection(inter.qualified_level.map(function(tgtQl) {
                       var tgtLabel = cubiql.qlevel.getLabel(tgtQl),
                           relabelMap = relabelMaps.find(function(map) {
                               return map.target === tgtLabel;
                           });
            
                       if (relabelMap)
                           return cubiql.relabelQL(tgtQl, relabelMap.source);
                       else
                           return tgtQl;
                   }))
               )
            );
        }
        //now apply relabelling
        if (relabelMaps.length)
            expr = expr.relabelBy(relabelMaps);
    }

    //now we just need to widen this expression to the target intersection (may be a no op)
    return $widenExpr(expr, inter, measureModel); 
};


/**
 * @param {Metric} metric
 * @param {MQG.Intersection} inter
 * @param {AggMethodLookup} aggMethodLookup
 * @return {MQG.Expr}
 */
querygen.createMetricExpr = function(metric, inter, interLabelMap, aggMethodLookup, measureModel) {
    var metricInfo = measureModel.getMeasureInfo(metric.name),
        expr = new MQG.MetricExpr(metric.name),
        isRecalc = metricInfo.recalc;
        
    return querygen.aggAndRelabelExpr(expr, inter, interLabelMap, aggMethodLookup, isRecalc, measureModel);
};

/**
 * @param {MQG.Expr} expr
 * @param {MQG.Intersection} inter
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
function $widenExpr(expr, inter, measureModel) {
    inter = cubiql.cloneIntersection(inter);

    var exprInter = querygen.getIntersectionOfExpr(expr, false, measureModel),
        exprLabels = exprInter.qualified_level.map(cubiql.qlevel.getLabel),
        tgtLabels = inter.qualified_level.map(cubiql.qlevel.getLabel),
        labelsNotInTarget = exprLabels.filter(function(l) {
            return tgtLabels.indexOf(l) === -1;
        }); 

    //if the exprInter has labels that are not in the target intersection
    //first COLLECT them out prior to widening 
    if (labelsNotInTarget.length > 0) {
        exprInter = new MQG.Intersection(exprInter.qualified_level.filter(function(ql) {
            return labelsNotInTarget.indexOf(cubiql.qlevel.getLabel(ql)) === -1;
        }));

        expr = expr.aggBy('COLLECT', exprInter); 
    }    
    
    if (!cubiql.intersectionEqual(exprInter, inter, true)) {
        expr = expr.widenBy(inter);
    }

    return expr;
}

/**
 * Converts a query.AggMethod or string to a MeasureProtocol.AggExpr.Method.
 * 
 * @param  {AggMethod|String} aggMethod
 * @return {MeasureProtocol.AggExpr.Method}
 */
querygen.aggMethodToMQGAggMethod = function(aggMethod) {
    if (lodash.isObject(aggMethod)) {
        return lodash.pick(aggMethod, ["primitive", "named", "composite", "header_sort_level"]);
    } else if (lodash.isString(aggMethod)) {
        return { primitive: aggMethod };
    } else {
        throw new Error("Invalid aggMethod: " + aggMethod);
    }
};

/**
 * @param {MQG.Expr} expr
 * @param {MQG.Intersection} targetInter
 * @param {AggMethodLookup} aggMethodLookup
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.explicitAggExpr = function(expr, targetInter, aggMethodLookup, measureModel) {
    var exprInter = querygen.getIntersectionOfExpr(expr, false, measureModel); 

    //skip out if unneeded
    if (cubiql.intersectionEqual(exprInter, targetInter, true, true))
        return expr;

    //track current intersection as we step up to the target
    var currInter = cubiql.cloneIntersection(exprInter), 
        nextInter;

    var levelsByMethod = lodash.groupBy(exprInter.qualified_level, function(ql) {
        var method = aggMethodLookup[cubiql.qlevel.getLabel(ql)];
        return method ? (method.primitive || JSON.stringify(method)) : "COLLECT"; 
    }); 

    lodash.forEach(levelsByMethod, function(levels, methodKey) {
        var method = aggMethodLookup[cubiql.qlevel.getLabel(levels[0])] || methodKey, //they all share the same method so this is safe
            mqgMethod = querygen.aggMethodToMQGAggMethod(method);

        nextInter = currInter;
        //step through all the levels to calculate the intersection to move to
        //for this method
        levels.forEach(function(ql) {
            var label = cubiql.qlevel.getLabel(ql),
                targetQls = targetInter.qualified_level.filter(cubiql.qlevel.labelEquals(label)),
                labelInTarget = targetQls.length > 0,
                targetQl = labelInTarget ? targetQls[0] : undefined,
                dim = cubiql.qlevel.getDimension(ql),
                targetLevelHigher = labelInTarget && cubiql.qLevelEqual(measureModel.findHighestLevel(dim, [ql, targetQl]), targetQl);

            if (!labelInTarget) {
                //label was aggregated to all, since its implicit we can just drop it
                nextInter = cubiql.projectLabelFromIntersection(nextInter, label); 
            } else if (targetLevelHigher) { //only do it if it is actually an aggregation.. same or lower levels can't be aggregated
                //if the method specifies the hierarchy for this level, but it wasn't projected, use that hierarchy
                if (method.hierarchy && method.label === label) {
                    targetQls = targetQls.map(function(tql) {
                        var newQl = cubiql.cloneQualifiedLevel(tql);
                        newQl.hierarchy = method.hierarchy;
                        return newQl;
                    });
                }

                nextInter = cubiql.stepIntersectionToLevels(nextInter, [targetQls[0]]); 
            } 
        });

        //only if the next intersection is different, agg to it
        if (!cubiql.intersectionEqual(nextInter, currInter, true)) {
            assert(!(mqgMethod && mqgMethod.composite), "Explicit aggregation using composite aggregations is not currently supported. Only default composite aggregations are supported.");
            expr = expr.aggBy(mqgMethod, nextInter);
            currInter = nextInter;
        }
    });

    return expr; 
}; 

/**
 * @param {String} attribute 
 * @param {MQG.QualifiedLevel} qualifiedLevel the level of the attribute
 * @param {MQG.Intersection} intersection (optional) the intersection of the attribute expression, widened if necessary 
 * @return {MQG.AttributeExpr}
 */
querygen.createAttributeExpr = function(attribute, qualifiedLevel, intersection, interLabelMap, measureModel) {
    //use an unlabelled version first
    var baseQualifiedLevel = new MQG.QualifiedLevel(qualifiedLevel.dimension, qualifiedLevel.level, qualifiedLevel.hierarchy),
        expr = new MQG.AttributeExpr(baseQualifiedLevel, attribute),
        exprInter,
        relabelMaps = [];

    if (interLabelMap) {
        lodash.forEach(interLabelMap, function(targets, source) {
            relabelMaps.push(new MQG.LabelMap(source, targets[0]));
        });

        //fall back label map if the dimension name is not mapped
        if (!lodash.isUndefined(qualifiedLevel.label) && qualifiedLevel.dimension !== qualifiedLevel.label &&
            !relabelMaps.some(function(m) { return m.source === qualifiedLevel.dimension; }))
            relabelMaps.push(new MQG.LabelMap(qualifiedLevel.dimension, qualifiedLevel.label));

        if (relabelMaps.length)
            expr = expr.relabelBy(relabelMaps);
    }


    exprInter = querygen.getIntersectionOfExpr(expr, false, measureModel);
    if (intersection && 
       !cubiql.intersectionEqual(exprInter, intersection, true, true)) {

        expr = $widenExpr(expr, intersection, measureModel);
    }

    return expr;
};

/**
 * @param {Measure} measure
 * @param {MQG.Intersection} inter
 * @param {AggMethodLookup} aggMethodLookup
 * @param {MeasureModel} measureModel
 * @return {MQG.CastExpr}
 */
querygen.createCastExpr = function(measure, inter, aggMethodLookup, measureModel) {
    return new MQG.CastExpr(querygen.createExprForMeasureQuery(measure.measureQuery, measureModel), new MQG.Type(measure.type));
};

/**
 * @param {Measure} measure
 * @param {MQG.Intersection} inter
 * @param {AggMethodLookup} aggMethodLookup
 * @param {MeasureModel} measureModel
 * @return {MQG.OpExpr}
 */
querygen.createOperatorExpr = function(measure, inter, aggMethodLookup, measureModel) {
    var operator = measure.name,
        measureExprs = measure.measureQueries.map(function(mq) {
            return querygen.createExprForMeasureQuery(mq, measureModel);
        });
    assert(measureModel.getOperator(operator), "Operator with name: " + operator + " not found in measure model.");
    
    return new MQG.OpExpr("NAMED", measureExprs, operator);
};

/**
 * @param {OverriddenAtribute} Overridden attribute containing array of Attribute elements
 * @param {MQG.Intersection} intersection (optional) the intersection of the attribute expression, widened if necessary
 * @return {MQG.OverrideExpr}
 */
querygen.createOverriddenAttributeExpr = function(overriddenAttribute, intersection, interLabelMap, measureModel) {
    var attributeExpressions = overriddenAttribute.attributes.map(function(attribute){
        return querygen.createAttributeExpr(attribute.name, attribute.qualifiedLevel, intersection, interLabelMap, measureModel);
    });

    //This magic is explained here: http://stackoverflow.com/a/8843181
    var expr = new (Function.prototype.bind.apply(MQG.OverrideExpr, [null].concat(attributeExpressions)));
    return expr;
};

/**
 * @param {MQG.QualifiedLevel[]} levels
 * @param {MeasureModel} measureModel
 * @return {MQG.Intersection}
 */
querygen.calcBaseIntersection = function(levels, measureModel) {
    var groupedLevels = cubiql.getSortedQualifiedLevelsGroupedByLabel(levels, measureModel);
    //return the lowest of each label
    return new MQG.Intersection(lodash.compact(Object.keys(groupedLevels).map(function(label) {
        return groupedLevels[label][0];
    })));
};

/**
 * Given an intersection and labelMap, return an intersection
 * with the labelMap applied
 *
 * @param {LabelMap} labelMap
 * @param {MQG.Intersection} intersection
 * @return {MQG.Intersection}
 */
querygen.applyLabelMapToIntersection = function(labelMap, intersection) {
    var newInter = cubiql.cloneIntersection(intersection);

    //move through map, find the canonical level and relabel it it in the new intersection
    lodash.forIn(labelMap, function(tgtLabel, srcLabel) {
        newInter.qualified_level.filter(cubiql.qlevel.labelEquals(srcLabel))
            .forEach(function(ql) {
                ql.label = tgtLabel;
            });
    });
    return newInter;
};

querygen.reverseMultiLabelMapOnIntersection = function(multiLabelMap, intersection) {
    var mqgLabelMaps = querygen.getMQGLabelMapsFromMultiLabelMap(multiLabelMap),
        relabels = mqgLabelMaps.relabels;

    assert(mqgLabelMaps.splits.length === 0, "Can't reverse a split because it produces an illegal intersection");

    return new MQG.Intersection(intersection.qualified_level.map(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            labelMap = relabels.find(function(map) {
                return map.target == label;
            });

        return labelMap ? cubiql.relabelQL(ql, labelMap.source) : cubiql.cloneQualifiedLevel(ql);
    }));
};

/**
 * @param {MultiLabelMap} multiLabelMap
 * @return {{relabels: MQG.LabelMap[], splits: MQG.LabelMap[]}}
 */
querygen.getMQGLabelMapsFromMultiLabelMap = function(multiLabelMap) {
    return lodash.chain(multiLabelMap).reduce(function(reduction, targetLabels, srcLabel) {
        // a relabel
        if (targetLabels.length === 1) {
            reduction.relabels.push(new MQG.LabelMap(srcLabel, targetLabels[0]));
        }
        
        // split dimension
        if (targetLabels.length > 1) {
            reduction.splits = reduction.splits.concat(targetLabels
                .filter(function(lbl) { return lbl !== srcLabel; })
                .map(function(lbl) { return new MQG.LabelMap(srcLabel, lbl); })
            );
        }
        
        return reduction;
    }, { relabels: [], splits: [] }).value();
};

querygen.applyMultiLabelMapToIntersection = function(multiLabelMap, intersection) {
    var mqgLabelMaps = querygen.getMQGLabelMapsFromMultiLabelMap(multiLabelMap);
    
    return querygen.calculateSplitIntersection(querygen.calculateRelabelIntersection(intersection, mqgLabelMaps.relabels), mqgLabelMaps.splits);
};

/**
 * Given an expression and label map, return a new expression
 * that has been relabelled according to the map
 *
 * @param {LabelMap} labelMap
 * @param {MQG.Expr} expr
 * @param {MeasureModel} measureModel
 * @return {MQG.Expr}
 */
querygen.applyLabelMapToExpr = function(labelMap, expr, measureModel) {
    //TODO probably can be more efficient if it matters than to simply
    //     always apply a RelabelExpr, e.g. in the case of simple things
    //     like MetricExpr maybe we can surgically alter the 
    //     intersection of the expression, but for now we'll just
    //     RelabelExpr on anything

    labelMap = labelMap || {};
    var exprInter = querygen.getIntersectionOfExpr(expr, false, measureModel),
        labelMaps = Object.keys(labelMap).map(function(srcLabel) {
            var tgtLabel = labelMap[srcLabel];

            return new MQG.LabelMap(srcLabel, tgtLabel); 
        }).filter(function(lblMap) {
            return exprInter.qualified_level.some(cubiql.qlevel.labelEquals(lblMap.source)) &&
                lblMap.source !== lblMap.target; 
        });

    if (labelMaps.length > 0)
        return expr.relabelBy(labelMaps);
    else
        return expr;
};

querygen.cloneMeasureQuery = function(query) {
    return {
        label: query.label,
        measure: query.measure,
        inter: query.inter,
        interLabelMap: query.interLabelMap,
        validityMessages: query.validityMessages,
        aggMethodLookup: query.aggMethodLookup,
        filter: queryfilter.cloneFilter(query.filter),
        constrainByAncestor: query.constrainByAncestor,
        sortConfig: query.sortConfig,
        mappedInter: query.mappedInter,
        labelMap: query.labelMap,
        functionalQuery: query.functionalQuery
    };
};

/**
 * Returns a new MQG Intersection with the same levels as 'inter' but with a label/dimension-order that matches the
 * orderedIntersection.
 *
 * @param MQG.Intersection inter
 * @param MQG.Intersection orderedIntersection
 * @return MQG.Intersection
 */
function $conformDimensionOrder(intersection, orderedIntersection) {
    var newInter = new MQG.Intersection([]);
    orderedIntersection.qualified_level.forEach(function(ordQl) {
        var matches = intersection.qualified_level.filter(cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(ordQl)));
        newInter.qualified_level = newInter.qualified_level.concat(matches);
    });
    return newInter;
}

/**
 * @param MQG.Expr expr
 * @param Boolean ordered whether or not to order the intersection by the measure service rules or not (default: false)
 * @param MeasureModel measureModel the measure model, required to support ordered = true
 * @return MQG.Intersection
 */
querygen.getIntersectionOfExpr = function(expr, ordered, measureModel) {
    var kind = expr.kind,
        intersection,
        interArg, // used for AppExpr's
        origIntersection,
        orderedIntersection; //used if we need to look at two intersections at once to decide how to order
    ordered = lodash.isUndefined(ordered) ? false : ordered;
    if (ordered)
        assert(measureModel, "measure model must be passed to getIntersectionOfExpr if ordered is true");

    assert(!lodash.isUndefined(kind), "Expected expression to have attribute kind, make sure you are passing an MQG.Expr");
    assert(kind !== "COND", "CondExpr not yet supported by getIntersectionOfExpr");

    switch (kind) {
        case "DEMOTE":
            origIntersection = querygen.getIntersectionOfExpr(expr.demote.expr, ordered, measureModel);
            assert(origIntersection, "unable to find original intersection for DemoteExpr");
            intersection = $calculateDemoteIntersection(origIntersection, expr.demote);    
            break;
        case "ATTRIBUTE":
            intersection = new MQG.Intersection(expr.attribute.qualified_level);
            break;
        case "FILTER":
            intersection = querygen.getIntersectionOfExpr(expr.filter.expr, ordered, measureModel);
            break;
        case "DICE":
            intersection = querygen.getIntersectionOfExpr(expr.dice.expr, ordered, measureModel);
            break;
        case "CAST":
            intersection = querygen.getIntersectionOfExpr(expr.cast.expr, ordered, measureModel);
            break;
        case "OP":
            intersection = querygen.getIntersectionOfExpr(expr.op.expr[0], ordered, measureModel);
            break;
        case "DROP":
            intersection = querygen.getIntersectionOfExpr(expr.drop.expr, ordered, measureModel);
            break;
        case "DIFFERENCE":
            intersection = querygen.getIntersectionOfExpr(expr.difference.left, ordered, measureModel);
            break;
        case "AGGREGATION":
            assert(!lodash.isUndefined(expr.aggregation.inter), "getIntersectionOfExpr does not support AggExprs that use Grouping yet");
            intersection = expr.aggregation.inter;
            break;
        case "METRIC":
            assert(expr.metric.inter || measureModel, "measure model must be passed to getIntersectionOfExpr for a MetricExpr");
            intersection = expr.metric.inter || measureModel.getMeasureInfo(expr.metric.name).inter;
            if (ordered) {
                orderedIntersection = measureModel.getMeasureInfo(expr.metric.name).inter;
                intersection = $conformDimensionOrder(intersection, orderedIntersection);
            }
            break;
        case "WIDEN":
            intersection = expr.widen.inter;
            if (ordered) {
                orderedIntersection = querygen.getIntersectionOfExpr(expr.widen.expr, ordered, measureModel);
                if (cubiql.isDimensionalSubset(intersection, orderedIntersection)) {
                    //if its a subset, we use the order of the underlying expression but
                    //subsetted to fix inside this intersection
                    intersection = $conformDimensionOrder(intersection, orderedIntersection);
                } else {
                    cubiql.sortIntersectionByLabel(intersection);
                }
            }
            break;
        case "PARAM":
            intersection = expr.param.signature.intersection;
            break;
        case "OVERRIDE":
            //if override, just use the first expression
            intersection = expr.override.expr.length > 0 ? querygen.getIntersectionOfExpr(expr.override.expr[0], ordered, measureModel) : undefined; 
            break;
        case "COMPOSITE":
            //if composite, just use the first expression
            intersection = expr.composite.expr.length > 0 ? querygen.getIntersectionOfExpr(expr.intersection.expr[0], ordered, measureModel) : undefined; 
            break;
        case "SPLIT":
            origIntersection = querygen.getIntersectionOfExpr(expr.split.expr, ordered, measureModel);
            assert(origIntersection, "unable to find original intersection for SplitExpr");
            intersection = $calculateSplitIntersection(origIntersection, expr.split.map);    
            //measure service always uses label sort for Split
            if (ordered) 
                cubiql.sortIntersectionByLabel(intersection);
            break;
        case "RELABEL":
            origIntersection = querygen.getIntersectionOfExpr(expr.relabel.expr, ordered, measureModel);
            assert(origIntersection, "unable to find original intersection for RelabelExpr");
            intersection = $calculateRelabelIntersection(origIntersection, expr.relabel.map);    
            break;
        //handling of UpdateExprs 
        case "SPREAD":
            intersection = expr.spread.inter;
            break;
        case "REMOVE":
            intersection = expr.remove.inter;
            break;
        case "TERM":
            intersection = new MQG.Intersection([]); //terms are always empty intersections
            break;
        case "APPLICATION":
            if (expr.$signature) {
                intersection = expr.$signature.intersection;
            } else {
                interArg = expr.application.inter_arg[0];
                if (!lodash.isUndefined(interArg)) {
                    intersection = interArg.inter;
                } else {
                    intersection = querygen.getIntersectionOfExpr(expr.application.abstraction, ordered, measureModel);
                }
            }
            break;
        case "LITERAL":
            intersection = expr.literal.signature.intersection;
            break;
        default:
            throw new Error("Unable to find intersection of Expr of kind '" + kind + "'");
    }

    if (lodash.isUndefined(intersection)) {
        console.error("failed to find intersection for expr");
        console.error(expr);
    }
    //if its just the array of qualified_levels wrap it
    if (intersection && lodash.isUndefined(intersection.qualified_level))
        intersection = new MQG.Intersection(intersection);

    return cubiql.cloneIntersection(intersection);
};

/**
 * @param MQG.Intersection origIntersection
 * @return MQG.Intersection
 */
function $calculateDemoteIntersection(origIntersection, demote) {
    assert(demote.label || demote.dimension, 'Demote has no label or dimension');
    var calcLevels = origIntersection.qualified_level.filter(function(ql) {
        if (demote.label && cubiql.qlevel.getLabel(ql) === demote.label) {
            return false;
        } else if (demote.dimension && cubiql.qlevel.getDimension(ql) === demote.dimension) {
            return false;
        } else {
            return true;
        }
    });    
    return new MQG.Intersection(calcLevels);
}

querygen.isAtLegalEditPosition = function(query, measureModel) {
    //for now the only check is to see whether the query is below the base intersection of the metric
    if (query.measure instanceof Metric) {
        return !$metricBaseAboveQueryInter(query, measureModel) &&
            ($metricBaseSameAsQueryInter(query, measureModel) || // edit at base
             $metricHasDefaultSpreadMethod(query, measureModel) || // edit with spread method
             $isRecalcMetric(query, measureModel)); // edit via recalc (optimistic, to be precise we would have to check if it editable via an inverse formula)
    } else {
        return true;
    }
};

/**
 * Returns true if the query's intersection is same as the metric's base intersection.
 * @param {MeasureQuery} metricQuery
 * @param {MeasureModel} measureModel
 * @returns {Boolean}
 */
function $metricBaseSameAsQueryInter(metricQuery, measureModel) {
    return cubiql.intersectionEqual(measureModel.getMeasureInfo(metricQuery.measure.name).inter, metricQuery.inter, true, true);
}

/**
 * Returns true if the metric in the query has a default spread method.
 * @param {MeasureQuery} metricQuery
 * @param {MeasureModel} measureModel
 * @returns {Boolean}
 */
function $metricHasDefaultSpreadMethod(metricQuery, measureModel) {
    var update_method = measureModel.getMeasureInfo(metricQuery.measure.name).update_method;
    return !!update_method;
}

/**
 * Returns true if the metric in the query has a default aggregation method.
 * @param {MeasureQuery} metricQuery
 * @param {MeasureModel} measureModel
 * @returns {Boolean}
 */
function $metricHasDefaultAggMethod(metricQuery, measureModel) {
    var measureInfo = measureModel.getMeasureInfo(metricQuery.measure.name),
        agg_method = measureInfo.agg_method,
        compositeAgg = $getMetricCompositeAgg(measureInfo, measureModel);
    return !!agg_method &&
        (!!agg_method.primitive ||
         (!!compositeAgg && $metricCompositeAggIsValidAtQueryInter(measureInfo, measureModel, metricQuery.inter)) ||
         (!compositeAgg && !!agg_method.named));
}

/**
 * Retruns the composite aggregation of a metric if it has one
 *
 * @param {Object} measureInfo
 * @param {MeasureModel} measureModel
 * @returns {Object}
 */
function $getMetricCompositeAgg(measureInfo, measureModel) {
    var namedAgg = measureInfo.agg_method && measureModel.getAggregation(measureInfo.agg_method.named),
        compositeNamedAgg = namedAgg && namedAgg.has("method") && namedAgg.get("method").get("composite");
    
    return measureInfo.agg_method && compositeNamedAgg;
}

/**
 * For metrics with composite agg, it retruns true in either of the following two cases,
 *   - all the metric intersection dimensions have aggregate definitions
 *   - the metric intersection dimensions that don't have aggregate definitions
 *     are at metric's intersection level in the query intersection
 *
 * @param {Object} measureInfo
 * @param {MeasureModel} measureModel
 * @param {MQG.Intersection} queryInter
 * @returns {Boolean}
 */
function $metricCompositeAggIsValidAtQueryInter(measureInfo, measureModel, queryInter) {
    var metricBaseInter = measureInfo.inter,
        compositeAgg,
        i,
        aggDef,
        dimension,
        metricLabel,
        queryLevel;

    if (!measureInfo || !measureInfo.agg_method || !measureInfo.agg_method.named) {
        return false;
    }

    if (measureInfo.agg_method.named) {
        // named agg
        compositeAgg = $getMetricCompositeAgg(measureInfo, measureModel);
    }

    for (i = 0; i < metricBaseInter.qualified_level.length; ++i) {
        dimension = cubiql.qlevel.getDimension(metricBaseInter.qualified_level[i]);
        metricLabel = cubiql.qlevel.getLabel(metricBaseInter.qualified_level[i]);

        // Check if the dimension/label is missing from the aggregates definition
        aggDef = compositeAgg.toJS().find(cubiql.qlevel.labelEquals(metricLabel));
        if (!aggDef) {
            // If there is no aggregate definition for this dimension/label then make sure that the query level
            // for the missing dimension is present and it is at metric intersection's level otherwise return false
            queryLevel = queryInter.qualified_level.find(cubiql.qlevel.labelEquals(metricLabel));
            if (!queryLevel || !cubiql.qLevelEqual(metricBaseInter.qualified_level[i], queryLevel)) {
                return false;
            }
        }
    }

    return true;
}

/**
 * Returns true if the metric in the query is a recalc metric.
 * @param {MeasureQuery} metricQuery
 * @param {MeasureModel} measureModel
 * @returns {Boolean}
 */
function $isRecalcMetric(metricQuery, measureModel) {
    return !!measureModel.getMeasureInfo(metricQuery.measure.name).recalc;
}

/**
 * @param MQG.Intersection origIntersection
 * @param MQG.LabelMap[] labelMaps
 * @return MQG.Intersection
 */
function $calculateSplitIntersection(origIntersection, labelMaps) {
    var splitQLs = [], 
        findTargetLabelsForLabel = function(label) {
            return lodash.map(labelMaps.filter(function(labelMap) {
                    return labelMap.source === label;
                }), 'target');
        };

    origIntersection.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            targets = findTargetLabelsForLabel(label);

        targets.forEach(function(targetLabel) {
            assert(targetLabel !== label, "SplitExprs should not split to the source label as this is already implifed");
            splitQLs.push(cubiql.relabelQL(ql, targetLabel));
        });    
        splitQLs.push(ql);
    });

    return new MQG.Intersection(splitQLs);
} 

querygen.calculateSplitIntersection = $calculateSplitIntersection;

/**
 * @param MQG.Intersection origIntersection
 * @param MQG.LabelMap[] labelMaps
 * @return MQG.Intersection
 */
function $calculateRelabelIntersection(origIntersection, labelMaps) {
    var relabelledQLs = [], 
        findTargetLabelsForLabel = function(label) {
            return lodash.map(labelMaps.filter(function(labelMap) {
                    return labelMap.source === label;
                }), 'target');
        };

    origIntersection.qualified_level.forEach(function(ql) {
        var label = cubiql.qlevel.getLabel(ql),
            targets = findTargetLabelsForLabel(label);

        assert(targets.length < 2, "A relabel should only have one target for a given label");

        if (targets.length > 0) 
            relabelledQLs.push(cubiql.relabelQL(ql, targets[0]));
        else
            relabelledQLs.push(ql);
    });

    return new MQG.Intersection(relabelledQLs);
}

querygen.calculateRelabelIntersection = $calculateRelabelIntersection;

},{"../cubiql":211,"../util":280,"./filter":257,"./results":259,"./util":260,"assert":undefined,"inherits":45,"lodash":90,"measure-query-gen/src/MQG":1}],259:[function(require,module,exports){

/**
 * @typedef {Object} ResultColumn
 * @param {Rows} rows
 * @param {Value[]} values
 * @param {String} valueType
 * @param {query.MeasureQuery} sourceQuery
 *
 * @typedef {Number[]} Rows
 *
 * @typedef {Number|String|Boolean} Value
 */

"use strict";

var assert = require("assert");
var cubiql = require("../cubiql");
var lodash = require("lodash");
var queryutil = require("./util");
var querygen = require("./query");
var util = require("../util");
var MQG = require("measure-query-gen/src/MQG");
var SORT = require("../constant").SORT;

var queryresults = exports;

var NumbersCompare = util.getComparator(true);
var StringsCompare = util.getComparator();

/**
 * @param {MeasureServiceQuery} sq
 * @return {Boolean}
 */
function $isFixedQuery(sq) {
    return sq.sourceQuery.measure  instanceof querygen.FixedLevel;
}

/**
 * @param {MQG.Intersection} inter
 * @param {querygen.MeasureServiceQuery[]} serviceQueries
 * @param {MQG.KeyRequest[]} keyRequests
 * @param {querygen.SortConfig} sortConfig
 */
function ReportProcessor(inter, serviceQueries, keyRequests, sortConfig) {
    this.$inter = inter;
    this.$queries = lodash.reject(serviceQueries, $isFixedQuery);
    this.$fixedQueries = serviceQueries.filter($isFixedQuery);
    this.$keyRequests = keyRequests;
    this.$sortConfig = sortConfig;
}

/** 
 * Returns an array of all rows which have a key (all key row sets are dense relative to any non-key row set in the report, and so
 * we can just get one of the rows for one of the keys)
 *
 * @return {Rows}
 */
ReportProcessor.prototype.$getKeyRows = function(report) {
    var rows = [];
    if (this.$inter.qualified_level.length > 0 &&
       report.report_column[0].int_column.value)
        rows = report.report_column[0].int_column.value;

    return rows;
};

/**
 * Returns the fixed-level query, if any, that is in this report for a given qualified level
 * @param {MQG.QualifiedLevel} ql
 * @return {MeasureServiceQuery}
 */ 
ReportProcessor.prototype.$getFixedLevelQuery = function(ql) {
    var query = this.$fixedQueries.find(function(fq) {
        return fq.sourceQuery.measure instanceof querygen.FixedLevel &&
            cubiql.qLevelEqual(fq.sourceQuery.measure.qualifiedLevel,ql);
    });
    if (query)
        return query;
};

/**
 * Returns the fixed level member specified for this report for the given qualified level, if any
 * @param {MQG.QualifiedLevel} ql
 * @return {Value}
 */
ReportProcessor.prototype.$getFixedLevelMember = function(ql) {
    var query = this.$getFixedLevelQuery(ql); 

    if (query)
        return query.sourceQuery.measure.id;
};

/**
 * converted the index of a query to the actual report column indices expected
 *
 * @param {Number} idx the query index
 * @return {{rowsIdx: {Number}, valuesIdx: {Number}}}
 */
ReportProcessor.prototype.$queryIndexToColumnIndices = function(idx)  {
    var columnOffset = this.$keyRequests.length*2,
        queryIdx = idx;

    //LiteralRelation queries don't get value columns, only rows, so therefore they only offset by 1.
    //therefore, back off the offset by 1 for each LiteralRelation query showing up before this column
    if (queryIdx >= 0) {
        this.$queries.forEach(function(q, i) {
            if (i < queryIdx && $queryIsLiteralRelationQuery(q.sourceQuery) && q.sourceQuery.mappedInter.qualified_level.length > 0)
                columnOffset--;
        });
    }

    return {
        rowsIdx: idx*2+columnOffset,
        valuesIdx: idx*2+1+columnOffset
    };
};

/**
 * The query index at which the processor expects a report will have a given attribute at 
 * a given intersection 
 * 
 * @param {String} name attribute name
 * @param {MQG.QualifiedLevel} ql the qualifiedLevel of the attribute
 * @param {MQG.Intersection} inter intersection the attribute was queried at
 * @return {Integer}
 */
ReportProcessor.prototype.getAttributeIndex = function(name, ql, inter) {
    var idx = -1;
    if (cubiql.intersectionEqual(inter, this.$inter, true)) {
        this.$queries.some(function(q, i) {
            var measure = q.sourceQuery.measure,
                childMeasure;

            if (measure instanceof querygen.OverriddenAttribute) {
                childMeasure = measure.attributes[0];
                if(childMeasure.name === name &&
                    cubiql.qLevelEqual(ql, childMeasure.qualifiedLevel)) {
                    idx = i;
                    return true;
                }
            } else if (measure.name === name &&
                cubiql.qLevelEqual(ql, measure.qualifiedLevel)) {
                idx = i;
                return true;
            }
            return false;
        });
    }

    return idx;
};

/**
 * The index at which the processor expects a report will have a given metric at 
 * a given intersection 
 * 
 * @param {String} name metric name
 * @param {MQG.Intersection} [inter] intersection the metric was queried at. This is only
 *                                   used to check if the intersection is the same as the
 *                                   intersection that was queried. If undefined, we don't
 *                                   check and simply return the index of the metric
 *                                   with the name.
 * @return {Integer}
 */
ReportProcessor.prototype.getMetricIndex = function(name, inter) {
    var idx = -1;
    if (inter && cubiql.intersectionEqual(inter, this.$inter, true)) {
        this.$queries.forEach(function(q, i) {
            if (q.sourceQuery.measure.name === name)
                idx = i;
        });
    }

    return idx;
};

/**
 * @param {String} name metric name
 * @param {MQG.Intersection} inter intersection the metric was queried at
 * @return {Boolean}
 */
ReportProcessor.prototype.hasMetric = function(name, inter) {
    return this.getMetricIndex(name, inter) > -1;
};

/**
 * Get array of values for a given metric at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the metric
 * @param {MQG.Intersection} inter intersection the metric was queried at
 * @param {MeasureProtocol.Report} report the report to process
 * @return {Value[]}
 */ 
ReportProcessor.prototype.getMetricValues = function(name, inter, report) {
    var idx = this.getMetricIndex(name, inter),
        colIndices,
        col;
    if (idx > -1) {
        colIndices = this.$queryIndexToColumnIndices(idx);
        col = cubiql.getValueColumn(
            report.report_column[colIndices.valuesIdx]
        );
        return col.value || [];
    }
    //otherwise undefined
};

/**
 * Get the ResultColumn of values for a given metric at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the metric
 * @param {MQG.Intersection} inter intersection the metric was queried at
 * @param {MeasureProtocol.Report} report the report to process
 * @return {ResultColumn}
 */ 
/*
ReportProcessor.prototype.getMetricColumn = function(name, inter, report) {
    var idx = this.getMetricIndex(name, inter);

    if (idx > -1) {
        return this.getResultColumn(idx, report);
    }
    //otherwise undefined
};
*/

/**
 * Get the array of values for a given attribute at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the attribute
 * @param {MQG.QualifiedLevel} ql level of the attribute
 * @param {MQG.Intersection} inter intersection the attribute was queried at
 * @param {MeasureProtocol.Report} report the report to process
 * @return {Value[]}
 */ 
ReportProcessor.prototype.getAttributeValues = function(name, ql, inter, report) {
    if (this.$getFixedLevelMember(ql))
        return this.$getFixedLevelColumn(ql, report).values;

    var idx = this.getAttributeIndex(name, ql, inter),
        colIndices = this.$queryIndexToColumnIndices(idx),
        reportCol = report.report_column[colIndices.valuesIdx],
        col;

        if (idx > -1 && !lodash.isUndefined(reportCol)) {
            col = cubiql.getValueColumn(reportCol);
        return col.value || [];
    }
    //otherwise undefined
};

/**
 * Get the ResultColumn of values for a given attribute at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the attribute
 * @param {MQG.QualifiedLevel} ql level of the attribute
 * @param {MQG.Intersection} inter intersection the attribute was queried at
 * @param {MeasureProtocol.Report} report the report to process
 * @return {ResultColumn}
 */ 
/*
ReportProcessor.prototype.getAttributeColumn = function(name, ql, inter, report) {
    if (this.$getFixedLevelMember(ql))
        return this.$getFixedLevelColumn(ql, report);

    var idx = this.getAttributeIndex(name, ql, inter);

    if (idx > -1) {
        return this.getResultColumn(idx, report);
    }

    //otherwise undefined
};
*/

ReportProcessor.prototype.$createLiteralRelationValueColumn = function(rowCol, query) {
    if (!rowCol)
        return rowCol;
    var col = [];

    if (this.$inter.qualified_level.length === 0) { 
        //special case for no keys (i.e. nullary relation with just a value
        //just return the relation as the value column
        col = cubiql.getValueColumn(query.relations[0].relation.column[0]).value;
    } else {
        rowCol.forEach(function(row) {
            col.push(1);
        });
    }

    return col;
};

function $queryIsLiteralRelationQuery(query) {
    return query.measure instanceof querygen.LiteralRelation || 
        (query.measure instanceof querygen.FilteredMeasureQuery && $queryIsLiteralRelationQuery(query.measure.measureQuery));
}

/**
 * @param {Number} queryIdx
 * @param {MeasureProtocol.Report} report
 * @return {ResultColumn}
 */
ReportProcessor.prototype.getResultColumn = function(queryIdx, report, sorted) {
    sorted = lodash.isUndefined(sorted) ? false : sorted;
    var colIndices = this.$queryIndexToColumnIndices(queryIdx),
        rowColIdx = colIndices.rowsIdx,
        valColIdx = colIndices.valuesIdx,
        isLiteralRelationQuery = $queryIsLiteralRelationQuery(this.$queries[queryIdx].sourceQuery);
    
    assert(report.report_column[rowColIdx], "Report did not have expected column at index: " + rowColIdx);    
    assert(report.report_column[valColIdx] || isLiteralRelationQuery, "Report did not have expected column at index: " + valColIdx);    
    var rowCol = cubiql.getValueColumn(report.report_column[rowColIdx]).value,
        valCol = isLiteralRelationQuery ? this.$createLiteralRelationValueColumn(rowCol, this.$queries[queryIdx]) : cubiql.getValueColumn(report.report_column[valColIdx]).value,
        valueType = isLiteralRelationQuery ? "INT" : cubiql.getColumnValueType(report.report_column[valColIdx]),
        tuples = [],
        sourceQuery = this.$queries[queryIdx];

    return {
        rows: rowCol || [],
        values: valCol || [],
        valueType: valueType, 
        sourceQuery: sourceQuery 
    }
};

/**
 * @param {MQG.QualifiedLevel} ql
 * @return {FixedColumn|undefined}
 */
ReportProcessor.prototype.$getFixedLevelColumn = function(ql, report) {
    var member = this.$getFixedLevelMember(ql),
        rows,
        values,
        sourceQuery;

    if (member) {
        rows = this.$getKeyRows(report);
        values = rows.map(lodash.constant(member));
        sourceQuery = this.$getFixedLevelQuery(ql).sourceQuery;

        return {
            rows: rows, 
            values: values,
            valueType: sourceQuery.measure.valueType, 
            sourceQuery: sourceQuery
        };
    }
};

ReportProcessor.prototype.getKeyColumn = function(ql, report) {
    var inter = this.$inter,
        keyIndex = inter.qualified_level.findIndex(cubiql.qlevel.qLevelEqual(ql)),
        rowColIdx = keyIndex*2,
        valColIdx = keyIndex*2+1,
        rowCol = cubiql.getValueColumn(report.report_column[rowColIdx]).value,
        valCol = cubiql.getValueColumn(report.report_column[valColIdx]).value,
        valueType = cubiql.getColumnValueType(report.report_column[valColIdx]);

    return {
        rows: rowCol || [],
        values: valCol || [],
        valueType: valueType, 
        sourceQuery: this.$queries.find(function(q) {
            var measure = q.sourceQuery.measure;
            return measure instanceof querygen.Attribute &&
               measure.name === "id" && cubiql.qLevelEqual(ql, measure.qualifiedLevel);
        })
    };
};

ReportProcessor.prototype.getResultColumnForMeasureQuery = function(query, report) {
    var idx,
        column;

    //if it's a FixedLevel query, look that one up
    if (query.measure instanceof querygen.FixedLevel) {
        column = this.$getFixedLevelColumn(query.measure.qualifiedLevel, report);
    } else {
        idx = this.$queries.findIndex(function(sq) {
            return queryutil.measureQueriesEqual(sq.sourceQuery, query);
        });

        if (!lodash.isUndefined(idx))
            column = this.getResultColumn(idx, report, false);
    }

    if (lodash.isUndefined(column)) {
        console.log(query);
        throw new Error("Couldn't find column for query: " + query);
    }

    return column;
};

/**
 * @param {MQG.Report} report
 * @return {ResultColumn[]}
 */
ReportProcessor.prototype.getColumns = function(report) {
    var me = this;

    return [].concat(
        this.$inter.qualified_level.map(function(ql) {
            return me.$getFixedLevelColumn(ql, report);
        }).filter(lodash.identity),
        this.$queries.map(function(q, i) {
            return me.getResultColumn(i, report, false);
        })
    );
};

/**
 * @property {String} label
 * @property {MeasureProtocol.Report} report
 * @return {ResultColumn|undefined}
 */
/*
ReportProcessor.prototype.getColumnByLabel = function(label, report) {
    var columns = [],
        me = this;

    this.$queries.forEach(function(q,i) {
        if (q.sourceQuery.label === label) {
            columns.push(me.getResultColumn(i, report));
        }
    });

    this.$fixedQueries.forEach(function(fq) {
        if (fq.sourceQuery.label === label) {
            columns.push(me.getFixedLevelColumn(ql, report));
        }
    });

    assert(columns.length < 2, "Found more than one column for label '" + label + "'");

    if (columns.length === 1)
        return columns[0];
};
*/

queryresults.ReportProcessor = ReportProcessor;

/**
 * @class
 * 
 * @param {ReportProcessor[]} reportProcessors
 */
function ResponseProcessor(reportProcessors) {
    this.$reportProcessors = reportProcessors;
}

/**
 * Retrieve the result column for a labelled measure query.. it is an error to have more than one measure query in
 * the resame report with the same label.
 *
 * @property {String} label
 * @property {MeasureProtocol.Response} response
 * @return {ResultColumn|undefined}
 */
ResponseProcessor.prototype.getColumnByLabel = function(label, response) {
    var columns = [];
    this.$reportProcessors.forEach(function(proc, i) {
        var report = response.report[i],
            column = proc.getColumnByLabel(label, report);
        
        if (column)    
            columns.push(column);
    });

    assert(columns.length < 2, "More than one column found for label: '" + label + "'");

    if (columns.length === 1)
        return columns[0];
};

/**
 * Get the ResultColumn of values for a given metric at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the metric
 * @param {MQG.Intersection} inter intersection the metric was queried at
 * @param {MeasureProtocol.Response} response the response to process
 * @return {ResultColumn}
 */ 
ResponseProcessor.prototype.getMetricValues = function(name, inter, response) {
    var reports = response.report,
    len = reports.length,
    i = 0,
    values;
    for (;i<len;i++) {
        values = this.$reportProcessors[i].getMetricValues(name, inter, reports[i]);
        if (values)
            return values;
    }
    //undefined if not found
};

ResponseProcessor.prototype.getResultColumnForMeasureQuery = function(query, response) {
    var inter = query.mappedInter,
        reportInfo = this.$getReportInfoForInter(inter, response),
        reportProcessor = reportInfo.processor,
        report = reportInfo.report;
    
    return reportProcessor.getResultColumnForMeasureQuery(query, report);    
};

/**
 * @typedef {Object} ResultTable
 * @property {(MQG.QualifiedLevel|querygen.MeasureQuery)[]} columnInfo array listing the keys or MeasureQuery associated with each column in the same index
 * @property {Value[][]} dataTable A row-first table of the values
 *
 * @param {querygen.MeasureQuery} query
 * @param {MeasureProtocol.Response} response
 * @param {Boolean} sortByKeys whether or not to sort the table by the keys of the intersection, ordered left-to-right
 * @return {ResultTable}
 */
ResponseProcessor.prototype.getMeasureQueryAsTable = function(query, response, sortByKeys) {
    var queryColumn = this.getResultColumnForMeasureQuery(query, response),
        reportInfo = this.$getReportInfoForInter(query.mappedInter, response),
        keyColumns = query.mappedInter.qualified_level.map(function(ql) {
            return reportInfo.processor.getKeyColumn(ql, reportInfo.report);
        }),
        keyLen = keyColumns.length,
        dataTable = queryresults.getColumnsAsRows(keyColumns, queryColumn, false),
        isFunctionalQuery = query.functionalQuery,
        i;

    // For a functional query, there is only value per row. So, extract the value and store it instead of the array.
    if (isFunctionalQuery) {
        for (i = 0; i < dataTable.length; ++i) {
            if (lodash.isArray(dataTable[i][keyLen])) {
                dataTable[i][keyLen] = dataTable[i][keyLen][0]
            }
        }
    }

    if (sortByKeys) {
        dataTable.sort(function(row1, row2) {
            var i = 0, 
                row1Val,
                row2Val;
            for (; i < keyLen; i++) {
                row1Val = row1[i];
                row2Val = row2[i];

                if (row1Val < row2Val)
                    return -1;
                else if (row1Val > row2Val)
                    return 1;
            }
            return 0;
        });
    } 

    return queryresults.createResultTableForQuery(query, dataTable); 
};

/**
 * @param {MeasureQuery} query
 * @param {Value[][]} [dataTable]
 * @return {ResultTable}
 */
queryresults.createResultTableForQuery = function(query, dataTable) {
    return {
        columnInfo: [].concat(query.mappedInter.qualified_level, [query]),
        dataTable: dataTable
    };
};


ResponseProcessor.prototype.$getReportIndexForInter = function(inter) {
    var matches = [],
    indices = [];
    this.$reportProcessors.forEach(function(proc,i) {
        if (cubiql.intersectionEqual(proc.$queries[0].sourceQuery.mappedInter, inter, true, true, true)) {
            matches.push(proc);
            indices.push(i);
        }
    });
    if (matches.length > 0) {
        assert(matches.length === 1, "too many processors match!");
        return indices[0];
    } else {
        console.warn("Could not find report processor for " + JSON.stringify(inter));
        return -1;
    }
};

ResponseProcessor.prototype.$getReportInfoForInter = function(inter, response) {
    var index = this.$getReportIndexForInter(inter, response);

    return {
        processor: this.$reportProcessors[index],
        report: response.report[index]
    };
};

/**
 * @param {String} name
 * @param {MQG.Intersection} inter
 * @param {String[]} keys
 * @param {MeasureProtocol.Response} response
 * @return {Object} data
 * @return {Number} data.row
 * @return {Value} data.value
 */
ResponseProcessor.prototype.getMetricForKeys = function(name, inter, keys, response) {
    var reportInfo = this.$getReportInfoForInter(inter, response),
        reportProcessor = reportInfo.processor,
        report = reportInfo.report,
        metricColumn,
        idxCandidates = [],
        rowCandidates,
        keyColumns,
        row,
        value,
        valueType;

    assert(reportProcessor, 'no processor found!');

    metricColumn = reportProcessor.getMetricColumn(name, inter, report);
    valueType = metricColumn.valueType;

    //we build of a list of 'idxCandidates', that is rows which may
    //be the row for this set of keys.  This list starts with all rows 
    //with the first key, then is pared down by iterating through the other keys, and 
    //should only have one row (or zero) at the end unless it is a multi-valued metric 
    //which is not currently supported 
    if (inter.qualified_level.length === 0) { //special case for empty intersection
        row = metricColumn.rows[0];
        value = metricColumn.values[0];
    } else {
        keyColumns = inter.qualified_level.map(function(ql) {
            return reportProcessor.getAttributeColumn('id', ql, inter, report);
        }); 

        keyColumns.forEach(function(keyCol, i) {
            var idVals = keyCol.values,
            thisKey = keys[i],
            nextIdx = -1;

            //if no results for this key, short cut candidates to empty list
            if (lodash.isUndefined(idVals) || idVals.length === 0) {
                idxCandidates = [];
                return;
            }

            //for first one, idxCandidates is the set with this value
            if (i === 0) {
                while(true) {
                    nextIdx = idVals.indexOf(thisKey, nextIdx+1);
                    if (nextIdx > -1)
                        idxCandidates.push(nextIdx);
                    else
                        break;
                }
            } else {
                idxCandidates = idxCandidates.filter(function(idx) {
                    return idVals[idx] === thisKey;
                });
            }
        });
        rowCandidates = idxCandidates.map(function(idx) {
            return keyColumns[0].rows[idx];
        });

        assert(rowCandidates.length <= 1, "too many results for " + name + " for keys: " + keys);
        if (metricColumn && rowCandidates.length > 0) {
            row = rowCandidates[0];
            value = metricColumn.values[metricColumn.rows.indexOf(row)];            
        }
    }

    return {
        row: row,
        value: value,
        valueType: valueType
    };
};

/**
 * Get the ResultColumn of values for a given attribute at a given intersection.
 * Undefined if not found
 *
 * @param {String} name name of the attribute
 * @param {MQG.QualifiedLevel} ql level of the attribute
 * @param {MQG.Intersection} inter intersection the attribute was queried at
 * @param {MeasureProtocol.Response} response the response to process
 * @return {ResultColumn}
 */ 
ResponseProcessor.prototype.getAttributeValues = function(name, ql, inter, response) {
    var reportInfo = this.$getReportInfoForInter(inter, response),
    reportProcessor = reportInfo.processor,
    report = reportInfo.report,
    values;

    assert(reportProcessor, 'no processor found!');

    values = reportProcessor.getAttributeValues(name, ql, inter, report);
    assert(values, 'Response has no values for ' + name + ' for ' + ql);

    return values;
    //undefined if not found
};

ResponseProcessor.prototype.getAttributeColumn = function(name, ql, inter, response) {
    var reportInfo = this.$getReportInfoForInter(inter, response),
        reportProcessor = reportInfo.processor,
        report = reportInfo.report;

    return reportProcessor.getAttributeColumn(name, ql, inter, report);
};

/**
 * @param {MeasureProtocol.Response}
 * @return {ResultColumn[][]}
 */
ResponseProcessor.prototype.getResultTables = function(response) {
    var me = this;
    if (lodash.isUndefined(response.report)) {
        return [];
    } else {
        return response.report.map(function(rep, i) {
            var processor = me.$reportProcessors[i];
            assert(!lodash.isUndefined(processor), "For some reason no processor found for report index: " + i);
            return processor.getColumns(rep);
        });
    }
};

ResponseProcessor.prototype.getSortColumn = function(inter, response) {
    var reportInfo = this.$getReportInfoForInter(inter, response),
        reportProcessor = reportInfo.processor,
        report = reportInfo.report;

    return reportProcessor.getSortColumn(report);
};

queryresults.ResponseProcessor = ResponseProcessor;

function $getInterOfResultTable(resultTable) {
    return new MQG.Intersection(resultTable.columnInfo.filter(function(ci) {
        return ci.dimension && ci.level; //not necessarily an instance of MQG.QualifiedLevel sadly
    }));
}
/**
 * Efficiently union same-key, single value-column tables into a single result table, where the non-key columns are
 * in the order of the 'resultTables' parameter.  Optionally the table can be sorted and filtered
 * based on these columns.  These options are integrated into this function primarily to allow
 * a more efficient single-pass approach to joining/sorting/filtering data sets
 *
 * NOTE: this function expects that all ResultTables are sorted in left-to-right key order
 *
 * @param {ResultTable[]} resultTables
 * @param {{tableIdx: {Number}, direction: {String}}[]} [sortTableConfigs] optional. array of configs of resultTable index and direction to sort this table by (in order)
 * @param {Number[]} [filterMaskIndices] optional. array of which indices which represent ResultTables where the value should be treated as a filter mask on the end result.  Any tuples that don't occur in the filterMask ResultTables will be filtered out of the resulting ResultTable
 * @param {Number[]} [hiddenIndices] array of indices in the 'resultTables' array that should not appear in the resulting row. defaults to no hidden indices. Typically used to use filtering without returning the filter masks in the resulting table.
 * @return {ResultTable}
 */
queryresults.unionResultTables = function(resultTables, sortTableConfigs, filterMaskIndices, hiddenIndices) {
    sortTableConfigs = sortTableConfigs || [];
    filterMaskIndices = filterMaskIndices || [];
    hiddenIndices = hiddenIndices || [];
    sortTableConfigs.forEach(function(cfg) {
        assert(hiddenIndices.indexOf(cfg.tableIdx) === -1, "Can't hide sort table indices in a result table currently");
    });

    assert(resultTables.length > 0, "Attempting to union empty list of resultTables"); 
    var inter = $getInterOfResultTable(resultTables[0]),
        dataTables = lodash.map(resultTables, 'dataTable'),
        checkHiddenIndices = hiddenIndices.length > 0,
        dataTableLen = dataTables.length,
        keyLen = inter.qualified_level.length,
        filterMaskLen = filterMaskIndices.length,
        rowWidth = keyLen + dataTableLen,
        maxRows = Math.max.apply(null, lodash.compact(lodash.map(dataTables, 'length'))),
        //initialize pointer for the row of each result table
        rowPtrs = resultTables.map(function() { return 0; }),
        checkForFilterIndices = filterMaskLen ?
            function(tableIndices) {
                //return true if all filterMaskIndices are listed 
                var i = 0;
                //the first positions in the unioned row are the keys, but
                //the filter mask indices are with respect to the input result tables,
                //so we offset the index by the number of keys and check if we have a value
                for (; i < filterMaskLen; i++)
                    if (tableIndices.indexOf(filterMaskIndices[i]) === -1)
                        return false;
                return true;    
            } 
            :
            function(tableIndices) {
                return true;
            },
        valueFn = function(tableIndex) {  
            return dataTables[tableIndex][rowPtrs[tableIndex]][keyLen];
        },
        rowFn = function(key, tableIndices) {
            var i = 0,
                j = 0,
                tableIndex,
                rowIndex,
                rowArray = new Array(rowWidth);

            for(; i < keyLen; i++) {
                rowArray[i] = key[i];
            }    

            //only the passed in tables are populated, therefore the initialized value of undefined
            //is in the other table indices
            //
            //NOTE: could make this slightly more efficient by making valueFn and the
            //      advancing operation per-table functions but probably no need to
            for(; j < tableIndices.length; j++) {
                tableIndex = tableIndices[j];
                rowIndex = tableIndex+keyLen;
                if (!checkHiddenIndices || hiddenIndices.indexOf(rowIndex) === -1) 
                    rowArray[rowIndex] = valueFn(tableIndex);

                //advance the participant tables only
                rowPtrs[tableIndex]++;
            }

            //only return the row if all indices are properly found
            if (checkForFilterIndices(tableIndices))
                return rowArray;
        },
        keyComparator = function(key1, key2) {
            if (key2 === undefined)
                return -1;

            var i = 0; 
            for (; i < keyLen; i++) {
                if (key1[i] < key2[i])
                    return -1;
                else if (key1[i] > key2[i])
                    return 1;
            }

            return 0; //apparently equal since we got here
        },
        rowIndex = 0,
        row,
        minRow,
        minKeyTableIndices,
        cmp,
        i, //tableIndex
        unionedRow,
        unionedRows = [],
        unionedColumnInfo = [].concat(
            inter.qualified_level.map(function(ql, i) {
                return resultTables[0].columnInfo[i];
            }),
            resultTables.map(function(resultTable, i) {
                return resultTable.columnInfo[keyLen];
            })
        ),
        sortComps;

    assert(resultTables.every(function(resultTable) {
        return cubiql.intersectionEqual(inter, $getInterOfResultTable(resultTable));
    }), "All ResultTables must match the intersection of the first!");

    //use array of pointers to interate down dataTable key arrays in parallel
    //use undefined when value not found
    for (; rowIndex < maxRows; rowIndex++) {
        i = 0;
        minRow = undefined;
        minKeyTableIndices = [];
        for(; i < dataTableLen; i++) {
            //get the row for each table
            //NOTE: might be faster to lose an array lookup here by storing row getters per-table
            row = dataTables[i][rowPtrs[i]];
            //if this table as already ended or if the value is undefined, goto the next table 
            if (!row || lodash.isUndefined(row[keyLen]))
                continue;

            cmp = keyComparator(row, minRow);
            if (cmp === 0) {
            //  if this row's key is equal to the smallest, add the table to the array of participants
                minKeyTableIndices.push(i);
            } else if (cmp < 0) {
            //  if this key is the new smallest, replace the array of participants with just this table
                minKeyTableIndices = [i];
                minRow = row;
            }
        }

        if (minRow) {
            //now create the unified row with the value of each participant, undefined for non-participants
            unionedRow = rowFn(minRow, minKeyTableIndices);
            if (unionedRow) //it might be null if it was filtered out
                unionedRows.push(unionedRow);
        }
    }

    //then if sortTableConfigs.length > 0, generate a composite sorter for the indices that have sorts, with the config
    if (unionedRows.length && sortTableConfigs.length) {
        sortComps = sortTableConfigs.map(function (cfg) {
            var colIdx = keyLen + cfg.tableIdx,
                ascending = cfg.direction === SORT.ASCENDING,
                isNumeric = cfg.valueType === "FLOAT" || cfg.valueType === "DECIMAL" || cfg.valueType === "INT";

            return function (row1, row2) {
                var value1 = (ascending ? row1 : row2)[colIdx],
                    value2 = (ascending ? row2 : row1)[colIdx];
                return isNumeric ? NumbersCompare(value1, value2) : StringsCompare(value1, value2);
            };
        });

        unionedRows.sort(function (row1, row2) {
            var index = 0,
                result = 0;
            while (index < sortComps.length) {
                result = sortComps[index++](row1, row2);
                if (result !== 0) {
                    return result;
                }
            }

            return result;
        });
    }

    return {
        columnInfo: unionedColumnInfo,
        dataTable: unionedRows
    }
};

/**
 * Given a set of key ResultColumns and exactly one value ResultColumn, the function turns them into a nested array of
 * rows with the values in each cell, lining up same-row values.
 *
 * ResultColumns from the same report may be of varying length (e.g. Sales has a value for all 10 rows, Returns only has
 * a value for 8 rows). The purpose of this function is return them in a more table-friendly format by creating an array
 * of row arrays, where each element is the values for that row in the ResultColumn of the same index. The value element
 * of each row is an array which can have 0 or more values depending on the type of query,
 *  - If the ResultColumn for that index doesn't have a value for that row, the value element will be an empty array.
 *  - If the ResultColumn for that index has 1 or more (in case of a COLLECT query), the value element will be an array with all the values for the index.
 *
 * @param {ResultColumn[]} keyColumns,
 * @param {ResultColumn} valueColumn,
 * @param {Boolean} outerJoin whether or not to join the columns as an outer join, i.e. include rows that not all columns have a value for, or not
 * @return {Value[][]}
 */
queryresults.getColumnsAsRows = function(keyColumns, valueColumn, outerJoin) {
    //initialize colPtr to 0 for all columns
    var columns = [].concat(keyColumns, [valueColumn]),
        colPtr = columns.map(function() {
            return 0;
        }),
        innerJoin = lodash.isUndefined(outerJoin) || outerJoin === false,
        //get the value array for each column
        valCol = lodash.map(columns, 'values'),

        colIdxs = columns.map(function(c,i) {
            return i;
        }),
        nonEmptyColIdxs = colIdxs.filter(function(i) {
            return valCol[i] && valCol[i].length > 0;
        }),
        //keep track of the last row to have values so
        //we know if we had a blank row (b/c row numbers are not contiguous) 
        lastRowWithValues,
        //track if one of the columns was missing a value 
        hadValueMissing,
        hasValueForCurrRow,
        //for each col make a nextVal function
        nextVal = columns.map(function(c,i) {
            if (nonEmptyColIdxs.indexOf(i) === -1) {
                return function() { return undefined; };
            } else {
                var values = columns[i].values,
                    rows = columns[i].rows,
                    //we quote if it isn't a number
                    myColPtr = colPtr[i],
                    nextRow = rows[myColPtr],
                    advance = function() {
                        myColPtr++;
                        nextRow = rows[myColPtr];
                    };

                return function(row) {
                    var ret;
                    if (row === nextRow) {
                        ret = values[myColPtr];
                        lastRowWithValues = row;
                        hasValueForCurrRow = true;
                        advance();
                    } else if (innerJoin) {
                        hadValueMissing = true;
                    }
                    return ret;
                };
            }
        }),
        //calculate the first row
        firstRows = nonEmptyColIdxs.map(function(i) {
            return columns[i].rows[0];
        }),
        lastRows = nonEmptyColIdxs.map(function(i) {
            return columns[i].rows[valCol[i].length-1];
        }),
        minRow = Math.min.apply(Math, firstRows),
        maxRow = Math.max.apply(Math, lastRows),
        line = [],
        curRow,
        lines = [],
        keyColumnCount = keyColumns.length,
        i,
        values,
        value;

    //starting on minimum row, iterate through each row,
    for (curRow = minRow; curRow <= maxRow; curRow++) {
        line = [];
        values = [];
        if (innerJoin)
            hadValueMissing = false;

        //get the keys first
        for (i = 0; i < keyColumnCount; i++) {
            line.push(nextVal[i](curRow));
        }

        // get the value(s)
        // NOTE: collect queries returns one key with multiple values, get them all here and store .
        do {
            hasValueForCurrRow = false;
            value = nextVal[keyColumnCount](curRow);
            if (hasValueForCurrRow) {
                values.push(value);
            }
        } while (hasValueForCurrRow);
        line.push(values);

        if (lastRowWithValues === curRow) {
            if (!(innerJoin && hadValueMissing === true && 0 === values.length)) {
                lines.push(line);
            }
        }
    }

    return lines;
};

/**
 * Like columnsToRows, but compiles a comma-delimited string where rows are separated by newline characters instead of an actual array
 *
 * @param {ResultColumn[]}
 * @return {String}
 */
queryresults.reportToCsv = function(columns) {
    //initialize colPtr to 0 for all columns
    var colPtr = columns.map(function(c) {
            return 0;
        }),
        //get the value array for each column
        valCol = lodash.map(columns, 'values'), 
        colIdxs = columns.map(function(c,i) {
            return i;
        }),
        nonEmptyColIdxs = colIdxs.filter(function(i) {
            return valCol[i] && valCol[i].length > 0;
        }),
        //keep track of the last row to have values so
        //we know if we had a blank row (b/c row numbers are not contiguous) 
        lastRowWithValues,
        //for each col make a nextVal function
        nextVal = columns.map(function(c,i) {
            if (nonEmptyColIdxs.indexOf(i) === -1) {
                return function() { return ""; };
            } else {
                var values = columns[i].values,
                    rows = columns[i].rows,
                    valueType = columns[i].valueType,
                    //we quote if it isn't a number
                    shouldQuoteValue = (valueType !== 'int' && valueType !== 'decimal' && valueType !== 'float'),
                    myColPtr = colPtr[i],
                    nextRow = rows[myColPtr],
                    advance = function() {
                        myColPtr++;
                        nextRow = rows[myColPtr];
                    };

                return function(row) {
                    var ret;
                    if (row === nextRow) {
                        if (shouldQuoteValue) 
                            ret = '"' + values[myColPtr] + '"';
                        else
                            ret = values[myColPtr];
                        lastRowWithValues = row;
                        advance();
                    } else {
                        ret = "";
                    }
                    return ret;
                };
            }
        }),
        //calculate the first row
        firstRows = nonEmptyColIdxs.map(function(i) {
            return columns[i].rows[0]; 
        }),
        lastRows = nonEmptyColIdxs.map(function(i) {
            return columns[i].rows[valCol[i].length-1];
        }),
        minRow = Math.min.apply(Math, firstRows),
        maxRow = Math.max.apply(Math, lastRows),
        line,
        csv = columns.map(function(col) {
            return '"' + queryutil.stringifyMeasure(col.sourceQuery.sourceQuery.measure) + '"';
        }).join(',') + '\n',
        curRow,
        lineAdded = false,
        nextValCt = nextVal.length,
        i;

    //starting on minimum row, iterate through each row,
    for (curRow = minRow; curRow <= maxRow; curRow++) {
        line = '';

        if (lineAdded) {
            csv += '\n';
            lineAdded = false;
        }

        for (i = 0; i < nextValCt-1; i++) {
            line += nextVal[i](curRow) + ',';
        }
        line += nextVal[nextValCt-1](curRow); //last value separate so no ',' but without wasteful conditional

        if (lastRowWithValues === curRow) {
            csv += line;
            lineAdded = true;
        }
    }   

    return csv;
};

},{"../constant":191,"../cubiql":211,"../util":280,"./query":258,"./util":260,"assert":undefined,"lodash":90,"measure-query-gen/src/MQG":1}],260:[function(require,module,exports){
var assert = require("assert");
var cubiql = require("../cubiql");
var lodash = require("lodash");
var querygen = require("./query");
var queryfilter = require("./filter");
var MQG = require("measure-query-gen/src/MQG");
var mac = require("../multiaxisconfig");

var queryutil = exports;


/**
 * @param {MQG.Expr} expr1
 * @param {MQG.Expr} expr2
 * @return {Boolean}
 */
queryutil.exprContainsExpr = function(expr1, expr2) {
   var coreExpr = $getCoreExpr(expr1);
   //if they match exactly
   return stringifyExpr(expr1) === stringifyExpr(expr2) ||
      //or if the core of the first expression is not the same and that core contains expr2 
      (coreExpr !== expr1 && queryutil.exprContainsExpr(coreExpr, expr2));
};

function $stringifyLevels(levels, ordered) {
    var levelNames = levels.map(function(ql) {
            return mac.mqgLevelToQName(ql);
        }),
        i = 0,
        str = '(';

    if (ordered) {
        levelNames.sort();
    }

    for(; i < levelNames.length; i++)
        str += levelNames[i] + ",";
    str += ')';

    return str;
}

function $stringifyIntersection(inter, ordered) {
    if (!inter) return "";
    return $stringifyLevels(inter.qualified_level, ordered);
}

function $unstringifyIntersection(interStr) {
    var withoutParens = interStr.slice(1,interStr.length - 1),
        levels = withoutParens.split(',').filter(function(qName) {
            return qName.length;
        }).map(function(qName) {
            return mac.qNameToMQGLevel(qName);
        });

    return new MQG.Intersection(levels);
}

queryutil.makeCaptionForMeasure = function(m, model) {
    if (m instanceof querygen.FilteredMeasureQuery)
        return queryutil.makeCaptionForMeasure(m.measureQuery.measure);
    else if (m instanceof querygen.Metric)
        return model.getMeasureInfo(m.name).caption || m.name;
    else if (m instanceof querygen.Attribute)
        return cubiql.qualifiedLevelToQualifiedName(m.qualifiedLevel) + ":" + m.name;
    else if (m instanceof querygen.OverriddenAttribute)
        return queryutil.makeCaptionForMeasure(m.attributes[0]);
    else if (m instanceof querygen.Cast)
        return queryutil.makeCaptionForMeasure(m.measureQuery.measure, model);
    else if (m instanceof querygen.Operator)
        return queryutil.makeCaptionForMeasure(m.measureQueries[0].measure, model);
    else if (m instanceof querygen.OverriddenMeasureQuery)
        return queryutil.makeCaptionForMeasure(m.measureQueries[0].measure, model);
    else 
        return $stringifyMeasure(m);
};

/**
 * @param {querygen.Measure} m
 */
function $stringifyMeasure(m) {
    if (m instanceof querygen.Metric) {
        return m.name;
    } else if (m instanceof querygen.FilteredMeasureQuery) { 
        return "FilteredMeasureQuery[" + $stringifyMeasureQuery(m.measureQuery) + "]";
    } else if (m instanceof querygen.Attribute) {
        return cubiql.qualifiedLevelToQualifiedName(m.qualifiedLevel, true) + '.' + m.name;
    } else if (m instanceof querygen.OverriddenAttribute) { 
        return "OverridenAttribute[" + m.attributes.map($stringifyMeasure).join(",") + "]";
    } else if (m instanceof querygen.LevelMap) {
        return "LevelMap[" + 
            cubiql.qualifiedLevelToQualifiedName(m.childLevel, true) + "," + 
            cubiql.qualifiedLevelToQualifiedName(m.parentLevel, true) + "," + 
            m.hierarchyName + "]";
    } else if (m instanceof querygen.ConstantTerm) {
        return m.name; 
    } else if (m instanceof querygen.LiteralRelation) {
        return m.name;
    } else if (m instanceof querygen.Cast) {
        return "Cast[" + m.measureQuery.measure.name + "]";
    } else if (m instanceof querygen.Operator) {
        return m.name + "[" + m.measureQueries.map($stringifyMeasureQuery) + "]";
    } else if (m instanceof querygen.OverriddenMeasureQuery) {
        return "OverriddenMeasureQuery[" + m.measureQueries.map($stringifyMeasureQuery).join(",") + "]";
    } else if (m instanceof querygen.Application) {
        return "Application[" + $stringifyMeasure(m.abstraction) + " | " + $stringifyInterArgs(m.interArgs) + " | " + $stringifyExprArgs(m.exprArgs) + "]";
    } else if (m instanceof querygen.Abstraction) {
        return "Abstraction[" + $stringifyMeasure(m.expr) + " | " + $stringifyInterArgs(m.interArgs) + " | " + $stringifyExprArgs(m.exprArgs) +  "]";
    } else if (m instanceof querygen.StringMeasure) {
        return "String[" + m.str + "]";
    } else {
        assert(false, "stringifyMeasure called on unsupported type: " + JSON.stringify(m));
    }
}

function $stringifyInterArgs(interArgs) {
    var str = " interArgs: [";
    
    if (interArgs) {
        str = str.concat(interArgs.map(function(arg) {
            return "( " + arg.name + " @ " + $stringifyIntersection(arg.intersection) + " ),";
        }));
    }
    str += "]";

    return str;
}

function $stringifyExprArgs(exprArgs) {
    var str = " exprArgs: [";
    
    if (exprArgs) {
        str = str.concat(exprArgs.map(function(arg) {
            return "( " + arg.name + " @ " + JSON.stringify(arg.expr) + " ),";
        }));
    }
    str += "]";

    return str;
}

function $stringifyAggMethodLookup(aggMethodLookup) {
    var levelNames = Object.keys(aggMethodLookup || {}),
        numLevels = levelNames.length,
        str = " by {",
        agg;
        
    for (var i = 0; i < numLevels; i++) {
        agg = aggMethodLookup[levelNames[i]];
        if (agg) {
            str += "(" + JSON.stringify(agg.primitive || agg.composite || agg.named) + ":" + levelNames[i] + ", " + agg.isRecalc + ", " + agg.isDefault + ")";
        }
    }

    str += "}";
    
    return str;
}

function $stringifyMeasureQuery(mq) {
    if (mq && mq.validityMessages && mq.validityMessages.length) {
        return $stringifyInvalidMeasureQuery(mq);
    }
    var str = $stringifyMeasure(mq.measure) + " @ " + $stringifyIntersection(mq.inter) + $stringifyAggMethodLookup(mq.aggMethodLookup) + " @ " +  $stringifyIntersection(mq.mappedInter);
    if (mq.filter) {
        str += " filtered by " + $stringifyQueryFilter(mq.filter);
    }
    
    return str;
}

function $stringifyInvalidMeasureQuery(mq) {
    var label = mq.label || "Unlabelled query";
    return "Invalid query '" + label + "', cause: " + mq.validityMessages.join(", ");
}

function $stringifyComparison(c) {
    if (c instanceof queryfilter.RelationComparison) {
        return "RelationComparison[" + c.name + ", " + c.members.length + " members]";
    } else if (c instanceof queryfilter.ParamComparison) {
        return "ParamComparison[" + c.name + ", " + c.members.length + " members, " + c.comparison + " comparison]";
    } else if (c instanceof queryfilter.PositionComparison) {
        return "PositionComparison[]";
    }
}

function $stringifyQueryFilter(f) {
    if (f instanceof queryfilter.AttributeFilter) {
        return "AttributeFilter[" + f.comparisons.map($stringifyComparison).join(",") + "]:" + $stringifyMeasureQuery(f.measureQuery);
    } else if (f instanceof queryfilter.CompositeFilter) {
        return "CompositeFilter[" + f.filters.map($stringifyQueryFilter).join(" & ") + "]";
    } else if (f instanceof queryfilter.MetricFilter) {
        return "MetricFilter[" + (f.comparisons.length ? f.comparisons.map($stringifyComparison).join(",") : " position-only ") + "]:" + $stringifyMeasureQuery(f.measureQuery);
    } else if (f instanceof queryfilter.PositionFilter) {
        return "PositionFilter[" + $stringifyIntersection(f.inter) + " : " + f.relationComparisons.map($stringifyComparison).join(",") + "]";
    } else if (f instanceof queryfilter.MeasureQueryFilter) {
        return "MeasureQueryFilter[" + f.queries.map($stringifyMeasureQuery).join(f.disjunctive ? " || " : " && ") + "]--" + (f.byValue ? " by " + f.byValue.operator : " by position");
    } else {
        throw new Error("Can't stringify unidentifiable filter", f);
    }
}

function $stringifyMetricIntersection(mi) {
    return mi.metric + " @ " +
        $stringifyIntersection(mi.inter, true);
}

queryutil.stringifyLevels = $stringifyLevels;
queryutil.stringifyIntersection = $stringifyIntersection;
queryutil.unstringifyIntersection = $unstringifyIntersection;
queryutil.stringifyMeasure = $stringifyMeasure;
queryutil.stringifyMeasureQuery = $stringifyMeasureQuery;
queryutil.stringifyMetricIntersection = $stringifyMetricIntersection;
queryutil.stringifyQueryFilter = $stringifyQueryFilter;

queryutil.measureQueriesEqual = function(query1, query2) {
    return queryutil.stringifyMeasureQuery(query1) === queryutil.stringifyMeasureQuery(query2);
};

queryutil.filtersEqual = function(filter1, filter2) {
    return queryutil.stringifyQueryFilter(filter1) === queryutil.stringifyQueryFilter(filter2);
};

/**
 * @param {querygen.MeasureQuery} query
 * @param {querygen.Measure} measure
 * @return {Boolean}
 */
queryutil.measureQueryDependsOnMeasure = function(query, measure) {
    if ($measureDependsOnMeasure(query.measure, measure))
        return true;

    if (query.filter && $filterDependsOnMeasure(query.filter, measure))
        return true;
    
    //special case, if the measure is an id Attribute with a label in the intersection of the query, it depends on it
    if (measure instanceof querygen.Attribute && measure.name === "id" && 
        query.mappedInter.qualified_level.some(cubiql.qlevel.labelEquals(cubiql.qlevel.getLabel(measure.qualifiedLevel))))
        return true;

    return false;
};

function $measureDependsOnMeasure(measure1, measure2) {
    if (querygen.measuresEqual(measure1, measure2))
        return true;

    //now for the special cases, which are
    //  LevelMap depends on Attribute for id of one of the levels in the map 
    if (measure1 instanceof querygen.LevelMap && measure2 instanceof querygen.Attribute &&
        measure2.name === "id" && (cubiql.qLevelEqual(measure2.qualifiedLevel, measure1.childLevel) || cubiql.qLevelEqual(measure2.qualifiedLevel, measure1.parentLevel)))
        return true;

    //  OverriddenAttribute depends on an Attribute matching one of its own attributes
    if (measure1 instanceof querygen.OverriddenAttribute &&
            measure1.attributes.some(function(attr) {
                return querygen.measuresEqual(attr, measure2);
            }))
        return true;            

    return false;
}

function $filterDependsOnMeasure(filter, measure) {
    if (filter.measureQuery)
        return queryutil.measureQueryDependsOnMeasure(filter.measureQuery, measure);
    else
        return false;
}

/**
 * Given a list of source levels and target levels, apply a heuristic to determine what LabelMap is required
 *
 * @param {MQG.QualifiedLevel[]} srcLevels
 * @param {MQG.QualifiedLevel[]} tgtLevels
 * @return {LabelMap}
 */
queryutil.calcLabelMap = function(srcLevels, tgtLevels) {
    var labelMap = {};

    srcLevels.forEach(function(srcQl) {
        //TODO this won't be a reasonable heuristic enough when we have dim-splitting
        var matches = tgtLevels.filter(cubiql.qlevel.qLevelEqual(srcQl));

        if (matches.length > 0) 
            labelMap[cubiql.qlevel.getLabel(srcQl)] = cubiql.qlevel.getLabel(matches[0]);
    });

    return labelMap;
};

/**
 * Computes a label map from a list of levels. The label map will simply use
 * the labels from the given src levels and map the labels to themselvs.
 * 
 * @param  {MQG.QualifiedLevel[]} srcLevels
 * @return {LabelMap}
 */
queryutil.calcSelfLabelMap = function(srcLevels) {
    return srcLevels.reduce(function(labelMap, lvl) {
        var label = cubiql.qlevel.getLabel(lvl);
        labelMap[label] = label;
        return labelMap;
    }, {});
};

var KEY_SEP = '__';
/**
 * @param {MQG.QualifiedLevel} ql
 * @return {String}
 */
queryutil.qlToKey = function(ql) {
    return (ql.label || '') + KEY_SEP + ql.dimension + KEY_SEP + ql.level;
}

/**
 * @param {String} key
 * @return {MQG.QualifiedLevel}
 */
queryutil.keyToQl = function(key) {
    var tokens = key.split(KEY_SEP);
    return new MQG.QualifiedLevel(
        tokens[1],
        tokens[2],
        null,
        tokens[0]
    );
};

/**
 * Format measure service error into string
 *
 * @param {MeasureProtocol.Response} error
 * @return {String}
 */
queryutil.formatServiceError = function(error) {
    var problems = (error.body && error.body.problem) || [];

    return "Problems: \n " + problems.map(function(problem, i) {
        return "  " + i + ": " + problem.text;
    }).join("\n");;
};

/**
 * Check a measure service response for validity. Throw exception if there is an error
 *
 * @param {MeasureProtocol.Response} response
 * @return {undefined}
 */
queryutil.checkServiceResponse = function(request, response) {
    if (response.exception && response.exception === 'ERROR') {
        var problems = response.problem || [],
            errors = lodash.map(problems, 'text');
                 
        console.error('Measure Service Error received!');
        console.error(request, response);

        throw new Error("Measure Service Exceptions: " + errors.join('\n')); 
    }
};

/**
 * Find type for a Measure
 *
 * @param {querygen.Measure} measure
 * @param {MeasureModel} model
 * @return {String|undefined} 
 */
queryutil.getMeasureValueType = function(measure, model) {
    var type,
        ql;

    if (measure instanceof querygen.ConstantTerm) {
        type = measure.type;
    } else if (measure instanceof querygen.FixedLevel) {
        ql = measure.qualifiedLevel;
        type = model.getAttributeType('id', cubiql.qlevel.getDimension(ql), cubiql.qlevel.getLevel(ql));
    } else if (measure instanceof querygen.Attribute) {
        ql = measure.qualifiedLevel;
        type = model.getAttributeType(measure.name, cubiql.qlevel.getDimension(ql), cubiql.qlevel.getLevel(ql));
    } else if (measure instanceof querygen.Metric) {
        var measureInfo = model.getMeasureInfo(measure.name);
        if (measureInfo.type)
            type = querygen.Type[measureInfo.type.kind];
        else 
            type = querygen.Type.NONE;
    } else if (measure instanceof querygen.FilteredMeasureQuery) {
        return queryutil.getMeasureValueType(measure.measureQuery.measure, model);
    } else if (measure instanceof querygen.OverriddenMeasureQuery) {
        return queryutil.getMeasureValueType(measure.measureQueries[0].measure, model);
    } else if (measure instanceof querygen.LiteralRelation) {
        return measure.type; 
    } else if (measure instanceof querygen.OverriddenAttribute) {
        return queryutil.getMeasureValueType(measure.attributes[0], model);
    } else if (measure instanceof querygen.Cast) {
        return measure.type;
    } else if (measure instanceof querygen.Operator) {
        return model.getOperator(
            measure.name, 
            lodash.map(measure.measureQueries, "measure").map(function(measure) {
                return $getMeasureTypeObject(measure, model);
            })
        ).get("range").get("kind");
    } else if (measure instanceof querygen.Application) {
        return measure.signature.type.type;
    } else {
        throw new Error("Cant get MeasureValueType from unimplemented measure type!");
    }

    return type;
};

function $getMeasureTypeObject(measure, measureModel) {
    var valueType = queryutil.getMeasureValueType(measure, measureModel),
        coreExpr;

    if (valueType === "NAMED") {
        assert(measure instanceof querygen.Metric || measure instanceof querygen.FilteredMeasureQuery, "Currently getMeasureTypeObject only supports Metric and FilteredMeasureQuery measures");
        valuePredicate = measureModel.getMeasureInfo(measure.name).type.named;

        return {
            kind: valueType,
            named: valuePredicate
        };
    } else {
        return {
            kind: valueType
        };
    }
}

function $getCoreExpr(expr) {
    var kind = expr.kind;

    switch (kind) {
        case "DROP":
            return expr.drop.expr;
        case "RELABEL":
            return expr.relabel.expr;
        case "ATTRIBUTE":
            //attributes are their own core
            return expr;
        case "FILTER":
            return expr.filter.expr;
        case "DICE":
            return expr.dice.expr;
        case "AGGREGATION":
            return expr.aggregation.expr;
        case "METRIC":
            //metrics are their own core
            return expr;
        case "WIDEN":
            return expr.widen.expr;
        case "SPLIT":
            return expr.split.expr;
        case "DEMOTE":
            return expr.demote.expr;
        case "PARAM":
            //params are their own core
            return expr;
        case "APPLICATION":
            return expr.application.abstraction;
        default:
            throw new Error("Unable to get core expr of kind '" + kind + "'");
    }
}

/**
 * only cleans the core expressions, hopefully all thats needed for this hackery
 */
queryutil.cleanMQGExpr = function(expr) {
    var kind = expr.kind,
        props = Object.getOwnPropertyNames(expr),
        prop,
        first,
        i = 0;

    //strip all properties starting with _ or $
    for (; i < props.length; i++) {
        prop = props[i];
        first = prop[0];
        if (first === "$" || first === "_")
            delete expr[prop];
    }

    switch (kind) {
        case "DROP":
            queryutil.cleanMQGExpr(expr.drop.expr);
            break;
        case "RELABEL":
            queryutil.cleanMQGExpr(expr.relabel.expr);
            break;
        case "ATTRIBUTE":
            //attributes are terminal 
            break;
        case "FILTER":
            queryutil.cleanMQGExpr(expr.filter.expr);
            break;
        case "DICE":
            queryutil.cleanMQGExpr(expr.dice.expr);
            break;
        case "AGGREGATION":
            queryutil.cleanMQGExpr(expr.aggregation.expr);
            break;
        case "METRIC":
            //metrics are terminal 
            break;
        case "WIDEN":
            queryutil.cleanMQGExpr(expr.widen.expr);
            break;
        case "SPLIT":
            queryutil.cleanMQGExpr(expr.split.expr);
            break;
        case "DEMOTE":
            queryutil.cleanMQGExpr(expr.demote.expr);
            break;
        case "OVERRIDE":
            expr.override.expr.forEach(function(e) {
                queryutil.cleanMQGExpr(e);
            });
            break;
        case "PARAM":
            //params are terminal
            break; 
        case "APPLICATION":
            //queryutil.cleanMQGExpr(expr.application.abstraction);
            //currently we treat APPLICATION as terminal
            break;
        case "CAST":
            queryutil.cleanMQGExpr(expr.cast.expr);
            break;
        case "OP":
            expr.op.expr.forEach(queryutil.cleanMQGExpr);
            break;
        case "LITERAL":
            //don't clean literals
            break;
        default:
            throw new Error("Unable to clean MQG Expr of kind: '" + kind + "'");
    }
};

/**
 * @param {MQG.Expr} expr1
 */
function stringifyExpr(expr) {
    var kind = expr.kind,
        str;

    switch (kind) {
        case "ATTRIBUTE":
            str = $stringifyAttributeExpr(expr);
            break;
        case "FILTER":
            str = $stringifyFilterExpr(expr);
            break;
        case "DICE":
            str = $stringifyDiceExpr(expr);
            break;
        case "AGGREGATION":
            assert(!lodash.isUndefined(expr.aggregation.inter), "getIntersectionOfExpr does not support AggExprs that use Grouping yet");
            str = $stringifyAggExpr(expr);
            break;
        case "DROP":
            str = stringifyExpr(expr.drop.expr);
            break;
        case "RELABEL":
            str = $stringifyRelabelExpr(expr);
            break;
        case "METRIC":
            str = $stringifyMetricExpr(expr);
            break;
        case "WIDEN":
            str = $stringifyWidenExpr(expr);
            break;
        case "PARAM":
            str = $stringifyParamExpr(expr); 
            break;
        case "DEMOTE":
            str = $stringifyDemoteExpr(expr);     
            break;
        case "SPLIT":
            str = $stringifySplitExpr(expr);    
            break;
        case "APPLICATION":
            str = $stringifyAppExpr(expr);    
            break;
        case "OVERRIDE":
            str = $stringifyOverrideExpr(expr);
            break;
        default:
            throw new Error("Unable to stringify expr of kind '" + kind + "'");
    }

    return kind + "__" + str;
}

queryutil.stringifyExpr = stringifyExpr;

function $stringifyAppExpr(expr) {
    return stringifyExpr(expr.application.abstraction) + "__expr: " + JSON.stringify(expr.application.expr_arg) + " __inter: " + JSON.stringify(expr.application.inter_arg);  
}

function $stringifyOverrideExpr(expr) {
    return "Override[" + expr.override.expr.map(stringifyExpr).join("||") + "]";
}

function $stringifySplitExpr(expr) {
    return stringifyExpr(expr.split.expr) + "__" + JSON.stringify(expr.split.map);
}

function $stringifyDemoteExpr(expr) {
    return stringifyExpr(expr.demote.expr) + "__" + expr.demote.dimension + "__" + expr.demote.label;
}

function $stringifyAggExpr(expr) {
    return stringifyExpr(expr.aggregation.expr) + "__" + $stringifyIntersection(expr.aggregation.inter) + "__" + JSON.stringify(expr.aggregation.method);
}

function $stringifyWidenExpr(expr) {
    return stringifyExpr(expr.widen.expr) + "__" + $stringifyIntersection(expr.widen.inter);
}

function $stringifyDiceExpr(expr) {
    return stringifyExpr(expr.dice.expr) + "__" + expr.dice.dicer.map(stringifyExpr).join('__') + JSON.stringify(expr.dice.is_disjunction);
}

function $stringifyFilterExpr(expr) {
    return stringifyExpr(expr.filter.expr) + "__" + JSON.stringify(expr.filter.comparison) + "__" + JSON.stringify(expr.filter.is_disjunction);
}

function $stringifyAttributeExpr(expr) {
    return cubiql.qualifiedLevelToQualifiedName(expr.attribute.qualified_level) + "__" + expr.attribute.attribute;
}

function $stringifyMetricExpr(expr) {
    var interStr = expr.metric.inter ? $stringifyIntersection(expr.metric.inter) : 'IMPLIED';
    return interStr + '__' + expr.metric.name; 
}

function $stringifyParamExpr(expr) {
    var interStr = $stringifyIntersection(expr.param.signature.intersection);
    return interStr + '__' + expr.param.name + "__" + JSON.stringify(expr.param.type);
}

function $stringifyRelabelExpr(expr) {
    return stringifyExpr(expr.relabel.expr) + JSON.stringify(expr.relabel.map);
}

},{"../cubiql":211,"../multiaxisconfig":253,"./filter":257,"./query":258,"assert":undefined,"lodash":90,"measure-query-gen/src/MQG":1}],261:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");
    var EventEmitter = require("../event_emitter").EventEmitter;
    var NotificationLevels = require("../constant").ACTIONS.LEVELS;
    var ActionActions = require("../constant").ACTIONS.ActionActions;
    var ActionEvents = require("../constant").ACTIONS.ActionEvents;

    var MESSAGES = require("../constant").MESSAGES;

    /**
     * @typedef {Object} ActionStatus
     * @prop {String} type - the type of status, defined in constant.ACTIONS.levels
     * @prop {String} message - a message to display to the user
     */

    lodash.mixin(ActionStore.prototype, EventEmitter.prototype);
    function ActionStore(dispatcher) {
        var me = this;
        
        dispatcher.register(function(payload) {
            var action = payload.action;
            
            switch (action.actionType) {
                case ActionActions.CLEAR_STATUS:
                    me.$clearStatus(action.actionId);
                    break;
                case ActionActions.START_ACTION:
                    me.$startAction(action.actionId);
                    break;
                case ActionActions.FAIL_ACTION:
                    me.$failAction(action.actionId);
                    break;
                case ActionActions.SUCCEED_ACTION:
                    me.$succeedAction(action.actionId, action.status, action.sendQuery);
                    break;
                case ActionActions.LOAD_ACTIONS:
                    me.$loadActions(action.actionConfigs);
                    break;
            }
        });

        this.$actions = {};
        this.$actionIsRunning = {};
        this.$status = {};
    }
    
    ActionStore.prototype.destroy = function() {
        this.$actions = null;
        this.$actionIsRunning = null;
        this.$status = null;
    };

    ActionStore.prototype.$startAction = function(actionId) {
        this.$actionIsRunning[actionId] = true;
        this._emit(ActionEvents.ACTION_STARTED, {actionId: actionId});
        this._emit(ActionEvents.CHANGED);
    };
    
    ActionStore.prototype.$failAction = function(actionId) {
        this.$actionIsRunning[actionId] = false;
        this.$status[actionId] = {
            type: NotificationLevels.ERROR,
            message: MESSAGES.UNEXPECTED_SERVER_ERROR
        };
        this._emit(ActionEvents.ACTION_FAILED, {actionId: actionId});
        this._emit(ActionEvents.CHANGED);
    };
    
    ActionStore.prototype.$succeedAction = function(actionId, actionStatus, sendQuery) {
        this.$actionIsRunning[actionId] = false;
        this.$status[actionId] = actionStatus;

        if (sendQuery || lodash.isUndefined(sendQuery)) {
            this._emit(ActionEvents.ACTION_SUCCEEDED, {actionId: actionId});
        }
        this._emit(ActionEvents.CHANGED);
    };

    ActionStore.prototype.$loadActions = function(configs) {
        this.$actions = configs;
        this._emit(ActionEvents.ACTIONS_LOADED);
        this._emit(ActionEvents.CHANGED);
    };

    ActionStore.prototype.getAction = function(id) {
        return this.$actions[id];
    };

    ActionStore.prototype.getAllActions = function() {
        return this.$actions;
    };
    
    ActionStore.prototype.isActionEnabled = function(actionId) {
        if (!this.$actions[actionId]) {
            console.error("Action " + actionId + " does not exist");
            return false;
        }
        return this.$actions[actionId].is_enabled;
    };
    
    ActionStore.prototype.isActionRunning = function(actionId) {
        return this.$actionIsRunning[actionId];
    };

    ActionStore.prototype.getActionStatus = function(actionId) {
        var status = this.$status[actionId];

        if (lodash.isArray(status)) {
            // if status is an array, we merge the messages and the worse message type
            var message = lodash.map(status, "message").join(" "),
                statusTypes = lodash.map(status, "type"),
                hasError = statusTypes.indexOf("Error") > -1,
                hasWarning = statusTypes.indexOf("Warning") > -1,
                statusType = hasError ? NotificationLevels.ERROR : (hasWarning ? NotificationLevels.WARNING : NotificationLevels.INFO);
    
            return {
                type: statusType,
                message: message
            };
        }

        return status;
    };

    ActionStore.prototype.$clearStatus = function(actionId) {
        this.$status[actionId] = null;
        this._emit(ActionEvents.CHANGED);
    };

    module.exports = ActionStore;

},{"../constant":191,"../event_emitter":224,"lodash":90}],262:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var EventEmitter = require("../event_emitter").EventEmitter;
var CollaborationActions = require("../constant").Collaboration.ACTIONS;
var CollaborationEvents = require("../constant").Collaboration.EVENTS;

lodash.mixin(CollaborationStore.prototype, EventEmitter.prototype);
function CollaborationStore(dispatcher) {
    var me = this;

    dispatcher.register(function (payload) {
        var action = payload.action;

        switch (action.actionType) {
            case CollaborationActions.UPDATE_SOCKET_LIST:
                me.$userListUpdateFull(action.sockets, action.currentUser);
                break;
            case CollaborationActions.UPDATE_USER_STATUS:
                me.$updateUserList(action.socket, action.user, action.isConnection);
                break;
            case CollaborationActions.UPDATE_CURRENT_SOCKET:
                me.$updateCurrentSocket(action.isConnection);
                break;
        }
    });

    this.$userSocketMap = [];
    this.$usersInfo = [];
    this.$currentUser = {};
}

/**
 * Updates the current user status
 * @param  {Boolean} isConnection Connecton or disconnection
 */
CollaborationStore.prototype.$updateCurrentSocket = function (isConnection) {
    var updateEvent = isConnection ? CollaborationEvents.CONNECT : CollaborationEvents.DISCONNECT;
    this._emit(updateEvent);
};

/**
 * Updates the store's user list and user info list
 * @param  {Object[]} socketList Socket id and user name list
 * @param  {String} currentUser  curent user's name
 */
CollaborationStore.prototype.$userListUpdateFull = function (socketList, currentUser) {
    var newMap = {};

    for (var i = 0; i < socketList.length; i++) {
        newMap[socketList[i].username] = newMap[socketList[i].username] || [];
        newMap[socketList[i].username].push(socketList[i].id);
    }

    this.$userSocketMap = newMap;
    this.$usersInfo = this.$getUsersInfo([currentUser]);
    this.$currentUser = currentUser;

    this._emit(CollaborationEvents.USER_LIST_UPDATED);
};

/**
 * Updates the user list with a single user status change
 * @param  {String}  socket
 * @param  {String}  userName
 * @param  {Boolean} isConnection  user connecting or disconnecting
 */
CollaborationStore.prototype.$updateUserList = function (socket, userName, isConnection) {
    if (isConnection) {
        if (Object.keys(this.$userSocketMap).indexOf(userName) === -1)
            this.$addUser(socket, userName);
        else
            this.$addUserSocket(socket, userName);
    } else {
        this.$removeUserSocket(socket, userName)
    }
};

/**
 * Adds a new user to the users list
 * @param {String} socket   socket Id
 * @param {String} userName socket's user name
 */
CollaborationStore.prototype.$addUser = function (socket, userName) {
    this.$userSocketMap[userName] = [socket];
    this.$usersInfo[userName] = this.$getUsersInfo([userName])[userName];
    this._emit(CollaborationEvents.USER_CONNECTED);
};

/**
 * Adds a socket to an existing user
 * @param {String} socket   socket Id
 * @param {String} userName socket's user name
 */
CollaborationStore.prototype.$addUserSocket = function (socket, userName) {
    this.$userSocketMap[userName].push(socket);
    this._emit(CollaborationEvents.USER_NEW_SOCKET);
};


/**
 * Removes a socket from the sockets of an existing user
 * @param {String} socket   socket Id
 * @param {String} userName socket's user name
 */
CollaborationStore.prototype.$removeUserSocket = function (socket, userName) {
    if (!this.$userSocketMap[userName]) {
        console.error("user already disconnected");
        return;
    }

    if (this.$userSocketMap[userName].indexOf(socket) === -1) {
        console.error("the socket: " + socket + " for user: " + userName + " doesn't exist");
        return;
    }

    this.$userSocketMap[userName].splice(this.$userSocketMap[userName].indexOf(socket), 1);

    if (this.$userSocketMap[userName] && !this.$userSocketMap[userName].length) {
        delete this.$userSocketMap[userName];
        this._emit(CollaborationEvents.USER_DISCONNECTED);
        return;
    }

    this._emit(CollaborationEvents.USER_SOCKET_CLOSED);
};

/**
 * Gets a user's info
 * @param  {String} username
 * @return {Object} Object containing user info
 */
CollaborationStore.prototype.getUserInfo = function (username) {
    return this.$usersInfo[username];
};

/**
 * Returns the list of users (current user excluded)
 * @return {Array} Users
 */
CollaborationStore.prototype.getUsers = function () {
    var usersList = Object.keys(this.$userSocketMap);
    usersList.splice(usersList.indexOf(this.$currentUser), 1);
    return usersList;
};

/**
 * Returns the list of users (current user excluded)
 * @return {Array} Users
 */
CollaborationStore.prototype.$getUsersInfo = function (users) {
    var usersInfo = {};
    for (var i = 0; i < users.length; i++) {
        usersInfo[users[i]] = {
            userName: users[i]
        };
    }
    return usersInfo;
};

module.exports = CollaborationStore;

},{"../constant":191,"../event_emitter":224,"lodash":90}],263:[function(require,module,exports){
    "use strict";
    
    var EventEmitter = require("../event_emitter").EventEmitter;
    var lodash = require("lodash");
    var ACTIONS = require("../constant").DND.ACTIONS;
    var EVENTS = require("../constant").DND.EVENTS;
    var STATE = require("../constant").DND.STATE;

    /**
     * This is a generic drag and drop store. It can be used to drag anything.
     * It stores data for the object that is being dragged and data for
     * the object that we are dragging over.
     */
    lodash.mixin(DragAndDropStore.prototype, EventEmitter.prototype);
    function DragAndDropStore(dispatcher) {
        this.$state = null;
        this.$dragType = null;
        this.$dragData = null;
        this.$dragOverType = null;
        this.$dragOverData = null;
        this.$dropType = null;
        this.$dropData = null;
        
        if (dispatcher) {
            this.registerActionHandlers(dispatcher);
        }
    }
    
    /**
     * @param {*} dragData
     */
    DragAndDropStore.prototype.$startDrag = function(type, dragData) {
        this.$state = STATE.DRAGGING;
        this.$dragType = type;
        this.$dragData = dragData;
        this._emit(EVENTS.CHANGED);
    };

    DragAndDropStore.prototype.$stopDrag = function() {
        this.$state = null;
        this.$dragType = null;
        this.$dragData = null;
        this.$dragOverType = null;
        this.$dragOverData = null;
        this.$dropType = null;
        this.$dropData = null;
        this._emit(EVENTS.CHANGED);
    };

    DragAndDropStore.prototype.$dragOver = function(type, dragOverData) {
        this.$dragOverType = type;
        this.$dragOverData = dragOverData;
        this._emit(EVENTS.CHANGED);
    };

    DragAndDropStore.prototype.$drop = function(type, dropData) {
        this.$state = STATE.DROPPED;
        this.$dropType = type;
        this.$dropData = dropData;
        this._emit(EVENTS.CHANGED);
    };
    
    DragAndDropStore.prototype.getDragType = function() {
        return this.$type;
    };
    
    /**
     * Returns the data for the drag object
     * @return {*}
     */
    DragAndDropStore.prototype.getDragOver = function() {
        return this.$dragOverData;
    };
    
    /**
     * Returns the data for the object that we are dragging over
     * @return {*}
     */
    DragAndDropStore.prototype.getDragData = function() {
        return this.$dragData;
    };
    
    DragAndDropStore.prototype.getDropData = function() {
        return this.$dropData;
    };

    DragAndDropStore.prototype.getDragType = function() {
        return this.$dragType;
    };

    DragAndDropStore.prototype.getDragOverType = function() {
        return this.$dragOverType;
    };

    DragAndDropStore.prototype.getDropType = function() {
        return this.$dropType;
    };

    DragAndDropStore.prototype.isDragging = function() {
        return this.$state === STATE.DRAGGING;
    };

    DragAndDropStore.prototype.didDrop = function() {
        return this.$state === STATE.DROPPED;
    };

    /**
     * Registers the actions with the DragAndDropStore and
     * returns the bound store.
     * 
     * @param {Dispatcher} dispatcher
     * @return {DragAndDropStore}
     */
    DragAndDropStore.prototype.registerActionHandlers = function(dispatcher) {
        var me = this;
        
        this.dispatcherIndex = dispatcher.register(function(payload) {
            var action = payload.action;
            
            switch (action.actionType) {
                case ACTIONS.DRAG:
                    me.$startDrag(action.type, action.dragData);
                    break;
                case ACTIONS.DRAGEND:
                    me.$stopDrag();
                    break;
                case ACTIONS.DRAGOVER:
                    me.$dragOver(action.type, action.dragOverData);
                    break;
                case ACTIONS.DROP:
                    me.$drop(action.type, action.dropData);
                    break;
            }
        });
    };

    module.exports = DragAndDropStore;

},{"../constant":191,"../event_emitter":224,"lodash":90}],264:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var EventEmitter = require("../event_emitter").EventEmitter;
var lodash = require("lodash");
var MeasureModelActions = require("./measuremodelstore").MeasureModelActions;
var PivotConfigActions = require("./pivotconfigstore").PivotConfigActions;
var cubiql = require("../cubiql");
var SORT = require("../constant").SORT;
var mac = require("../multiaxisconfig");

function FieldStore(dispatcher, modelStore, pivotConfigStore) {
    var me = this;
    
    this.$modelStore = modelStore;
    this.$pivotConfigStore = pivotConfigStore;

    this.$fields = Immutable.List();
    
    this.$update();
    
    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case MeasureModelActions.SET_MODEL:
                dispatcher.waitFor([ modelStore.dispatcherIndex ], function() {
                    me.$update();
                });
                break;
            case PivotConfigActions.SET_CONFIG:
                dispatcher.waitFor([ pivotConfigStore.dispatcherIndex ], function() {
                    me.$update();
                });
                break;
        }
    });
}
lodash.mixin(FieldStore.prototype, EventEmitter.prototype);

FieldStore.prototype.$update = function() {
    var me = this,
        pivotConfigStore = this.$pivotConfigStore,
        model = this.$modelStore.getServerModel();

    if (!model)
        return;
    
    this.$measureFields = model.get("metric").map(function(m) {
        var metricName = m.get("name");

        return mac.mkMeasureField({ 
            id: metricName, 
            fieldLabel: m.get("caption") || metricName,
            data: [{
                name: "value",
                measure: {
                    metric: {
                        name: metricName
                    }
                },
                format: pivotConfigStore.getMetricFormat(metricName)
            }]
        });
    });

    this.$dimensionFields = model.get("dimension").map(function(d) {
        return new mac.DimensionField({ id: d.get("name"), dimension: d.get("name"), dimensionLabel: d.get("name"), fieldLabel: d.get("caption") || d.get("name") });
    });

    this.$levelFields = model.get("dimension").flatMap(function(d) {
        return d.get("level").map(function(lvl) {
            var qName = cubiql.qualifiedName(d.get("name"), lvl.get("name")),
                sortConfig = pivotConfigStore.getLevelDefaultSort(qName);

            return mac.mkLevelField({ 
                id: cubiql.qualifiedName(d.get("name"), lvl.get("name")), 
                level: {
                    labelName: d.get("name"),
                    dimensionName: d.get("name"),
                    levelName: lvl.get("name")
                },
                data: [{
                    name: "label",
                    measure: {
                        attribute: {
                            name: "label",
                            level: {
                                labelName: d.get("name"),
                                dimensionName: d.get("name"),
                                levelName: lvl.get("name")
                            }
                        }
                    }
                }],
                sortConfigs: [{
                    sortType: SORT.ASCENDING, 
                    measure: {
                        attribute: {
                            name: sortConfig.sortAttr,
                            level: {
                                dimensionName: d.get("name"),
                                levelName: lvl.get("name")
                            }
                        }
                    },
                }],
                fieldLabel: lvl.get("caption") || lvl.get("name")
            });
        }).push(mac.mkLevelField({
            id: cubiql.qualifiedName(d.get("name"), "ALL"),
            level: {
                labelName: "All " + (d.get("caption") || d.get("name")),
                dimensionName: d.get("name"),
                levelName: "ALL" 
            },
            displayMode: mac.LevelDisplayMode.NONE,
            rollupConfigs: Immutable.List([mac.mkRollupConfig({ methodName: "DEFAULT" })]),
            fieldLabel: "All " + (d.get("caption") || d.get("name"))
        }));
    });

    this.$measureGroupFields = Immutable.List([ new mac.MeasureGroupField({ id: "-:Measures", fieldLabel: "Measures" }) ]);
    
    this.$fields = Immutable.Map().withMutations(function(fields) {
        me.$measureFields.forEach(function(m) {
            fields.set(getKey(m), m);
        });

        me.$dimensionFields.forEach(function(d) {
            fields.set(getKey(d), d);
        });

        me.$levelFields.forEach(function(lvl) {
            fields.set(getKey(lvl), lvl);
        });

        me.$measureGroupFields.forEach(function(mg) {
            fields.set(getKey(mg), mg);
        });
    });
};

function getKey(field) {
    return Immutable.Map({ id: field.get("id"), type: field.get("type") });
}

function getKeyFromIdAndType(id, type) {
    return Immutable.Map({ id: id, type: type });
}

/**
 * Returns all the fields for the given type. If no type is specified, returns a
 * list of all fields. Returns ImmutableJS data.
 * @param  {mac.FieldTypes} [type] optional type of field to return
 * @return {Immutable.List<Field>}
 */
FieldStore.prototype.getFields = function(type) {
    switch (type) {
        case mac.FieldTypes.LEVEL:
            return this.$levelFields;
        case mac.FieldTypes.DIMENSION:
            return this.$dimensionFields;
        case mac.FieldTypes.MEASURE:
            return this.$measureFields;
        case mac.FieldTypes.MEASURE_GROUP:
            return this.$measureGroupFields;
        default:
            return this.$fields;
    }
};

FieldStore.prototype.getField = function(id, type) {
    return this.$fields.get(getKeyFromIdAndType(id, type));
};

FieldStore.prototype.getFieldFromQualifiedName = function(qName) {
    // fields from a qualified name can only be levels, measures ar field groups
    // and are guaranteed to be unique
    return this.$fields.get(getKeyFromIdAndType(qName, mac.FieldTypes.LEVEL)) || 
        this.$fields.get(getKeyFromIdAndType(qName, mac.FieldTypes.MEASURE)) ||
        this.$fields.get(getKeyFromIdAndType(qName, mac.FieldTypes.MEASURE_GROUP));
};

module.exports.FieldStore = FieldStore;

},{"../constant":191,"../cubiql":211,"../event_emitter":224,"../multiaxisconfig":253,"./measuremodelstore":267,"./pivotconfigstore":274,"immutable":44,"lodash":90}],265:[function(require,module,exports){
"use strict";

    var util = require("../util");
    var lodash = require("lodash");
    var EventEmitter = require("../event_emitter").EventEmitter;
    var createConstant = require("./store").createConstant;

    lodash.mixin(LogStore.prototype, EventEmitter.prototype);
    function LogStore(dispatcher) {
        var me = this;
        
        this.dispatcherIndex = dispatcher.register(function(payload) {
            var action = payload.action;
            
            switch (action.actionType) {
                case LogActions.POST_ERROR:
                    me.$postError(action.error);
                    break;
                case LogActions.POST_WARN:
                    me.$postWarn(action.warningEvent, action.message, action.errorObject);
                    break;
            }
        });
    }

    LogStore.prototype.$postError = function(error) {
        this._emit(LogEvents.ERROR, error);
    };
    
    LogStore.prototype.$postWarn = function(warningEvent, message, errorObject) {
        if(lodash.values(LogEvents).indexOf(warningEvent) < 0){
          util.logError("unknown warning event :" + message);
          return;
        }

        if (!lodash.isUndefined(errorObject)) {
            console.error(errorObject);
        }
        
        this._emit(warningEvent, {
            message: message
        });
    };

    var LogActions = createConstant("LogActions", [
        "POST_ERROR",
        "POST_WARN",
        "POST_INFO"
    ]);
    
    var LogEvents = createConstant("LogErrors", [
        "ERROR",
        "WARNING",
        "INFO",
        "DATA_PROCESSING_ERROR",
        "EDITABILITY_CHECK_FAILED"
    ]);

    exports.LogStore = LogStore;
    exports.LogActions = LogActions;
    exports.LogEvents = LogEvents;

},{"../event_emitter":224,"../util":280,"./store":275,"lodash":90}],266:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var EventEmitter = require("../event_emitter").EventEmitter;
var createConstant = require("./store").createConstant;
var lodash = require("lodash");

/**
 * The MeasureLanguageStore manages the state of measure language editors
 * (what changes users have made to formulas in each formula editor),
 * and the state of rules and formulas in the data base.
 *
 * A measure language rule is composed of a primary formula and
 * an ordered list of inverse formulas. Thus a rule editor (measure language editor)
 * is composed of a primary formula editor and an orded list of
 * inverse formula editors.
 *
 * Every new rule editor that a users opens up is given an id (ruleEditorId).
 * As a user makes changes to the formula editors, we update the store with
 * the changes. When a user saves a rule editor, the rule editor now
 * is associated with a rule id (the name of the metric for the primary
 * formula of the rule).
 *
 * As a result, if a user starts editing a rule editor for Sales and
 * then closes the measure language editor and reopens it, the changes
 * made to the formulas will still be visible, even though they haven't
 * been submitted to the database.
 * 
 * @param {Dispatcher} dispatcher
 */
lodash.mixin(MeasureLanguageStore.prototype, EventEmitter.prototype);
function MeasureLanguageStore(dispatcher) {
    dispatcher.register(this.handlePayload.bind(this));

    this.$state = new MeasureLanguageState();
}

var MeasureLanguageState = Immutable.Record({
    storedRules: {
        primary: Immutable.Map(),
        inverses: Immutable.Map()
    },
    ruleEditors: Immutable.Map()
});

var RuleEditor = MeasureLanguageStore.RuleEditor = Immutable.Record({
    editorId: null, 
    ruleId: null,
    inverseEditors: Immutable.List(),
    error: null,
    isEditing: true,
    isEditable: false,
    formula: null,
    value: null
});

var InverseEditor = MeasureLanguageStore.InverseEditor = Immutable.Record({
    editorId: null,
    isEditing: true,
    isEditable: true,
    formula: null,
    value: null
});

MeasureLanguageStore.prototype.handlePayload = function(payload) {
    var me = this,
        action = payload.action;

    switch (action.actionType) {
        case Actions.LOAD_RULES:
            me.$state = MeasureLanguageStore.loadRules(me.$state, action.rules);
            me._emit(Events.CHANGE);
            break;
        case Actions.ADD_RULE_EDITOR:
            me.$state = MeasureLanguageStore.addRuleEditor(me.$state, action.ruleEditorId, action.ruleId);
            me._emit(Events.CHANGE);
            break;
        case Actions.ENTER_EDIT_MODE:
            me.$state = MeasureLanguageStore.enterEditMode(me.$state, action.ruleEditorId, action.inverseEditorId);
            me._emit(Events.CHANGE);
            break;
        case Actions.CLEAR_INVERSE_FORMULA_EDITS:
            me.$state = MeasureLanguageStore.clearInverseFormulaEdits(me.$state, action.ruleEditorId, action.inverseEditorId);
            me._emit(Events.CHANGE);
            break;
        case Actions.ADD_INVERSE_EDITOR:
            me.$state = MeasureLanguageStore.addInverseEditor(me.$state, action.ruleEditorId);
            me._emit(Events.CHANGE);
            break;
        case Actions.REMOVE_INVERSE_EDITOR:
            me.$state = MeasureLanguageStore.removeInverseEditor(me.$state, action.ruleEditorId, action.inverseEditorId);
            me._emit(Events.CHANGE);
            break;
        case Actions.EDIT_PRIMARY_FORMULA:
            me.$state = MeasureLanguageStore.editPrimaryFormula(me.$state, action.ruleEditorId, action.value);
            // we don't emit events here because we don't 
            // want to rerender the whole app every time the user types a character
            break;
        case Actions.EDIT_INVERSE_FORMULA:
            me.$state = MeasureLanguageStore.editInverseFormula(me.$state, action.ruleEditorId, action.inverseEditorId, action.value);
            // we don't emit events here because we don't 
            // want to rerender the whole app every time the user types a character
            break;
        case Actions.CLEAR_ALL_EDITS:
            me.$state = MeasureLanguageStore.clearAllEdits(me.$state, action.ruleEditorId);
            me._emit(Events.CHANGE);
            break;
        case Actions.SET_RULE_ID:
            me.$state = MeasureLanguageStore.setRuleId(me.$state, action.ruleEditorId, action.ruleId);
            me._emit(Events.CHANGE);
            break;
        case Actions.RULE_INSTALL_ERROR:
            me.$state = MeasureLanguageStore.setRuleError(me.$state, action.ruleEditorId, action.message);
            me._emit(Events.CHANGE);
            break;
    }
};

MeasureLanguageStore.prototype.getRuleEditor = function(ruleEditorId) {
    return MeasureLanguageStore.getRuleEditor(this.$state, ruleEditorId);
};

/**
 * Returns true if a metric has a measure language rule for it.
 * @param  {string}  metricName
 * @return {Boolean}
 */
MeasureLanguageStore.prototype.hasRule = function(metricName) {
    return this.$state.hasIn(["storedRules", "primary", metricName]);
};

/**
 * Returns true if an inverse editor has a formula stored for it.
 * 
 * @param  {String}  ruleEditorId
 * @param  {String}  inverseEditorId
 * @return {Boolean}
 */
MeasureLanguageStore.prototype.hasFormula = function(ruleEditorId, inverseEditorId) {
    var ruleEditor = MeasureLanguageStore.getRuleEditor(this.$state, ruleEditorId, inverseEditorId),
        inverseEditorIndex;
    if (ruleEditor) {
        inverseEditorIndex = MeasureLanguageStore.findInverseEditorIndex(ruleEditor, inverseEditorId);

        if (inverseEditorIndex !== -1) {
            return ruleEditor.getIn(["inverseEditors", inverseEditorIndex, "formula"]);    
        }
    }
};

/**
 * Returns all rule ids (metric names) that has an editor.
 * @return {Object}
 */
MeasureLanguageStore.prototype.getRulesWithEditors = function() {
    return this.$state.get("ruleEditors", new Immutable.Map()).filter(function(ruleEditor) {
        return ruleEditor.get("formula");
    }).map(function(ruleEditor) {
        return ruleEditor.get("ruleId");
    });
};

/**
 * Returns the editor state for a metric
 * @param  {String} metricName
 * @return {Object}
 */
MeasureLanguageStore.prototype.getEditorForMetric = function(metricName) {
    return this.$state.get("ruleEditors").find(function(ruleEditor) {
        return ruleEditor.get("ruleId") === metricName;
    });
};

/**
 * @param {Object} state    [description]
 * @param {String} editorId [description]
 * @param {String?} ruleId   [description]
 */
MeasureLanguageStore.addRuleEditor = function(state, editorId, ruleId) {
    var newRuleEditor = new RuleEditor({editorId: editorId}),
        primaryFormula,
        inverseFormulas,
        existingRuleEditor = MeasureLanguageStore.getRuleEditor(state, editorId);

    if (existingRuleEditor) {
        return state;
    }

    if (ruleId) {
        primaryFormula = state.getIn(["storedRules", "primary", ruleId]);
        inverseFormulas = state.getIn(["storedRules", "inverses", ruleId]);
        if (primaryFormula) {
            newRuleEditor = newRuleEditor.set("formula", primaryFormula)
                .set("ruleId", ruleId).set("isEditing", false);
        }
        if (inverseFormulas) {
            newRuleEditor = newRuleEditor.set("inverseEditors", inverseFormulas.map(function(formula, i) {
                return new InverseEditor({editorId: i, formula: formula, isEditing: false, isEditable: true});
            }));
        }
    }

    return state.setIn(["ruleEditors", editorId], newRuleEditor);
};

MeasureLanguageStore.getRuleEditor = function(state, ruleEditorId) {
    return state.getIn(["ruleEditors", ruleEditorId]);
};

MeasureLanguageStore.findInverseEditorIndex = function(ruleEditor, editorId) {
    return ruleEditor.get("inverseEditors", Immutable.List()).findIndex(function(editor) {
        return editor.get("editorId") === editorId;
    });
};

MeasureLanguageStore.updateRuleEditor = function(state, ruleEditorId, update) {
    var ruleEditor = MeasureLanguageStore.getRuleEditor(state, ruleEditorId);
    if (ruleEditor) {
        return state.updateIn(["ruleEditors", ruleEditorId], update);    
    }
    else {
        return state;
    }
};

MeasureLanguageStore.updateInverseEditor = function(ruleEditor, editorId, update) {
    var editorIndex = MeasureLanguageStore.findInverseEditorIndex(ruleEditor, editorId);
    if (editorIndex !== -1) {
        return ruleEditor.updateIn(["inverseEditors", editorIndex], update);    
    }
    else {
        return ruleEditor;
    }
};

MeasureLanguageStore.addInverseEditor = function(state, ruleEditorId) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        var inverseEditors = ruleEditor.get("inverseEditors", Immutable.List()),
            editorIndex = inverseEditors.count();
        return ruleEditor.set("inverseEditors", inverseEditors.push(
            new InverseEditor({editorId: editorIndex, isEditing: true, isEditable: true})));
    });
};

MeasureLanguageStore.removeInverseEditor = function(state, ruleEditorId, editorId) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        var inverseEditorIndex = MeasureLanguageStore.findInverseEditorIndex(ruleEditor, editorId);
        ruleEditor = ruleEditor.deleteIn(["inverseEditors", inverseEditorIndex]);

        if (!MeasureLanguageStore.isEditing(ruleEditor)) {
            ruleEditor = ruleEditor.delete("error");
        }

        return ruleEditor;
    });
};

MeasureLanguageStore.enterEditMode = function(state, ruleEditorId, editorId) {
    // for now we can only edit inverse formulas
    return this.editInverseFormula(state, ruleEditorId, editorId);
};

MeasureLanguageStore.editPrimaryFormula = function(state, ruleEditorId, value) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        return ruleEditor.set("value", value).set("isEditing", true);
    });
};

MeasureLanguageStore.editInverseFormula = function(state, ruleEditorId, editorId, value) {
    var updateInverseEditor = this.updateInverseEditor;

    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        return updateInverseEditor(ruleEditor, editorId, function(editor) {
            var ruleId = ruleEditor.get("ruleId"),
                inverseFormula;
            if (!value) {
                inverseFormula = state.getIn(["storedRules", "inverses", ruleId, editorId]);
                value = inverseFormula && inverseFormula.toString();
            }
            return editor.set("value", value).set("isEditing", true);
        });
    });
};

MeasureLanguageStore.clearAllEdits = function(state, ruleEditorId) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        return ruleEditor.delete("value").set("isEditing", false).delete("error")
            .update("inverseEditors", Immutable.List(), function(inverseEditors) {
                return inverseEditors.map(function(editor) {
                    return editor.delete("value").set("isEditing", false);
                });
        });
    });
};

MeasureLanguageStore.setRuleId = function(state, ruleEditorId, ruleId) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        return ruleEditor.set("ruleId", ruleId);
    });
};

MeasureLanguageStore.isEditing = function(ruleEditor) {
    if (ruleEditor.get("isEditing")) {
        return true;
    }
    return ruleEditor.get("inverseEditors", Immutable.List()).some(function(editor) {
        return editor.get("isEditing");
    });
};

MeasureLanguageStore.clearInverseFormulaEdits = function(state, ruleEditorId, editorId) {
    var updateInverseEditor = this.updateInverseEditor;

    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        ruleEditor = updateInverseEditor(ruleEditor, editorId, function(editor) {
            return editor.delete("value").set("isEditing", false);
        });

        if (!MeasureLanguageStore.isEditing(ruleEditor)) {
            ruleEditor = ruleEditor.delete("error");
        }

        return ruleEditor;
    });
};

MeasureLanguageStore.setRuleError = function(state, ruleEditorId, error) {
    return this.updateRuleEditor(state, ruleEditorId, function(ruleEditor) {
        return ruleEditor.set("error", error);
    });
};

MeasureLanguageStore.loadRules = function(state, storedRules) {
    var ruleEditors = MeasureLanguageStore.updateFormulas(state.get("ruleEditors"), storedRules);
    return state.set("storedRules", storedRules).set("ruleEditors", ruleEditors);
};

MeasureLanguageStore.updateFormulas = function(ruleEditors, storedRules) {
    return ruleEditors.map(function(ruleEditor) {
        var ruleId = ruleEditor.get("ruleId"),
            primaryFormula = storedRules.getIn(["primary", ruleId]),
            inverseFormulas = storedRules.getIn(["inverses", ruleId]);
        
        if (primaryFormula) {
            ruleEditor = ruleEditor.set("formula", primaryFormula);
        }
        if (inverseFormulas) {
            ruleEditor = ruleEditor.set("inverseEditors", inverseFormulas.map(function(inverseFormula, i) {
                var inverseEditor = ruleEditor.getIn(["inverseEditors", i]);

                return inverseEditor.set("formula", inverseFormula);
            }));
        }

        return ruleEditor;
    });  
};

MeasureLanguageStore.prototype.getLatestPrimaryFormula = function(ruleEditorId) {
    var ruleEditor = MeasureLanguageStore.getRuleEditor(this.$state, ruleEditorId),
        value = ruleEditor && ruleEditor.get("value"),
        formula = ruleEditor.get("formula");
    return value || (formula && formula.toString());
};

MeasureLanguageStore.prototype.getLatestInverseFormulas = function(ruleEditorId) {
    var ruleEditor = MeasureLanguageStore.getRuleEditor(this.$state, ruleEditorId);
    return ruleEditor.get("inverseEditors", Immutable.List()).map(function(editor) {
        var editorValue = editor.get("value"),
            formula = editor.get("formula");
        return editorValue || (formula && formula.toString()) || "";
    }).filter(lodash.identity).toArray();
};

var Events = MeasureLanguageStore.Events = createConstant("MeasureLanguageStore", [
    "CHANGE"
]);

var Actions = MeasureLanguageStore.Actions = createConstant("MeasureLanguageStore", [
    "LOAD_RULES",
    "ADD_RULE_EDITOR",
    "ENTER_EDIT_MODE",
    "CLEAR_INVERSE_FORMULA_EDITS",
    "ADD_INVERSE_EDITOR",
    "REMOVE_INVERSE_EDITOR",
    "EDIT_PRIMARY_FORMULA",
    "EDIT_INVERSE_FORMULA",
    "SAVE_RULE",
    "CLEAR_ALL_EDITS",
    "SET_RULE_ID",
    "RULE_INSTALL_ERROR"
]);

module.exports = MeasureLanguageStore;

},{"../event_emitter":224,"./store":275,"immutable":44,"lodash":90}],267:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var EventEmitter = require("../event_emitter").EventEmitter;
var lodash = require("lodash");
var createConstant = require("./store").createConstant;
var MeasureModel = require("../measuremodel");

/**
 * This module is responsible for providing facilities to query and
 * change the measure meta model.
 *
 * @constructor MeasureModelStore
 * @param {Dispatcher} dispatcher
 */
function MeasureModelStore(dispatcher) {
    var me = this;

    this.$serverModel = null;
    this.$measureModel = null;

    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case MeasureModelActions.SET_MODEL:
                me.$setModel(action.model);
                break;
            case MeasureModelActions.EDIT_MODEL:
                me.$editModel();
                break;
            case MeasureModelActions.ADD_LEVEL_ERROR:
                me.$addLevelError(action.levelName, action.error);
                break;
            case MeasureModelActions.SET_MEASURE_PROPERTIES_ERROR:
                me.$setMeasurePropertiesError();
                break;
        }
    });
}
lodash.mixin(MeasureModelStore.prototype, EventEmitter.prototype);

MeasureModelStore.prototype.$addLevelError = function(levelName, error) {
    this._emit(MeasureModelEvents.ADD_LEVEL_FAILED, {
        levelName: levelName,
        error: error
    });
};

MeasureModelStore.prototype.$setMeasurePropertiesError = function () {
    this._emit(MeasureModelEvents.SET_MEASURE_PROPERTIES_FAILED);
};

MeasureModelStore.prototype.$editModel = function() {
    this._emit(MeasureModelEvents.CHANGED);
};

MeasureModelStore.prototype.$setModel = function(newModel) {
    this.$serverModel = Immutable.fromJS(newModel);
    this.$measureModel = new MeasureModel(this.$serverModel);

    this._emit(MeasureModelEvents.CHANGED);
};

/**
 * Gets the currently cached measure model from the store
 *
 * @return {MeasureModel} the currently cached measure model
 */
MeasureModelStore.prototype.getModel = function() {
    return this.$measureModel;
};

MeasureModelStore.prototype.getServerModel = function() {
    return this.$serverModel;
};

MeasureModelStore.prototype.destroy = function () {
    this.$serverModel = null;
    this.$measureModel = null;
};

var MeasureModelEvents = createConstant("MeasureModel", [
    "CHANGED",
    "ADD_LEVEL_FAILED",
    "SET_MEASURE_PROPERTIES_FAILED"
]);

var MeasureModelActions = createConstant("MeasureModel", [
    "SET_MODEL",
    "ADD_LEVEL_ERROR",
    "EDIT_MODEL",
    "SET_MEASURE_PROPERTIES_ERROR"
]);

exports.MeasureModelStore = MeasureModelStore;
exports.MeasureModelEvents = MeasureModelEvents;
exports.MeasureModelActions = MeasureModelActions;

},{"../event_emitter":224,"../measuremodel":236,"./store":275,"immutable":44,"lodash":90}],268:[function(require,module,exports){
"use strict";

var assert = require("assert");
var lodash = require("lodash");

var CHANGE_EVENT = require("../constant").CHANGE_EVENT;
var EventEmitter = require("../event_emitter").EventEmitter;
var ModalWindowActions = require("../constant").ModalWindowActions;
var ModalWindowSpecs = require("../constant").ModalWindows.Specs;
var RenderPolicy = require("../constant").ModalWindows.RenderPolicy;


/**
 * An object that represents a specification (configuration) for a modal window.
 * @typedef {Object} ModalWindowSpec
 * @prop {string} id         the modal window unique identificator
 * @prop {number} index      what's the zIndex of modal window
 * @prop {string} type       type of the modal window
 * @prop {Object} [options]  possible parameters that should be passed to modal window constructor
 */

/**
 * A store that stores all modal windows in modeler.
 * @constructor ModalWindowStore
 */
lodash.mixin(ModalWindowsStore.prototype, EventEmitter.prototype);
function ModalWindowsStore(dispatcher) {
    var me = this;

    me.$windows = {};
    me.$index = 0;

    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch(action.actionType) {
            case ModalWindowActions.OPEN_WINDOW:
                me.$openWindow(action.windowType, action.options);
                break;
            case ModalWindowActions.CLOSE_WINDOW:
                me.$closeWindow(action.windowType, action.windowId);
                break;
        }
    });
}

/**
 * Adds a window specification.
 * @param {string} type      the type of window that should be opened
 * @param {Object} [options] the options that might be needed for window initialization
 */
ModalWindowsStore.prototype.$openWindow = function(type, options) {
    assert(ModalWindowSpecs[type], "Modal window with a type " + type + " isn't registered.");
    options = options || {};
    assert(!options.modelerApp, "Please ensure that you don't provide modelerApp as an option when opening a modal window.");

    // if there are no modal windows of the given type then create a place to store it.
    if (!this.$windows[type]) {
        this.$windows[type] = [];
    }

    var windowId = lodash.uniqueId("ModalWindowStore");

    switch(ModalWindowSpecs[type].renderPolicy) {
        case RenderPolicy.APPEND:
            this.$appendWindow(windowId, type, options);
            break;
        default:
            this.$replaceWindow(windowId, type, options);
    }

    this._emit(CHANGE_EVENT);
};

/**
 * Replaces a modal window.
 * @param {string} windowId   the id of the modal window
 * @param {string} type       the type of the modal window
 * @param {Object} [options]  options that will be passed to modal window constructor
 */
ModalWindowsStore.prototype.$replaceWindow = function(windowId, type, options) {
    this.$windows[type] = [this.$buildWindowSpec(windowId, type, options)];
};

/**
 * Adds a modal window to the end of windows list.
 * @param {string} windowId   the id of the modal window
 * @param {string} type       the type of the modal window
 * @param {Object} [options]  options that will be passed to modal window constructor
 */
ModalWindowsStore.prototype.$appendWindow = function(windowId, type, options) {
    this.$windows[type].push(this.$buildWindowSpec(windowId, type, options));
};

/**
 * Builds a window specification object.
 * @param {string} windowId   the id of the modal window
 * @param {string} type       the type of the modal window
 * @param {Object} [options]  options that will be passed to modal window constructor
 * @return {ModalWindowSpec} a window specification object
 */
ModalWindowsStore.prototype.$buildWindowSpec = function(windowId, type, options) {
    return {
        id: windowId,
        index: this.$index++,
        type: type,
        options: options
    };
};

/**
 * Removes the modal window.
 * @param {string} type  the type of the modal window that should be closed (removed)
 * @param {string} id    the id of the modal window that should be closed
 */
ModalWindowsStore.prototype.$closeWindow = function(type, id) {
    lodash.remove(this.$windows[type], function(windowSpec) {
        return windowSpec.id === id;
    });
    this._emit(CHANGE_EVENT);
};

/**
 * Returns the object that stores all open modal windows
 * @return {Object}
 */
ModalWindowsStore.prototype.getModalWindows = function() {
    return {
        views: this.$windows
    };
};

module.exports = ModalWindowsStore;

},{"../constant":191,"../event_emitter":224,"assert":undefined,"lodash":90}],269:[function(require,module,exports){

    "use strict";

    var EventEmitter = require("../event_emitter").EventEmitter;
    var lodash = require("lodash");
    var UpdateIntervals = require("../constant").Collaboration.UPDATE_INTERVALS;
    var IdleTimeValues = require("../constant").UserActivity.IDLE_TIME_VALUES;

    lodash.mixin(ModelerOptionStore.prototype, EventEmitter.prototype);
    function ModelerOptionStore(dispatcher, config) {
        this.$config = config;
        this.$collaborationConfig = this.$config && this.$config.collaboration;
        this.$idleTimeValuesConfig = this.$config && this.$config.idleTimeValues;
    }

    /**
     * Public Methods
     */

    /**
     * Gets time of being idle after which the user will see the notification
     * */
    ModelerOptionStore.prototype.getIdleNotificationTime = function() {
        return (this.$idleTimeValuesConfig && this.$idleTimeValuesConfig.idleNotificationTime) || IdleTimeValues.NOTIFICATION_TIME;
    };

    /**
     * Gets time(starting from the moment when a notification dialog is opened) after which the session will be closed.
     * */
    ModelerOptionStore.prototype.getIdleLogoutTime = function() {
        return (this.$idleTimeValuesConfig && this.$idleTimeValuesConfig.idleLogoutTime) || IdleTimeValues.LOGOUT_TIME;
    };

    /**
     * Gets time after which collaboration broadcasting messages will be ignored.
     * */
    ModelerOptionStore.prototype.getIgnoreBroadcastingTime = function() {
        return (this.$idleTimeValuesConfig && this.$idleTimeValuesConfig.ignoreBroadcastingTime) || IdleTimeValues.IGNORE_BROADCASTING_TIME;
    };

    ModelerOptionStore.prototype.canEditSchema = function() {
        return (this.$config && this.$config.editSchema) || false;
    };

    ModelerOptionStore.prototype.canEditRules = function() {
        return (this.$config && this.$config.editRules) || false;
    };

    ModelerOptionStore.prototype.getChartActions = function() {
        return (this.$config && this.$config.chart) || {};
    };

    ModelerOptionStore.prototype.getMinUpdateInterval = function() {
        return (this.$collaborationConfig && this.$collaborationConfig.minUpdateInterval) || UpdateIntervals.MIN;
    };

    ModelerOptionStore.prototype.getMaxUpdateInterval = function() {
        return (this.$collaborationConfig && this.$collaborationConfig.maxUpdateInterval) || UpdateIntervals.MAX;
    };

    exports.ModelerOptionStore = ModelerOptionStore;

},{"../constant":191,"../event_emitter":224,"lodash":90}],270:[function(require,module,exports){
"use strict";

var StoreEventEmitter = require("../event_emitter").StoreEventEmitter;
var mac_valid = require("../mac_validation");
var lodash = require("lodash");
var createConstant = require("./store").createConstant;

function MAConfigStore(dispatcher, measureModelStore, fieldStore) {
    var me = this;

    this.$measureModelStore = measureModelStore;
    this.$fieldStore = fieldStore;

    this.$views = {};

    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case MultiAxisConfigActions.SET_VIEW_TASK_CONFIG:
                me.$setViewTaskConfig(action.viewId, action.taskName, action.config);
                break;
            case MultiAxisConfigActions.SET_VIEW_TASK_ACTIVE:
                me.$setViewTaskActive(action.viewId, action.taskName);
                break;
            case MultiAxisConfigActions.SET_VIEW_TASK_INACTIVE:
                me.$setViewTaskInactive(action.viewId, action.taskName);
                break;
            case MultiAxisConfigActions.SET_VIEW_INACTIVE:
                me.$setViewInactive(action.viewId);
                break;
        }
    });
}

lodash.mixin(MAConfigStore.prototype, StoreEventEmitter.prototype);

MAConfigStore.prototype.$getOrCreateViewStorage = function(viewId) {
    if (!this.$views[viewId])
        this.$views[viewId] = {};

    return this.$views[viewId];
};

MAConfigStore.prototype.$setViewTaskConfig = function(viewId, taskName, config) {
    if (config.maConfig) {
        this.validateViewConfig(config.maConfig, true);
    }
    this.$getOrCreateViewStorage(viewId)[taskName] = { active: true, config: config };

    this._emit(viewId, MultiAxisConfigEvents.CHANGED);
};

MAConfigStore.prototype.getViewTaskConfig = function(viewId, taskName) {
    var viewTask = this.$views[viewId] && this.$views[viewId][taskName];
    return viewTask && viewTask.config;
};

/**
 * @param {String} viewId
 * @return {Boolean}
 */
MAConfigStore.prototype.viewIsActive = function(viewId) {
    return this.$views[viewId] && lodash.every(this.$views[viewId], function(viewTask) {
        return viewTask.active === true;
    });
};

MAConfigStore.prototype.getActiveViewTasks = function() {
    return this.getViewTasks(true);
};

MAConfigStore.prototype.getViewTasks = function(activeOnly) {
    activeOnly = activeOnly || false;
    var activeTasks = [],
        me = this;

    Object.keys(this.$views).forEach(function(viewId) {
        var tasks = me.$views[viewId];
        Object.keys(tasks).forEach(function(taskName) {
            if (!activeOnly || (activeOnly && tasks[taskName].active)) {
                activeTasks.push({
                    viewId: viewId,
                    taskName: taskName
                });
            }
        });
    });

    return activeTasks;
};

/**
 * @param {String} viewId
 * @param {String} taskName
 * @return {Boolean}
 */
MAConfigStore.prototype.viewTaskIsActive = function(viewId, taskName) {
    var viewTask = this.$views[viewId] && this.$views[viewId][taskName];

    return !!viewTask && viewTask.active === true;
};

MAConfigStore.prototype.$setViewInactive = function(viewId) {
    var view = this.$views[viewId];
    if (view) {
        this.$views[viewId] = lodash.mapValues(view, function(task) {
            return Object.assign({}, task, { active: false });
        });
        this._emit(viewId, MultiAxisConfigEvents.CHANGED);
    }
};

MAConfigStore.prototype.$setViewTaskActive = function(viewId, taskName) {
    var viewTask = this.$views[viewId] && this.$views[viewId][taskName];
    if (viewTask) {
        this.$views[viewId][taskName] = Object.assign({}, viewTask, { active: true });
        this._emit(viewId, MultiAxisConfigEvents.CHANGED);
    }
};

MAConfigStore.prototype.$setViewTaskInactive = function(viewId, taskName) {
    var viewTask = this.$views[viewId] && this.$views[viewId][taskName];
    if (viewTask) {
        this.$views[viewId][taskName] = Object.assign({}, viewTask, { active: false });
        this._emit(viewId, MultiAxisConfigEvents.CHANGED);
    }
};

MAConfigStore.prototype.validateViewConfig = function(config, failOnInvalid) {
    var messages = [],
        model = this.$measureModelStore.getModel();

    messages = messages.concat(mac_valid.validateRollupConfigs(config, model));

    if (messages.length && failOnInvalid)
        throw new Error("Invalid MultiAxis Config set!\nReasons:\n" +
            messages.map(function(m) { return "\t" + m + "\n"; }).join(""));

    return messages;
};

var MultiAxisConfigEvents = createConstant("MultiAxisStore", [
    "CHANGED",
]);

var MultiAxisConfigActions = createConstant("MultiAxis", [
    "SET_VIEW_TASK_CONFIG",
    "SET_VIEW_TASK_ACTIVE",
    "SET_VIEW_TASK_INACTIVE",
    "SET_VIEW_INACTIVE"
]);

module.exports.MultiAxisConfigStore = MAConfigStore;
module.exports.MultiAxisConfigEvents = MultiAxisConfigEvents;
module.exports.MultiAxisConfigActions = MultiAxisConfigActions;

},{"../event_emitter":224,"../mac_validation":234,"./store":275,"lodash":90}],271:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var lodash = require("lodash");

var cubiql = require("../cubiql");
var MQG = require("measure-query-gen/src/MQG");
var querygen = require("../querygen/query");
var queryutil = require("../querygen/util");
var queryfilter = require("../querygen/filter");

var createConstant = require("./store").createConstant;
var LogEvents = require("./logstore").LogEvents;
var Messages = require("../constant/messages.js");
var StorageTypes = require("../constant").StorageTypes;

var EventEmitter = require("../event_emitter").EventEmitter;
var util = require("../util");

var DataStorage = require("../dataStorage");

var MeasureModelActions = require("./measuremodelstore").MeasureModelActions;
var MultiAxisConfigActions = require("./multiaxisconfigstore").MultiAxisConfigActions;
var PivotConfigActions = require("./pivotconfigstore").PivotConfigActions;

var DataBox = require("../multiaxis/query_data");
var DataWarehouse = require("../multiaxis/data_warehouse");
var EditDataBox = require("../multiaxis/edit_data").EditDataBox;
var KeyManager = require("../multiaxis/keymanager");
var mac = require("../multiaxisconfig");
var Processor = require("../multiaxis/dataprocessor").DataProcessor;
var ViewTaskManager = require("../multiaxis/viewtask");

/**
 * @typedef {Immutable.Map<AxisName, AxisRange>} ViewRange
 */

lodash.mixin(MultiAxisDataStore.prototype, EventEmitter.prototype);

function MultiAxisDataStore(dispatcher, dependencies) {
    var me = this;

    this.$measureModelStore = dependencies.measureModelStore;
    this.$fieldStore = dependencies.fieldStore;
    this.$macStore = dependencies.multiAxisConfigStore;
    this.$pivotConfigStore = dependencies.pivotConfigStore;
    this.$logActionHandler = dependencies.logActionHandler;

    this.$primeDataBox = new DataBox();
    this.$dataBoxesWithNewData = new Map();

    this.$keyManager = new KeyManager();
    this.$viewTaskManager = new ViewTaskManager(this.$keyManager);

    this.$measureQueryQueryRunning = {};
    this.$measureQueryPositionQueryRunning = new Map();

    //a log of all errors associated with a query key
    this.$suspectQueryIncidents = {};

    //an object storing the query key of all queries known to be broken
    this.$brokenQueries = {};

    //an object storing the query key of all queries which have previously been successful
    this.$successfulQueries = {};

    this.$viewStorage = new Map();

    this.$initializeEditStorage();

    this.$cancellationTime = {};

    /**
     * Stores prevoius MA configs per viewTaskKey for $handleConfigChange function.
     */
    this.$previousViewTaskMAConfigs = new Map();

    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case MeasureModelActions.SET_MODEL:
                dispatcher.waitFor([me.$measureModelStore.dispatcherIndex], function() {
                    me.$handleModelChanges();
                });
                break;
            case PivotConfigActions.SET_CONFIG:
                dispatcher.waitFor([me.$pivotConfigStore.dispatcherIndex], function() {
                    me.$handlePivotConfigChanges();
                });
                break;
            case MultiAxisDataActions.SET_VIEW_TASK_RANGE:
                dispatcher.waitFor([me.$macStore.dispatcherIndex], function() {
                    me.$setViewTaskRange(action.viewId, action.taskName, action.range);
                });
                break;
            case MultiAxisConfigActions.SET_VIEW_TASK_CONFIG:
                dispatcher.waitFor([me.$macStore.dispatcherIndex], function() {
                    me.$handleConfigChange(action.viewId, action.taskName);
                });
                break;
            case MultiAxisConfigActions.SET_VIEW_TASK_ACTIVE:
                dispatcher.waitFor([me.$macStore.dispatcherIndex], function() {
                    me.$handleConfigChange(action.viewId, action.taskName);
                });
                break;
            case MultiAxisConfigActions.SET_VIEW_TASK_INACTIVE:
                dispatcher.waitFor([me.$macStore.dispatcherIndex], function() {
                    me.$handleConfigChange(action.viewId, action.taskName);
                });
                break;
            case MultiAxisDataActions.LOAD_OUTSTANDING_DATA_REQUEST:
                me.$loadOutstandingDataRequest(action.processor, action.response, action.dataRequest);
                break;
            case MultiAxisDataActions.SET_DATA_REQUEST_RUNNING:
                action.dataRequest.measureQueryPositions.forEach(function(measureQueryPoses) {
                    var query = measureQueryPoses.unmodifiedQuery;

                    measureQueryPoses.positionInfos.forEach(function(positionInfo) {
                        me.$setMeasureQueryPositionHasQueryRunning({query: query, positionInfo: positionInfo});
                    });
                });
                action.dataRequest.measureQueries.forEach(function(measureQuery) {
                    me.$setMeasureQueryHasQueryRunning(measureQuery);
                });
                break;
            case MultiAxisDataActions.STORE_PENDING_EDITS:
                me.$storePendingEdits(action.edits);
                break;
            case MultiAxisDataActions.CLEAR_EDITS:
                me.$clearEdits(action.edits);
                break;
            case MultiAxisDataActions.MARK_EDITS_FOR_COMMIT:
                me.$markEditsForCommit(action.edits);
                break;
            case MultiAxisDataActions.MARK_EDITS_IN_FLIGHT:
                me.$markEditsInFlight();
                break;
            case MultiAxisDataActions.MARK_EDITABILITY_IN_FLIGHT:
                me.$markEditabilityInFlight();
                break;
            case MultiAxisDataActions.SET_EDITS_SUCCESSFUL:
                me.$setEditsSuccessful(action.edits);
                break;
            case MultiAxisDataActions.SET_EDITS_FAILED:
                me.$setEditsFailed(action.edits, action.error);
                break;
            case MultiAxisDataActions.SET_EDITABILITY_STATUS:
                me.$setEditabilityStatus(action.request, action.response);
                break;
            case MultiAxisDataActions.SET_DATA_REQUEST_FINISHED:
                me.$onDataRequestFinished(action.dataRequest);
                break;
            case MultiAxisDataActions.SET_DATA_REQUEST_FAILED:
                me.$onDataRequestFailed(action.dataRequest, action.error);
                break;
            case MultiAxisDataActions.SET_LOCKS:
                me.$setLocks(action.locks);
                break;
            case MultiAxisDataActions.UNSET_LOCKS:
                me.$unsetLocks(action.locks);
                break;
            case MultiAxisDataActions.CLEAR_ALL_LOCKS:
                me.$clearAllLocks();
                break;
            case MultiAxisDataActions.MARK_ALL_DATA_DIRTY:
                me.$markAllPositionsDirty(action.pivotIds);
                break;
        }
    });

    this.$scheduleDataRequest();
}

/*******
 * Cache and Scheduled Request Handling
 *******/
MultiAxisDataStore.prototype.$scheduledDataRequest = null;

var DATA_REQUEST_BACKOFF = 40; //ms
MultiAxisDataStore.prototype.$scheduleDataRequest = function() {
    var me = this,
        cb = function() {
            me._emit(MultiAxisDataEvents.DATA_REQUEST_TIMER_FIRED);
            me.$scheduleDataRequest(); //keep this crazy train a-rollin'
        };

    clearTimeout(this.$scheduledDataRequest);
    this.$scheduledDataRequest = setTimeout(cb, DATA_REQUEST_BACKOFF);
};

MultiAxisDataStore.prototype.getModel = function() {
    return this.$measureModelStore.getModel();
};

MultiAxisDataStore.prototype.getMetricConfigs = function() {
    return this.$pivotConfigStore.getMetricsConfig();
};

MultiAxisDataStore.prototype.getViewTaskManager = function() {
    return this.$viewTaskManager;
};

MultiAxisDataStore.prototype.getKeyManager = function() {
    return this.$keyManager;
};

MultiAxisDataStore.prototype.getPrimeDataBox = function() {
    return this.$primeDataBox;
};

MultiAxisDataStore.prototype.$handleModelChanges = function() {
    this.$reinitializeViewTasks();
    this.getEditDataBox().markAllEditabilityDirty();
};

MultiAxisDataStore.prototype.$handlePivotConfigChanges = function() {
    this.$reinitializeViewTasks();
};

MultiAxisDataStore.prototype.$handleConfigChange = function(viewId, taskName) {
    var me = this,
        db,
        viewTasks,
        activeViewTasks,
        hasAnyActiveView,
        viewTaskKey,
        viewTaskMAConfig;

    if (this.$macStore.viewTaskIsActive(viewId, taskName)) {
        this.$initializeStateForViewTask(viewId, taskName);

        this.$requestUnmaskedViewTaskQueries(viewId, taskName);

        viewTaskKey = this.$keyManager.calcViewTaskKey(viewId, taskName);
        viewTaskMAConfig = this.$getViewTaskMAConfig(viewId, taskName);

        if (viewTaskMAConfig) {
            if (!Immutable.is(viewTaskMAConfig, this.$previousViewTaskMAConfigs.get(viewTaskKey))) {
                this.$generateViewTaskHeadingData(viewId, taskName);
            }

            this.$notifyTaskDataChanged([{viewId: viewId, tasks: [taskName]}]);

            this.$previousViewTaskMAConfigs.set(viewTaskKey, viewTaskMAConfig);
        } else {
            this.$previousViewTaskMAConfigs.delete(viewTaskKey);
        }
    } else {
        db = this.$getViewTaskDataBox(viewId, taskName);

        if (db) {
            viewTasks = me.$getDependentViewTasksForDataBox(db, true);
            activeViewTasks = viewTasks.filter(function(vt) { return me.$macStore.viewTaskIsActive(vt.viewId, vt.taskName); });

            if (viewTasks.length === 1 && viewTasks[0].viewId === viewId && viewTasks[0].taskName === taskName) {
                this.$removeDataBoxFor(viewId, taskName);
            } else if (viewTasks.length > 1) {
                hasAnyActiveView = activeViewTasks.length > 0; 

                if (!hasAnyActiveView) {
                    this.$clearDataBoxCache(viewId, taskName);
                }

                //now clear required queries for databox and re-require them
                db.initializeRequiredQueries();
                activeViewTasks.forEach(function(vt) {
                    //request unmasked
                    me.$requestUnmaskedViewTaskQueries(vt.viewId, vt.taskName);

                    //request masked
                    me.$updateMaskedRange(vt.viewId, vt.taskName);
                });
            }
        }

        this.getViewTaskManager().clearDataCache(viewId, taskName);
    }
};

MultiAxisDataStore.prototype.$getOrCreateViewStorage = function(viewId) {
    if (!this.$viewStorage.has(viewId))
        this.$viewStorage.set(viewId, this.$createInitialStateForView(viewId));

    return this.$viewStorage.get(viewId);
};

MultiAxisDataStore.prototype.$createInitialStateForView = function() {
    return new Map();
};

MultiAxisDataStore.prototype.$getOrCreateViewTask = function(viewId, taskName) {
    var viewStorage = this.$getOrCreateViewStorage(viewId);
    if (!viewStorage.has(taskName))
        this.$initializeStateForViewTask(viewId, taskName);

    return viewStorage.get(taskName);
};

MultiAxisDataStore.prototype.$initializeStateForViewTask = function(viewId, taskName) {
    var viewStorage = this.$getOrCreateViewStorage(viewId),
        initialState = this.$createInitialStateForViewTask(viewId, taskName);

    if (initialState)
        viewStorage.set(taskName, initialState);
};

MultiAxisDataStore.prototype.$createInitialStateForViewTask = function(viewId, taskName) {
    var taskConfig = this.$macStore.getViewTaskConfig(viewId, taskName);
    if (taskConfig)
        return {
            viewId: viewId,
            taskName: taskName,
            taskConfig: taskConfig,
            queryDataBox: taskConfig.isolatedData ? new DataBox() : this.getPrimeDataBox(),
            processor: taskConfig.maConfig && new Processor(taskConfig.maConfig, this.getModel(), this.getMetricConfigs(), taskConfig.isUnmasked)
        };
};

MultiAxisDataStore.prototype.$removeDataBoxFor = function(viewId, taskName) {
    this.$getOrCreateViewTask(viewId, taskName).queryDataBox = null;
    this.$getOrCreateViewStorage(viewId).delete(taskName);
};

MultiAxisDataStore.prototype.$clearDataBoxCache = function(viewId, taskName) {
    this.$getOrCreateViewTask(viewId, taskName).queryDataBox.clearDataCache();
};

MultiAxisDataStore.prototype.$reinitializeViewTasks = function() {
    var me = this;

    this.$macStore.getActiveViewTasks().forEach(function(vt) {
        me.$initializeStateForViewTask(vt.viewId, vt.taskName);
    });
};

MultiAxisDataStore.prototype.$notifyTaskDataChanged = function(viewTasks) {
    this._emit(MultiAxisDataEvents.DATA_CHANGED, { viewTasks: viewTasks.length ? viewTasks : undefined });
};

/**
 * Loads data from the a request
 *
 * @param {queryresults.ResponseProcessor} processor
 * @param {MQG.Response} serviceResponse
 * @param {OutstandingDataRequest} dataRequest
 */
MultiAxisDataStore.prototype.$loadOutstandingDataRequest = function(processor, serviceResponse, dataRequest) {
    var me = this,
        keyManager = this.getKeyManager(),
        updatedBoxes = new Map();

    //loop through non-positional requests
    //mark as no longer outstanding
    //load data if available
    //  loop through MeasureQueries
    dataRequest.measureQueries.forEach(function(measureQuery) {
        var thisQueryUpdatedBoxes = me.$loadMeasureQuery(measureQuery, processor, serviceResponse, dataRequest.queryTime),
            queryCacheKey = keyManager.calcMeasureQueryCacheKey(measureQuery);

        thisQueryUpdatedBoxes.forEach(function(box) {
            if (!updatedBoxes.has(box)) {
                updatedBoxes.set(box, {maskedQueriesCacheKeys: [], unmaskedQueriesCacheKeys: []});
            }

            updatedBoxes.get(box).unmaskedQueriesCacheKeys.push(queryCacheKey);
        });
    });
    //loop through positional requests
    //  loop through MeasureQueryPositions
    dataRequest.measureQueryPositions.forEach(function(measureQueryPos) {
        var thisQueryUpdatedBoxes = me.$loadMeasureQueryPositions(measureQueryPos, processor, serviceResponse, dataRequest.queryTime),
            queryCacheKey = keyManager.calcMeasureQueryCacheKey(measureQueryPos.unmodifiedQuery);

        thisQueryUpdatedBoxes.forEach(function(box) {
            if (!updatedBoxes.has(box)) {
                updatedBoxes.set(box, {maskedQueriesCacheKeys: [], unmaskedQueriesCacheKeys: []});
            }

            updatedBoxes.get(box).maskedQueriesCacheKeys.push(queryCacheKey);
        });
    });

    updatedBoxes.forEach(this.$markDataBoxHasNewData.bind(this));
};

/**
 * Handles the event that a dataRequest was complete.
 *
 * Primarily performs the tasks of loading the data returned for each query in the request, as well
 * as marking those queries complete/no longer outstanding.
 *
 * @param {DataRequest} dataRequest the request which finished
 */
MultiAxisDataStore.prototype.$onDataRequestFinished = function(dataRequest) {
    var me = this,
        measureQueries = [];

    dataRequest.measureQueryPositions.forEach(function(measureQueryPos) {
        var query = measureQueryPos.unmodifiedQuery;
        measureQueryPos.positionInfos.forEach(function(positionInfo) {
            me.$unsetMeasureQueryPositionHasQueryRunning({query: query, positionInfo: positionInfo});
        });
        me.$markMeasureQuerySuccessful(query);
        measureQueries.push(query);
    });

    dataRequest.measureQueries.forEach(function(measureQuery) {
        me.$unsetMeasureQueryHasQueryRunning(measureQuery);
        me.$markMeasureQuerySuccessful(measureQuery);
        measureQueries.push(measureQuery);
    });

    this.$handleDataBoxChanges();
};

/**
 * Handles the event that a dataRequest was responded to with an error.
 *
 * Primarily performs the tasks of marking those queries as no longer outstanding, and recording the failure
 * so we can attempt to isolate and mitigate the offending queries causing the error.
 *
 * @param {DataRequest} dataRequest the request which finished
 * @param {MeasureProtocol.Response} error the error response from the measure service
 */
MultiAxisDataStore.prototype.$onDataRequestFailed = function(dataRequest, error) {
    //we need to know if the failure happened for an isolated query.. if so that means YOU ARE A BAD QUERY! BAD!
    var me = this,
        isolatedQuery = dataRequest.measureQueryPositions.length + dataRequest.measureQueries.length === 1;

    dataRequest.measureQueryPositions.forEach(function(measureQueryPoses) {
        var query = measureQueryPoses.unmodifiedQuery;
        me.$markMeasureQuerySuspect(query, error);

        if (isolatedQuery)
            me.$markMeasureQueryBroken(query);

        measureQueryPoses.positionInfos.forEach(function(positionInfo) {
            me.$unsetMeasureQueryPositionHasQueryRunning({query: query, positionInfo: positionInfo});
        });
    });

    dataRequest.measureQueries.forEach(function(measureQuery) {
        me.$markMeasureQuerySuspect(measureQuery, error);

        if (isolatedQuery)
            me.$markMeasureQueryBroken(measureQuery);

        me.$unsetMeasureQueryHasQueryRunning(measureQuery);
    });
};

MultiAxisDataStore.prototype.getHeadingData = function(viewId, taskName) {
    return this.getViewTaskManager().getHeadingData(viewId, taskName);
};

MultiAxisDataStore.prototype.$setViewTaskRange = function(viewId, taskName, range) {
    var taskInfo = this.$getOrCreateViewTask(viewId, taskName),
        shouldNotify = false;

    if (taskInfo && !configuredRangesEqual(taskInfo.configuredRange, range)) {
        taskInfo.configuredRange = range;
        shouldNotify = this.$updateMaskedRange(viewId, taskName);
        if (shouldNotify) {
            this.$notifyTaskDataChanged([{viewId: viewId, tasks: [taskName]}]);
        }
    }
};

function configuredRangesEqual(range1, range2) {
    //simply, effective, silly
    return JSON.stringify(range1) === JSON.stringify(range2);
}

MultiAxisDataStore.prototype.$updateMaskedRange = function(viewId, taskName) {
    var dataBox = this.$getViewTaskDataBox(viewId, taskName),
        range = this.$getViewTaskRange(viewId, taskName),
        editBox = this.getEditDataBox(),
        processor = this.$getViewTaskProcessor(viewId, taskName),
        newEditableStateRequested,
        requiredMaskedQueries,
        requiredMaskedQuery,
        vtMgr = this.getViewTaskManager(),
        viewTaskConfig = this.$getViewTaskConfig(viewId, taskName),
        metricInter,
        i = 0, j;

    if (viewTaskConfig.isUnmasked || !range) {
        return false;
    }

    vtMgr.dissociateAllMetricInters(viewId, taskName);

    requiredMaskedQueries = processor.getRequiredMaskedQueries(this.getDataWarehouseForViewTask(viewId, taskName), range);

    for (; i < requiredMaskedQueries.length; i++) {
        requiredMaskedQuery = requiredMaskedQueries[i];
        for (j = 0; j < requiredMaskedQuery.positionInfos.length; j++) {
            dataBox.markMaskedQueryPositionRequired(requiredMaskedQuery.query, requiredMaskedQuery.queryKey, requiredMaskedQuery.positionInfos[j]);
        }

        if (requiredMaskedQuery.editableMetricInters) {
            for (j = 0; j < requiredMaskedQuery.editableMetricInters.length; j++) {
                metricInter = requiredMaskedQuery.editableMetricInters[j];
                vtMgr.associateMetricInter(viewId, taskName, metricInter);
                //store off if we ended up actually requesting one
                newEditableStateRequested |= editBox.markEditabilityRequired(metricInter);
            }
        }
    }

    vtMgr.getDereferencedMetricInters().forEach(function(metricInter) {
        editBox.unmarkEditabilityRequired(metricInter);
    });

    //only notify if we did request one
    return newEditableStateRequested;
};

MultiAxisDataStore.prototype.$getViewTaskRange = function(viewId, taskName) {
    var taskInfo = this.$getOrCreateViewTask(viewId, taskName);
    return taskInfo && taskInfo.configuredRange;
};

MultiAxisDataStore.prototype.$getViewTaskMAConfig = function(viewId, taskName) {
    return this.$macStore.getViewTaskConfig(viewId, taskName);
};

/**
 * @param {String} viewId
 * @param {String} taskName
 * @param {MultiAxisRange} configuredRange
 * @param {Function<CellInfo, CellData>} [cellBuilder] if not passed, CellData objects will be in the dataArray
 * @param {Boolean} [flattened] defaults to false
 * @param {QueryDataOptions} [cellQueryOptions] override for the configured cellQueryOptions for this task
 * @param {String[]} [orderedAxisNames]
 * @return {MultiAxisCellDataSet|undefined}
 */
MultiAxisDataStore.prototype.getDataRange = function(viewId, taskName, configuredRange, cellBuilder, flattened, cellQueryOptions, orderedAxisNames) {
    var warehouse = this.getDataWarehouseForViewTask(viewId, taskName),
        processor = this.$getViewTaskProcessor(viewId, taskName);

    return processor.getDataRange(configuredRange, cellBuilder, flattened, warehouse, cellQueryOptions, orderedAxisNames);
};

MultiAxisDataStore.prototype.getDataAt = function(viewId, taskName, coord, cellBuilder) {
    var configuredRange = {},
        coordKeys = Object.keys(coord),
        i = 0,
        keyLen = coordKeys.length,
        dataRange,
        key;

    for (; i < keyLen; i++) {
        key = coordKeys[i];
        configuredRange[key] = {
            start: coord[key],
            length: 1
        };
    }

    dataRange = this.getDataRange(viewId, taskName, configuredRange, cellBuilder, true);

    if (dataRange.dataArray.length)
        return dataRange.dataArray[0];
};

MultiAxisDataStore.prototype.getCellInfoInRange = function(viewId, taskName, configuredRange) {
    var warehouse = this.getDataWarehouseForViewTask(viewId, taskName),
        processor = this.$getViewTaskProcessor(viewId, taskName);

    return processor.getCellInfoInRange(configuredRange, warehouse);
};

MultiAxisDataStore.prototype.getCellInfoAt = function(viewId, taskName, coord) {
    var configuredRange = {},
        coordKeys = Object.keys(coord),
        i = 0,
        keyLen = coordKeys.length,
        key;

    for (; i < keyLen; i++) {
        key = coordKeys[i];
        configuredRange[key] = {
            start: coord[key],
            length: 1
        };
    }

    return this.getCellInfoInRange(viewId, taskName, configuredRange).dataArray[0];
};

MultiAxisDataStore.prototype.$mkCellDataBuilder = function(viewId) {
    var me = this,
        currentEditStateKey = this.$calcEditabilityStateKey(this.getCurrentEditState());

    return function(cellInfo) {
        return cellInfo && me.getCellDataForInfo(viewId, cellInfo, currentEditStateKey) || undefined;
    };
};

MultiAxisDataStore.prototype.$initializeEditStorage = function() {
    var me = this,
        lockStorage = new DataStorage("multiaxisdatastore", "locks", StorageTypes.IN_MEMORY);

    lockStorage.subscribe(function() {
        me.$notifyTaskDataChanged([]); //TODO limit to affected views if possible
    });

    this.$editDataBox = new EditDataBox(this.getKeyManager(), lockStorage);
};

MultiAxisDataStore.prototype.destroy = function() {
    this.$editDataBox.destroy();
    this.$editDataBox = null;
    // this is so we clear the reference from Window to `this`
    clearTimeout(this.$scheduledDataRequest);
};

MultiAxisDataStore.prototype.getEditDataBox = function() {
    return this.$editDataBox;
};

MultiAxisDataStore.prototype.$removeEdit = function(edit) {
    this.getEditDataBox().removeEdit(edit);
};

/**
 * @return {IncomingEdit[]}
 */
MultiAxisDataStore.prototype.getAllPendingEdits = function() {
    return this.getEditDataBox().getAllPendingEdits();
};

/**
 * @typedef {Object} IncomingEdit
 * @property {EditConfig} editConfig
 * @property {PositionInfo} positionInfo
 * @property {Edit} edit
 *
 * @typedef {Object} Edit
 * @property {String|Number} data
 * @property {Boolean} isDelete
 * @property {String|undefined} spreadMethod
 *
 * @param {IncomingEdit[]} edits
 */
MultiAxisDataStore.prototype.$storePendingEdits = function(edits) {
    this.getEditDataBox().storePendingEdits(edits);
    this.$notifyTaskDataChanged([]);
};

MultiAxisDataStore.prototype.$clearEdits = function(edits) {
    this.getEditDataBox().removePendingEdits(edits);

    this.$notifyTaskDataChanged([]);
};

MultiAxisDataStore.prototype.getNextQueuedEdits = function() {
    return this.getEditDataBox().getEditQueue()[0];
};

MultiAxisDataStore.prototype.$markEditsInFlight = function() {
    this.$editsInFlight = true;
};

MultiAxisDataStore.prototype.$markEditabilityInFlight = function() {
    this.$editabilityInFlight = true;
};

MultiAxisDataStore.prototype.$markEditsNotInFlight = function() {
    this.$editsInFlight = false;
};

MultiAxisDataStore.prototype.$markEditabilityNotInFlight = function() {
    this.$editabilityInFlight = false;
};

MultiAxisDataStore.prototype.hasInflightEdits = function() {
    return this.$editsInFlight === true;
};

MultiAxisDataStore.prototype.hasInflightEditability = function() {
    return this.$editabilityInFlight === true;
};

MultiAxisDataStore.prototype.$markEditsForCommit = function(edits) {
    this.getEditDataBox().markEditsForCommit(edits);

    //notify pivots so they can show that we're now saving it
    //TODO: only notify necessary pivots
    this.$notifyTaskDataChanged([]);
};

/**
 * @return {EditabilityRequest}
 */
MultiAxisDataStore.prototype.getOutstandingEditabilityRequest = function() {
    var editabilityNeeds = this.getEditDataBox().getOutstandingEditabilityNeeds(),
        //make fresh copy of edit state so further edits won't change what we're using for the request
        editState = editabilityNeeds.editState.map(cubiql.cloneMetricIntersection),
        //only ask for metricInters not currently in the edit state
        visible = editabilityNeeds.metricInters.filter(function (metricInter) {
            return !cubiql.findMetricInter(editState, metricInter);
        });

    if (editabilityNeeds.metricInters.length) {
        return {
            serviceRequest: new MQG.EditabilityRequestRequest(new MQG.EditabilityRequest(editState, visible)),
            checkedMetricInters: visible,
            editabilityState: editState
        };
    }
};

/**
 * @param {EditabilityRequest} request
 * @param {MeasureProtocol.response} response
 */
MultiAxisDataStore.prototype.$setEditabilityStatus = function(request, response) {
    var editBox = this.getEditDataBox(),
        consistent = response.consistent,
        editableMetricInters = response.editable || [],
        stored = false;

    if (!consistent) {
        this.$logActionHandler.warn(LogEvents.DATA_PROCESSING_ERROR, Messages.INCONSISTENT_EDIT_ERROR, response);
    }

    request.checkedMetricInters.forEach(function(checkedMetricInter) {
        var notEditable = !consistent || !cubiql.findMetricInter(editableMetricInters, checkedMetricInter);

        editBox.storeEditability(request.editabilityState, checkedMetricInter, !notEditable);
        stored = true;
    });

    request.editabilityState.forEach(function(editedMetricInter) {
        editBox.storeEditability(request.editabilityState, editedMetricInter, consistent);
        stored = true;
    });

    this.$markEditabilityNotInFlight();

    if (stored) //TODO if possible limit notification to affected views
        this.$notifyTaskDataChanged([]);
};

/**
 * @typedef {Object} MeasureQueryPositions
 * @property {querygen.MeasureQuery} query
 * @property {Position[]} positions
 *
 * @typedef {Object} OutstandingDataRequest
 * @property {querygen.MeasureQuery[]} measureQueries
 * @property {MeasureQueryPosition[]} measureQueryPositions
 * @property {querygen.ServiceRequest} serviceRequest
 *
 * @return {OutstandingDataRequest[]}
 */
MultiAxisDataStore.prototype.getOutstandingDataRequests = function() {
    var me = this,
        measureQueryToQuery = [],
        measureQueryPositionsToQuery = [],
        suspectQueryGroups,
        dataRequests = [];

    this.getAllQueryDataBoxes().forEach(function(db) {
        db.getOutstandingUnmaskedQueries().forEach(function(q) {
            if (!me.$measureQueryHasQueryRunning(q) && !me.$queryIsBroken(q))
                measureQueryToQuery.push(q);
        });

        db.getOutstandingMaskedQueryPositions().forEach(function(mqp) {
            if (!me.$measureQueryPositionHasQueryRunning(mqp) && !me.$queryIsBroken(mqp.query))
                measureQueryPositionsToQuery.push(mqp);
        });
    });

    suspectQueryGroups = this.$createSuspectQueryGroups(measureQueryToQuery, measureQueryPositionsToQuery);

    if (suspectQueryGroups.lessSuspect.measureQueries.length || suspectQueryGroups.lessSuspect.measureQueryPositions.length)
        dataRequests = [].concat(dataRequests, this.$makeDataRequests(suspectQueryGroups.lessSuspect.measureQueries, suspectQueryGroups.lessSuspect.measureQueryPositions));

    if (suspectQueryGroups.moreSuspect.measureQueries.length || suspectQueryGroups.moreSuspect.measureQueryPositions.length)
        dataRequests = [].concat(dataRequests, this.$makeDataRequests(suspectQueryGroups.moreSuspect.measureQueries, suspectQueryGroups.moreSuspect.measureQueryPositions));

    if (suspectQueryGroups.mostSuspect.measureQueries.length || suspectQueryGroups.mostSuspect.measureQueryPositions.length)
        dataRequests = [].concat(dataRequests, this.$makeDataRequests(suspectQueryGroups.mostSuspect.measureQueries, suspectQueryGroups.mostSuspect.measureQueryPositions));

    return dataRequests;
};

MultiAxisDataStore.prototype.$makeDataRequests = function(measureQueryToQuery, measureQueryPositionsToQuery) {
    var me = this,
        positionArraysByMeasureQuery,
        measureQueries,
        serviceQueries,
        model = this.getModel();

    if (lodash.isUndefined(model)) {
        return [];
    }

    positionArraysByMeasureQuery = lodash.mapValues(lodash.groupBy(measureQueryPositionsToQuery, function(measureQueryPos) {
        return me.$calcMeasureQueryCacheKey(measureQueryPos.query);
    }), function(measureQueryPoses) {
        return {
            //we clone the measure query here because we only want to apply
            //the filters for the purposes of actually sending the measure query.
            //The measureQueryPositions in the data request still indicate what
            //positions we actually queried
            query: querygen.cloneMeasureQuery(measureQueryPoses[0].query),
            unmodifiedQuery: measureQueryPoses[0].query,
            positionInfos: lodash.map(measureQueryPoses, 'positionInfo')
        };
    });

    measureQueryToQuery.forEach(function (measureQuery) {
        var str = me.$calcMeasureQueryCacheKey(measureQuery);

        delete positionArraysByMeasureQuery[str];
    });

    measureQueries = [].concat(
        measureQueryToQuery,
        lodash.values(positionArraysByMeasureQuery).map(function(queryPositions) {
            return me.$applyPositionsFilterToMeasureQuery(queryPositions.query, queryPositions.positionInfos);
        })
    );

    if (measureQueries.length > 0) {
        serviceQueries = querygen.measureQueriesToServiceQueries(measureQueries, model);

        return [{
            serviceRequest: querygen.serviceQueriesToServiceRequest(serviceQueries, model),
            measureQueries: measureQueryToQuery,
            measureQueryPositions: lodash.values(positionArraysByMeasureQuery)
        }];
    } else {
        return [];
    }
};

/**
 * Modify a query in-place by applying a filter for the positions to the existing query.
 *
 * @param {querygen.MeasureQuery} query
 * @param {PositionInfo[]} positionInfos all positions in this array should have ids for the levels in the mappedInter of the query.
 */
MultiAxisDataStore.prototype.$applyPositionsFilterToMeasureQuery = function(query, positionInfos) {
    if (positionInfos.length === 0 || query.mappedInter.qualified_level.length === 0)
        return query;

    var examplePos = positionInfos[0].position,
        examplePosKeys = Object.keys(examplePos),
        usedLevels = query.mappedInter.qualified_level.filter(function(ql) {
            return examplePosKeys.indexOf(mac.mqgLevelToQName(ql)) > -1;
        }),
        sortedInter = cubiql.sortIntersectionByLabel(new MQG.Intersection(usedLevels)),
        interQNames = sortedInter.qualified_level.map(function(ql) {
            return mac.mqgLevelToQName(ql);
        }),
        interLen = interQNames.length,
        positionFilter,
        filterGenerator = new queryfilter.FilterGenerator(this.getModel()),
        members = [];

    //create member list for relation
    positionInfos.forEach(function(info) {
        var i = 0,
            pos = info.position,
            posVal,
            member = [];

        for (; i < interLen; i++) {
            posVal = pos[interQNames[i]];
            if (posVal !== undefined)
                member.push(posVal);
        }

        if (member.length)
            members.push(member);
    });

    positionFilter = new queryfilter.PositionFilter(sortedInter, [new queryfilter.RelationComparison(
        "=",
        queryfilter.genRelationName(sortedInter, members),
        sortedInter,
        members
    )]);

    filterGenerator.applyPositionFilterToMeasureQuery(query, positionFilter);

    return query;
};

/**
 * Notate that a measure query succeeded
 *
 * @param {MeasureQuery} query the query that succeeded
 */
MultiAxisDataStore.prototype.$markMeasureQuerySuccessful = function(query) {
    var key = this.$calcMeasureQueryCacheKey(query);
    this.$successfulQueries[key] = true;
};

/**
 * Check whether or not the query is known to be broken
 *
 * @param {MeasureQuery} query the query to check
 */
MultiAxisDataStore.prototype.$queryIsBroken = function(query) {
    var key = this.$calcMeasureQueryCacheKey(query);
    return this.$queryIsBrokenByKey(key);
};

/**
 * Check whether or not the query is known to be broken, using the cache key of the query.  This is for performance purposes when the key is known already.
 *
 * @param {String} key the query key to check
 */
MultiAxisDataStore.prototype.$queryIsBrokenByKey = function(key) {
    return this.$brokenQueries[key] === true;
};

/**
 * Notate that a query is confirmed broken so that it will no longer be used.
 *
 * @param {MeasureQuery} query the query that is broken
 */
MultiAxisDataStore.prototype.$markMeasureQueryBroken = function(query) {
    var key = this.$calcMeasureQueryCacheKey(query);
    console.error("ERROR, this query was isolated as failing for some reason.  Please send the following console log to technical support.");
    console.error("QUERY:", query);
    console.error("stringified query: " + queryutil.stringifyMeasureQuery(query));
    console.error("Encountered the following errors:");
    lodash.uniq(this.$suspectQueryIncidents[key]).forEach(function(error) {
        console.error(queryutil.formatServiceError(error));
    });

    this.$brokenQueries[key] = true;
    this._emit(MultiAxisDataEvents.DATA_CHANGED);
};

/**
 * Notate that a query is suspected of being broken because it was party to a data request which failed
 *
 * @param {MeasureQuery} query the query that is suspected
 * @param {MeasureProtocol.Response} error the error response for the data request that failed
 */
MultiAxisDataStore.prototype.$markMeasureQuerySuspect = function(query, seenError) {
    var key = this.$calcMeasureQueryCacheKey(query);
    if (!this.$suspectQueryIncidents[key])
        this.$suspectQueryIncidents[key] = [];

    this.$suspectQueryIncidents[key].push(seenError);

};

/**
 * Given a list of measureQueries + measureQueryPositions, check to see if any are suspected of being broken.
 * If none are suspected of being broken, simply return them all in the 'lessSuspect' group.  If some are suspected of being broken, rank the suspected ones and bisect them into lessSuspect and moreSuspect groups so that so we can do a binary search for the bad queries through successive attempts.
 *
 * @typedef {Object} QueryGroup
 * @property {MeasureQuery[]} measureQueries
 * @property {MeasureQueryPos[]} measureQueryPositions
 *
 * @typedef {Object} SuspectQueryGroups
 * @property {QueryGroup} lessSuspect
 * @property {QueryGroup} moreSuspect
 *
 * @param {MeasureQuery[]} measureQueries the measure queries to group
 * @param {MeasureQueryPos[]} measureQueryPositions the measure query positions to group
 * @return SuspectQueryGroups
 */
MultiAxisDataStore.prototype.$createSuspectQueryGroups = function(measureQueries, measureQueryPositions) {
    var me = this,
        // group the measure query positions by query key
        maskedQueryKeyLookup = measureQueryPositions.reduce(function(lookup, mqp) {
            var positions = lookup[mqp.queryKey];
            if (!positions) {
                positions = lookup[mqp.queryKey] = [];
            }
            positions.push(mqp);
            return lookup;
        }, {}),
        maskedQueryKeys = Object.keys(maskedQueryKeyLookup),
        queryOrQueryPoses = [].concat(measureQueries, lodash.values(maskedQueryKeyLookup)),
        keys = measureQueries
            .map(function(measureQuery) {
                return this.$calcMeasureQueryCacheKey(measureQuery);
            }, this)
            .concat(maskedQueryKeys),
        notSuspectKeys = keys.filter(function(key) {
            return (me.$suspectQueryIncidents[key] || []).length === 0;
        }),
        suspectKeys = keys.filter(function(key) {
            return (me.$suspectQueryIncidents[key] || []).length > 0;
        }),
        sortedSuspectKeys = lodash.sortBy(suspectKeys, function(key) {
            //high score means more likely suspect, score is based number of suspected incidents, mitigated greatly by historical success
            var incidents = me.$suspectQueryIncidents[key] || [],
                hasBeenSuccessful = me.$successfulQueries[key] === true;

            //10x more suspect if hasn't been successful
            return incidents.length / (hasBeenSuccessful ? 1.0 : 0.1);
        }),
        midIndex = Math.floor(sortedSuspectKeys.length / 2),
        lessSuspectKeys = [].concat(notSuspectKeys, sortedSuspectKeys.slice(0,midIndex)),
        lessSuspectQueryOrQueryPoses = queryOrQueryPoses.filter(function(_,i) {
            return lessSuspectKeys.indexOf(keys[i]) > -1;
        }),
        moreSuspectKeys = sortedSuspectKeys.slice(midIndex),
        moreSuspectQueryOrQueryPoses,
        mostSuspectKey,
        mostSuspectQueryOrQueryPos,
        isMeasureQueryPoses = function(q) { return lodash.isArray(q); },
        isMeasureQuery = function(q) { return q && q.$queryKey; };

    //remove the last suspect on the list to try in isolation as the most likely candidate.
    //this shortcuts the very suspected queries but more important functions to assure we always try at least one suspect query in isolation
    if (moreSuspectKeys.length > 1) {
        mostSuspectKey = moreSuspectKeys.pop();
        mostSuspectQueryOrQueryPos = queryOrQueryPoses[keys.indexOf(mostSuspectKey)];
    }

    moreSuspectQueryOrQueryPoses = queryOrQueryPoses.filter(function(_, i) {
        return moreSuspectKeys.indexOf(keys[i]) > -1;
    });

    return {
        lessSuspect: {
            measureQueries: lessSuspectQueryOrQueryPoses.filter(isMeasureQuery),
            measureQueryPositions: [].concat.apply([], lessSuspectQueryOrQueryPoses.filter(isMeasureQueryPoses))
        },
        moreSuspect: {
            measureQueries: moreSuspectQueryOrQueryPoses.filter(isMeasureQuery),
            measureQueryPositions: [].concat.apply([], moreSuspectQueryOrQueryPoses.filter(isMeasureQueryPoses))
        },
        mostSuspect: {
            measureQueries: isMeasureQuery(mostSuspectQueryOrQueryPos) ? [mostSuspectQueryOrQueryPos] : [],
            measureQueryPositions: !isMeasureQuery(mostSuspectQueryOrQueryPos) ? mostSuspectQueryOrQueryPos || [] : []
        }
    };
};

MultiAxisDataStore.prototype.$cancelInFlightQueryByKey = function(cacheKey) {
    this.$cancellationTime[cacheKey] = new Date();
};

MultiAxisDataStore.prototype.getQueryCancellationTimeByKey = function(cacheKey) {
    return this.$cancellationTime[cacheKey];
};

MultiAxisDataStore.prototype.$clearCancellationByKey = function(cacheKey) {
    delete this.$cancellationTime[cacheKey];
};

MultiAxisDataStore.prototype.$clearAllCancellations = function() {
    this.$cancellationTime = {};
};

/**
 * @param {IncomingEdit[]} edits
 */
MultiAxisDataStore.prototype.$setEditsSuccessful = function(edits) {
    var me = this,
        queryUpdateResultTables = this.getEditDataBox().onEditsSucceeded(edits);

    queryUpdateResultTables.forEach(function(queryResult, queryKey) {
        var positionInfos = queryResult.positionInfos,
            resultTable = queryResult.resultTable;

        me.$getDataBoxesForMaskedMeasureQueryKey(queryKey).forEach(function(dataBox) {
            dataBox.storeResultTableForPositions(queryKey, positionInfos, resultTable, true);
        });
    });

    this.$markEditsNotInFlight();

    //mark all pivot measures as dirty
    //TODO so sad to be so aggressive about this
    this.$markAllPositionsDirty();

    //all views will need notification b/c of the aggressive marking of all positions dirty
    this.$notifyTaskDataChanged([]);
};

/**
 * Handle a failing set of edits.
 *
 * @param {IncomingEdit[]} edits
 * @param {Object} error
 */
MultiAxisDataStore.prototype.$setEditsFailed = function(edits, error) {
    this.getEditDataBox().onEditsFailed(edits);

    this.$markEditsNotInFlight();
    // additionally we need to log the error
    //check if its an edit consistency issue, by checking the error message (weird but probably stable since we have tests for this failure mode)
    if (queryutil.formatServiceError(error).indexOf("Couldn't find editing solution") > -1) {
        this.$logActionHandler.warn(LogEvents.DATA_PROCESSING_ERROR, Messages.INCONSISTENT_NEW_EDITS_ERROR, error);
    } else {
        //any other error handled here
        //log this error in action handler so we can tell user somehow
        this.$logActionHandler.warn(LogEvents.DATA_PROCESSING_ERROR, Messages.UNEXPECTED_EDIT_ERROR, error);
    }

    // and notify that the data has changed
    this.$notifyTaskDataChanged([]);
};

MultiAxisDataStore.prototype.$markDataBoxHasNewData = function(queries, dataBox) {
    if (!this.$dataBoxesWithNewData.has(dataBox)) {
        this.$dataBoxesWithNewData.set(dataBox, {maskedQueriesCacheKeys: [], unmaskedQueriesCacheKeys: []});
    }

    this.$dataBoxesWithNewData.get(dataBox).maskedQueriesCacheKeys = this.$dataBoxesWithNewData.get(dataBox).maskedQueriesCacheKeys.concat(queries.maskedQueriesCacheKeys);
    this.$dataBoxesWithNewData.get(dataBox).unmaskedQueriesCacheKeys = this.$dataBoxesWithNewData.get(dataBox).unmaskedQueriesCacheKeys.concat(queries.unmaskedQueriesCacheKeys);
};

MultiAxisDataStore.prototype.$getDependentViewTasksForDataBox = function(dataBox, includeInactive) {
    includeInactive = includeInactive || false;
    //NOTE this is inefficient but perhaps doesn't matter, improve by maintaining a reverse-lookup if needed
    var viewTasks = includeInactive ? this.$macStore.getViewTasks() : this.$macStore.getActiveViewTasks(),
        viewTask,
        dependentViewTasks = [],
        i = 0;

    for (; i < viewTasks.length; i++) {
        viewTask = viewTasks[i];
        if (dataBox === this.$getViewTaskDataBox(viewTask.viewId, viewTask.taskName))
            dependentViewTasks.push(viewTask);
    }

    return dependentViewTasks;
};

MultiAxisDataStore.prototype.$handleDataBoxChanges = function() {
    var updatedViewTasks = new Map(),
        keyManager = this.getKeyManager(),
        getMaskedQueryKey = lodash.property("queryKey"),
        me = this;

    this.$dataBoxesWithNewData.forEach(function(queries, db) {
        var viewTasks = me.$getDependentViewTasksForDataBox(db);

        viewTasks.forEach(function(vt) {
            var viewId = vt.viewId,
                taskName = vt.taskName,
                vtRange = me.$getViewTaskRange(viewId, taskName),
                vtQueries = me.$getRequiredQueriesForRange(viewId, taskName, vtRange),
                vtUnmaskedQueriesCacheKeys = vtQueries.unmaskedQueries.map(keyManager.calcMeasureQueryCacheKey),
                unmaskedQueriesMatch = util.findFirstIntersection(queries.unmaskedQueriesCacheKeys, vtUnmaskedQueriesCacheKeys),
                vtMaskedQueriesCacheKeys, maskedQueriesMatch;

            if (!unmaskedQueriesMatch && vtQueries.maskedQueries) {
                vtMaskedQueriesCacheKeys = vtQueries.maskedQueries.map(getMaskedQueryKey);
                maskedQueriesMatch = util.findFirstIntersection(queries.maskedQueriesCacheKeys, vtMaskedQueriesCacheKeys);
            }

            if (unmaskedQueriesMatch || maskedQueriesMatch) {
                if (!updatedViewTasks.has(viewId))
                    updatedViewTasks.set(viewId, new Map());

                if (me.$getViewTaskMAConfig(viewId, taskName)) {
                    //if the same view task comes up more than once don't regen its headings more than once
                    if (unmaskedQueriesMatch && !updatedViewTasks.get(viewId).has(taskName))
                        me.$generateViewTaskHeadingData(viewId, taskName);

                    me.$notifyTaskDataChanged([{viewId: viewId, tasks: [taskName]}]);
                }

                updatedViewTasks.get(viewId).set(vt.taskName, true);
            }
        });
    });

    //we handled it so clear them
    this.$dataBoxesWithNewData = new Map();
};

///// MeasureQuery Cache /////

MultiAxisDataStore.prototype.$calcMeasureQueryCacheKey = function(query) {
    if (!query.$queryKey) {
        query.$queryKey = queryutil.stringifyMeasureQuery(query);
    }
    return query.$queryKey;
};

MultiAxisDataStore.prototype.$unsetMeasureQueryHasQueryRunning = function(measureQuery) {
    var cacheKey = this.$calcMeasureQueryCacheKey(measureQuery);

    delete this.$measureQueryQueryRunning[cacheKey];
};

MultiAxisDataStore.prototype.$setMeasureQueryHasQueryRunning = function(measureQuery) {
    var cacheKey = this.$calcMeasureQueryCacheKey(measureQuery);

    this.$measureQueryQueryRunning[cacheKey] = new Date();
};

MultiAxisDataStore.prototype.$measureQueryHasQueryRunning = function(measureQuery) {
    var cacheKey = this.$calcMeasureQueryCacheKey(measureQuery);

    return !lodash.isUndefined(this.$measureQueryQueryRunning[cacheKey]);
};

///// MeasureQueryPosition Cache /////

MultiAxisDataStore.prototype.$calcMeasureQueryPositionCacheKeyWithKeys = function(queryKey, positionKey) {
    return queryKey + "|" + positionKey;
};

MultiAxisDataStore.prototype.$calcMeasureQueryPositionCacheKey = function(query, positionInfo) {
    return this.$calcMeasureQueryPositionCacheKeyWithKeys(this.$calcMeasureQueryCacheKey(query), positionInfo.key);
};

MultiAxisDataStore.prototype.$markAllPositionsDirty = function() {
    var me = this;

    this.getAllQueryDataBoxes().forEach(function(db) {
        db.markAllDirty();
    });

    // cancel all outstanding query requests
    Object.keys(this.$measureQueryQueryRunning).forEach(function(k) {
        me.$cancelInFlightQueryByKey(k);
    });

    Array.from(this.$measureQueryPositionQueryRunning.keys()).forEach(function(k) {
        me.$cancelInFlightQueryByKey(k);
    });
};

MultiAxisDataStore.prototype.$unsetMeasureQueryPositionHasQueryRunning = function(measureQueryPos) {
    var queryKey = this.$calcMeasureQueryCacheKey(measureQueryPos.query),
        posKey = measureQueryPos.positionInfo.key,
        posCache = this.$measureQueryPositionQueryRunning.get(queryKey);

    if (posCache) {
        posCache.delete(posKey);
        if (posCache.size === 0)
            this.$measureQueryPositionQueryRunning.delete(queryKey);
    }
};

MultiAxisDataStore.prototype.$setMeasureQueryPositionHasQueryRunning = function(measureQueryPos) {
    var queryKey = this.$calcMeasureQueryCacheKey(measureQueryPos.query),
        posKey = measureQueryPos.positionInfo.key,
        posCache = this.$measureQueryPositionQueryRunning.get(queryKey);

    if (!posCache) {
        posCache = new Map();
        this.$measureQueryPositionQueryRunning.set(queryKey, posCache);
    }

    posCache.set(posKey, {time: performance.now(), measureQueryPos: measureQueryPos});
};

MultiAxisDataStore.prototype.$measureQueryPositionHasQueryRunning = function(measureQueryPos) {
    var queryKey = this.$calcMeasureQueryCacheKey(measureQueryPos.query),
        posKey = measureQueryPos.positionInfo.key,
        posCache = this.$measureQueryPositionQueryRunning.get(queryKey);

    return posCache && posCache.has(posKey);
};

MultiAxisDataStore.prototype.hasRunningQueries = function() {
    return Object.keys(this.$measureQueryQueryRunning).length > 0 ||
        this.$measureQueryPositionQueryRunning.size > 0;
};

/**
 * @typedef {Object} LockInfo
 * @property {EditConfig} editConfig
 * @property {PositionInfo} positionInfo
 *
 * @param {LockInfo[]} locks
 */
MultiAxisDataStore.prototype.$setLocks = function (locks) {
    this.getEditDataBox().setLocks(locks);
};

/**
 * Removes the specified locks
 * @param {LockInfo[]} locks
 */
MultiAxisDataStore.prototype.$unsetLocks = function(locks) {
    this.getEditDataBox().unsetLocks(locks);
};

/**
 * Clears all locks.
 */
MultiAxisDataStore.prototype.$clearAllLocks = function() {
    this.getEditDataBox().clearAllLocks();
};

MultiAxisDataStore.prototype.hasLocks = function() {
    return this.getEditDataBox().hasLocks();
};

MultiAxisDataStore.prototype.getLocks = function() {
    return this.getEditDataBox().getLocks();
};

MultiAxisDataStore.prototype.$requiredQueriesAreClean = function(db, requiredQueries) {
    var i = 0, 
        j,
        requiredMaskedQuery;


    for (; i < requiredQueries.maskedQueries.length; i++) {
        requiredMaskedQuery = requiredQueries.maskedQueries[i];
        for (j = 0; j < requiredMaskedQuery.positionInfos.length; j++) {
            if (!db.hasCleanMaskedQueryPosition(requiredMaskedQuery.queryKey, requiredMaskedQuery.positionInfos[j].key)) {
                return false;
            }
        }
    }

    for (i = 0; i < requiredQueries.unmaskedQueries.length; i++) {
        if (!db.hasCleanUnmaskedQueryData(this.getKeyManager().calcMeasureQueryCacheKey(requiredQueries.unmaskedQueries[i]))) {
            return false;
        }
    }

    return true;    
};

/**
 * Determines if the given view id & task name has clean data for all the given range.
 * If no range is specified, it uses the current range of the view task.
 * 
 * Data is "clean" if it is cached locally and it is not dirty due to outstanding data
 * requests.
 * 
 * @param {String} viewId
 * @param {String} taskName
 * @param {MARange} [range]
 * @returns
 */
MultiAxisDataStore.prototype.hasCleanData = function(viewId, taskName, range) {
    var db = this.$getViewTaskDataBox(viewId, taskName);

    if (!range) {
        return !db.getOutstandingUnmaskedQueries().length && !db.getOutstandingMaskedQueryPositions().length;
    }
        
    return this.$requiredQueriesAreClean(db, this.$getRequiredQueriesForRange(viewId, taskName, range));
};

/**
 * Returns whether or not the given view task has any outstanding queries.
 * 
 * @param {String} viewId
 * @param {String} taskName
 * @param {MARange} [range]
 * @return {Boolean}
 */
MultiAxisDataStore.prototype.hasOutstandingRequestsForViewTask = function(viewId, taskName, range) {
    var db = this.$getViewTaskDataBox(viewId, taskName);
    
    return !this.$requiredQueriesAreClean(db, this.$getRequiredQueriesForRange(viewId, taskName, range));
};

/**
 * Return all masked and unmasked queries required by a given range for a task in a view
 *
 * @param {String} viewId
 * @param {String} taskName
 * @param {MARange} [range]
 * @return {maskedQueries: {RequiredMaskedQuery[]}, unmaskedQueries: {MeasureQuery[]} }
 */
MultiAxisDataStore.prototype.$getRequiredQueriesForRange = function(viewId, taskName, range) {
    var processor = this.$getViewTaskProcessor(viewId, taskName),
        taskConfig = this.$getViewTaskConfig(viewId, taskName),
        queryTypes = taskConfig.isUnmasked ? ["HEADER", "SELECTED_SLICE", "INTERSECTION"] : ["HEADER", "SELECTED_SLICE"],
        queries = {
            maskedQueries: [],
            unmaskedQueries: processor.generateUnmaskedQueries(queryTypes).toArray()
        };

    range = range || this.$getViewTaskRange(viewId, taskName);

    if (!taskConfig.isUnmasked && range) {
        queries.maskedQueries = processor.getRequiredMaskedQueries(this.getDataWarehouseForViewTask(viewId, taskName), range);
    }

    return queries;
};

MultiAxisDataStore.prototype.$getViewTaskProcessor = function(viewId, taskName) {
    var viewTask = this.$getOrCreateViewTask(viewId, taskName);
    return viewTask && viewTask.processor;
};

MultiAxisDataStore.prototype.$getViewTaskDataBox = function(viewId, taskName) {
    var viewTask = this.$getOrCreateViewTask(viewId, taskName);
    return viewTask && viewTask.queryDataBox;
};

MultiAxisDataStore.prototype.$getDataBoxesForUnmaskedMeasureQueryKey = function(queryKey) {
    //TODO probably should store lookup to do this instead
    return this.getAllQueryDataBoxes().filter(function(db) {
        return db.requiresUnmaskedQueryByKey(queryKey);
    });
};

MultiAxisDataStore.prototype.$getDataBoxesForMaskedMeasureQueryKey = function(queryKey) {
    return this.getAllQueryDataBoxes().filter(function(db) {
        return db.requiresMaskedQueryPositionForQueryKey(queryKey);
    });
};

MultiAxisDataStore.prototype.getAllQueryDataBoxes = function() {
    var me = this;

    var boxes = lodash.uniq(this.$macStore.getActiveViewTasks().map(function(activeViewTask) {
        return me.$getViewTaskDataBox(activeViewTask.viewId, activeViewTask.taskName);
    }));
    return boxes;
};

MultiAxisDataStore.prototype.$getViewTaskConfig = function(viewId, taskName) {
    var viewTask = this.$getOrCreateViewTask(viewId, taskName);
    return viewTask && viewTask.taskConfig;
};

MultiAxisDataStore.prototype.$getViewTaskMAConfig = function(viewId, taskName) {
    return this.$getViewTaskConfig(viewId, taskName).maConfig;
};

MultiAxisDataStore.prototype.getDataWarehouseForViewTask = function(viewId, taskName) {
    var taskConfig = this.$macStore.getViewTaskConfig(viewId, taskName);
    return new DataWarehouse(
        this.$getViewTaskDataBox(viewId, taskName), //query box
        this.getEditDataBox(),
        this.getViewTaskManager().getHeadingData(viewId, taskName),
        Object.keys(this.$brokenQueries),
        !!taskConfig.doNotUseViewCache ? undefined : this.getViewTaskManager().getDataCache(viewId, taskName)
    );
};

MultiAxisDataStore.prototype.$requestUnmaskedViewTaskQueries = function(viewId, taskName) {
    var taskConfig = this.$getViewTaskConfig(viewId, taskName),
        processor = this.$getViewTaskProcessor(viewId, taskName),
        dataBox = this.$getViewTaskDataBox(viewId, taskName),
        queryTypes = ["HEADER", "SELECTED_SLICE"],
        me = this,
        queries;

    //if there is (or will be) a range mask for this view task, we can't
    //query the intersection queries without it, but if there isn't, we can
    if (taskConfig.isUnmasked) {
        queryTypes.push("INTERSECTION");
    }

    queries = processor.generateUnmaskedQueries(queryTypes);

    queries.forEach(function(q) {
        dataBox.markMeasureQueryRequired(me.$calcMeasureQueryCacheKey(q), q);
    });
};

MultiAxisDataStore.prototype.$generateViewTaskHeadingData = function(viewId, taskName) {
    var maConfig = this.$getViewTaskMAConfig(viewId, taskName),
        processor = this.$getViewTaskProcessor(viewId, taskName),
        headingData;

    //can't generate heading data for no config
    if (!maConfig) return;

    headingData = processor.generateHeadingData(this.getDataWarehouseForViewTask(viewId, taskName));

    this.getViewTaskManager().setHeadingData(viewId, taskName, headingData);

    this.$updateMaskedRange(viewId, taskName);
};

MultiAxisDataStore.prototype.$loadMeasureQuery = function(measureQuery, processor, serviceResponse, queryTime) {
    var cacheKey = this.$calcMeasureQueryCacheKey(measureQuery),
        //not sorting result table, leave that to the data box
        resultTable = processor.getMeasureQueryAsTable(measureQuery, serviceResponse, false),
        cancelTime = this.getQueryCancellationTimeByKey(cacheKey),
        updatedBoxes = [];

    //TODO just storing in key-ordered table, probably a more efficient storage can be
    //TODO also doing this based on the measureQuery.. is there any waste there when there is query containment? probably
    //we just abandon this if there is a cancellation time for this measureQuery and that was after
    //the time this query was issued
    if (!(cancelTime && cancelTime > queryTime)) {
        this.$getDataBoxesForUnmaskedMeasureQueryKey(cacheKey).forEach(function(dataBox) {
            dataBox.setUnmaskedMeasureQueryByKey(cacheKey, {
                queryTime: queryTime,
                resultTable: resultTable
            });

            updatedBoxes.push(dataBox);
        });
        this.$clearCancellationByKey(cacheKey);
    }

    return updatedBoxes;
};

MultiAxisDataStore.prototype.$loadMeasureQueryPositions = function(measureQueryPositions, processor, serviceResponse, queryTime) {
    var query = measureQueryPositions.query,
        unmodifiedQuery = measureQueryPositions.unmodifiedQuery,
        queryCacheKey = this.$calcMeasureQueryCacheKey(unmodifiedQuery),
        cancelTime = this.getQueryCancellationTimeByKey(queryCacheKey),
        resultTable,
        positionInfos,
        updatedBoxes = [];

    //if this query was cancelled, just exit
    if (cancelTime && cancelTime > queryTime) {
        return updatedBoxes;
    }

    //NOT sorting the result table, we'll leave that to the data boxes to do if they want
    resultTable = processor.getMeasureQueryAsTable(query, serviceResponse, false);
    positionInfos = measureQueryPositions.positionInfos;

    this.$getDataBoxesForMaskedMeasureQueryKey(queryCacheKey).forEach(function(dataBox) {
        dataBox.storeResultTableForPositions(queryCacheKey, positionInfos, resultTable);
        updatedBoxes.push(dataBox);
    });

    this.$clearCancellationByKey(queryCacheKey);

    return updatedBoxes;
};

/*** Suspect/Bad Query Handling ***/
var MultiAxisDataEvents = createConstant("MultiAxisData", [
    "DATA_CHANGED",
    "DATA_REQUEST_TIMER_FIRED"
]);

var MultiAxisDataActions = createConstant("MultiAxisData", [
    "SET_VIEW_TASK_RANGE",
    "SET_DATA_REQUEST_RUNNING",
    "SET_DATA_REQUEST_FINISHED",
    "SET_DATA_REQUEST_FAILED",
    "LOAD_OUTSTANDING_DATA_REQUEST",
    "STORE_PENDING_EDITS",
    "MARK_EDITS_FOR_COMMIT",
    "MARK_EDITS_IN_FLIGHT",
    "MARK_EDITABILITY_IN_FLIGHT",
    "SET_EDITS_SUCCESSFUL",
    "SET_EDITS_FAILED",
    "SET_LOCKS",
    "UNSET_LOCKS",
    "UNSET_LOCK_BY_KEY",
    "CLEAR_ALL_LOCKS",
    "CLEAR_EDITS",
    "SET_EDITABILITY_STATUS",
    "MARK_ALL_DATA_DIRTY"
]);

module.exports.MultiAxisDataStore = MultiAxisDataStore;
module.exports.MultiAxisDataEvents = MultiAxisDataEvents;
module.exports.MultiAxisDataActions = MultiAxisDataActions;

},{"../constant":191,"../constant/messages.js":195,"../cubiql":211,"../dataStorage":222,"../event_emitter":224,"../multiaxis/data_warehouse":242,"../multiaxis/dataprocessor":243,"../multiaxis/edit_data":244,"../multiaxis/keymanager":245,"../multiaxis/query_data":247,"../multiaxis/viewtask":252,"../multiaxisconfig":253,"../querygen/filter":257,"../querygen/query":258,"../querygen/util":260,"../util":280,"./logstore":265,"./measuremodelstore":267,"./multiaxisconfigstore":270,"./pivotconfigstore":274,"./store":275,"immutable":44,"lodash":90,"measure-query-gen/src/MQG":1}],272:[function(require,module,exports){
"use strict";

var createConstant = require("./store").createConstant;
var lodash = require("lodash");
var EventEmitter = require("../event_emitter").EventEmitter;

/**
 * The class that stores a navigation configuration.
 * @param {Object} dispatcher
 */
lodash.mixin(NavigationTreeStore.prototype, EventEmitter.prototype);
function NavigationTreeStore(dispatcher) {
    var me = this;
    this.$config = {};

    this.dispatcherIndex = dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case NavigationTreeActions.SET_CONFIG:
                me.$setConfig(action.config);
                break;
        }
    });
}

NavigationTreeStore.prototype.$setConfig = function(config) {
    this.$config[config.id] = lodash.cloneDeep(config);
    this._emit(NavigationTreeEvents.CHANGE_CONFIG);
};

/**
 * Returns all the navigation configurations.
 * @return {Object}
 */
NavigationTreeStore.prototype.getConfig = function() {
    return this.$config;
};

/**
 * Returns the navigation configuration by the specified id.
 * @param {String} configId
 * @return {Object}
 */
NavigationTreeStore.prototype.getConfigById = function(configId) {
    return this.$config[configId];
};

var NavigationTreeActions = createConstant("NavigationTreeActions", [
    "SET_CONFIG"
]);

var NavigationTreeEvents = createConstant("NavigationTreeEvents", [
    "CHANGE_CONFIG"
]);

exports.NavigationTreeStore = NavigationTreeStore;
exports.NavigationTreeEvents = NavigationTreeEvents;
exports.NavigationTreeActions = NavigationTreeActions;

},{"../event_emitter":224,"./store":275,"lodash":90}],273:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var EventEmitter = require("../event_emitter").EventEmitter;

var NotificationLevels = require("../constant").NotificationLevels;
var NotificationPositions = require("../constant").NotificationPositions;
var createConstant = require("./store").createConstant;

var defaultOptions = {
    //Position of the notification
    position: NotificationPositions.TOP_RIGHT,

    //Set if notification is dismissible by the user
    dismissible: true,

    //Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification
    autoDismiss: 5
};

var DefaultNotificationOptions = {};
DefaultNotificationOptions[NotificationLevels.SUCCESS] = lodash.merge({}, defaultOptions, {title: "Success"});
DefaultNotificationOptions[NotificationLevels.INFO] = lodash.merge({}, defaultOptions, {title: "Info"});
DefaultNotificationOptions[NotificationLevels.WARNING] = lodash.merge({}, defaultOptions, {title: "Warning"});
DefaultNotificationOptions[NotificationLevels.ERROR] = lodash.merge({}, defaultOptions, {
    autoDismiss: 0,
    title: "Error"
});

var DEFAULT_ACTION_LABEL = "Dismiss";

/**
 * NotificationsStore.
 * @constructor
 *
 * @param {Dispatcher} dispatcher
 */
lodash.mixin(NotificationsStore.prototype, EventEmitter.prototype);
function NotificationsStore(dispatcher) {
    var me = this;

    this.$notifications = {};

    this.$notificationsOptions = {};

    dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case NotificationsActions.SHOW:
                me.$showNotification(action.message, action.level, action.title, action.action, action.options);
                break;
            case NotificationsActions.SHOW_SUCCESS:
                me.$showNotification(action.message, NotificationLevels.SUCCESS, action.title, action.action, action.options);
                break;
            case NotificationsActions.SHOW_INFO:
                me.$showNotification(action.message, NotificationLevels.INFO, action.title, action.action, action.options);
                break;
            case NotificationsActions.SHOW_WARNING:
                me.$showNotification(action.message, NotificationLevels.WARNING, action.title, action.action, action.options);
                break;
            case NotificationsActions.SHOW_ERROR:
                me.$showNotification(action.message, NotificationLevels.ERROR, action.title, action.action, action.options);
                break;
            case NotificationsActions.EXECUTE_CALLBACK:
                me.$executeCallback(action.notificationId);
                break;
        }
    });
}

/**
 * Executes the notification's action callback.
 *
 * @param {String} [notificationId] - The internal notification ID.
 */
NotificationsStore.prototype.$executeCallback = function(notificationId) {
    var notification = this.$notifications[notificationId];
    if (notification && lodash.isFunction(notification.callback)) {
        notification.callback();
    }

    delete this.$notifications[notificationId];
};

/**
 * Shows a notification.
 *
 * @param {String} [message] - The message of the notification.
 * @param {String} [title] - The title of the notification.
 * @param {String} [level] - The level of the notification. Available: success, error, warning and info.
 * @param {Object} [action] - Add a button with label and callback function.
 * @param {String} [action.label] - The label of the action button.
 * @param {Function} [action.callback] - The callback function.
 * @param {Object} [options] - The options of the notification.
 * @param {Object} [options.position] - The position of the notification.
 *                                      Available: tr (top right), tl (top left), tc (top center), br (bottom right), bl (bottom left), bc (bottom center).
 * @param {Object} [options.autoDismiss] - Delay in seconds for the notification go away. Set this to 0 to not auto-dismiss the notification.
 * @param {Object} [options.dismissible] - Set if notification is dismissible by the user.
 * @param {Object} [options.uid] - Overrides the internal uid. Useful if you are managing your notifications id. Notifications with same uid won't be displayed.
 */
NotificationsStore.prototype.$showNotification = function(message, level, title, action, options) {
    var defaultOptions,
        notificationOptions,
        uid = (options && options.uid) || lodash.uniqueId("notification"),
        notificationsLevels = lodash.values(NotificationLevels);

    if (notificationsLevels.indexOf(level) === -1) {
        level = (level && notificationsLevels.indexOf(level.toLowerCase()) !== -1) ? level.toLowerCase() : NotificationLevels.INFO;
    }

    defaultOptions = this.$getNotificationOptions(level);
    notificationOptions = lodash.merge({message: message, level: level, uid: uid}, defaultOptions, options);

    if (title) {
        notificationOptions.title = title;
    }

    this.$notifications[notificationOptions.uid] = {
        level: level
    };

    if (action && lodash.isFunction(action.callback)) {
        notificationOptions.action = {label: action.label || DEFAULT_ACTION_LABEL};
        this.$notifications[notificationOptions.uid].callback = action.callback;
    }

    this._emit(NotificationsEvents.SHOW, {options: notificationOptions});
};

/**
 * Returns current settings for the specified notification level.
 * @method getNotificationOptions
 * @param {String} level
 * @return {Object}
 */
NotificationsStore.prototype.$getNotificationOptions = function(level) {
    if (!this.$notificationsOptions[level]) {
        this.$notificationsOptions[level] = DefaultNotificationOptions[level];
    }

    return this.$notificationsOptions[level];
};

var NotificationsEvents = createConstant("NotificationsEvents", [
    "SHOW"
]);

var NotificationsActions = createConstant("NotificationsActions", [
    "SHOW",
    "SHOW_SUCCESS",
    "SHOW_INFO",
    "SHOW_WARNING",
    "SHOW_ERROR",
    "EXECUTE_CALLBACK"
]);

module.exports = NotificationsStore;
module.exports.NotificationsEvents = NotificationsEvents;
module.exports.NotificationsActions = NotificationsActions;

},{"../constant":191,"../event_emitter":224,"./store":275,"lodash":90}],274:[function(require,module,exports){
    "use strict";

    var createConstant = require("./store").createConstant;
    var lodash = require("lodash");
    var EventEmitter = require("../event_emitter").EventEmitter;
    var SORT = require("../constant").SORT;
   
    lodash.mixin(PivotConfigStore.prototype, EventEmitter.prototype);
    function PivotConfigStore(dispatcher) {
        var me = this;
        
        this.$metricsConfig = {};
        this.$levelsConfig = {};
       
        me.dispatcherIndex = dispatcher.register(function(payload) {
            var action = payload.action;

            switch (action.actionType) {
                case PivotConfigActions.SET_CONFIG:
                    me.$setConfig(action.config);
                    break;
                case PivotConfigActions.SET_FETCHING_CONFIG:
                    me.$setFetchingConfig(action.promise);
                    break;
                case PivotConfigActions.ERROR_FETCHING_CONFIG:
                    me.$clearFetchingConfig();
                    break;
            }
        });
    }

    PivotConfigStore.prototype.$clearFetchingConfig = function() {
        this.$fetchingConfig = null;
    };
    
    PivotConfigStore.prototype.$setConfig = function(config) {
        var metrics,
            levels;

        if (config.metric_config) {
            metrics = config.metric_config.reduce(function(metricsConfig, x) {
                var measName = x.metric_name || "",
                    format = x.format || "";

                metricsConfig[measName] = {};
                metricsConfig[measName].format = ("" !== format) ? format : false;
                metricsConfig[measName].halign = x.halign || false;
                metricsConfig[measName].readonly = x.readonly || false;
                metricsConfig[measName].headMetric = x.head_metric || false;
                metricsConfig[measName].dimension = x.dimension || false;
                metricsConfig[measName].locks = x.lock || [];
                metricsConfig[measName].cellType = x.cellType || false;
                
                return metricsConfig;
            }, {});

            this.$metricsConfig = Object.freeze(metrics);
        }

        if (config.level_config) {
            levels = config.level_config.reduce(function(lvlsConfig, lvl) {
                lvlsConfig[lvl.level_name] = {};
                lvlsConfig[lvl.level_name].sortAttr = lvl.default_sort_attr;
                
                return lvlsConfig;
            }, {});

            this.$levelsConfig = Object.freeze(levels);
        }

        this.$clearFetchingConfig();

        this._emit(PivotConfigEvents.CHANGE);
    };
    
    PivotConfigStore.prototype.$setFetchingConfig = function(promise) {
        this.$fetchingConfig = promise;
    };

    /**
     * Returns configuration for the requested metric.
     * @param {String} metricName
     * @return {Object}
     */
    PivotConfigStore.prototype.getMetricConfig = function(metricName) {
        return this.$metricsConfig && this.$metricsConfig[metricName];
    };

    /**
    * Returns configuration for metrics.
    * @return {Object}
    */
    PivotConfigStore.prototype.getMetricsConfig = function() {
        return this.$metricsConfig;
    };

    PivotConfigStore.prototype.getBackingMetric = function(metricName) {
        var metricConfig = this.getMetricsConfig()[metricName];
        return (metricConfig && metricConfig.headMetric) || metricName;
    };

    PivotConfigStore.prototype.getMetricFormat = function(metricName) {
        var metricConfig = this.getMetricsConfig()[metricName];
        return metricConfig && metricConfig.format;
    };

    /**
    * Returns config for all existing levels.
    * @return {Object}
    */
    PivotConfigStore.prototype.getLevels = function() {
        return this.$levelsConfig;
    };

    /**
    * Returns config for a level.
    *
    * @param {String} levelName - the name of level.
    * @return {Object} - the level config or nothing if there is no appropriate config the given level name.
    */
    PivotConfigStore.prototype.getLevelConfig = function(levelName) {
        return this.$levelsConfig && this.$levelsConfig[levelName];
    };

    /**
    * Returns sort attribute for level. If the sort attribute is not specified then returns default sort attribute that is "label".
    *
    * @param {String} levelName - the name of level.
    * @return {String} - the sort attribute.
    */
    PivotConfigStore.prototype.getLevelSortAttr = function(levelName) {
        var level = this.getLevelConfig(levelName);
        return (level && level.sortAttr) || SORT.DEFAULT_ATTR;
    };

    /**
    * Returns sort type for level. If the sort type is not specified then returns default sort type that is ascending.
    *
    * @param {String} levelName - the name of level.
    * @return {String} - the sort type.
    */
    PivotConfigStore.prototype.getLevelSortType = function(levelName) {
        var level = this.getLevelConfig(levelName);
        return (level && level.sortType) || SORT.DEFAULT_TYPE;
    };

    /**
    * Returns default sort configuration for level.
    *
    * @param {String} levelName - the name of level.
    * @return {Object} - the default sort configuration.
    */
    PivotConfigStore.prototype.getLevelDefaultSort = function(levelName) {
        return {
            sortAttr: this.getLevelSortAttr(levelName),
            sortType: this.getLevelSortType(levelName)
        };
    };

    /**
    * Returns default sort configurations for list of levels.
    *
    * @param {Array} levelNames - the list of level names we need to get default sorting configuration for.
    * @return {Object} - the default sort configuration for levels.
    */
    PivotConfigStore.prototype.getDefaultSortForLevels = function(levelNames) {
        var me = this,
            sortConfig = {};

        lodash.each(levelNames, function(name){
            sortConfig[name] = me.getLevelDefaultSort(name);
        });

        return sortConfig;
    };

    PivotConfigStore.prototype.isFetchingConfigDisplayFormats = function() {
        return this.$fetchingConfig;
    };

    /**
    * Checks if the configuration for metrics and levels was loaded.
    * @return {Boolean}
    */
    PivotConfigStore.prototype.isConfigLoaded = function () {
        return !lodash.isEmpty(this.$metricsConfig) || !lodash.isEmpty(this.$levelsConfig);
    };
    
    var PivotConfigActions = createConstant("PivotConfigActions", [
        "SET_CONFIG",
        "SET_FETCHING_CONFIG",
        "ERROR_FETCHING_CONFIG"
    ]);

    var PivotConfigEvents = createConstant("PivotConfigEvents", ["CHANGE"]);

    exports.PivotConfigStore = PivotConfigStore;
    exports.PivotConfigEvents = PivotConfigEvents;
    exports.PivotConfigActions = PivotConfigActions;

},{"../constant":191,"../event_emitter":224,"./store":275,"lodash":90}],275:[function(require,module,exports){
"use strict";

    var lodash = require("lodash");
    var EventEmitter = require("../event_emitter").EventEmitter;

    Store.TYPES = {
        BOOLEAN: 1,
        STRING:  2,
        NUMBER:  3,
        ARRAY:   4,
        OBJECT:  8
    };
    
    lodash.mixin(Store.prototype, EventEmitter.prototype);
    function Store(properties, initialState) {
        initialState = initialState || {};
        this.$state = {};
        
        var that = this;
        Object.keys(initialState).forEach(function(key) {
            that.$set(key, lodash.cloneDeep(initialState[key]));
        });
        
        // a map of property name -> {type: foo, defaultValue: bar}
        this.definition = {};
        if (properties)
            this.define(properties);
            
        return this;
    }

    Store.prototype.define = function define(def){
        var that = this;
        def.forEach(function(item){
            var name = item[0];
            var type = item[1];
            var defaultValue = item[2];
            
            var value = that.get(name);
            if (type == Store.TYPES.BOOLEAN && value === "0")
                value = false;

            value = value === undefined ? defaultValue : value;
            that.definition[name] = {type: type, defaultValue: defaultValue};
            if (value !== undefined)
                that.$set(name, value, false, true);
        });
    };
    
    Store.prototype.isDefined = function isDefined(name) {
        return typeof this.definition[name] !== "undefined";
    };

    /**
     * @throws exception if the property hasn't been defined
     */
    Store.prototype.$set = function $set(name, value) {
        var obj = this.$state;
        var parts = name.split(".");
        for (var i = 0; i < parts.length - 1; i++) {
            obj = obj[parts[i]] || (obj[parts[i]] = {});
        }
        obj[parts[parts.length - 1]] = lodash.cloneDeep(value);

        return this;
    };
    
    /**
     * Returns a cloned object given by a property indexed by name.
     * 
     * @param {string}          name of the property, e.g. "foo.bar"
     */
    Store.prototype.get = function get(name) {
        var obj = this.$state;
        name && name.split(".").every(function(name){
            obj = obj[name];
            return obj ? true : false;
        });
        return lodash.cloneDeep(obj);
    };
    
    /**
     * Return the state.
     * @return {Object}             Returns an immutable representing the state
     */
    Store.prototype.getState = function getState() {
        var clonedState = lodash.cloneDeep(this.$state);
        Object.seal(clonedState);
        return clonedState;
    };

    /**
     * Creates an object from the list keys such that you can use it as a
     * constant.
     *
     * @example
     * createConst("Pivot", ["ACTION_1", "ACTION_2"]);
     * // { ACTION_1: "Pivot:ACTION_1", ACTION_2: "Pivot:ACTION_2" }
     *
     * @param  {string} store   the store name, used to differentiate the same
     *                          action name in different stores
     * @param  {string} keys a list of action names to turn into keys, should be all
     *                          uppercase
     * @return {Object}         an object where each action name is a key
     */
    function createConstant(store, keys) {
        return keys.reduce(function(obj, keyName) {
            obj[keyName] = store + ":" + keyName;
            return obj;
        }, {});
    }

    exports.Store = Store;
    exports.createConstant = createConstant;

},{"../event_emitter":224,"lodash":90}],276:[function(require,module,exports){
var lodash = require("lodash");
var assert = require("assert");

var constants = require("../constant").User;

var EventEmitter = require("../event_emitter").EventEmitter;

lodash.mixin(UserStore.prototype, EventEmitter.prototype);

/**
 * @param {Dispatcher} dispatcher
 * @class UserStore
 */
function UserStore(dispatcher) {
    var me = this;

    this.$userName = null;

    dispatcher.register(function (payload) {
        var action = payload.action;

        switch (action.actionType) {
            case constants.ACTIONS.AUTHENTICATE:
                me.$authenticate(action.userName);
                break;
            case constants.ACTIONS.UNAUTHENTICATE:
                me.$unauthenticate();
                break;
        }
    });
}

UserStore.prototype.$authenticate = function (userName) {
    assert(!!userName && userName.length > 0, ["User name cannot be empty"]);

    this.$userName = userName;

    this._emit(constants.EVENTS.CHANGED, {
        userName: userName
    });
};

UserStore.prototype.$unauthenticate = function () {
    this.$userName = null;

    this._emit(constants.EVENTS.CHANGED);
};

/**
 * Returns current user`s name
 * @return {String} - the user`s name
 */
UserStore.prototype.getCurrentUserName = function () {
    return this.$userName;
};

/**
 * Returns true if the user is already authenticated.
 * @return {Boolean} - true if the user authenticated, otherwise - false
 */
UserStore.prototype.isAuthenticated = function () {
    return !!this.$userName;
};

module.exports = UserStore;

},{"../constant":191,"../event_emitter":224,"assert":undefined,"lodash":90}],277:[function(require,module,exports){
"use strict";

/**
 * @typedef {Object} ViewConfig
 * @property {String} id
 * @property {String} module
 * @property {Object} config
 * @property {Object} views
 * @property {ViewLayout} layout
 */

var lodash = require("lodash");
var Immutable = require("immutable");

var StoreEventEmitter = require("../event_emitter").StoreEventEmitter;

var constants = require("../constant").ViewConfig;
var ViewConfigActions = constants.ACTIONS;
var ViewConfigEvents = constants.EVENTS;
var ViewConfigPath = constants.PATH;

lodash.mixin(ViewConfigStore.prototype, StoreEventEmitter.prototype);

/**
 * The store keeps current views states and configs.
 * @param {Dispatcher} dispatcher
 * @class ViewConfigStore
 */
function ViewConfigStore(dispatcher) {
    var me = this;

    this.$views = Immutable.Map();

    dispatcher.register(function(payload) {
        var action = payload.action;

        switch (action.actionType) {
            case ViewConfigActions.SET_VIEW_STATE:
                me.$setViewState(action.viewId, action.state, action.config);
                break;
        }
    });
}

/**
 * Returns current view's state
 * @param {String} viewId - the view`s ID
 * @returns {?ViewConfig} - the view`s state, otherwise - null
 */
ViewConfigStore.prototype.getViewState = function(viewId) {
    return this.$views.getIn([viewId, "state"]);
};

/**
 * Returns the view's configuration.
 * @param {String} viewId - the view`s ID
 * @returns {?ViewConfig}
 */
ViewConfigStore.prototype.getViewConfig = function(viewId) {
    return this.$views.getIn([viewId, "config"]);
};

/**
 * Returns true if there is a state of the view
 * @param  {String} viewId - the view`s ID
 * @return {Boolean}
 */
ViewConfigStore.prototype.hasViewState = function(viewId) {
    return !!this.$views.getIn([viewId, "state"]);
};

ViewConfigStore.prototype.$setViewState = function(viewId, viewState, viewConfig) {
    var oldViewState = this.$views.getIn([viewId, "state"]),
        oldViewConfig = this.$views.getIn([viewId, "config"]);

    if (!viewState && viewConfig) {
        viewState = viewConfig;
    }

    if (this.hasViewState(viewId)) {
        this.$views = this.$views.setIn([viewId, "state"], viewState);

        if (viewConfig) {
            this.$views = this.$views.setIn([viewId, "config"], viewConfig);
        } else if (viewState && !this.$views.getIn([viewId, "config"])) {
            this.$views = this.$views.setIn([viewId, "config"], viewState);
        }
    } else {
        this.$views = this.$views.setIn([viewId, "state"], viewState);
        this.$views = this.$views.setIn([viewId, "config"], viewConfig);
    }

    // Emitting an event only if viewState changes
    if (!oldViewState || !oldViewState.equals(this.$views.getIn([viewId, "state"]))) {
        this._emit(viewId, ViewConfigEvents.STATE_CHANGED, {
            viewId: viewId
        });
    }

    // Emitting an event only if viewConfig changes
    if (!oldViewConfig || !oldViewConfig.equals(this.$views.getIn([viewId, "config"]))) {
        this._emit(viewId, ViewConfigEvents.CONFIG_CHANGED, {
            viewId: viewId
        });
    }
};

ViewConfigStore.prototype.clear = function() {
    this.$views = Immutable.Map();
};

/**
 * Returns all available signals.
 * @param  {string} excludedViewId
 * @return {Immutable.List}
 */
ViewConfigStore.prototype.getAllAvailableSignals = function(excludeViewId) {
    return this.$views.reduce(function(memo, view, viewId) {
        var viewState = view.get("state"),
            signals = viewState.getIn(ViewConfigPath.SIGNALS);

        if (viewId === excludeViewId || !signals) {
            return memo;
        }

        return memo.concat(signals);
    }, Immutable.List());
};

/**
 * Returns all view states that pass comparator by the given path.
 * @param  {Array} path           the path the comparator should be called on
 * @param  {Function} comparator  the function that returns true/false depending on whether an object in path suits the comparison
 * @return {Immutable.List}
 */
ViewConfigStore.prototype.findViewStatesWith = function(path, comparator) {
    return this.$views.reduce(function(memo, view) {
        var dataInPath = view.getIn(["state"].concat(path));

        if (dataInPath && comparator(dataInPath)) {
            memo = memo.push(view.get("state"));
        }

        return memo;
    }, Immutable.List());
};

/**
 * Returns all view states that pass compator by the given path.
 * @param  {Array}    path     the path the comporator should be called on
 * @param  {Function} reducer  function that will be called on every view in store
 * @param  {*}        memo     the variable (reducer) you can use to collect data.
 * @return {*}
 */
ViewConfigStore.prototype.reduceViewStatesIn = function(path, reducer, memo) {
    return this.$views.reduce(function(m, view) {
        return reducer(m, view.getIn(["state"].concat(path)));
    }, memo);
};

module.exports = ViewConfigStore;
},{"../constant":191,"../event_emitter":224,"immutable":44,"lodash":90}],278:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var assert = require("assert");

var utils = require("../util");
var EventEmitter = require("../event_emitter").EventEmitter;

var constants = require("../constant").View;
var Modules = constants.Modules;
var DefaultViewModule = Modules.Page;
var MODELER_VIEW_ID = require("../constant").ViewConfig.MODELER_VIEW_ID;

lodash.mixin(ViewStore.prototype, EventEmitter.prototype);

/**
 * The store is responsible for keeping relationships parentView-childView.
 * It creates and stores an unique ID for every rendered view. So you can easily
 * found the direct parent of a view.
 * @param {Dispatcher} dispatcher
 * @param {Object} viewConfigStore
 * @param {Function} getViewComponentForModuleFn
 * @class ViewStore
 */
function ViewStore(dispatcher, viewConfigStore, getViewComponentForModuleFn) {
    var me = this;

    this.$views = {};
    this.$currentPageViewId = null;

    this.$viewConfigStore = viewConfigStore;
    this.$getViewComponentForModule = getViewComponentForModuleFn;
}

/**
 * Returns the view`s ID by the unique ID.
 * @param {String} uniqueViewId - the unique ID
 * @returns {String} - the view ID
 */
ViewStore.prototype.getViewId = function(uniqueViewId) {
    assert(this.$views[uniqueViewId], ["View with unique ID " + uniqueViewId + " doesn't exist."]);

    return this.$views[uniqueViewId].viewId;
};

/**
 * Returns the parent view`s unique ID by the view`s unique ID.
 * @param {String} uniqueViewId - by the view`s unique ID
 * @returns {String} - the unique ID of the parent view
 */
ViewStore.prototype.getParentUniqueId = function(uniqueViewId) {
    assert(this.$views[uniqueViewId], ["View with unique ID " + uniqueViewId + " doesn't exist."]);

    return this.$views[uniqueViewId].parentUniqueId;
};

/**
 * Return the parent view`s ID by the view`s unique ID.
 * @param {String} uniqueViewId - the view`s unique ID
 * @returns {String} - he ID of the parent view
 */
ViewStore.prototype.getParentId = function(uniqueViewId) {
    assert(this.$views[uniqueViewId], ["View with unique ID " + uniqueViewId + " doesn't exist."]);

    var parentUniqueId = this.getParentUniqueId(uniqueViewId);

    return parentUniqueId && this.getViewId(parentUniqueId);
};

/**
 * Returns the view`s unique ID (creates it when neccesary).
 * @param {String} [parentUniqueId=null] - the parent view`s unique ID
 * @param {String} viewId - the view`s ID
 * @param {Boolean} [skipAdding=false] - if true, the new view won't be added (unique ID for it won't be created).
 * @returns {String} - the unique view ID
 */
ViewStore.prototype.getViewUniqueId = function(parentUniqueId, viewId, skipAdding) {
    assert(viewId, ["View`s ID has to be passed"]);

    var parentView = parentUniqueId && this.$views[parentUniqueId],
        views = parentView && parentView.childrenViews || this.$views,
        viewsIds = Object.keys(views),
        uniqueId;

    for (var i = 0; i < viewsIds.length; i++) {
        uniqueId = viewsIds[i];

        //return existed unique ID
        if (views[uniqueId].viewId === viewId) {
            return uniqueId;
        }
    }

    return !skipAdding && this.$addView(parentUniqueId, viewId);
};

/**
 * Return component by the view`s unique ID.
 * @param  {String} uniqueViewId - the view`s unique ID.
 * @return {Function}
 */
ViewStore.prototype.getViewComponent = function(uniqueViewId) {
    assert(uniqueViewId, ["View`s unique ID has to be passed"]);

    var moduleId = this.getViewModuleId(uniqueViewId);

    return this.$getViewComponentForModule(moduleId);
};

/**
 * Return component by the name.
 * @param  {String} moduleId - the module`s name
 * @return {ReactComponent} - the component object
 */
ViewStore.prototype.getViewComponentByModuleId = function(moduleId) {
    assert(moduleId, ["Module`s name has to be passed"]);

    return this.$getViewComponentForModule(moduleId);
};

/**
 * Returns the module name bu the view`s unique ID
 * @param  {String} uniqueViewId - the view`s unique ID
 * @return {String} - the module`s name
 */
ViewStore.prototype.getViewModuleId = function(uniqueViewId) {
    assert(uniqueViewId, ["View`s unique ID has to be passed"]);

    var me = this,
        parentViewId,
        moduleId,
        viewId = this.getViewId(uniqueViewId),
        viewState = this.$viewConfigStore.getViewState(viewId),
        parentViewState;

    if (viewState) {
        if (viewState.has("module")) {
            return viewState.get("module");
        } else if (viewState.has("pivotConfig") && viewState.has("layout")){
            //probably, it is a SheetView
            return constants.Modules.Sheet;
        }
    }

    parentViewId = me.getParentId(uniqueViewId);

    if (parentViewId) {
        parentViewState = me.$viewConfigStore.getViewState(parentViewId);
        moduleId = parentViewState && parentViewState.getIn(["views", viewId, "module"]);

        return moduleId || DefaultViewModule;
    }

    return DefaultViewModule;
};

/**
 * Returns current page view`s ID
 * @return {?String} - current page view`s ID
 */
ViewStore.prototype.getCurrentPageViewId = function() {
    var modelerVs = this.$viewConfigStore.getViewState(MODELER_VIEW_ID);

    return modelerVs && modelerVs.get("views").findKey(function(view, viewId) {
        return view.get("module") !== Modules.ModelerNavigationTree;
    });
};

/**
 * Creates new unique ID for the view.
 * @param {String} [parentUniqueId=null] - the parent view`s unique ID.
 * @param {String} viewId - the view`s ID.
 * @returns {String} - the created view`s unique ID.
 */
ViewStore.prototype.$addView = function(parentUniqueId, viewId) {
    assert(viewId, ["View`s ID has to be passed"]);

    var parentView = parentUniqueId && this.$views[parentUniqueId],
        uniqueId = this.getViewUniqueId(parentUniqueId, viewId, true) || lodash.uniqueId(viewId);

    this.$views[uniqueId] = lodash.merge({
        viewId: viewId,
        parentUniqueId: parentUniqueId,
        childrenViews: {}
    }, this.$views[uniqueId]);

    if (parentView) {
        parentView.childrenViews[uniqueId] = this.$views[uniqueId];
    }

    return uniqueId;
};

module.exports = ViewStore;
},{"../constant":191,"../event_emitter":224,"../util":280,"assert":undefined,"lodash":90}],279:[function(require,module,exports){
    "use strict";

    var lodash = require("lodash");
    var EventEmitter = require("./event_emitter").EventEmitter;
    var HttpHelper = require("../logicblox.core/network").HttpHelper;
    var ConnectBlox = require("../logicblox.connectblox/connect").ConnectBlox;

    /**  
     * The UrlDriver is a simple wrapper that is responsible for configuring / setting
     * all the various URL related configuration for the modeler.
     * 
     * @param {ModelerAppConfig} config
     */
    lodash.mixin(UrlDriver.prototype, EventEmitter.prototype);
    function UrlDriver(config) {
        var me = this;
        /**
         * The internal HttpHelper used by the UrlDriver.
         * @member {HttpHelper} 
         */
        this.http = new HttpHelper();
        /**
         * The internal ConnectBlox module used by this UrlDriver.
         * @member {ConnectBlox}
         */
        this.connectblox = new ConnectBlox(config.urls, config.connectblox.workspace, this.http);

        /**
         * The urls with which this UrlDriver was configured.
         * @member {Object}
         */
        this.urls = config.urls;

        this.http.on("AUTHENTICATION_FAILURE", function() {
            me._emit("AUTHENTICATION_FAILURE");
        });
        this.http.on("AUTHORIZATION_FAILURE", function() {
            me._emit("AUTHORIZATION_FAILURE");
        });

        this.getServiceUrl = config.getServiceUrl;

        this.destroy = function() {
            this.removeAllListeners();
        }
    }

    exports.UrlDriver = UrlDriver;

},{"../logicblox.connectblox/connect":155,"../logicblox.core/network":156,"./event_emitter":224,"lodash":90}],280:[function(require,module,exports){
"use strict";

    var assert = require("assert");
    var lodash = require("lodash");

    var MAX_INT = 9007199254740992;

    var StringCollatorOptions = ["co", {sensitivity: "base"}];
    
    var globalObject = typeof(global) === "undefined" ? window : global;

    var Intl = typeof(globalObject.Intl) !== "undefined" ? globalObject.Intl : null;

    /**
     * generate a hash code for the input.
     *
     * Adapted from http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery
     *
     * @param {String|Object|undefined} s the input to hash. If not a string, the stringified representation will be hashed
     * @return {Number}
     */
    function hashCode(s) {
        var h = 0,
            i = 0,
            l;
        //stringify any non-undefined args
        s = (lodash.isUndefined(s) || lodash.isString(s)) ? s : JSON.stringify(s);
        l = lodash.isString(s) ? s.length : 0;

        if (l === 0) return h;
        for (; i < l; i++) {
            h = ((h << 5) - h) + s.charCodeAt(i);
            h |= 0; // Convert to 32bit integer
        }
        return h;
    }

    /**
     * Courtesy of http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
     *
     * Escapes a string for all regex-relevant characters.. for use when regexing a variable from input that potentially contains
     * RegEx command characters
     *
     * @param {String} str
     * @return {String}
     */
    function escapeRegExp(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\\$&");
    }

    /*
     * Map a series of arrays to a single array of objects
     * with each conforming array values.
     * e.g. zipToObjects('id', [1,2,3], 'label', ['A','B','C'])
     *      => [{id: 1, label: 'A'}, {id: 2, label: 'B'}, {id: 3, label: 'C'}]
     *
     * @param {...string} key the key to use for the array argument following
     * @param {...*[]} arr the array of items to store under the key
     * @return {{key1: val1, key2: val2,...}[]} a list of objects containing the zipped up array values
     */
    function zipToObjects() {
        assert(arguments.length > 0 && arguments.length % 2 === 0);
        var keys = [],
            arrays = [],
            arr,
            maxlen = 0,
            i,
            j,
            arrCt,
            obj,
            result = [];

        for (i = 0; i < arguments.length; i++) {
           if (i % 2 === 0) {
              keys.push(arguments[i]);
           } else {
              arr = arguments[i];
              if (maxlen < arr.length)
              {
                  maxlen = arr.length;
              }
              arrays.push(arr);
           }
        }
        arrCt = arrays.length;
        assert(keys.length === arrCt);

        for (i = 0; i < maxlen; i++) {
            obj = {};
            for (j = 0; j < arrCt; j++) {
                obj[keys[j]] = arrays[j][i];
            }
            result.push(obj);
        }
        return result;
    }

    /*
     * deep adapted from https://gist.github.com/furf/3208381
     *
     * Allows getting or setting a value on an object
     * at a potentially nested set of keys
     *
     * @param {Object} obj the object the get/set the value on
     * @param {string[]} keys list of keys in order (e.g. ['a','b',c'] is equivalent to calling obj.a.b.c)
     * @param {*} value optional argument to set as the value of the key
     *
     * @return {*} the value set or retrieved
     */
    function deep(obj, keys, value) {
        var root,
            key,
            i = 0,
            n = keys.length;

        // Set deep value
        if (arguments.length > 2) {
            root = obj;
            n--;

            while (i < n) {
                key = keys[i++];
                obj = obj[key] = lodash.isObject(obj[key]) ? obj[key] : {};
            }

            obj[keys[i]] = value;
            value = root;

            // Get deep value
        } else {
            //empty loop looking for the key
            while ((obj = obj[keys[i++]]) != null && i < n) {};
            //if we found it before terminating the loop, assign, otherwise undefined
            value = i < n ? undefined : obj;
        }

        return value;
    }

    /*
     * Like pluck, but supports deep syntax for referring to attributes nested
     * in the input objects.
     *
     * @param {Array[Object]} arr array of objects
     * @param {string} keyPath the path of the key to pull off of each object, e.g. 'a.b.c[3]' (3 is an array index)
     * @return {Array[*]} the array of values from each object
     */
    function deepPluck(arr, key) {
        var keys = key.replace(/\[(["']?)([^\1]+?)\1?\]/g, '.$2').replace(/^\./, '').split('.');

        //while we
        return arr.map(function(item) {
            return deep(item,keys);
        });
    }

    function containsAll(needles, haystack) {
        // the haystack contains all needles if the intersection has
        // the same length as needles
        return lodash.intersection(needles, haystack).length === needles.length;
    }

    /**
     * Returns an array of unique strings
     *
     * @param {String[]} items
     * @return {String[]}
     */
    function uniqueStrings(items) {
        var obj = {};
        items.forEach(function(item) {
            obj[item] = true;
        });
        return Object.keys(obj);
    }

    /**
     * @param {String} str
     * @param {Number} width
     * @param {String} padStr
     * @return {String}
     */
    function padLeft(str, width, padStr) {
        var ret = str,
            gap = width - str.length,
            padCt = Math.floor(gap/padStr.length),
            i = 0;

        for(;i < padCt;i++)
            ret = padStr + ret;

        return ret;
    }

    // copied from c9.core/utils
    function getBox(value, base){
        if (!base) base = 0;

        if (value === null || (!parseInt(value, 10) && parseInt(value, 10) !== 0))
            return [0, 0, 0, 0];

        var x = String(value).split(/\s* \s*/);
        for (var i = 0; i < x.length; i++)
            x[i] = parseInt(x[i], 10) || 0;
        switch (x.length) {
            case 1:
                x[1] = x[0];
                x[2] = x[0];
                x[3] = x[0];
                break;
            case 2:
                x[2] = x[0];
                x[3] = x[1];
                break;
            case 3:
                x[3] = x[1];
                break;
        }

        return x;
    }

    function getLevelName(qualifiedName) {
        return qualifiedName.split(":")[1];
    }

    function getDimensionName(qualifiedName) {
        return qualifiedName.split(":")[0];
    }

    /**
     * Compares two arrays by value. If the values in <code>a</code and
     * <code>b</code> are objects, it will compare that they are the SAME
     * object. Values must be in the same order in order for the arrays to be
     * equal.
     *
     * @param {Array} a
     * @param {Array} b
     *
     * @return {boolean} whether a and b are equal
     */
    function shallowArraysEquals(a, b) {
        if (a === b) return true;
        // use == to compare for null & undefined
        if (a == null || b == null) return false;
        if (a.length !== b.length) return false;

        for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return false;
        }
        return true;
    }

    function logError(err) {
        console.error(err.stack || err);
    }

    /**
     * A function decorator for inverting the given functions result. Useful
     * for inverting Array.filter functions.
     * @param  {Function} fn a function whose result you wish to invert
     * @return {boolean}     the result of inverting the fn
     */
    function not(fn) {
        return function(argument) {
            return !fn(argument);
        };
    }

    /**
     * project(label)(object) = object[label]
     *
     * @param {String} label
     * @return {Function(Object){Any}}
     */
    function project(label) {
        return function (object) {
            return object[label];
        };
    }

    /**
     * Function composition
     *
     * @param {Function} f
     * @param {Function} g
     * @return {Function}
     */
    function compose(f, g) {
        return function (x) {
            return f(g(x));
        };
    }

    /**
     * Function sequencing
     *
     * @param {Function} f
     * @param {Function} g
     * @return {Function}
     */
    function sequence(g, f) {
        return compose(f, g);
    }

    /*
     * @typedef {(string|Function|Object)} Type, the name of a base type (string), an object constructor (Function), or a compound type (Object)
     */

    /*
     * @param {Any[]} args
     * @param {Type[]} types
     * @return {Boolean} true iff all args agree with all types
     */
    function typecheckBool(args, types) {
        if (typeof args !== "object" || // arguments
            !(types instanceof Array))
            return false;
        return types.every(function(ty, i) {
            switch(typeof ty) {
                case "string": return typeof args[i] === ty;
                case "function": return args[i] instanceof ty;
                case "object": return ty.tag === "or" && (typecheckBool([args[i]], [ty.ty1]) || typecheckBool([args[i]], [ty.ty2]));
                default: return false;
            }
        });
    }

    var type =
        {
            /*
             * @param {Type} ty1
             * @param {Type} ty2
             * @return {Type}
             */
            or: function(ty1,ty2) {
                return {tag: "or", ty1: ty1, ty2: ty2};
            },
            checkBool: typecheckBool,
            /* Typecheck args against types, assert if they don't match
             * @param {Any[]} args
             * @param {Type[]} types
             */
            assertArgs: function(args, types) {
                assert(type.checkBool(args, types));
            }
        };

    /**
     * Creates a function that returns the first argument passed into the
     * function.
     */
    function mkIdentityFunction() {
        return function(arg) {
            return arg;
        };
    }

    /**
     * A function that return null.
     * This is useful when we want to return a promise that return void:
     *
     *      return promise.then(voidFunction);
     */
    var voidFunction = mkIdentityFunction();

    function uuid() {
        return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        });
    }

    // copied from min/ui.js
    function insertCss(css, staticPrefix) {
        if (staticPrefix)
            css = css.replace(/(images|icons)\//g, staticPrefix + "/$1/");

        var style = document.createElement("style");
        style.appendChild(document.createTextNode(css));
        document.getElementsByTagName("head")[0].appendChild(style);

        return style;
    }

    /**
     * Lexicographic comparison of two arrays of comparable elements
     *
     * @param {Any[]} a
     * @param {Any[]} b
     * @param {Number} current
     * @return {Number}
     */
    function arrayCompare(a, b, current) {
        assert(current <= a.length);
        assert(current <= b.length);

        if(a.length === current && b.length > current)
            return -1;
        if(a.length > current && b.length === current)
            return 1;
        if(a.length === current && b.length === current)
            return 0;
        // a.length < current && b.length < current
        else if(a[current] < b[current])
            return -1;
        else if(a[current] > b[current])
            return 1;
        else // a[current] === b[current]
            return arrayCompare(a, b, current+1);
    }


    function filterEvent(callback, filterCheck) {
        var i = 0;
        function wrappedCallback(e) {
            if (filterCheck(e, i)) {
                callback.apply(callback, arguments);
            }
            i++;
        }
        return wrappedCallback;
    }

    var LOG_PERFORMANCE_TIMINGS = true;

    function enablePerformanceTiming() {
        LOG_PERFORMANCE_TIMINGS = true;
    }

    function disablePerformanceTiming() {
        LOG_PERFORMANCE_TIMINGS = false;
    }

    function timedFn(label, f, ctx) {
        ctx = lodash.isUndefined(ctx) ? this : ctx;
        return function() {
            var start = performance.now(),
                end,
                result = f.apply(ctx, arguments);
            end = performance.now();
            if (LOG_PERFORMANCE_TIMINGS)
                console.log(label + " time taken: " + (end-start));
            return result;
        }
    }

    function timedPromise(label, promise) {
        var start = performance.now(),
            logTime = function() {
                var end = performance.now();
                if (LOG_PERFORMANCE_TIMINGS)
                    console.log(label + " time taken: " + (end-start));
            };

        promise.then(function(result) {
            logTime();
            return result;
        });

        return promise; //return original promise, the time recording is done in a side execution
    }

    /**
     * Inserts multiple values into an array using splice
     *
     * @param {Array} array
     * @param {int} i insert position
     * @param {int} j number of items to remove
     * @param {Array} elements elements to insert
     * @return {Array} - removed items
     */
    function spliceAll(array, i, j, elements) {
        return array.splice.apply(array, [i, j].concat(elements));
    }

    /**
     * Searches the hierarchy in el and returns the first element
     * that contains a class
     * 
     * @param {HTMLNode} el
     * @param {string} className
     * @returns {HTMLNode}
     */
    function findParentWithClass(el, className) {
        while (el) {
            if (dom.hasCssClass(el, className))
                return el.$dragTarget || el;

            el = el.parentElement;
        }
    }

    /**
     * returns a two-element array where the first element is an array of those elements of the input for which the filter function returns true,
     * and the second element is an array of those elements of the input for which it returns false
     * @param {Object[]} array
     * @param {Function} filter
     * @return {Object[][]}
     */
    function partition(array, filter) {
        var returnArray = [[], []];
        array.forEach(function(e) {
            if (filter(e))
                returnArray[0].push(e);
            else
                returnArray[1].push(e);
        });
        return returnArray;
    }

    /**
     * Move an array element from an index to another
     * @param  {Array} array      Elements array
     * @param  {Integer} old_index Old element's index
     * @param  {Integer} new_index Desired element's index
     */
    function moveArrayElement(array, old_index, new_index) {
        if (new_index >= array.length) {
            var k = new_index - array.length;
            while ((k--) + 1) {
                array.push(undefined);
            }
        }
        array.splice(new_index, 0, array.splice(old_index, 1)[0]);
    }

    /**
     * recursively call Object.freeze on an object and its properties
     *
     * @param {Object} o the object to freeze
     * @param {Object[]} ignoredObjects array of objects to not freeze
     */
    function deepFreeze(o, ignoredObjects) {
        var prop, propKey;
        Object.freeze(o); // First freeze the object.
        for (propKey in o) {
            prop = o[propKey];
            if (prop == null || !o.hasOwnProperty(propKey) || !(typeof prop === 'object') || Object.isFrozen(prop) || ignoredObjects.indexOf(prop) > -1) {
                // If the object is on the prototype, not an object, in the ignored list, or is already frozen,
                // skip it. Note that this might leave an unfrozen reference somewhere in the
                // object if there is an already frozen object containing an unfrozen object.
                continue;
            }

            deepFreeze(prop, ignoredObjects); // Recursively call deepFreeze.
        }
    }

    /**
     * @typedef {Function} valuesComparator
     * @param {Number|String} value1
     * @param {Number|String} value
     * @return {Number} The function returns a number indicating how value1 and value2 compare to each other:
     *                   - a negative value if value1 comes before value2;
     *                   - a positive value if value1 comes after value2;
     *                   - 0 if they are considered equal.
     */

    /**
     * Returns comparator function for string or numbers
     *
     * @param {Boolean} [isNumeric=false]
     * @param {Boolean} [caseSensitive=false]
     * @return {valuesComparator}
     */
    function getComparator(isNumeric, caseSensitive) {
        var collator,
            options;

        //use Intl.Collator when it is possible
        if (!isNumeric && Intl && Intl.Collator) {
            options = [null].concat(StringCollatorOptions);

            if(caseSensitive){
                options.sensitivity = "case";
            }

            collator = new (Function.bind.apply(Intl.Collator, options));

            return function(value1, value2) {
                if (!isNumeric){
                    value1 = value1 || "";
                    value2 = value2 || "";
                }

                return collator.compare(value1, value2);
            };
        }

        //if Intl.Collator is unavailable (such as in Safari) - use common values comparison
        if (isNumeric){
            return function(value1, value2){
                var number1 = typeof value1 === "number" ? value1 : (parseFloat(value1) || 0),
                    number2 = typeof value2 === "number" ? value2 : (parseFloat(value2) || 0);
                return number1 - number2;
            }
        }

        return function(value1, value2) {
                value1 = (caseSensitive ? value1 : (value1 && value1.toLocaleLowerCase())) || "";
                value2 = (caseSensitive ? value2 : (value2 && value2.toLocaleLowerCase())) || "";

                if (String.prototype.localeCompare) {
                    return String.prototype.localeCompare.apply(value1, [value2].concat(StringCollatorOptions));
                }

                if (value1 < value2) {
                    return -1;
                }
                else if (value1 > value2) {
                    return 1;
                }
                return 0;
        };
    }

    /**
     * Function to compare two strings.
     *
     * @param {String} [string1=""]
     * @param {String} [string2=""]
     * @param {Boolean} [caseSensitive=false]
     * @return {Number} The function returns a number indicating how string1 and string2 compare to each other:
     *                   - a negative value if string1 comes before string2;
     *                   - a positive value if string1 comes after string2;
     *                   - 0 if they are considered equal.
    */
    function stringCompare(string1, string2, caseSensitive) {
        return getComparator(false, caseSensitive)(string1, string2);
    }

    /**
     * Function to compare two numbers.
     *
     * @param {Number} [number1=0]
     * @param {Number} [number2=0]
     * @return {Number} The function returns a number indicating how number1 and number2 compare to each other:
     *                   - a negative value if number1 comes before number2;
     *                   - a positive value if number1 comes after number2;
     *                   - 0 if they are considered equal.
     */
    function numberCompare(number1, number2) {
        return getComparator(true)(number1, number2);
    }

    /**
     * given an Array of Arrays, return an array of every list combination taking one element from each list. Also known as the cartesian
     * product of all arrays in the input.
     *
     * e.g. [ [1,2], [a,b] ]  ->  [ [1,a], [1,b], [2,a], [2,b] ]
     *
     * @param {Array<Array>} arrays
     * @return {Array<Array>}
     */
    function combineArrays(arrays) {
        var result = [],
            lastArrIdx = arrays.length - 1;

        //closes over the result so it can push a new result in when it hits the last array
        //which is why we create a function here
        function combineWith(arr, arrIdx) {
            //have to copy the array since each loop makes a new version
            var resultArr = arr.slice(),
                inpArr = arrays[arrIdx],
                i = 0;

            for (; i < inpArr.length; i++) {
                resultArr.push(inpArr[i]);
                if (arrIdx === lastArrIdx) //if we're at the last array, we're done with this combo so add to results
                    result.push(resultArr);
                else //otherwise go down to the next array
                    combineWith(resultArr, arrIdx+1);
            }
        }

        combineWith([], 0);
        return result;
    }

    /**
     * Returns canvasId from location hash.
     * @param  {String} hash the location hash that should be parsed
     * @return {String}      canvas ID
     */
    function parseHash(hash) {
        var CANVAS = "/canvas/",
            target = hash.substring(1, hash.length),
            canvasId;

        if (target.indexOf(CANVAS) === 0) {
            canvasId = target.substring(CANVAS.length);
        }
        return canvasId;
    }

    /**
     * Returns the passed value if it's a part of the type object. Otherwise - return default value.
     * @param  {*} value The value that should be checked
     * @param  {Object} type The object that represent the enum type.
     * @param  {*} [defaultValue] The value that will be returned if passed value isn't a part of the enum.
     * @return {*}
     */
    function checkEnumValue(value, type, defaultValue) {
        var values = lodash.values(type);

        if (values.indexOf(value) !== -1) {
            return value;
        }

        return defaultValue || values[0];
    }

    /**
     * Checks if action response has any error messages
     *
     * @param  {Object} resp
     * @return {boolean}
     */
    function actionResponseHasError(resp) {
        var ms = resp && resp.status || [];

        if (resp && !lodash.isArray(resp.status)) ms = [resp.status];

        return lodash.some(ms, function(r) {
            return r && r.type === "Error";
        });
    }

    /**
     * Inserts val between all consecutive pairs of elements in arr
     */
    function insertBetween(arr, val) {
        var i,
            newArr = [];
        if (arr.length <= 1) return arr;
        for (i = 0; i < arr.length - 1; i++) {
            newArr.push(arr[i]);
            newArr.push(val);
        }
        newArr.push(arr[i]);
        return newArr;
    }

    /**
     * Replaces css-formatted styles to react-formatted.
     * For example "background-color" will turn into "backgroundColor"
     *
     * @param  {object} styleToConvert
     * @return {object}
     */
    function convertCSSStyleToReact(styleToConvert) {
        var convertedStyle = {};

        for (var styleKey in styleToConvert) {
            //convert to React-style css
            var convertedKey = styleKey.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
            convertedStyle[convertedKey] = styleToConvert[styleKey];
        }
        return convertedStyle;
    }

    /**
     * 
     * @param  {String} measure - the name of a measure
     * @param  {Object[]} intersection - an array of qualified names
     * @return {String}
     */
    function buildLevelLabel(measure, intersection) {
        return lodash.isUndefined(intersection) ?
            measure :
            measure + " @ " + lodash.map(intersection, "qualifiedName").join(", ");
    }

    /**
     * A customized merge function that will merge empty arrays. The lodash default
     * merge treats empty arrays as undefined and therefore does not merge them.
     * If customizer is provided it's invoked to produce the merged values of the destination and source properties. 
     * If customizer returns undefined merging is handled by the method instead.
     *
     * @see https://github.com/lodash/lodash/blob/3.10.1/doc/README.md#_mergeobject-sources-customizer-thisarg
     *
     * @param  {Any} a
     * @param  {Any} b
     * @return {Array|Object|undefined}
     */
    function arrayAndEmptyObjectMerger(a, b) {
        // always overwrite arrays
        if (lodash.isArray(a) && lodash.isArray(b)) {
            return b;
        }
        
        if (lodash.isObject(a) && lodash.isObject(b) && !Object.keys(b).length) {
            return b;
        }
    }

    /*    
     * Remove keys form object if they map to empty objects or arrays.
     * @param  {Object} obj
     * @return {Object}
     */
    function clearEmptyObjectsAndArrays(obj) {
        obj = lodash.merge({}, obj);

        function _clearEmptyObjectsAndArrays(obj) {
            lodash.forEach(obj, function(v, k) {
                if (lodash.isObject(v) || lodash.isArray(v)) {
                    if (lodash.isEmpty(v)) {
                        delete obj[k];
                    }
                    else {
                        obj[k] = _clearEmptyObjectsAndArrays(v);
                    }
                }
            });
            return obj;

        }

        return _clearEmptyObjectsAndArrays(obj);
    }

    /**
     * Removes brackets from intersection string
     *
     */
    function getIntersectionString(inter) {
        return inter && inter.$interStr && inter.$interStr.replace("(", "").replace(")", "");
    }

    /**
     * Concats all strings passed in.
     * @return {string}
     */
    function concatStrings() {
        return Array.prototype.slice.call(arguments).join("@");
    }

    /**
     * Converts a string to Date.
     * @param  {string} str
     * @return {Date}
     */
    function convertStringToDate(str) {
        return new Date(parseInt(str));
    }

    function cleanArgs(args) {
        return Array.prototype.slice.call(args);
    }

    /**
     * @typedef {Object} ViewTask
     * @property {string} viewId  view ID the task belongs to
     * @property {Array}  tasks   list of tasks for the given view ID
     * 
     * 
     * 
     * Compares eventViewTasks w/ viewTasks and returns either tasks that are on both eventViewTasks and viewTasks or false.
     * @param  {ViewTask[]} eventViewTasks
     * @param  {ViewTask[]} viewTasks
     * @return {Array|false}
     */
    function shouldReflectDataChange(eventViewTasks, viewTasks) {
        var match = eventViewTasks.filter(function(eventViewTask) {
            return viewTasks.find(function(viewTask) {
                return viewTask.viewId === eventViewTask.viewId && eventViewTask.tasks.find(function(eventTask) {
                    return viewTask.tasks.indexOf(eventTask) > -1;
                });
            });
        });

        return match.length ? match : false;
    }

    /**
     * Finds the first intersection of two arrays
     * @param  {Array} arr1
     * @param  {Array} arr2
     * @return {*}
     */
    function findFirstIntersection(arr1, arr2) {
        return arr1.find(function(i) {
            return arr2.indexOf(i) !== -1;
        });
    }

    exports.checkEnumValue = checkEnumValue;
    exports.parseHash = parseHash;
    exports.getComparator = getComparator;
    exports.stringCompare = stringCompare;
    exports.numberCompare = numberCompare;
    exports.partition = partition;
    exports.moveArrayElement = moveArrayElement;
    exports.disablePerformanceTiming = disablePerformanceTiming;
    exports.enablePerformanceTiming = enablePerformanceTiming;
    exports.timedFn = timedFn;
    exports.timedPromise = timedPromise;
    exports.hashCode = hashCode;
    exports.getBox = getBox;
    exports.containsAll = containsAll;
    exports.padLeft = padLeft;
    exports.escapeRegExp = escapeRegExp;
    exports.getLevelName = getLevelName;
    exports.getDimensionName = getDimensionName;
    exports.shallowArraysEquals = shallowArraysEquals;
    exports.MAX_INT = MAX_INT;
    exports.uniqueStrings = uniqueStrings;
    exports.not = not;
    exports.project = project;
    exports.compose = compose;
    exports.sequence = sequence;
    exports.logError = logError;
    exports.type = type;
    exports.mkIdentityFunction = mkIdentityFunction;
    exports.voidFunction = voidFunction;
    exports.uuid = uuid;
    exports.deepPluck = deepPluck;
    exports.zipToObjects = zipToObjects;
    exports.deep = deep;
    exports.insertCss = insertCss;
    exports.arrayCompare = arrayCompare;
    exports.filterEvent = filterEvent;
    exports.spliceAll = spliceAll;
    exports.moveArrayElement = moveArrayElement;
    exports.deepFreeze = deepFreeze;
    exports.findParentWithClass = findParentWithClass;
    exports.combineArrays = combineArrays;
    exports.actionResponseHasError = actionResponseHasError;
    exports.insertBetween = insertBetween;
    exports.arrayAndEmptyObjectMerger = arrayAndEmptyObjectMerger;
    exports.clearEmptyObjectsAndArrays = clearEmptyObjectsAndArrays;
    exports.convertCSSStyleToReact = convertCSSStyleToReact;
    exports.buildLevelLabel = buildLevelLabel;
    exports.getIntersectionString = getIntersectionString;
    exports.concatStrings = concatStrings;
    exports.convertStringToDate = convertStringToDate;
    exports.cleanArgs = cleanArgs;
    exports.shouldReflectDataChange = shouldReflectDataChange;
    exports.findFirstIntersection = findFirstIntersection;

},{"assert":undefined,"lodash":90}],281:[function(require,module,exports){
"use strict";

var excelBuilder = require("excelbuilderjs-node");
var multiAxisConfig = require("../multiaxisconfig");
var cubiql = require("../cubiql");

/**
 * A utility class that can export a table to an excel file.
 *
 * @constructor
 */
function ExcelCreator(measureModel, headingData, vertAxisName, horAxisName, sliceAxisName) {
    this.$workbook = excelBuilder.createWorkbook();
    this.$worksheet = this.$workbook.createWorksheet( { name: "Data Sheet" });
    this.$workbook.addWorksheet(this.$worksheet);

    this.$measureModel = measureModel;
    this.$headingData = headingData;
    this.$vertAxisName = vertAxisName;
    this.$horAxisName = horAxisName;
    this.$sliceAxisName = sliceAxisName;

    this.$colHeaderCount = this.$getMaxColHeaderDepth();
    this.$rowHeaderCount = this.$getMaxRowHeaderDepth();
    this.$sliceCount = this.$getSliceCount();

    this.$hasExtraTitleRow = this.$colHeaderCount > 0 || this.$rowHeaderCount > 0;

    this.$totalRowCount = this.$getTotalRowCount();
    this.$totalColCount = this.$getTotalColCount();
    this.$sheetData = [];

    this.$headerCellStyle = this.$createHeaderCellStyle();
    this.$totalHeaderCellStyle =  this.$createTotalHeaderCellStyle();
    this.$totalCellStyle = this.$createTotalCellStyle();

    this.$dataBeginCol = this.$rowHeaderCount;
    this.$dataBeginRow = this.$colHeaderCount + this.$getFirstColumnHeaderRow();

    this.$columnHeadersBeginRow = this.$colHeaderCount > 0 ? this.$getFirstColumnHeaderRow() : -1;
    this.$columnHeadersEndRow = this.$colHeaderCount > 0 ? this.$getFirstDataRow() -1 : -1;

    this.$rowHeadersBeginColumn = this.$rowHeaderCount > 0 ? 0 : -1;
    this.$rowHeadersEndColumn = this.$rowHeaderCount > 0 ? this.$rowHeaderCount - 1 : -1;

    this.$isTotalRowHeader = {};
    this.$isTotalColumnHeader = {};

    this.$formattedRegularCellStyle = {};
    this.$formattedTotalCellStyle = {};

    this.$setSlices();
    this.$setTitles();
}
var ec = module.exports;
ec.ExcelCreator = ExcelCreator;

ExcelCreator.prototype.$getFirstColumnHeaderRow = function() {
    return this.$sliceCount + (this.$hasExtraTitleRow ? 1 : 0);
};

ExcelCreator.prototype.$getFirstDataRow = function() {
    return this.$colHeaderCount + this.$getFirstColumnHeaderRow();
};

ExcelCreator.prototype.$getTotalRowCount = function() {
    return this.$getCellRowCount() + this.$getFirstDataRow();
};

ExcelCreator.prototype.$getTotalColCount = function() {
    return this.$getCellColCount() + this.$getMaxRowHeaderDepth();
};

ExcelCreator.prototype.$getCellColCount = function() {
    return this.$getHeadingData().getHeadingAxisInfo(this.$horAxisName).getLength();
};

ExcelCreator.prototype.$getCellRowCount = function() {
    return this.$getHeadingData().getHeadingAxisInfo(this.$vertAxisName).getLength();
};

ExcelCreator.prototype.$getHeadingData = function() {
    return this.$headingData;
};

/**
 * Return the depth of the deepest columnset of the vertical axis so we can make a margin big enough
 * @return {Number}
 */
ExcelCreator.prototype.$getMaxRowHeaderDepth = function() {
    return this.getMaxHeaderDepth(this.$vertAxisName);
};

ExcelCreator.prototype.getMaxHeaderDepth = function(axisName) {
    if (!this.$getHeadingData().isAxisUsed(axisName)) {
        return 0;
    }

    return Math.max.apply(null, this.$getHeadingData().getColumnSets(axisName).map(function(colset) {
        return colset.columns.length;
    }));
};

/**
 * Return the depth of the deepest columnset of the horizontal axis so we can make a margin big enough
 * @return {Number}
 */
ExcelCreator.prototype.$getMaxColHeaderDepth = function() {
    return this.getMaxHeaderDepth(this.$horAxisName);
};

/**
 * Return the depth of the deepest columnset of the horizontal axis so we can make a margin big enough
 * @return {Number}
 */
ExcelCreator.prototype.$getSliceCount = function() {
    return this.getMaxHeaderDepth(this.$sliceAxisName);
};

/**
 * Writes out the slice levels and the selected members.
 */
ExcelCreator.prototype.$setSlices = function() {
    var me = this,
        columnSets = this.$getHeadingData().getColumnSets("Z");

    if (columnSets.length > 0) {
        columnSets[0].columns.forEach(function(col, idx) {
            if (!col.field) {
                // placeholder
                return;
            }
            me.$setSheetHeadingData(idx, 0, col.field instanceof multiAxisConfig.MeasureField ? "Measures" : col.field.fieldLabel);
            me.$sheetData[idx][1] = {
                value: col.members[0].label
            };
        });
    }
};

/**
 * Given a qualified name, returns the caption (labels used for displaying it in the UI) for it.
 * @param {String} qlName
 * @return {String} caption for the qualified name
 */
ExcelCreator.prototype.$getQlCaption = function (qlName) {
    var ql = cubiql.parseDimLvl(qlName),
        dimension = this.$measureModel.getDimension(ql.dimension),
        level = this.$measureModel.getLevel(ql.dimension, ql.level);
    return (dimension ? dimension.caption : ql.dimension) + ":" + (level ? level.caption : ql.level);
};

/**
 * Writes out column and row titles. The titles are the list of levels that are the axis separated by /
 */
ExcelCreator.prototype.$setTitles = function() {
    var me = this,
        columnTitle,
        rowTitle;

    if (this.$getHeadingData().isAxisUsed(this.$horAxisName)) {
        // Column title
        columnTitle = this.$getHeadingData().getColumnSets(this.$horAxisName)[0].columns.reduce(function(prevValue, column) {
            var nextPart = "";
            if (column.field && column.field.type === multiAxisConfig.FieldTypes.MEASURE) {
                nextPart = "Measures";
            } else if (column.field && column.field.type === multiAxisConfig.FieldTypes.LEVEL) {
                nextPart = me.$getQlCaption(column.field.id);
            }
            return ("" === prevValue) ? nextPart : prevValue + " / " + nextPart;
        }, "");
        this.$setColumnHeaderTitle(columnTitle);
    }

    if (this.$getHeadingData().isAxisUsed(this.$vertAxisName)) {
        // Row title
        rowTitle = this.$getHeadingData().getColumnSets(this.$vertAxisName)[0].columns.reduce(function(prevValue, column) {
            var nextPart = "";
            if (column.field.type === multiAxisConfig.FieldTypes.MEASURE) {
                nextPart = "Measures";
            } else if (column.field.type === multiAxisConfig.FieldTypes.LEVEL) {
                nextPart = me.$getQlCaption(column.field.id);
            }
            return ("" === prevValue) ? nextPart : prevValue + " / " + nextPart;
        }, "");
        this.$setRowHeaderTitle(rowTitle);
    }
};

ExcelCreator.prototype.$setSheetHeadingData = function(row, col, label, isRollupHeader) {
    isRollupHeader = isRollupHeader || false;

    var isRowHeader = col < this.$rowHeaderCount;

    if (!this.$sheetData[row])
        this.$sheetData[row] = [];

    // Update the arrays that keep track of the rollup headers.
    // This is used later in deciding the styles to be used for the cells under them.
    if (isRollupHeader) {
        this.$isTotalRowHeader[row] = isRowHeader;
        this.$isTotalColumnHeader[col] = !isRowHeader;
    }

    this.$sheetData[row][col] = {
        value: label,
        metadata: {
            style: isRollupHeader ? this.$totalHeaderCellStyle.id : this.$headerCellStyle.id,
            type: "text"
        }
    };
};

/**
 * Writes out the column headers' title.
 *
 * @param {String} title
 */
ExcelCreator.prototype.$setColumnHeaderTitle = function(title) {
    if (this.$columnHeadersBeginRow === -1) {
        return; // No column titles
    }

    // Find the cell in the output worksheet which have to be merged for placing the column header title.
    // NOTE: The cell numbers start from "1" in the worksheet.
    var cellRowNumber = this.$columnHeadersBeginRow,
        fromColumnChar = this.$getColumnCharacter(this.$dataBeginCol),
        toColumnChar = this.$getColumnCharacter(this.$totalColCount - 1);
    this.$worksheet.mergeCells(fromColumnChar + cellRowNumber, toColumnChar + cellRowNumber);

    // Set the title. The column header title goes in the line above the first column header.
    this.$setSheetHeadingData(this.$columnHeadersBeginRow - 1, this.$dataBeginCol, title, false);
};

/**
 * Writes out the row headers' title.
 *
 * @param {String} title
 */
ExcelCreator.prototype.$setRowHeaderTitle = function(title) {
    if (this.$rowHeadersBeginColumn === -1 || this.$rowHeadersEndColumn === -1) {
        return; // No row titles
    }
    // Find the cell in the output worksheet which have to be merged for placing the row header title.
    // NOTE: The cell numbers start from "1" in the worksheet.
    var cellRowNumber = this.$dataBeginRow,
        fromColumnChar = this.$getColumnCharacter(this.$rowHeadersBeginColumn),
        toColumnChar =  this.$getColumnCharacter(this.$rowHeadersEndColumn);
    this.$worksheet.mergeCells(fromColumnChar + cellRowNumber, toColumnChar + cellRowNumber);

    // Set the title. The row header title goes in the line above the first data row.
    this.$setSheetHeadingData(this.$dataBeginRow - 1, this.$rowHeadersBeginColumn, title, false);
};

/**
 * Sets total cell style for the data cells that are below an total header
 */
ExcelCreator.prototype.$setTotalCellStyle = function() {
    var c,
        r,
        isTotalCell;

    // for each column, if any of the column headers is a total header, set the styles for all the data cells under it to total style
    if (this.$colHeaderCount > 0) {
        for (c = this.$dataBeginCol; c < this.$totalColCount; ++c) {
            isTotalCell = false;
            for (r = this.$columnHeadersBeginRow; false === isTotalCell && r <= this.$columnHeadersEndRow; ++r) {
                if (this.$sheetData[r][c]) {
                    isTotalCell = this.$sheetData[r][c].metadata.style === this.$totalHeaderCellStyle.id;
                }
            }

            for (r = this.$dataBeginRow; isTotalCell && r < this.$totalRowCount; ++r) {
                if (!this.$sheetData[r][c]) {
                    this.$sheetData[r][c] = { metadata: { style: this.$totalCellStyle.id } };
                }
            }
        }
    }

    // for each row, if any of the header is a total header, set the styles for all the data cells under it to total style
    if (this.$rowHeaderCount > 0) {
        for (r = this.$dataBeginRow; r < this.$totalRowCount; ++r) {
            isTotalCell = false;
            for (c = this.$rowHeadersBeginColumn; false === isTotalCell && c <= this.$rowHeadersEndColumn; ++c) {
                if (this.$sheetData[r][c]) {
                    isTotalCell = this.$sheetData[r][c].metadata.style === this.$totalHeaderCellStyle.id;
                }
            }

            for (c = this.$dataBeginCol; isTotalCell && c < this.$totalColCount; ++c) {
                if (!this.$sheetData[r][c]) {
                    this.$sheetData[r][c] = { metadata: { style: this.$totalCellStyle.id } };
                }
            }
        }
    }
};

ExcelCreator.prototype.$setSheetCellData = function(row, col, rawData, format, isPercentage) {
    var cellStyle;
    if (!this.$sheetData[row])
        this.$sheetData[row] = new Array(this.$totalColCount);

    this.$sheetData[row][col] = { value: rawData };

    cellStyle = this.$getCellStyleForFormat(row, col, format, isPercentage);
    if (cellStyle) {
        this.$sheetData[row][col].metadata = { style: cellStyle.id };
    }
};

ExcelCreator.prototype.mkCellBuilder = function() {
    var me = this,
        cellColOffset = this.$dataBeginCol,
        cellRowOffset = this.$dataBeginRow,
        verAxisIdx = 1,
        horAxisIdx = 0;

    return function(fields, rollups, members, headings, positionInfo, coord, cellInfoBuilder, cellDataBuilder) {
        var verCoord = coord[verAxisIdx],
            horCoord = coord[horAxisIdx],
            cellRowCoord = cellRowOffset + verCoord,
            cellColCoord = cellColOffset + horCoord,
            verHeadings,
            horHeadings,
            headingIdx,
            headingLen,
            heading,
            cellInfo,
            cellData = cellDataBuilder(fields, rollups, members, positionInfo),
            rawValue,
            formatPattern,
            isPct,
            dataType;

        if (verCoord === 0) {
            //if top row, add horizontal headings
            horHeadings = headings[horAxisIdx];
            headingLen = horHeadings.length;

            for (headingIdx = 0; headingIdx < headingLen; headingIdx++) {
                heading = horHeadings[headingIdx];
                me.$setSheetHeadingData(me.$columnHeadersBeginRow + headingIdx, cellColCoord, heading.label, !!heading.config.rollup);
            }
        }

        if (horCoord === 0) {
            //if left-most row, add vert headings
            verHeadings = headings[verAxisIdx];
            headingLen = verHeadings.length;
            for (headingIdx = 0; headingIdx < headingLen; headingIdx++) {
                heading = verHeadings[headingIdx];
                me.$setSheetHeadingData(cellRowCoord, me.$rowHeadersBeginColumn + headingIdx, heading.label, !!heading.config.rollup);
            }
        }

        if (!cellData.invalid) {
            if (cellData.queryResults.selectedDataLabel && cellData.queryResults.selectedDataLabel.value && cellData.queryResults.selectedDataLabel.value.rawValue.length > 0) {
                rawValue = cellData.queryResults.selectedDataLabel.value.rawValue[0][0];
            } else if (cellData.queryResults.value && cellData.queryResults.value.value && cellData.queryResults.value.value.rawValue.length > 0){
                rawValue = cellData.queryResults.value.value.rawValue[0][0];
            }

            if (undefined !== rawValue) {
                cellInfo = cellInfoBuilder(fields, rollups, members, headings, positionInfo);
                formatPattern = cellData.queryResults.selectedDataLabel ? "" : cellInfo.queries.value.formatter.formatPattern;
                isPct = cellData.queryResults.selectedDataLabel ? false : cellInfo.queries.value.formatter.isPercentage;
                dataType = cellInfo.queries.value.type;
                if (dataType === 'DECIMAL' || dataType === 'INT' || dataType === 'FLOAT') {
                    rawValue = parseFloat(rawValue);
                }
                me.$setSheetCellData(cellRowCoord, cellColCoord, rawValue, formatPattern, isPct);
            }
        }
    };
};

ExcelCreator.prototype.getSheetData = function() {
    return this.$sheetData;
};

/**
 * Returns the output excel file BLOB
 */
ExcelCreator.prototype.$getFileBlob = function() {
    var output = excelBuilder.createFile(this.$workbook, { base64: false, type: 'blob' }),
        blob = new Blob([output], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
    return blob;
};

ExcelCreator.prototype.$computeColumnInfo = function() {
    var cellColOffset = this.$getMaxRowHeaderDepth(),
        i = 0,
        columnInfos = [],
        isRowHeader;

    for (; i < this.$totalColCount; i++) {
        isRowHeader = i < cellColOffset;
        columnInfos.push({
            id: isRowHeader ? "row" + i : "col" + i,
            width: isRowHeader ? 20 : 10
        });
    }

    return columnInfos;
};

/**
 * Converts a column number into the corresponding character that identifies it in the output excel file.
 * @param {Number} col
 * @returns {string}
 */
ExcelCreator.prototype.$getColumnCharacter = function(col){
    var codeA = 'A'.charCodeAt(0),
        base = 26,
        colChars = "";

    while (col >= 0) {
        colChars = String.fromCharCode(col % base + codeA) + colChars;
        col = Math.floor(col / base) - 1;
    }
    return colChars;
};

/**
 * Function that does the majority of work. It populates the worksheet object of the exporter library with the input table data.
 */
ExcelCreator.prototype.exportData = function(returnRawData) {
    this.$worksheet.setColumns(this.$computeColumnInfo());
    this.$mergeCells();
    this.$worksheet.setData(this.$sheetData);
    this.$setTotalCellStyle();

    if (returnRawData) {
        return this.$sheetData;
    } else {
        return this.$getFileBlob();
    }
};

/**
 * Creates a style object that defines the styling of the header cells in the output.
 */
ExcelCreator.prototype.$createHeaderCellStyle = function() {
    var stylesheet = this.$workbook.getStyleSheet();

    return stylesheet.createFormat({
        border: {
            left: { color: "FFB4B4B4", style: "thin" },
            right: { color: "FFB4B4B4", style: "thin" },
            top: { color: "FFB4B4B4", style: "thin" },
            bottom: { color: "FFB4B4B4", style: "thin" }
        },
        fill: {
            type: "pattern",
            patternType: "solid",
            fgColor: "FFF0F0F0" // This is the foreground color of the fill pattern.
                                // Since this is a solid pattern, this becomes the background color of the cell.
        },
        alignment: {
            horizontal: "left",
            vertical: "top"
        }
    });
};

/**
 * Returns a style object that defines the styling of a total header cells in the output.
 *
 * @returns {Object}
 */
ExcelCreator.prototype.$createTotalHeaderCellStyle = function() {
    var stylesheet = this.$workbook.getStyleSheet();

    return stylesheet.createFormat({
        border: {
            left: { color: "FFABC6CB", style: "thin" },
            right: { color: "FFABC6CB", style: "thin" },
            top: { color: "FFABC6CB", style: "thin" },
            bottom: { color: "FFABC6CB", style: "thin" }
        },
        fill: {
            type: "pattern",
            patternType: "solid",
            fgColor: "FFABC6CA" // This is the foreground color of the fill pattern.
                                // Since this is a solid pattern, this becomes the background color of the cell.
        },
        alignment: {
            horizontal: "left",
            vertical: "top"
        },
        font: {
            bold:true
        }
    });
};

/**
 * Returns a style object that defines the styling of a total data cells in the output.
 *
 * @returns {Object}
 */
ExcelCreator.prototype.$createTotalCellStyle = function() {
    var stylesheet = this.$workbook.getStyleSheet();

    return stylesheet.createFormat({
        border: {
            left: { color: "FFAC7CB", style: "thin" },
            right: { color: "FFAC7CB", style: "thin" },
            top: { color: "FFAC7CB", style: "thin" },
            bottom: { color: "FFAC7CB", style: "thin" }
        },
        fill: {
            type: "pattern",
            patternType: "solid",
            fgColor: "FFEBFFFF" // This is the foreground color of the fill pattern.
                                // Since this is a solid pattern, this becomes the background color of the cell.
        },
        font: {
            bold:true
        }
    });
};

/**
 * Returns the cell style for a cell given its location (row & col), formatting applied to the data
 * and if the data is a percentage value or not.
 * @param {Integer} row
 * @param {Integer} col
 * @param {String} format
 * @param {Boolean} isPercentage
 * @returns {Object} - cell style object
 */
ExcelCreator.prototype.$getCellStyleForFormat = function(row, col, format, isPercentage) {
    var cellStyle,
        isTotalCell = this.$isTotalRowHeader[row] || this.$isTotalColumnHeader[col];

    function toExcelFormatPattern(format) {
        var idx,
            excelFormat = format;

        // Replace the 0's with #
        excelFormat = excelFormat.replace(/[0]/g, "#");

        // Remove the "[.]" added to the end of number formats
        if (excelFormat.endsWith("[.]")) {
            idx = excelFormat.lastIndexOf("[.]");
            excelFormat = excelFormat.slice(0, idx);
        }

        // Make sure that there is at least one digit is visible digit
        excelFormat = (isPercentage) ? excelFormat.replace("#%", "0%") : excelFormat.replace("#.##", "0.00");

        // For whole number format, make sure the last character is '0'. This is required for excel to properly display 0 or $0
        if (!isPercentage && !excelFormat.includes(".") && excelFormat.endsWith("#")) {
            excelFormat = excelFormat.slice(0, -1) + "0";
        }

        return excelFormat;
    }

    if (format) {
        cellStyle = isTotalCell ? this.$formattedTotalCellStyle[format] : this.$formattedRegularCellStyle[format];
        if (!cellStyle) {
            if (isTotalCell) {
                cellStyle = this.$workbook.getStyleSheet().createFormat({
                    border: {
                        left: { color: "FFAC7CB", style: "thin" },
                        right: { color: "FFAC7CB", style: "thin" },
                        top: { color: "FFAC7CB", style: "thin" },
                        bottom: { color: "FFAC7CB", style: "thin" }
                    },
                    fill: {
                        type: "pattern",
                        patternType: "solid",
                        fgColor: "FFEBFFFF" // This is the foreground color of the fill pattern.
                                            // Since this is a solid pattern, this becomes the background color of the cell.
                    },
                    font: {
                        bold:true
                    },
                    format: toExcelFormatPattern(format)
                });
                this.$formattedTotalCellStyle[format] = cellStyle;
            } else {
                cellStyle = this.$workbook.getStyleSheet().createFormat({
                    format: toExcelFormatPattern(format)
                });
                this.$formattedRegularCellStyle[format] = cellStyle;
            }
        }
    }
    return cellStyle;
};

/**
 * This method merges the column and row header cells.
 */
ExcelCreator.prototype.$mergeCells = function() {
    var cellRowNumber,
        fromColumnChar,
        toColumnChar,
        mergeBeginColForRow = [],
        refColHeaders = [],
        topRowMerged,
        cellColumnChar,
        fromRowNumber,
        toRowNumber,
        mergeBeginRowForCol = [],
        refRowHeaders = [],
        cellData,
        c,
        r,
        leftColumnMerged;

    // Merge col headers
    if (this.$colHeaderCount > 0) {
        for (c = this.$dataBeginCol; c < this.$totalColCount; ++c) {
            topRowMerged = false;

            for (r = this.$columnHeadersBeginRow; r < this.$dataBeginRow; ++r) {
                cellData = this.$sheetData[r][c];

                if (!refColHeaders[r]) { // Is this the first time we are processing this row?
                    refColHeaders[r] = cellData;
                    mergeBeginColForRow[r] = c;
                } else if (topRowMerged ||
                    refColHeaders[r].value !== cellData.value ||
                    ((c === this.$totalColCount - 1) && refColHeaders[r].value === cellData.value)) {
                    // if more than one column has the same value or if this is the last column then merge
                    if (mergeBeginColForRow[r] !== (c - 1) ||
                        ((c === this.$totalColCount - 1) && refColHeaders[r].value === cellData.value)) {

                        // Get the excel cells to be merged and merge them
                        cellRowNumber = r + 1;
                        fromColumnChar = this.$getColumnCharacter(mergeBeginColForRow[r]);
                        toColumnChar = this.$getColumnCharacter((c === this.$totalColCount - 1) ? c : c - 1);
                        this.$worksheet.mergeCells(fromColumnChar + cellRowNumber, toColumnChar + cellRowNumber);

                        topRowMerged = true;
                    }

                    // Since the headers have been merged, track the next header and the new starting column
                    refColHeaders[r] = cellData;
                    mergeBeginColForRow[r] = c;
                }
            }
        }
    }

    // Merge row headers
    if (this.$rowHeaderCount > 0) {
        for (r = this.$dataBeginRow; r < this.$totalRowCount; ++r) {
            leftColumnMerged = false;

            for (c = this.$rowHeadersBeginColumn; c < this.$dataBeginCol; ++c) {
                cellData = this.$sheetData[r][c];

                if (!refRowHeaders[c]) { // Is this the first time we are processing this column?
                    refRowHeaders[c] = cellData;
                    mergeBeginRowForCol[c] = r;
                } else if (leftColumnMerged ||
                    refRowHeaders[c].value !== cellData.value ||
                    ((r === this.$totalRowCount - 1) && refRowHeaders[c].value === cellData.value)) {
                    // if more than one row has the same value then merge them or  if this is the last row then merge
                    if (mergeBeginRowForCol[c] !== (r - 1) ||
                        ((r === this.$totalRowCount - 1) && refRowHeaders[c].value === cellData.value)) {

                        // Get the excel cells to be merged and merge them
                        cellColumnChar = this.$getColumnCharacter(c);
                        fromRowNumber = mergeBeginRowForCol[c] + 1;
                        toRowNumber = (r === this.$totalRowCount - 1) ? r + 1 : r;
                        this.$worksheet.mergeCells(cellColumnChar + fromRowNumber, cellColumnChar + toRowNumber);

                        leftColumnMerged = true;
                    }

                    // Since the headers have been merged, track the next header and the new starting column
                    refRowHeaders[c] = cellData;
                    mergeBeginRowForCol[c] = r;
                }
            }
        }
    }
};

},{"../cubiql":211,"../multiaxisconfig":253,"excelbuilderjs-node":30}],282:[function(require,module,exports){
"use strict";

var lodash = require("lodash");

var measurelanguage = require("../measurelanguage");

function FormulaAST(formula) {
    this.$formula = formula;
    this.name = this.accept(MetricNameVisitor);
}

FormulaAST.isValid = function(formula) {
    try {
        new FormulaAST(formula);
    } catch(_) {
        return false;
    }
    return true;
};

/**
 * @typedef {Object} FormulaASTVisitor
 * @property {function} visitFormula(equations)
 * @property {function} visitEquation(left, right)
 * @property {function} visitExpr(a)
 * @property {function} visitFunction(a)
 * @property {function} visitOpFunction(left, op, right)
 * @property {function} visitFunctionalPredicate(name, args)
 * @property {function} visitAggFunction(a)
 * @property {function} visitArgs(args)
 * @property {function} visitGroup(a)
 * @property {function} visitGuarded(guardedExpr, guard)
 * @property {function} visitP2P(name, arg)
 * @property {function} visitTuple(a)
 * @property {function} visitVariable(a)
 * @property {function} visitConstant(constant)
 * @property {function} visitGuard(a)
 * @property {function} visitComparison(left, op, right)
 * @property {function} visitOp(op)
 * @property {function} visitConjunction(as)
 * @property {function} visitDisjunction(as)
 * @property {function} visitExists(a)
 * @property {function} visitNegation(a)
 * @property {function} visitRelation(a)
 */

/**
 * @param  {FormulaASTVisitor} visitor
 */
FormulaAST.prototype.accept = function(visitor) {
    return this.acceptFormula(visitor, this.$formula);
};

FormulaAST.prototype.acceptFormula = function(visitor, formula) {
    var me =  this;
    var equations = formula.equation.map(function(eq) {
        return me.acceptEquation(visitor, eq);
    });
    return visitor.visitFormula(equations);
};

FormulaAST.prototype.acceptEquation = function(visitor, eq) {
    var left = this.acceptExpr(visitor, eq.left),
        right = this.acceptExpr(visitor, eq.right);
    return visitor.visitEquation(left, right);
};

FormulaAST.prototype.acceptExpr = function(visitor, expr) {
    var e;
    if (expr.function) e = this.acceptFunction(visitor, expr.function);
    else if (expr.group) e = this.acceptGroup(visitor, expr.group);
    else if (expr.guarded) e = this.acceptGuarded(visitor, expr.guarded);
    else if (expr.p2p) e = this.acceptP2P(visitor, expr.p2p);
    else if (expr.tuple) e = this.acceptTuple(visitor, expr.tuple);
    else if (expr.variable) e = this.acceptVariable(visitor, expr.variable);
    else if (expr.constant) e = this.acceptConstant(visitor, expr.constant);
    
    return visitor.visitExpr(e);
};

FormulaAST.prototype.acceptFunction = function(visitor, func) {
    var f;

    if (func.name === "add")  f = this.acceptOpFunction(visitor, func, " + ");
    else if (func.name === "subtract")  f = this.acceptOpFunction(visitor, func, " - ");
    else if (func.name === "divide")  f = this.acceptOpFunction(visitor, func, " / ");
    else if (func.name === "multiply")  f = this.acceptOpFunction(visitor, func, " * ");
    else if (func.name === "negate") f = this.acceptUnaryOpFunction(visitor, func, " -");
    else if (func.name === "total")  f = this.acceptAggFunction(visitor, func);
    else if (func.name === "count")  f = this.acceptAggFunction(visitor, func);
    else {
        f = this.acceptFunctionalPredicate(visitor, func);
    }
    return visitor.visitFunction(f);
};

FormulaAST.prototype.acceptFunctionalPredicate = function(visitor, p) {
    var as = this.acceptFunctionArgs(visitor, p.args);
    return visitor.visitFunctionalPredicate(p.name, as);
};

FormulaAST.prototype.acceptOpFunction = function(visitor, func, op) {
    var left = this.acceptExpr(visitor, func.args[0].arg[0]),
        right = this.acceptExpr(visitor, func.args[0].arg[1]);
    return visitor.visitOpFunction(
        left, op, right);
};

FormulaAST.prototype.acceptUnaryOpFunction = function(visitor, func, op) {
    var right = this.acceptExpr(visitor, func.args[0].arg[0]);
    return visitor.visitUnaryOpFunction(
        op, right);
};

FormulaAST.prototype.acceptAggFunction = function(visitor, func) {
    var args = this.acceptFunctionArgs(visitor, func.args);
    return visitor.visitAggFunction(func.name, args);
};

FormulaAST.prototype.acceptFunctionArgs = function(visitor, args) {
    var me = this;
    args = args || [];

    var a = args.map(function(arg) { 
        return arg.arg && arg.arg.map(me.acceptExpr.bind(me, visitor));
    });
    return visitor.visitArgs(a);
};

FormulaAST.prototype.acceptGroup = function(visitor, group) {
    var expr = this.acceptExpr(visitor, group.expr);
    return visitor.visitGroup(expr);
};

FormulaAST.prototype.acceptGuarded = function(visitor, guarded) {
    var guardedExpr = this.acceptExpr(visitor, guarded.expr);
    var guard = this.acceptGuard(visitor, guarded.guard);
    return visitor.visitGuarded(guardedExpr, guard);
};

FormulaAST.prototype.acceptP2P = function(visitor, p2p) {
    return visitor.visitP2P(p2p.name, p2p.arg);
};

FormulaAST.prototype.acceptTuple = function(visitor, tuple) {
    var exprs = tuple.expr.map(this.acceptExpr.bind(this, visitor));
    return visitor.visitTuple(exprs);
};

FormulaAST.prototype.acceptVariable = function(visitor, variable) {
    return visitor.visitVariable(variable.variable);
};

FormulaAST.prototype.acceptConstant = function(visitor, constant) {
    if (!lodash.isUndefined(constant.decimal_constant)) {
        constant = lodash.merge({}, constant);
        constant.decimal_constant /= 1000;
    }

    return visitor.visitConstant(constant);
};

FormulaAST.prototype.acceptGuard = function(visitor, guard) {
    var g;
    if (guard.comparison) g = this.acceptComparison(visitor, guard.comparison);
    else if (guard.conjunction) g = this.acceptConjunction(visitor, guard.conjunction);
    else if (guard.disjunction) g = this.acceptDisjunction(visitor, guard.disjunction);
    else if (guard.exists) g = this.acceptExists(visitor, guard.exists);
    else if (guard.negation) g = this.acceptNegation(visitor, guard.negation);
    else if (guard.relation) g = this.acceptRelation(visitor, guard.relation);
    return visitor.visitGuard(g);
};

FormulaAST.prototype.acceptComparison = function(visitor, comparison) {
    var left = this.acceptExpr(visitor, comparison.left),
        op = this.acceptOp(visitor, comparison.op),
        right = this.acceptExpr(visitor, comparison.right);
    return visitor.visitComparison(left, op, right);
};

FormulaAST.prototype.acceptOp = function(visitor, op) {
    return visitor.visitOp(op);
};

FormulaAST.prototype.acceptConjunction = function(visitor, conjunction) {
    var me = this,
        cs = conjunction.guard.map(function(g) {
            return me.acceptGuard(visitor, g);
        });
    return visitor.visitConjunction(cs);
};

FormulaAST.prototype.acceptDisjunction = function(visitor, disjunction) {
    var me = this,
        ds = disjunction.guard.map(function(g) {
            return me.acceptGuard(visitor, g);
        });
    return visitor.visitDisjunction(ds);
};

FormulaAST.prototype.acceptExists = function(visitor, exists) {
    var e = this.acceptExpr(visitor, exists.expr);
    return visitor.visitExists(e);
};

FormulaAST.prototype.acceptNegation = function(visitor, negation) {
    var g = this.acceptGuard(visitor, negation.guard);
    return visitor.visitNegation(g);
};

FormulaAST.prototype.acceptRelation = function(visitor, relation) {
    var r = this.acceptFunction(visitor, relation);
    return visitor.visitRelation(r);
};

FormulaAST.prototype.toString = function() {
    return this.accept(TextFormulaVisitor);
};

FormulaAST.prototype.getFormulaId = function() {
    var formula = this.toString(),
        parsedFormula = measurelanguage.parseFormula(formula);
    return parsedFormula && parsedFormula.name || "";
};

var TextFormulaVisitor = {
    visitFormula: function(equations) {
        return equations.join("\n");
    },
    visitEquation: function(left, right) {
        return left + " = " + right + ".";
    },
    visitExpr: function(a) {
        return String(a);
    },
    visitFunction: function(a) {
        return String(a);
    },
    visitUnaryOpFunction: function(op, right) {
        return op + right;
    },
    visitOpFunction: function(left, op, right) {
        return left + op + right;
    },
    visitFunctionalPredicate: function(name, args) {
        if (args.length > 0)
            return name + "[" + args + "]";
        else
            return name;
    },
    visitAggFunction: function(a) {
        return String(a);
    },
    visitArgs: function(args) {
        return lodash.flatten(args).join(", ");
    },
    visitGroup: function(a) {
        return String(a);
    },
    visitGuarded: function(guardedExpr, guard) {
        return guardedExpr + " where " + guard;
    },
    visitP2P: function(name, arg) {
        return "<<" + name + " = " + arg + ">>";
    },
    visitTuple: function(a) {
        return a.join(", ");
    },
    visitVariable: function(a) {
        return String(a);
    },
    visitConstant: function(constant) {
        if (!lodash.isUndefined(constant.boolean_constant)) return constant.boolean_constant;
        else if (!lodash.isUndefined(constant.string_constant)) return constant.string_constant;
        else if (!lodash.isUndefined(constant.int_constant)) return constant.int_constant;
        else if (!lodash.isUndefined(constant.float_constant)) return constant.float_constant + "f";
        else if (!lodash.isUndefined(constant.decimal_constant)) return constant.decimal_constant + "d";
    },
    visitGuard: function(a) {
        return String(a);
    },
    visitComparison: function(left, op, right) {
        return left + op + right;
    },
    visitOp: function(op) {
        if (op === "EQUALS") return " = ";
        else if (op === "NOT_EQUALS") return " != ";
        else if (op === "GREATER_THAN") return " > ";
        else if (op === "LESS_THAN") return " < ";
        else if (op === "GREATER_OR_EQUALS") return " >= ";
        else if (op === "LESS_OR_EQUALS") return " <= ";
    },
    visitConjunction: function(as) {
        return as.join(", ");
    },
    visitDisjunction: function(as) {
        return as.join("; ");
    },
    visitExists: function(a) {
        return String(a);
    },
    visitNegation: function(a) {
        return "!" + a;
    },
    visitRelation: function(a) {
        return String(a);
    }
};

/**
 * Used to find name of the metric that is calculated by a formula.
 * Returns the first
 * @type {Object}
 */
var MetricNameVisitor = {
    visitFormula: function(equations) {
        return equations && equations[0];
    },
    visitEquation: function(left, right) {
        return left;
    },
    visitExpr: function(a) {
        return String(a);
    },
    visitFunction: function(a) {
        return String(a);
    },
    visitUnaryOpFunction: function(op, right) {
    },
    visitOpFunction: function(left, op, right) {
    },
    visitFunctionalPredicate: function(name, args) {
        return name;
    },
    visitAggFunction: function(a) {
    },
    visitArgs: function(args) {
    },
    visitGroup: function(a) {
    },
    visitGuarded: function(guardedExpr, guard) {
    },
    visitP2P: function(name, arg) {
    },
    visitTuple: function(a) {
    },
    visitVariable: function(a) {
    },
    visitConstant: function(constant) {
    },
    visitGuard: function(a) {
    },
    visitComparison: function(left, op, right) {
    },
    visitOp: function(op) {
    },
    visitConjunction: function(as) {
    },
    visitDisjunction: function(as) {
    },
    visitExists: function(a) {
    },
    visitNegation: function(a) {
    },
    visitRelation: function(a) {
    }
};
module.exports = FormulaAST;

},{"../measurelanguage":235,"lodash":90}],283:[function(require,module,exports){
    "use strict";

    var PromiseBuilder = require("../promisebuilder");
    var lodash = require("lodash");

    function PromiseCache() {
        this.$promiseCache = {};
    }    
    
    /**
     * Handles concurrent calls to an action based on actionId.
     * 
     * @param {string} actionId - string that uniquely identifies this action.
     *                              This means that calling concurrentPromise with the
     *                              same actionId will reuse an existing action with
     *                              the same id
     * @param {function} fn
     * @param {boolean} [logError]
     * @param {int} [timeoutMillisecs] - defaults to whatever PromiseBuilder.handleTimeout defaults to
     * @throws {PromiseTimeoutError}
     * @return {Promise}
     */
    PromiseCache.prototype.concurrentPromise = function(actionId, fn, logError, timeoutMillisecs) {
        if (!lodash.isFunction(fn)) {
            throw new Error("fn must be a function");
        }
        
        var me = this,
            cachedPromise = me.$promiseCache[actionId],
            wrappedPromise;

        if (cachedPromise)
            return cachedPromise;
        
        wrappedPromise = PromiseBuilder.handleTimeout(fn, timeoutMillisecs);
        cachedPromise = PromiseBuilder.do(wrappedPromise, logError).onSuccess(function() {
            delete me.$promiseCache[actionId];
        }).onFailure(function() {
            delete me.$promiseCache[actionId];
        }).build();
        this.$promiseCache[actionId] = cachedPromise;
        return cachedPromise;
    };
    
    PromiseCache.prototype.sequential = function(actionId, fn, logError, timeoutMillisecs) {
        if (!lodash.isFunction(fn)) {
            throw new Error("fn must be a function");
        }

        var me = this,
            cachedPromise = me.$promiseCache[actionId] || Promise.resolve(),
            wrappedPromise;

        wrappedPromise = function() {
            return PromiseBuilder.handleTimeout(fn, timeoutMillisecs);
        };
        cachedPromise = PromiseBuilder.do(cachedPromise.then(wrappedPromise), logError).onSuccess(function() {
            delete me.$promiseCache[actionId];
        }).onFailure(function() {
            delete me.$promiseCache[actionId];
        }).build();
        this.$promiseCache[actionId] = cachedPromise;
        return cachedPromise;
    };
    
    module.exports = PromiseCache;

},{"../promisebuilder":256,"lodash":90}],284:[function(require,module,exports){
"use strict";

    function ServiceCaller(driver) {
        this.$http = driver.http;
        this.$serverUrl = driver.urls.serverUrl;
    }

    /**
     * A generic service caller interface.
     * 
     * @param {string} url
     * @param {object} options
     * @prop {string|object} options.message
     * @prop {string} options.method
     * @prop {string} options.contentType
     */
    ServiceCaller.prototype.callService = function(url, options) {
        var message = options.message,
            defaultMethod = 'post',
            method = (options.method || defaultMethod).toLowerCase(),
            methodFn,
            urlIsAbsolute,
            svcUrl;

        urlIsAbsolute = url.indexOf('://') > -1 || url.indexOf('/') === 0;
        svcUrl = urlIsAbsolute ? url : this.$serverUrl + "/" + url; //only prepend serverUrl if the url is relative

        switch(method) {
            case 'post': 
                methodFn = this.$http.post;
                break;
            case 'get':
                methodFn = this.$http.get;
                break;
            default:
                throw new Error("Illegal action method '" + method + "' for service at " + url); 
        }

       return methodFn.call(this.$http, svcUrl, message || {});
    };

    module.exports = ServiceCaller;

},{}],285:[function(require,module,exports){
"use strict";

var assert = require("assert");
var Immutable = require("immutable");
var lodash = require("lodash");

var util = require("../util");

var constants = require("../constant");
var ViewConstants = constants.View;
var LayoutConstants = constants.Layout;

var VIEW_MODE_PROPERTY = "viewMode";
var CONFIG_PROPERTY = "config";
var MODULE_PROPERTY = "module";

var PREDEFINED_VIEW_PROPS = [VIEW_MODE_PROPERTY, MODULE_PROPERTY];

var EmptyLayout = {
    shape: {
        rows: "1",
        columns: "1"
    },
    viewPositions: {}
};

/**
 * Return the current view mode of the layout
 * @method getCurrentViewMode
 * @param {ViewConfig} config - the views of the layout.
 * @return {String}
 */
function getCurrentViewMode(config) {
    assert(config, ["Config can't be empty"]);

    var viewModes = lodash.values(LayoutConstants.VIEW_MODE),
        view;

    view = config.get("views").find(function(view) {
        var viewMode = view.get(VIEW_MODE_PROPERTY);
        return viewModes.indexOf(viewMode) !== -1 && viewMode !== LayoutConstants.VIEW_MODE.DEFAULT;
    });

    return view && view.get(VIEW_MODE_PROPERTY) || LayoutConstants.VIEW_MODE.DEFAULT;
}

/**
 * Return the current view mode of the view in the parent layout
 * @method getCurrentViewMode
 * @param {String} viewId - the view ID.
 * @param {ViewConfig} config - the views of the layout.
 * @return {String}
 */
function getCurrentViewModeInParentLayout(viewId, config) {
    assert(config, ["Config can't be empty"]);

    var viewModes = lodash.values(LayoutConstants.VIEW_MODE),
        viewMode = config.getIn(["views", viewId, VIEW_MODE_PROPERTY]);

    if (viewModes.indexOf(viewMode) !== -1) {
        return viewMode;
    }

    return LayoutConstants.VIEW_MODE.DEFAULT;
}

/**
 * Return views in the specified view mode
 * @method findViewsInViewMode
 * @param {ViewConfig} config - the views of the layout.
 * @param {String} viewMode - the view mode.
 * @return {Array}
 */
function findViewsInViewMode(config, viewMode) {
    assert(config, ["Config can't be empty"]);

    var views = config.get("views"),
        viewsInViewMode;

    if (!views || !views.size) {
        return [];
    }

    viewMode = util.checkEnumValue(viewMode, LayoutConstants.VIEW_MODE, LayoutConstants.VIEW_MODE.DEFAULT);

    viewsInViewMode = views.reduce(function(memo, view, viewId) {
        if ((view.get(VIEW_MODE_PROPERTY) || LayoutConstants.VIEW_MODE.DEFAULT) === viewMode) {
            memo = memo.push(viewId);
        }
        return memo;
    }, Immutable.List());

    return viewsInViewMode.toJS();
}

/**
 * Returns true, if the layout is in the default view mode
 * @method isDefaultViewMode
 * @param {ViewConfig} config - The views of the current layout.
 * @return {Boolean}
 */
function isDefaultViewMode(config) {
    var viewMode = getCurrentViewMode(config);

    return !viewMode || viewMode === LayoutConstants.VIEW_MODE.DEFAULT;
}

/**
 * Opens the view in the layout
 * @param  {ViewConfig} viewState - the layout view`s state.
 * @param  {String} viewId - the view`s ID
 * @param  {ViewConfig} [config] - the view`s config
 * @param  {ViewPosition} [position] - the view`s preferred position
 * @param  {Boolean} [force] - if true, current view`s position will be updated even it is already opened
 * @return {ViewConfig} - updated layout view`s state
 */
function openViewInLayout(viewState, viewId, config, position, force) {
    var oldViewState = viewState;

    viewState = viewState.setIn(["views", viewId], Immutable.fromJS(config) || Immutable.Map());
    viewState = viewState.deleteIn(["views", viewId, "closed"]);

    if (position && (force || !isViewOpenedInLayout(oldViewState, viewId))) {
        viewState = viewState.updateIn(["layout"], function(layout) {
            return Immutable.fromJS(EmptyLayout).merge(layout);
        });
        viewState = viewState.setIn(["layout", "viewPositions", viewId], Immutable.fromJS(position));
    }

    return viewState;
}

/**
 * Closes the view in the layout
 * @param  {ViewConfig} viewState - the layout view`s state.
 * @param  {String} viewId - the view`s ID
 * @param  {Boolean} setClosed - if true, the flag "closed" will be set, otherwise - the view will be deleted
 * @return {ViewConfig} - updated layout view`s state
 */
function closeViewInLayout(viewState, viewId, setClosed) {
    if (viewState.getIn(["views", viewId])) {
        if (setClosed) {
            viewState = viewState.setIn(["views", viewId, "closed"], true);
        } else {
            viewState = viewState.deleteIn(["views", viewId]);
        }
    }

    viewState = viewState.deleteIn(["layout", "viewPositions", viewId]);

    return viewState;
}

/**
 * Set the view mode of the view.
 * @method setViewModeInLayout
 * @param {ViewConfig} viewState - the layout view`s state.
 * @param {String} viewId - The ID of the view.
 * @param {String} [viewMode=VIEW_MODE.DEFAULT] - The view mode to set in.
 * @param {Object} [options] - The config that will be merged into the current view config.
 *
 * @return {ViewConfig} - updated layout view`s state
 */
function setViewModeInLayout(viewState, viewId, viewMode, options) {
    var callback;

    viewMode = viewMode || LayoutConstants.VIEW_MODE.DEFAULT;

    /**
     * Mutates a view state while switching to a different view mode.
     * @param  {Immutable.Map} vs
     * @param  {Immutable.Map} [options]
     * @param  {string}        [viewMode]
     * @return {Immutable.Map}
     */
    function mutateViewConfig(vs, options, viewMode) {
        return vs.withMutations(function(v) {
            if (options) {
                if (v.get("config")) {
                    v = v.mergeIn(["config"], options);
                } else {
                    v = v.set("config", options);
                }
            }

            if (viewMode) {
                v = v.set(VIEW_MODE_PROPERTY, viewMode);
            }

            return v;
        });
    }

    switch (viewMode) {
        case LayoutConstants.VIEW_MODE.CONFIGURATION:
            callback = function(view, id) {
                if (id === viewId) {
                    return mutateViewConfig(view, options, viewMode);
                } else {
                    return view.delete(VIEW_MODE_PROPERTY);
                }
            };
            break;
        case LayoutConstants.VIEW_MODE.FORM:
        case LayoutConstants.VIEW_MODE.CHART:
            callback = function(view, id) {
                if (id === viewId) {
                    return mutateViewConfig(view, options, viewMode);
                }

                return view;
            };
            break;
        default:
            callback = function(view) {
                return mutateViewConfig(view, options)
                    .delete(VIEW_MODE_PROPERTY);
            };
            break;
    }

    viewState = viewState.update("views", function(views) {
        return views.map(callback);
    });

    return viewState;
}

/**
 * Returns true if the view is opened in the layout.
 * @param  {ViewConfig}  viewState - the layout view`s state
 * @param  {String}  viewId - the view`s ID.
 * @return {Boolean}
 */
function isViewOpenedInLayout(viewState, viewId) {
    if (!viewState || (!viewState.get("views") && !viewState.get("layout"))) {
        return false;
    }

    var view = viewState.getIn(["views", viewId]),
        viewPosition = viewState.getIn(["layout", "viewPositions", viewId]);

    if (view && view.get("closed")) {
        return false;
    }

    return !!(view || viewPosition);
}


/**
 * Return true if the view is an inline
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} viewId - the view's ID
 * @return {Boolean} - true, if the view is an inline
 */
function isViewInline(layoutViewState, viewId) {
    var viewState = layoutViewState.getIn(["views", viewId]),
        filteredConfigProps;

    if (viewState) {
        if (viewState.has(CONFIG_PROPERTY)) {
            return true;
        }

        return !!viewState.find(function(view, id) {
            return PREDEFINED_VIEW_PROPS.indexOf(id) === -1
        });
    }

    return false;
}

/**
 * Returns the ID of an inline view
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} moduleId - the view's module ID
 * @return {String} - the view's ID
 */
function getInlineViewId(layoutViewState, moduleId) {
    var componentId,
        views = layoutViewState.get("views");

    componentId = views.findKey(function(view) {
        return view.get("module") === moduleId;
    });

    return componentId || (moduleId && moduleId.toLowerCase());
}

/**
 * Returns the view state of an inline view by the view's module ID
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} moduleId - the view's module ID
 * @return {Immutable.Map} - the view's config
 */
function getInlineViewState(layoutViewState, moduleId) {
    return layoutViewState.getIn(["views", getInlineViewId(layoutViewState, moduleId)]);
}

/**
 * Returns the view state of an inline view by the view's ID
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} viewId - the view's ID
 * @return {Immutable.Map} - the view's config
 */
function getInlineViewStateById(layoutViewState, viewId) {
    return layoutViewState.getIn(["views", viewId]);
}

/**
 * Sets the view state of an inline view by its ID
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} viewId - the view's ID
 * @param  {Immutable.Map} config - the view's config
 * @return {Immutable.Map<ViewState>} - the updated layout view's state
 */
function setInlineViewStateById(layoutViewState, viewId, config) {
    var moduleId = config.get(MODULE_PROPERTY) || layoutViewState.getIn(["views", viewId, MODULE_PROPERTY]),
        updatedViewConfig = {
            config: config.get(CONFIG_PROPERTY) || config
        };

    if (config.has(CONFIG_PROPERTY)){
        config.forEach(function(propValue, propName){
            if (propName !== CONFIG_PROPERTY){
                updatedViewConfig[propName] = propValue;
            }
        });
    }

    return layoutViewState.setIn(["views", viewId], Immutable.Map(updatedViewConfig));
}

/**
 *  Sets the view state of an inline view by its module ID
 *
 * @param  {ViewState} layoutViewState - the layout view`s state
 * @param  {String} moduleId - the view's module ID
 * @param  {Immutable.Map} config - the view's config
 * @return {Immutable.Map<ViewState>} - the updated layout view's state
 */
function setInlineViewState(layoutViewState, moduleId, config) {
    var viewId = getInlineViewId(layoutViewState, moduleId);

    return setInlineViewStateById(layoutViewState, viewId, config);
}

module.exports = {
    getCurrentViewMode: getCurrentViewMode,
    getCurrentViewModeInParentLayout: getCurrentViewModeInParentLayout,
    findViewsInViewMode: findViewsInViewMode,
    isDefaultViewMode: isDefaultViewMode,
    setViewModeInLayout: setViewModeInLayout,
    openViewInLayout: openViewInLayout,
    closeViewInLayout: closeViewInLayout,
    isViewOpenedInLayout: isViewOpenedInLayout,

    getInlineViewId: getInlineViewId,
    getInlineViewState: getInlineViewState,
    getInlineViewStateById: getInlineViewStateById,
    setInlineViewState: setInlineViewState,
    setInlineViewStateById: setInlineViewStateById,
    isViewInline: isViewInline
};

},{"../constant":191,"../util":280,"assert":undefined,"immutable":44,"lodash":90}],286:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var querygen = require("../querygen/query");
var UrlDriver = require("../urldriver").UrlDriver;
var MeasureServiceDAO = require("../dao/measureservicedao");

/**
 * Executes all install requests for the given measure queries. This is intended to be used
 * for warmups, since it will query all the data without any dicing.
 * 
 * @param  {String} measureUrl
 * @param  {ServiceRequest} dataRequest
 * @return {Promise}
 */
function warmupMeasureQueries(measureUrl, dataRequest) {
    var driver = new UrlDriver({
            urls: {measureUrl: measureUrl},
            connectblox: {workspace: "foo"}  // UrlDriver expects a workspace value, but we don't use it for warmups
        }),
        measureServiceDAO = new MeasureServiceDAO(driver),
        installRequest = generateWarmupQueries(dataRequest);

    return measureServiceDAO.send(installRequest);
}

/**
 * Generates install requests for the given measure queries.
 * Will add a filter to non-existant positions so that it can be used
 * to warmup views in a workspace with data
 * 
 * @param  {ServiceRequest} dataRequest
 * @return {ServiceRequest}
 */
function generateWarmupQueries(dataRequest) {
    var exprs = [],
        filteredExprs,
        uniqueExprs,
        installRequest;

    dataRequest.request.query_request.forEach(function(queryRequest){
        exprs = exprs.concat(queryRequest.measure);
    });
    filteredExprs = exprs.filter(lodash.identity);
    uniqueExprs = uniquify(filteredExprs);
    installRequest = {install_request: {measure_expr: uniqueExprs}};

    //console.log(Date.now() + "  ================== InstallRequest: (BEGIN) ==================\n");
    //console.log(JSON.stringify(installRequest));
    //console.log(Date.now() + "  ================== InstallRequest: (END) ==================\n\n\n");
    return lodash.cloneDeep(installRequest);
}

function filterExprs(expr) {
    var kind = expr.kind;

    switch (kind) {
        case "APPLICATION":
            return expr;
        case "AGGREGATION":
            return expr;
        case "METRIC":
            return expr;
        case "DROP":
            return filterExprs(expr.drop.expr);
        case "RELABEL":
            return filterExprs(expr.relabel.expr);
        case "FILTER":
            return filterExprs(expr.filter.expr);
        case "DICE":
            return filterExprs(expr.dice.expr);
        case "WIDEN":
            return filterExprs(expr.widen.expr);
        case "SPLIT":
            return filterExprs(expr.split.expr);
        case "DEMOTE":
            return filterExprs(expr.demote.expr);
        case "ATTRIBUTE":
            return null;
        case "PARAM":
            return null;
        default:
            return null;
    }
}

function uniquify(exprs) {
    var strExprs = exprs.map(function(expr) {
            return JSON.stringify(expr);
        }),
        uniqueExprs = lodash.uniq(strExprs);
    return uniqueExprs.map(JSON.parse);
}

module.exports = {
    warmupMeasureQueries: warmupMeasureQueries,
    generateWarmupQueries: generateWarmupQueries
};

},{"../dao/measureservicedao":217,"../querygen/query":258,"../urldriver":279,"lodash":90}],287:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var formatParser = require("./formatparser");


/**
 * A validation tool.
 * @constructor
 */
function ValidationTool() {
    this.$validators = {};

    // To make sure that we have some other symbols in input except operators and "%" sign
    this.$doesNotHaveNumbersRegExp = new RegExp("^([+-\/*%]+)$");

    // DECIMAL & FLOAT
    this.$decimalRegExp = lodash.template("(([1-9]\\d{0,2}(\\<%= delimiters.thousands %>\\d{3})*)|\\d{0,1}|[1-9]\\d*)?(\\<%= delimiters.decimal %>\\d*)?([kKmMbBtT])?");

    // INTEGER
    this.$intRegExp = lodash.template("(((([1-9]\\d{0,2}(\\<%= delimiters.thousands %>\\d{3})*)|\\d{0,1}|[1-9]\\d*)?([kKmMbBtT])?)|(\\d\\<%= delimiters.decimal %>((\\d{1,3}[kK])|(\\d{1,6}[mM])|(\\d{1,9}[bB])|(\\d{1,12}[tT]))))");

    // For DECIMAL and INTEGER (excludes formats w/ "%" sign (percentages))
    this.$regExp = lodash.template("^((((\\+-|\\+)<%= numberWithSymbol %>)|(([/*])<%= decimalNumber %>)|((\\+-|\\+)<%= decimalNumber %>%))|(-?<%= numberWithSymbol %>))([ERPD])?$");

    // For PERCENTAGE
    this.$percentageRegExp = lodash.template("^((((\\+-|\\+)(<%= numberWithRequiredSymbol %>|<%= decimalNumber %>))|(([/*])<%= decimalNumber %>))|(-?<%= numberWithSymbol %>)([ERPD])?)$");
}

/**
 * Returns a unique name for type and format.
 * @param  {string} dataType the type of the cell
 * @param  {string} format   the cell format
 * @return {string}          the unique name for such kind of cell
 */
ValidationTool.prototype.$getValidatorName = function(dataType, format) {
    return dataType + ":" + format;
};

/**
 * A tool that knows how to validate values of type and format.
 * @typedef  {Object}       Validator
 * @property {ParsedFormat} format
 * @property {string}       regExpString
 * @property {RegExp}       regExp
 * @property {Function}     validate
 * 
 * Returns a cached validator or creates a new one.
 * @param  {string} dataType the type of data validator is requested for
 * @param  {string} format   the format of data validator is requested for
 * @return {Validator}
 */
ValidationTool.prototype.getFor = function(dataType, format) {
    var validatorName = this.$getValidatorName(dataType, format),
        validator = this.$validators[validatorName];

    if (!validator) {
        validator = this.$createValidator(dataType, format);
        this.$validators[validatorName] = validator;
    }

    return validator;
};

/**
 * Creates a new validator.
 * @param  {string} dataType the type of data validator is requested for
 * @param  {string} format   the format of data validator is requested for
 * @return {Validator}
 */
ValidationTool.prototype.$createValidator = function(dataType, format) {
    var me = this,
        formatter = formatParser.parse(dataType, format),
        numberRegExpStr = (["DECIMAL", "FLOAT"].indexOf(dataType) >= 0) ? me.$decimalRegExp : me.$intRegExp, // regular expression string contains validation for a number.
        numberWithSymbolRegExpStr, // regular expression string contains validation for a number and format symbol(currency of percent).
        numberWithRequiredSymbolRegExpStr, // regular expression string contains validation for a number and makes the format symbol required.
        validationRegExpStr, // regular expression string contains validation for a number, minus, currency, spread method as well as calculator
        validationRegExp, // validation regular expression
        decimalRegExpStr = me.$decimalRegExp(formatter), // we need decimal regular expression because dataType doesn't matter when we divide/multiply
        formatSymbol,
        requiredSymbolRegExpStr,
        symbolRegExpStr;

    numberRegExpStr = numberRegExpStr(formatter);
    numberWithSymbolRegExpStr = numberRegExpStr;
    numberWithRequiredSymbolRegExpStr = numberRegExpStr;

    if (formatter.isPercentage) {
        formatSymbol = "%";
        validationRegExpStr = me.$percentageRegExp;
    } else {
        validationRegExpStr = me.$regExp;
        if (formatter.currency) {
            formatSymbol = formatter.currency.symbol;
        }
    }

    // choose where to allow a format symbol to appear
    if(!lodash.isUndefined(formatSymbol)) {
        requiredSymbolRegExpStr = "(\\" + formatSymbol + ")";
        symbolRegExpStr = requiredSymbolRegExpStr + "?";

        if (formatter.currency && formatter.currency.isPrefix) {
            numberWithSymbolRegExpStr = symbolRegExpStr + numberWithSymbolRegExpStr;
            numberWithRequiredSymbolRegExpStr = requiredSymbolRegExpStr + numberWithRequiredSymbolRegExpStr;
        } else {
            numberWithSymbolRegExpStr += symbolRegExpStr;
            numberWithRequiredSymbolRegExpStr += requiredSymbolRegExpStr;
        }
    }

    validationRegExpStr = validationRegExpStr({
        decimalNumber: decimalRegExpStr,
        numberWithSymbol: numberWithSymbolRegExpStr,
        numberWithRequiredSymbol: numberWithRequiredSymbolRegExpStr
    });

    validationRegExp = new RegExp(validationRegExpStr);

    return {
        format: formatter,
        regExpString: validationRegExpStr,
        regExp: validationRegExp,
        /**
         * @typedef  {Object}  ValidationResponse
         * @property {boolean} valid   it indicates if validation has been passed
         * @property {string}  [info]  the optional message that describes the validation result
         * 
         * Validates the value.
         * @param  {string} value the value that should be validated
         * @return {ValidationResponse}
         */
        validate: function(value) {
            var r = {
                valid: true,
                info: "This cell is " + dataType + " and its format is " + format + "."
            };

            if (value === "")
                return r;

            var hasNumbers = !me.$doesNotHaveNumbersRegExp.test(value);

            if (hasNumbers) {
                r.valid = validationRegExp.test(value);
                return r;
            } else {
                return {
                    valid: false,
                    info: "The input should have numbers."
                };
            }
        }
    };
};

/**
 * Validates a value.
 * @param  {string} value    the value to validate
 * @param  {string} dataType the value type
 * @param  {string} format   the value format
 * @return {ValidationResponse}
 */
ValidationTool.prototype.validate = function(value, dataType, format) {
    // skip any data type except Decimal, Float and Integer
    if (["DECIMAL", "INT", "FLOAT"].indexOf(dataType) < 0) {
        return {
            valid: true
        };
    }

    return this.getFor(dataType, format).validate(value);
};

/**
 * A tool that allows to validate inputs
 * @type {ValidationTool}
 */
module.exports = new ValidationTool();
},{"./formatparser":226,"lodash":90}],288:[function(require,module,exports){
"use strict";

var EventEmitter = require("../event_emitter").EventEmitter;
var MultiAxisDataEvents = require("../store/multiaxisdatastore").MultiAxisDataEvents;
var ch = require("./pivot/config_helper");
var validationTool = require("../validationtool");
var inputParser = require("../inputparser");
var cubiql = require("../cubiql");
var FormattingConditionals = require("../constant/gridoptions").CONDITIONALS;
var CommitMode = require("pivottable/src/constants").CommitMode;
var lodash = require("lodash");
var assert = require("assert");
var util = require("../util");
var SORT = require("../constant").SORT;
var mac = require("../multiaxisconfig");
var Immutable = require("immutable");
var pchs = require("../helpers/pivotconfighelpers");
var pch = require("../pivotconfig_helper");

/**
 * implementation of pivottable's DataProvider, this basically just acts as a thin wrapper around the MultiAxisDataStore
 */
//TODO compress this comical argument list to deps
lodash.mixin(MultiAxisProvider.prototype, EventEmitter.prototype);
function MultiAxisProvider(viewId, multiAxisDataStore, multiAxisConfigStore, multiAxisConfigActionHandler, multiAxisDataActionHandler, modelerState, pivotState, defaultCellWidth, defaultCellHeight, updatePivotState) {
    this.$viewId = viewId;

    this.$sliceAxes = ["Z"]; //TODO fix this up buddy
    this.$madStore = multiAxisDataStore;
    this.$macStore = multiAxisConfigStore;

    this.$multiAxisDataActionHandler = multiAxisDataActionHandler;
    this.$multiAxisConfigActionHandler = multiAxisConfigActionHandler;

    this.$modelerState = modelerState;
    this.$pivotState = pivotState;

    this.$defaultCellWidth = defaultCellWidth;
    this.$defaultCellHeight = defaultCellHeight;

    this.$updatePivotState = updatePivotState;

    this.$madStore.on(MultiAxisDataEvents.DATA_CHANGED, this.$onDataChanged.bind(this));

    this.$updatePivotState = updatePivotState;
}

module.exports = MultiAxisProvider;

function hasValueQueryData(cellData) {
    return cellData && cellData.data.value && cellData.data.value && !lodash.isUndefined(cellData.data.value.value);
}

/**
 * @param {CellData} cellData
 * @param {Boolean} [formatted] whether to get the formatted value. Defaults to false.
 * @return {Value[][] | String[][]}
 */
function getValueQueryData(cellData, formatted) {
    var prop = formatted ? "formattedValue" : "rawValue";
    return hasValueQueryData(cellData) && cellData.data.value.value[prop];
}

MultiAxisProvider.prototype.setPivotState = function(pivotState) {
    this.$pivotState = pivotState;
    this._emit("updateModel");
};

MultiAxisProvider.prototype.getConfig = function() {
    return this.$macStore.getViewTaskConfig(this.$viewId, "main").maConfig;
};

MultiAxisProvider.prototype.containsQueuedEdits = function() {
    return this.$madStore.getNextQueuedEdits();
};

MultiAxisProvider.prototype.$onDataChanged = function(e) {
    var viewId = this.$viewId,
        viewTask = e.viewTasks && e.viewTasks.find(function(vt) {
            return vt.viewId === viewId;
        }),
        taskNames = (viewTask && viewTask.tasks) || [];

    if (!e.viewTasks || taskNames.indexOf("main") > -1) {
        this._emit("updateModel");
    }

    if ((!e.viewTasks || taskNames.indexOf("copy") > -1) &&
        this.$macStore.viewTaskIsActive(viewId, "copy") &&
        !this.$madStore.hasOutstandingRequestsForViewTask(viewId, "copy")) {
        this._emit("copyReady");
    }
};

MultiAxisProvider.prototype.markViewAsActive = function() {
    return this.$multiAxisConfigActionHandler.setViewTaskActive(this.$viewId, "main");
};

MultiAxisProvider.prototype.markViewAsInactive = function() {
    return this.$multiAxisConfigActionHandler.setViewTaskInactive(this.$viewId, "main");
};

MultiAxisProvider.prototype.commit = function() {
    var me = this;

    return me.$multiAxisDataActionHandler.commitPendingEdits().then(function() {
        me._emit("updateModel");
    });
};

MultiAxisProvider.prototype.getCopiedCellsRange = function() {
    var multiAxisSelectionRange = this.selection.copySelectionRange;

    if (!multiAxisSelectionRange) {
        return;
    }

    return {
        start : {
            row: multiAxisSelectionRange.Y.start,
            column: multiAxisSelectionRange.X.start
        },
        end : {
            row: multiAxisSelectionRange.Y.start + multiAxisSelectionRange.Y.length - 1,
            column: multiAxisSelectionRange.X.start + multiAxisSelectionRange.X.length - 1
        }
    };
};

MultiAxisProvider.prototype.addSliceToCoord = function(coord) {
    return lodash.merge({}, this.getSliceCoord(), coord);
};

/**
 * @see dataprovider.validateValue
 * @typedef {Object} Validation
 * @param {Object} coord     the X/Y value of the cell
 * @param {Any}    value        the value that we excpect the cell will contain, undefined is an acceptable value
 */
MultiAxisProvider.prototype.validateValue = function(coord, value) {
    //add slice coordinates
    coord = this.addSliceToCoord(coord);

    var cellInfo = this.$madStore.getCellInfoAt(this.$viewId, "main", coord),
        valueQuery = cellInfo.queries.value;

    return !!valueQuery && validationTool.validate(value, valueQuery.type, valueQuery.formatter.formatPattern);
};

/**
 * Store edits and deletes, and commit them if in single edit mode.
 *
 * @param {Update[]} edits
 * @return {Promise}
 *
 * where
 * @typedef {Object} Update
 * @prop {Object} cellInfo
 * @prop {Object} edit
 * @prop {Any} edit.data
 * @prop {(Boolean|undefined)} edit.isDelete
 * @prop {(String|undefined)} edit.spreadMethod
 */
MultiAxisProvider.prototype.$updateCells = function(edits) {
    assert(Array.isArray(edits));
    var me = this,
        isSingleCommit = (me.getCommitMode() === CommitMode.SINGLE);

    return me.$multiAxisDataActionHandler.storePendingEdits(edits)
        .then(function () {
            if (isSingleCommit) {
                me.commit();
            }
        })
        .catch(function (err) {
            util.logError(err);
            throw err;
        });
};

/**
 * Save cell deletes and commit if in single mode.
 *
 * @param {Delete[]} coords
 * @return {Promise}
 *
 * where
 * @typedef {Object} Delete
 * @prop {Number} X
 * @prop {Number} Y
 */
MultiAxisProvider.prototype.deleteCells = function(coords) {
    assert(Array.isArray(coords));
    var me = this,
        formattedDeletes = coords.map(function (coord) {
            var infoCoord = me.addSliceToCoord(coord),
                cellInfo = me.$madStore.getCellInfoAt(me.$viewId, "main", infoCoord),
                cellData = me.getCellData(coord),
                currentValue = (hasValueQueryData(cellData) && getValueQueryData(cellData)[0] || [])[0];
            return {cellInfo: cellInfo, editConfigName: "value", edit: {data: currentValue, isDelete: true}};
        });

    return me.$updateCells(formattedDeletes);
};

/**
 * Save cell edits and commit if in single mode.
 *
 * @param {Edit[]} edits
 * @return {Promise}
 *
 * where
 * @typedef {Object} Edit
 * @prop {Object} coord
 * @prop {Number} coord.X
 * @prop {Number} coord.Y
 * @prop {Any} value
 */
MultiAxisProvider.prototype.editCells = function(edits) {
    var me = this,
        formattedEdits = edits.map(function (edit) {
            var coord = me.addSliceToCoord(edit.coord),
                cellInfo = me.$madStore.getCellInfoAt(me.$viewId, "main", coord),
                valueQuery,
                cellData,
                currentValue,
                parsedEdit;

            if (!cellInfo || !Object.keys(cellInfo.queries).length) {
                throw new Error("Error editing at coord: " + JSON.stringify(coord) + ". Coord not found.");
            }

            valueQuery = cellInfo.queries.value;
            cellData = me.getCellData(edit.coord);
            currentValue = (hasValueQueryData(cellData) && getValueQueryData(cellData)[0] || [])[0];
            parsedEdit = inputParser.createParser(valueQuery.formatter).parseEditInput(edit.value, valueQuery.type, currentValue);

            //for now we assume we're always editing the 'value' edit config
            return {cellInfo: cellInfo, editConfigName: "value", edit: parsedEdit};
        });

    return me.$updateCells(formattedEdits);
};

//TODO fix check corrd
MultiAxisProvider.prototype.checkCoord = function(coord) {
    assert(this.hasHeadingData(), "Heading data is not ready.");

    var cellInfo = this.$madStore.getCellInfoAt(this.$viewId, "main", coord),
        validRange = {};

    if (!cellInfo) {
        throw new Error("Invalid coordinate: " + JSON.stringify(coord) + " for viewId: " + this.$viewId + ". Valid range is: " + JSON.stringify(validRange));
    }
};

/**
 * @param {Coord} coord
 * @param {String[]} extraLabels optional. labels for extra items to request
 */
MultiAxisProvider.prototype.getCellData = function(coord, extraLabels) {
    //return undefined if we don't have ready headers
    if (!this.hasHeadingData())
        return;

    coord = this.addSliceToCoord(coord);
    //TODO for populated slice axes, set coord to 1 if not provided
    return this.$madStore.getDataAt(this.$viewId, "main", coord, this.$makeCellBuilder(extraLabels));
};

MultiAxisProvider.prototype.getSliceRange = function() {
    var coord = this.getSliceCoord(),
        range = {};

    if (!coord) return;

    Object.keys(coord).forEach(function(axisName) {
        range[axisName] = {start: coord[axisName], length: 1};
    });

    return range;
};

MultiAxisProvider.prototype.getSliceCoord = function() {
    if (!this.hasHeadingData())
        return;

    var coord = {},
        headingData = this.getHeadingData(),
        invalidCoord = false,
        me = this;

    this.$sliceAxes.forEach(function(axisName) {
        var fieldPos = me.getSliceFieldPos(axisName);

        if (fieldPos)
            coord[axisName] = headingData.getHeadingAxisInfo(axisName).findRowNumForFieldPos(fieldPos);
        else
            invalidCoord = true;
    });

    if (!invalidCoord)
        return coord;
};

MultiAxisProvider.prototype.getSliceFieldPos = function(axisName) {
    if (!this.hasHeadingData())
        return;

    var fields = this.getConfig().axis.get(axisName);

    return this.getHeadingData().getSelectedSliceFieldPos(fields);
};

MultiAxisProvider.prototype.$calculatePageGrid = function(dataRange) {
    var xLength = this.getHeadingInfo("X").getLength(),
        yLength = this.getHeadingInfo("Y").getLength(),
        xPageSize = dataRange.X.length || 1, //add two to cover half cells on either side
        yPageSize = dataRange.Y.length || 1;

    xPageSize = Math.min(xPageSize, xLength);
    yPageSize = Math.min(yPageSize, yLength);

    return new PageGrid(xPageSize, xLength, yPageSize, yLength);
};

MultiAxisProvider.prototype.calculateBufferedViewRange = function(dataRange) {
    //procedure to calculate buffer to mark for this view:

    //given a range, calculate the grid of pages from the top left corner to a page over and down from the
    var pageGrid = this.$calculatePageGrid(dataRange),

    //pages are identified by their vertical and horizontal coordinate.  Calculate which page the top-left corner
    //of this data range falls in
        topLeft = pageGrid.calculatePageForCoord({X: dataRange.X.start, Y: dataRange.Y.start}),

    //now, check the topLeft page, and the page right, down, and down+right to see which page's center point falls within the dataRange
    //(by definition only one center point can fall within the dataRange given the convention that we use >= top and left borders and < bottom and
    //right borders
        possiblePrimaryPages = topLeft && [topLeft, pageGrid.pageRightFrom(topLeft), pageGrid.pageDownFrom(topLeft), pageGrid.pageDownFrom(pageGrid.pageRightFrom(topLeft))],
        primaryPage = topLeft && pageGrid.calculatePrimaryPage(possiblePrimaryPages, dataRange),

    //the buffer range is the range defined by the 8 pages that surround the primary page, simplified to mean the range starting at the top-left corner of the
    //page up and left from the primary, and the bottom-right corner of the page down and right from the primary
        topLeftBufferPage = topLeft && pageGrid.pageUpFrom(pageGrid.pageLeftFrom(primaryPage)),
        bottomRightBufferPage = topLeft && pageGrid.pageDownFrom(pageGrid.pageRightFrom(primaryPage)),
        bufferRange = topLeft && {
            X: {
                start: topLeftBufferPage.X.start,
                length: bottomRightBufferPage.X.start + bottomRightBufferPage.X.length - topLeftBufferPage.X.start
            },
            Y: {
                start: topLeftBufferPage.Y.start,
                length: bottomRightBufferPage.Y.start + bottomRightBufferPage.Y.length - topLeftBufferPage.Y.start
            }
        };

    return bufferRange;
};

/**
 * Returns the cell data for the given range if it is available. If the range is
 * invalid or the data for the given range is not available yet, it will return
 * undefined.
 *
 * @param  {ViewRange} range
 * @return {Array|undefined}
 */
MultiAxisProvider.prototype.getDataRange = function(range) {
    if (this.getHeadingData().hasLoadingHeadings() || this.getHeadingData().isLoadingSlice())
        return;

    var sliceRange = this.getSliceRange() || {},
        combinedRange = lodash.merge(sliceRange, range),
        bufferedRange = this.calculateBufferedViewRange(combinedRange);

    bufferedRange = lodash.merge(this.getSliceRange() || {}, bufferedRange);

    //we may not have been able to calculate it if it isn't a valid range to begin with
    if (bufferedRange && sliceRange) {
        this.$multiAxisDataActionHandler.setViewTaskRange(this.$viewId, "main", bufferedRange);

        var dataRange = this.$madStore.getDataRange(this.$viewId, "main", combinedRange, this.$makeCellBuilder()).dataArray;
        return dataRange;
    }
};

MultiAxisProvider.prototype.$findAxisCoordForPosition = function(axisName, position) {
    var me = this,
        axisInfo = this.getHeadingInfo(axisName),
        invalid = false,
        headerRow = 0;

    //only do this check if columns is defined ,otherwise there are no columns and the row is zero
    axisInfo.columns && axisInfo.columns.forEach(function(c, i) {
        var posId = position[c.name],
            nextId,
            nextNeighbor;

        assert(posId, "Position must be defined for " + c.name);

        while(nextId !== posId && headerRow < axisInfo.getLength() && !invalid) {
            if (nextNeighbor) {
                nextNeighbor = me.getNextNeighbor(axisName, {x: i, y: headerRow});
            } else {
                nextNeighbor = {x: i, y: headerRow};
            }

            if (!nextNeighbor) {
                invalid = true;
                continue;
            }
            headerRow = nextNeighbor.y;
            nextId = me.getHeadingRange({start: headerRow, length: 1}, axisName)[i][0].id;
        }

        if (nextId !== posId)
            invalid = true;
    });

    if (!invalid)
        return headerRow;
};

MultiAxisProvider.prototype.positionOnCurrentSlice = function(position, metric) {
    var me = this,
        pos = lodash.cloneDeep(position),
        onSlice = true;

    if (metric) //field id is the measure fields idea, assumed to match metric name
        pos[metric] = {id: metric};

    Object.keys(position).forEach(function(key) {
        //TODO the headingData supports searching for rollup keys but the positoin object that is passed in here does not, will have to change the external API To provide support
       pos[key] = {id: position[key]};
    });

    this.$sliceAxes.forEach(function(axisName) {
        var sliceFieldPos = me.getSliceFieldPos(axisName);
        for (var key in sliceFieldPos) {
            if (sliceFieldPos[key].id !== pos[key].id)
                onSlice = false;
        }
    });

    return onSlice;
};

MultiAxisProvider.prototype.findCoordForPosition = function(metric, position) {

    var me = this,
        pos = lodash.cloneDeep(position),
        headingData = this.getHeadingData(),
        slicePos = headingData.getSlicePosition(),
        sliceKeys = Object.keys(slicePos),
        onSlice = true,
        coord;

    if (metric && sliceKeys.indexOf(metric) === -1) //field id is the measure fields idea, assumed to match metric name
        pos[metric] = {id: metric};

    Object.keys(position).forEach(function(key) {
        //TODO the headingData supports searching for rollup keys but the positoin object that is passed in here does not, will have to change the external API To provide support
       pos[key] = {id: position[key]};
    });

    this.$sliceAxes.forEach(function(axisName) {
        var sliceFieldPos = me.getSliceFieldPos(axisName);
        for (var key in sliceFieldPos) {
            if (sliceFieldPos[key].id !== pos[key].id)
                onSlice = false;
        }
    });

    //fieldPos {fieldId1: memberId1, .. fieldId2: memberId2:}
    if (onSlice) {
        coord = headingData.findCoordForFieldPos(pos);
        if (coord) {
            //clear slice axes
            this.$sliceAxes.forEach(function(axisName) {
                delete coord[axisName];
            });
        }
    }

    return coord;
};

MultiAxisProvider.prototype.$makeCellBuilder = function() {
    var me = this,
        measureDataCache = new Map(),
        mkFieldKey = function(fields) {
            var i = 0,
                len = fields.length,
                key = '';

            for (; i < len; i++) {
                key += fields[i].id + "_";
            }

            return key;
        },
        getMeasureInfo = function(cellInfo) {
            var key = mkFieldKey(cellInfo.fields),
                measureData = measureDataCache.get(key);

            if (!measureDataCache.get(key)) {
                var measureField = cellInfo.fields.find(function(f) {
                        return f instanceof mac.MeasureField;
                    }),
                    measureName = measureField && measureField.id,
                    intersection = cellInfo.queries.value && cellInfo.queries.value.query.mappedInter.qualified_level.map(function(ql) {
                        return { qualifiedName: cubiql.qualifiedLevelToQualifiedName(ql) };
                    });

                if (measureName) {
                    var metricsConfig = me.$modelerState.pivotConfig.metricsConfig,
                        formattingConfig = ch.getCellFormattingConfig(me.$pivotState, measureName, intersection),
                        measurePattern = measureName && metricsConfig && metricsConfig[measureName],
                        format = measurePattern && measurePattern.format,
                        halign = measurePattern && measurePattern.halign,
                        readonly = (measurePattern && measurePattern.readonly) || false,
                        measureCellType = measurePattern && measurePattern.cellType,
                        measureModel = me.$modelerState.measureModel,
                        measureInfo = measureName && measureModel.getMeasureInfo(measureName),
                        measureType = measureInfo.type,
                        defaultDisplayType = pch.getDefaultDisplayTypeForMeasureType(measureType, format),
                        displayType = measureCellType || defaultDisplayType;

                    measureData = {
                        displayType: displayType,
                        halign: halign,
                        readonly: readonly,
                        format: format,
                        formattingConfig: formattingConfig
                    };
                }
                measureDataCache.set(key, measureData);
            }

            return measureData;
        },
        isRollupCell = function(cellInfo) {
            return cellInfo.rollups && lodash.isArray(cellInfo.rollups) && cellInfo.rollups.some(function(item) {
                return !lodash.isUndefined(item) && item.constructor && item.constructor.name === "Record";
            });
        };

    return function(cellInfo, cellData) {
        //return dummy empty cell for invalid info/data
        if (!cellInfo || !cellData)
            return {
                data : {},
                invalid: true,
                validityMessages: [],
                cellInfo: cellInfo,
                readonly: true
            };
        else if (cellData.invalid)
            return {
                data : {},
                invalid: true,
                validityMessages: cellData.validityMessages,
                cellInfo: cellInfo,
                readonly: true
            };

        var measureData = getMeasureInfo(cellInfo),
            readonly = !(cellInfo.editConfigs.value && cellInfo.editConfigs.value.editable),
            invalid = cellData.invalid || (cellData.someInvalid) || !Object.keys(cellInfo.queries).length,
            data = cellData ? cellData.queryResults : {},
            isRollup = isRollupCell(cellInfo),
            passedFilter = lodash.isUndefined(data["_passed_filter_"]) ||
                (data["_passed_filter_"].value &&
                 data["_passed_filter_"].value.rawValue[0] &&
                 data["_passed_filter_"].value.rawValue[0][0] === 1);

        return {
            invalid: invalid,
            data: data,
            displayType: measureData && measureData.displayType,
            formattingConfig: measureData && measureData.formattingConfig || [],
            validityMessages: cellData.validityMessages,
            cellInfo: cellInfo,
            protected: data.value && data.value.protected,
            locked: data.value && data.value.locked,
            readonly: readonly,
            filtered: !passedFilter,
            halign: measureData && measureData.halign,
            isRollup: isRollup
        };
    };
};

MultiAxisProvider.prototype.cloneCellData = function(cellData) {
    return {
        invalid: cellData.invalid,
        data: cellData.data,
        displayType: cellData.displayType,
        validityMessages: cellData.validityMessages,
        cellInfo: cellData.cellInfo,
        protected: cellData.protected,
        locked: cellData.locked,
        readonly: cellData.readonly,
        halign: cellData.halign
    };
};

MultiAxisProvider.prototype.getPositionOfHeading = function(axisName, headerCoord) {
    var rows = this.$multiAxisDataStore.getHeadingRows(this.$viewId, headerCoord.x, 1, axisName),
        row = rows[0],
        qNames = Object.keys(row.memberIds).filter(cubiql.qNameIsRealLevel),
        position = {};

    qNames.forEach(function(qName) {
        position[qName] = row.memberIds[qName];
    });

    return position;
};

function isMeasureHeader(header) {
    return header.config.field instanceof mac.MeasureField;
}

function isLevelHeader(header) {
    return header.config.field instanceof mac.LevelField;
}

/**
 * Sets the sort.
 * @param {string} axisName
 * @param {Object} headerCoord
 * @param {string} [sortOrder]
 */
MultiAxisProvider.prototype.setSort = function(axisName, headerCoord, sortOrder) {
    var range = { start: headerCoord.y, length: 1 },
        headingRange = this.getHeadingRange(range, axisName),
        headers = headingRange[0].headers,
        levelHeaders = headers.filter(isLevelHeader),
        measureHeaders = headers.filter(isMeasureHeader),
        sortByMeasureInfo = ch.getSortByMeasureValueConfig(this.$pivotState),
        metricName,
        sortPositions,
        floatingAxisName = axisName === "X" ? "Y" : "X",
        newPivotState;

    sortPositions = levelHeaders.map(function(h) {
        var level = h.config.field.level;
        return  {
            qualifiedLevel: {
                level: level.get("levelName"),
                dimension: level.get("dimensionName"),
                label: level.get("labelName")
            },
            memberId: h.config.id || h.id
        };
    });

    assert(measureHeaders.length === 1, "Should only have one measure header when sorting by measure value");

    metricName = measureHeaders[0].id;

    if (!sortOrder) {
        if (sortByMeasureInfo && sortByMeasureInfo.metricName === metricName) {
            //if it is already sorted, make it the toggled sort order from the current
            sortOrder = sortByMeasureInfo.sortOrder === SORT.ASCENDING ? SORT.DESCENDING : SORT.ASCENDING;
        } else {
            sortOrder = SORT.DEFAULT_TYPE;
        }
    }

    newPivotState = ch.setSortByMeasureValue(this.$modelerState, this.$pivotState, metricName, floatingAxisName, sortPositions, sortOrder);
    this.$updatePivotState(newPivotState);
};

MultiAxisProvider.prototype.$headingCoordIsSortedByMeasure = function(axisName, headerCoord, sortByMeasureInfo) {
    var position,
        measureName,
        qName,
        isSortPos,
        posKeys,
        k = 0;

    if (!sortByMeasureInfo)
        return false;

    position = this.getPositionOfHeading(axisName, headerCoord);
    measureName = this.getMetricNameAtHeading(axisName, headerCoord);

    isSortPos = measureName && measureName === sortByMeasureInfo.sortMeasureName;

    if (!isSortPos)
        return false;

    posKeys = Object.keys(sortByMeasureInfo.sortPositions);

    if (posKeys.length) {
        for(; k < posKeys.length; k++) {
            qName = posKeys[k];
            isSortPos = isSortPos && (position[qName] === sortByMeasureInfo.sortPositions[qName]);
        }
    }

    return isSortPos;
};

/**
 * Determines whether or not the data in the grid can be sorted by headers on
 * the given axis.
 *
 * @param {String} axisName "X" or "Y"
 * @param {Number} the header row index
 * @param {Number} the header column index
 * @return {Boolean}
 */
MultiAxisProvider.prototype.headerCanSort = function(axisName, rowIdx, colIdx) {
    if (axisName === "Z") return false;

    var opposingAxis = axisName === "X" ? "Y" : "X",
        currentAxis = this.getHeadingData().getHeadingAxisInfo(axisName),
        currentAxisColumnSet = currentAxis.getColumnSetAt(rowIdx),
        oppAxisHeading = this.getHeadingData().getHeadingAxisInfo(opposingAxis),
        oppositeAxisColumnSets = oppAxisHeading.getColumnSets(),
        tooManyLabelsFound = false,
        visibleMeasures = ch.getVisibleMeasures(this.$pivotState),
        visibleMeasuresAxis = visibleMeasures && ch.findAxisForField(this.$pivotState, visibleMeasures.id);

    // We shouldn't sort inner most columns.
    if (currentAxisColumnSet.columns.length - 1 !== colIdx) {
        return false;
    }

    // If there is no measures, don't allow to sort empty columns.
    if (!currentAxisColumnSet.columns.some(function(column) { return column.field instanceof mac.MeasureField; })) {
        return false;
    }

    // Don't allow to sort, if measures pill is on another axis.
    if (visibleMeasuresAxis && visibleMeasuresAxis !== axisName) {
        return false;
    }

    // Don't allow to sort, if there is a cross product on the opposite axis.
    oppositeAxisColumnSets.forEach(function(colSet) {
        var colLen = colSet.columns.length,
            i = 0,
            col,
            field,
            labels = [];

        for (; i < colLen; i++) {
            col = colSet.columns[i];
            field = col.field;

            if (field instanceof mac.LevelField)
                labels.push(field.level.labelName);
        }

        labels = lodash.uniq(labels);
        if (labels.length > 1)
            tooManyLabelsFound = true;
    });

    return !tooManyLabelsFound;
};

/**
 * Whether or not a particular header is sorted.
 *
 * @param {String} axisName
 * @param {headerIndex} the index of the header on the axis to check
 * @return {String|undefined} the sort order ("asc" or "desc") or undefined if not sorted
 */
MultiAxisProvider.prototype.headerSortOrder = function(axisName, headerIndex) {
    var range = { start: headerIndex, length: 1 },
        floatingAxisName = axisName === "X" ? "Y" : "X",
        sortByMeasureInfo = ch.getSortByMeasureValueConfig(this.$pivotState),
        positionsEqual,
        headingRange,
        headers,
        levelHeaders,
        measureHeaders;

        if (!sortByMeasureInfo) {
            return;
        }

        if (sortByMeasureInfo.floatingAxis !== floatingAxisName.toLowerCase()) {
            return;
        }

        headingRange = this.getHeadingRange(range, axisName);
        headers = headingRange[0].headers;
        measureHeaders = headers.filter(isMeasureHeader);

        if (measureHeaders.length === 0 || sortByMeasureInfo.metricName !== measureHeaders[0].id){
            return;
        }

        if (sortByMeasureInfo.sortPositions) {
            levelHeaders = headers.filter(isLevelHeader);
            positionsEqual = levelHeaders.every(function(h) {
                var level = h.config.field.level;

                return sortByMeasureInfo.sortPositions.find(function(position) {
                    return position.memberId === h.id &&
                        level.get("levelName") === position.qualifiedLevel.level &&
                        level.get("dimensionName") === position.qualifiedLevel.dimension &&
                        level.get("labelName") === position.qualifiedLevel.label;
                });
            });

            if (!positionsEqual) {
                return;
            }
        }

        return sortByMeasureInfo.sortOrder;
};

/**
 * @param {Range} range
 * @param {String} axisName
 * @return {HeadingRangeSet}
 */
MultiAxisProvider.prototype.getHeadingRange = function(range, axisName) {
    var hrange = this.getHeadingData().getHeadingAxisInfo(axisName).getHeadingRange(range.start, range.start + range.length);

    return hrange;
};

MultiAxisProvider.prototype.getHeadingData = function() {
    return this.$madStore.getHeadingData(this.$viewId, "main");
};

MultiAxisProvider.prototype.hasHeadingData = function() {
    var headingData = this.getHeadingData(),
        axes;

    if (!headingData)
        return false;

    axes = headingData.getAxes();

    var has = axes.every(function(axisName) {
        var axisInfo = headingData.getHeadingAxisInfo(axisName);
        return !!axisInfo;
    });

    return has;
};

/**
 * @param {String} axisName
 * @return {mah.AxisHeading}
 */
MultiAxisProvider.prototype.getHeadingInfo = function(axisName) {
    if (!this.hasHeadingData()) return;
    var axisInfo = this.getHeadingData().getHeadingAxisInfo(axisName);

    return axisInfo;
};

MultiAxisProvider.prototype.getHeadingColumnSizesAtRow = function(axisName, rowNum) {
    var axisHeading = this.getHeadingInfo(axisName),
        columnSet = axisHeading.getColumnSetAt(rowNum),
        sizeAttr = axisName === "X" ? "height" : "width";

    return this.getColumnSizesForColumnSet(columnSet, sizeAttr);
};

MultiAxisProvider.prototype.getColumnSizesForColumnSet = function(colSet, sizeAttr/*, axisName*/) {
    var columns = colSet.columns,
        defaultSize = this.getDefaultSize()[sizeAttr],
        displayOptions = this.$pivotState.get("displayOptions"),
        fieldSize,
        sizes = [],
        i = 0,
        len = columns.length,
        col;

    for (; i < len; i++) {
        col = columns[i];
        fieldSize = this.$findSizeByPath(displayOptions, col.path);
        sizes.push((fieldSize && fieldSize.get(sizeAttr)) || defaultSize);
    }

    return sizes;
};

/*
headingAxisInfo.columns.forEach(function(col) {
    var colSizing = sizing[col.name],
        width,
        height,
        cellSize;

    if (colSizing) {
        cellSize = {
            width: colSizing.width || defaultSize.width,
            height: colSizing.height || defaultSize.height
        };
    } else {
        cellSize = defaultSize;
    }

    if (colSizing && colSizing.members) {
        col.members = colSizing.members;
    } else {
        col.members = {};
    }

    if (colSizing && colSizing.rollups) {
        col.rollups = colSizing.rollups;
    } else {
        col.rollups = {};
    }

    col.cellSize = cellSize;
});
*/


/**
 * Return a list of header coordinates (i.e. the index along the length of the axis) at which each heading id occurs.
 * NOTE: If a field name is a parent in a dimension such that it may have multiple consecutive members with the same ID
 *       (typically merged in display), only the first coordinate of each contiguous group will be returned.
 *
 * @param {String} axisName
 * @param {String} fieldName the field name the member ids are members of
 * @param {String[]} headingIds the list of heading ids to find coordinates for (this is more efficient than asking for coords of individual ids one-by-one)
 * @param {String} [rollupFieldName] optional parameter that specifies what rollupFieldName to use if the headingIds are those of a rollup headings rather than the normal headings
 * @return {Object<HeadingId, Number[]>}
 */
MultiAxisProvider.prototype.findHeadingIdCoords = function(axisName, fieldName, headingIds, rollupFieldName) {
    return this.$multiAxisDataStore.findMemberIdCoords(this.$viewId, axisName, fieldName, headingIds, rollupFieldName);
};

/**
 * @param {String} axisName
 * @param {Object} axisCoords heading coords
 * @param {Number} height
 * @param {Boolean} [isGroupResize] true if need to resize all headings
 */
MultiAxisProvider.prototype.setHeadingHeight = function(axisName, axisCoords, height, isGroupResize) {
    //TODO add validation
    this.$applySizeToHeading(axisName, axisCoords, undefined, height, isGroupResize);
};

/**
 * @param {String} axisName
 * @param {Object} axisCoords heading coords
 * @param {Number} width
 * @param {Boolean} [isGroupResize] true if need to resize all headings
 */
MultiAxisProvider.prototype.setHeadingWidth = function(axisName, axisCoords, width, isGroupResize) {
    //TODO add validation
    this.$applySizeToHeading(axisName, axisCoords, width, undefined, isGroupResize);
};

MultiAxisProvider.prototype.$applySizeToHeading = function(axisName, axisCoords, width, height, isGroupResize) {
    var headingInfo = this.getHeadingInfo(axisName),
        column = headingInfo.getColumnSetAt(axisCoords.row).columns[axisCoords.col],
        member = headingInfo.getHeadingMembers(axisCoords.row)[axisCoords.col],
        fieldId = column.field && (column.field instanceof mac.MeasureField  ?
            column.path[0] :
            column.field.get("id")),
        memberName = !isGroupResize && member.id,
        displayOptions = this.$pivotState.get("displayOptions"),
        fieldDisplay = displayOptions.get(fieldId) || new Immutable.Map(),
        rollupId = member.config.rollup && member.config.id,
        notGroupedAndParallelResize = !isGroupResize && (axisName === "Y" && lodash.isUndefined(width) || axisName === "X" && lodash.isUndefined(height));

    if (notGroupedAndParallelResize && rollupId) {
        // if resizing parallel to the axis, we just resize the rollup, otherwise we still need to resize the entire row/col
        displayOptions = displayOptions.set(fieldId, updateColRollupSize(fieldDisplay, rollupId, width, height));
    } else if (notGroupedAndParallelResize && memberName) {
        // if resizing parallel to the axis, we just resize the member, otherwise we still need to resize the entire row/col
        displayOptions = displayOptions.set(fieldId, updateColMemberSize(fieldDisplay, memberName, width, height));
    } else {
        displayOptions = displayOptions.set(fieldId, updateColSize(fieldDisplay, width, height, isGroupResize));
    }

    this.$updatePivotState(this.$pivotState.set("displayOptions", displayOptions));
};

/**
 * @param {DisplayOptions} item
 * @param {Number} [width]
 * @param {Number} [height]
 * @return {DisplayOptions}
 */
function updateSize(item, width, height) {
    if (!lodash.isUndefined(width)) {
        item = item.set("width", width);
    }

    if (!lodash.isUndefined(height)) {
        item = item.set("height", height);
    }

    return item;
}

/**
 * @param {ColumnDisplayOptions} colDisplay
 * @param {String} rollupId
 * @param {Number} [width]
 * @param {Number} [height]
 * @return {ColumnDisplayOptions}
 */
function updateColRollupSize(colDisplay, rollupId, width, height) {
    var rollupOptions = colDisplay.get("rollups") || new Immutable.Map(),
        rollupSize = rollupOptions.get(rollupId) || new Immutable.Map();

    rollupSize = updateSize(rollupSize, width, height);

    return colDisplay.set("rollups", rollupOptions.set(rollupId, rollupSize));
}

/**
 * @param {ColumnDisplayOptions} colDisplay
 * @param {String} memberName
 * @param {Number} [width]
 * @param {Number} [height]
 * @return {ColumnDisplayOptions}
 */
function updateColMemberSize(colDisplay, memberName, width, height) {
    var memberOptions = colDisplay.get("members") || new Immutable.Map(),
        memberSize = memberOptions.get(memberName) || new Immutable.Map();

    memberSize = updateSize(memberSize, width, height);

    return colDisplay.set("members", memberOptions.set(memberName, memberSize));
}

/**
 * @param {DisplayOptions} item
 * @param {Number} [width]
 * @param {Number} [height]
 * @return {DisplayOptions}
 */
function deleteItemSize(item, width, height) {
    if (!lodash.isUndefined(width)) {
        item = item.delete("width");
    }

    if (!lodash.isUndefined(height)) {
        item = item.delete("height");
    }

    return item;
}

/**
 * @param {ColumnDisplayOptions} colDisplay
 * @param {Number} [width]
 * @param {Number} [height]
 * @return {ColumnDisplayOptions}
 */
function updateColSize(colDisplay, width, height, isGroupResize) {
    var newOptions = updateSize(colDisplay, width, height);

    // if it's a group resize (ctrl + click), delete all custom size nodes to make them conform to the new group size
    if (isGroupResize) {
        newOptions = newOptions.delete("members").delete("rollups");
    }

    return newOptions;
}

/**
 * @typedef {Object} SizingInfo
 * @property {DefaultSizeRange[]} defaultRanges
 * @property {Node[]} customSizeNodes
 *
 * @param {String} axisName
 * @return {SizingInfo}
 */
MultiAxisProvider.prototype.getSizingInfo = function(axisName) {
    var customNodes = [],
        defaultRanges = [],
        currentRange,
        currStart = -1,
        currEnd = -1,
        headingData = this.getHeadingData(),
        headingInfo = headingData.getHeadingAxisInfo(axisName),
        colSets = headingData.getColumnSets(axisName),
        i = 0,
        colSet,
        firstCol,
        lastCol,
        colSetSize,
        colSetStart,
        colSetEnd,
        colSetLen = colSets.length,
        displayOptions = this.$pivotState.displayOptions,
        sizeAttr = axisName === "X" ? "width" : "height",
        defaultSize = this.getDefaultSize(axisName),
        axisSize,
        size,
        me = this;

    //for each columnset
    for (; i < colSetLen; i++) {
        colSet = colSets[i];
        colSetStart = colSet.offset;
        firstCol = colSet.columns[0];
        lastCol = colSet.columns[colSet.columns.length-1];
        colSetSize = firstCol.length * firstCol.step;
        colSetEnd = colSet.offset + colSetSize -1;
        size = this.$findSizeByPath(displayOptions, lastCol.path) || Immutable.Map();
        axisSize = size.get(sizeAttr) || defaultSize[sizeAttr];

        //start new range
        currStart = colSetStart;
        currEnd = colSetEnd;

        currentRange = {
            range: [currStart, currEnd],
            rowCount: lastCol.length,
            repeatDistance: lastCol.repeatDistance,
            size: axisSize
        };

        defaultRanges.push(currentRange);
    }

    //ok now loop through each display option key (which is a field id)
    displayOptions.forEach(function(fieldOptions, fieldId) {
        //for each field, loop through its members and find the rows they occur on in the header and assign the custom sizing
        var members = fieldOptions.get("members"),
            rollups = fieldOptions.get("rollups");

        customNodes.push(me.$findCustomNodes(headingInfo, fieldId, members, sizeAttr, "id"));
        customNodes.push(me.$findCustomNodes(headingInfo, fieldId, rollups, sizeAttr, "rollupFieldId"));
    });

    customNodes = Array.prototype.concat.apply([], customNodes);

    customNodes.sort(function(node1, node2) {
        return node1.index - node2.index;
    });

    return {
        defaultRanges: defaultRanges,
        customSizeNodes: customNodes
    };
};

MultiAxisProvider.prototype.$findSizeByPath = function(displayOptions, path) {
    var size,
        i = 0;

    for(; i < path.length; i++) {
        size = displayOptions.get(path[i]);

        if (size) {
            return size;
        }
    }
};

MultiAxisProvider.prototype.$findCustomNodes = function (headingInfo, fieldId, members, sizeAttr, idAttr) {
    var customNodes = [],
        fieldPos = {},
        fieldPosMember = {};

    fieldPos[fieldId] = fieldPosMember;

    if (members) {
        members.forEach(function(memberSize, memberId) {
            var i = 0, len,
                size = memberSize.get(sizeAttr),
                row,
                rows;

            if (!lodash.isUndefined(size)) {
                fieldPosMember[idAttr] = memberId;
                rows = headingInfo.findMatchingRowNums(fieldPos, function(colSet) {
                    var col = colSet.columns[colSet.columns.length - 1];

                    return col.field.get("id") === fieldId || (col.path[0] === fieldId && col.path[1] === memberId);
                });

                len = rows.length;

                for (; i < len; i++) {
                    row = rows[i];
                    if (!lodash.isUndefined(row))
                        customNodes.push({
                            index: row,
                            size: size
                        });
                }
            }
        });
    }

    return customNodes;
};

function mkSizeNode(row, size) {
}

MultiAxisProvider.prototype.getColumnHeaderSizes = function() {
    var axisInfo = this.getHeadingInfo("X");

    if (axisInfo) {
        return lodash.map(axisInfo.columns, "cellSize");
    } else
        return [];
};

MultiAxisProvider.prototype.getRowHeaderSizes = function() {
    var axisInfo = this.getHeadingInfo("Y");

    if (axisInfo) {
        return lodash.map(axisInfo.columns, "cellSize");
    } else
        return [];
};

MultiAxisProvider.prototype.$getSizes = function(axisName) {
    var sizing = this.$getSizing(),
        defaultSize = this.getDefaultSize(),
        axis,
        headerSizes;

    if (this.headingData && sizing) {
        axis = this.headingData[axisName].axis;

        headerSizes = axis.map(function(header) {
            if (header in sizing) {
                return {
                    width: sizing[header].width || defaultSize.width,
                    height: sizing[header].height || defaultSize.height
                };
            }
            return defaultSize;
        });
    }
    return headerSizes;
};

MultiAxisProvider.prototype.getDefaultSize = function() {
    return {
        width: this.$defaultCellWidth,
        height: this.$defaultCellHeight
    };
};

/**
 * Given an absolute header coordinate of a header axis, return the relative header coordinate
 * @param {String} axisName
 * @param {HeaderCoord} absoluteCoord
 * @param {Boolean} startY
 * @return {HeaderCoord}
 */
MultiAxisProvider.prototype.getRelativeHeaderPosition = function(axisName, absoluteCoord, startY) {
    return {
        x: absoluteCoord.x,
        y: absoluteCoord.y - startY
    };
};

/**
 * Given a relative header coordinate of a header axis, return the absolute header coordinate
 *
 * @param {String} axisName
 * @param {HeaderCoord} relativeCoord
 * @param {Boolean} startY
 * @return {HeaderCoord}
 */
MultiAxisProvider.prototype.getAbsoluteHeaderPosition = function(axisName, relativeCoord, startY) {
    return {
        x: relativeCoord.x,
        y: relativeCoord.y + startY
    };
};

/**
 * Returns the absolute coordinate of the 'previous' heading going up the length of the axis. Previous in this case
 * means the previous different heading, so in the case of headings which are repeated due to headings nested
 * beneath them, this might move by more than one position
 *
 * @param {String} axisName
 * @param {Integer} colIdx
 * @param {Integer} rowNum
 * @return {HeaderCoord|undefined}
 */
MultiAxisProvider.prototype.getPreviousNeighbor = function(axisName, colIdx, rowNum) {
    var prevY = this.getHeadingData().getRowNumByMemberOffset(axisName, colIdx, rowNum, -1);

    //if we didn't find one, undefined
    if (lodash.isUndefined(prevY))
        return;
    else
        return {
            x: colIdx,
            y: prevY
        };
};

/**
 * Returns the absolute coordinate of the 'next' heading going down the length of the axis. Next in this case
 * means the next different heading, so in the case of headings which are repeated due to headings nested
 * beneath them, this might move by more than one position
 *
 * @param {String} axisName
 * @param {HeaderCoord} absoluteCoord
 * @return {HeaderCoord|undefined}
 */
MultiAxisProvider.prototype.getNextNeighbor = function(axisName, colIdx, rowNum) {
    var nextY = this.getHeadingData().getRowNumByMemberOffset(axisName, colIdx, rowNum, 1);

    //if we didn't find one, undefined
    if (lodash.isUndefined(nextY))
        return;
    else
        return {
            x: colIdx,
            y: nextY
        };
};

MultiAxisProvider.prototype.setCommitMode = function(mode) {
    this.$mode = mode;
};

MultiAxisProvider.prototype.getCommitMode = function() {
    return this.$mode || CommitMode.SINGLE;
};

MultiAxisProvider.prototype.hasEdits = function() {
    return this.$madStore.getAllPendingEdits().length > 0;
};

MultiAxisProvider.prototype.clearEdits = function() {
    return this.$multiAxisDataActionHandler.clearEdits(this.$madStore.getAllPendingEdits());
};

/**
 * Returns true if there are any locked cells.
 *
 * @returns {Boolean}
 */
MultiAxisProvider.prototype.hasLocks = function() {
    return this.$madStore.hasLocks();
};


MultiAxisProvider.prototype.addSliceRange = function(range) {
    var sliceRange = this.getSliceRange() || {},
        combinedRange = lodash.merge(sliceRange, range);

    return combinedRange;
};

/**
 * Adds locks for the specified cells range.
 * @param {MultiAxisRange} range The range which will be locked.
 */
MultiAxisProvider.prototype.setLock = function (range) {
    var locks = this.$getLocksInRange(range, true);

    return this.$multiAxisDataActionHandler.setLocks(locks);
};

function simpleCellBuilder(cellInfo, cellData) {
    return {
        data: cellData,
        info: cellInfo
    };
}

/**
 * Removes locks from the specified cells range.
 * @param {MultiAxisRange} range The cells range.
 */
MultiAxisProvider.prototype.unsetLock = function (range) {
    var locks = this.$getLocksInRange(range);

    return this.$multiAxisDataActionHandler.unsetLocks(locks);
};

/**
 * Returns true if at least one cell in the range can be locked.
 * @param {MultiAxisRange} range The cells range.
 * @returns {Boolean}
 */
MultiAxisProvider.prototype.canLockCells = function(range) {
    var dataRange = this.$getLocksInRange(range, true);

    return !!dataRange.length;
};

/**
 * Returns true if at least one cell in the range is locked.
 * @param {MultiAxisRange} range The cells range.
 * @returns {Boolean}
 */
MultiAxisProvider.prototype.hasLocksInRange = function(range) {
    var locks = this.$madStore.getLocks(),
        lockedKeys,
        selectedKeys;

    if (locks.length === 0) {
        return false;
    }

    lockedKeys = locks[0].positions.map(function(position) { return position.key; });

    selectedKeys = this.$getLocksInRange(range).map(function(lock) {
        return lock.positions[0].key;
    });

    return lockedKeys.some(function(n) {
        return selectedKeys.indexOf(n) != -1;
    });
};

/**
 * Returns lock objects for the specified range.
 * @param {MultiAxisRange} range The cells range.
 * @param {Boolean} [checkAbleToLock=false] If true, the only lockable cells will be returned.
 * @returns {LockSet[]}
 */
MultiAxisProvider.prototype.$getLocksInRange = function(range, checkAbleToLock){
    var data = this.$madStore.getDataRange(this.$viewId, "main", this.addSliceRange(range), simpleCellBuilder, true),
        locks = data.dataArray.map(function(d) {
            if (checkAbleToLock && d.data.queryResults.value && d.data.queryResults.value.protected)
                return;

            return {
                editConfig: d.info.editConfigs.value,
                positions: [ d.info.positionInfo ]
            };
        });

    if (checkAbleToLock)
        locks = locks.filter(lodash.identity);

    return locks;
};

/**
 * Clears all locks in the pivot.
 */
MultiAxisProvider.prototype.clearAllLocks = function () {
    return this.$multiAxisDataActionHandler.clearAllLocks();
};

MultiAxisProvider.prototype.getSelectedDataRange = function(selectedRange) {
    return this.$madStore.getDataRange(this.$viewId, "main", this.addSliceRange(selectedRange), simpleCellBuilder, true);
};

/**
 * Returns cell style based on the conditional formatting configuration
 * @param   {String}    cellValue - The value of the cell.
 * @param   {Object}    cellConfig - conditional formatting config of the cell
 * @returns {Object}    cellStyle
 */
MultiAxisProvider.prototype.getCellStyle = function(cellValue, cellConfig, displayType) {
    var cellStyle = {},
        rawValue,
        me = this;

    rawValue = cellValue.value && cellValue.value.value && (cellValue.value.value.rawValue[0] || [])[0];

    if (cellConfig) {
        cellConfig.forEach(function(conditionalConfig) {
            if (me.$checkCondition(rawValue, conditionalConfig.condition, conditionalConfig.value, conditionalConfig.conditionOptions, displayType)) {
                for(var styleRule in conditionalConfig.style) {
                    cellStyle[styleRule] = conditionalConfig.style[styleRule];
                }
            }
        });
    }

    return cellStyle;
};

MultiAxisProvider.prototype.$checkCondition = function(cellValue, condition, conditionValue, conditionOptions, displayType) {
    var digitsNumber = displayType === "percentage" ? 4 : 2;    //get 4 digits if it is percentage cell

    //checking for numeric
    if ([FormattingConditionals.GREATER_EQUAL.name, FormattingConditionals.GREATER_THAN.name,
            FormattingConditionals.LESS_EQUAL.name, FormattingConditionals.LESS_THAN.name,
            FormattingConditionals.RANGE.name].indexOf(condition) !== -1) {
        if(lodash.isUndefined(cellValue) || isNaN(cellValue)) {
            return false;
        }
    }

    if (!lodash.isBoolean(cellValue) && !isNaN(cellValue)) {
        cellValue = lodash.round(parseFloat(cellValue), digitsNumber);
        conditionValue = condition !== FormattingConditionals.RANGE.name ?
            lodash.round(parseFloat(conditionValue), digitsNumber) :
            lodash.map(conditionValue, function(val) {
                return lodash.round(parseFloat(val), digitsNumber);
            });
    }

    switch (condition) {
        case FormattingConditionals.EMPTY.name:
            return lodash.isUndefined(cellValue);
        case FormattingConditionals.NOT_EMPTY.name:
            return !lodash.isUndefined(cellValue);
        case FormattingConditionals.EQUAL.name:
            //cast to Boolean here because there could be cases when boolean cell is set to undefined initially
            return cellValue === conditionValue || !!cellValue === conditionValue;
        case FormattingConditionals.NOT_EQUAL.name:
            return cellValue !== conditionValue && !!cellValue !== conditionValue;
        case FormattingConditionals.GREATER_EQUAL.name:
            return util.numberCompare(cellValue, conditionValue) >= 0;
        case FormattingConditionals.GREATER_THAN.name:
            return util.numberCompare(cellValue, conditionValue) > 0;
        case FormattingConditionals.LESS_EQUAL.name:
            return util.numberCompare(cellValue, conditionValue) <= 0;
        case FormattingConditionals.LESS_THAN.name:
            return util.numberCompare(cellValue, conditionValue) < 0;
        case FormattingConditionals.RANGE.name:
            var result = true;
            if (!lodash.isUndefined(conditionOptions)) {
                lodash.forEach(conditionOptions, function(option) {
                    switch (option) {
                        case FormattingConditionals.RANGE.INCLUDE_MIN:
                            result = result && util.numberCompare(cellValue, conditionValue[0]) >= 0;
                            break;
                        case FormattingConditionals.RANGE.INCLUDE_MAX:
                            result = result && util.numberCompare(cellValue, conditionValue[1]) <= 0;
                            break;
                    }
                    if (!result) {
                        //return false if at least one conditional is false
                        return false;
                    }
                });
            } else {
                result = util.numberCompare(cellValue, conditionValue[0]) >= 0 &&
                    util.numberCompare(cellValue, conditionValue[1]) <= 0;
            }
            return result;
    }
};


/**
 * Get data for the purpose of copying the given range.
 * Returns the DataRange if available or undefined if copy data is not immediately available.
 *
 * If undefined is returned, the data will be retrieved and at that time a "copyReady" event will be fired
 *
 * @param {MARange} range
 * @param {Boolean} [isCut] whether or not to cut the copied data after copying
 * @return {DataRange|undefined}
 */
MultiAxisProvider.prototype.getCopyData = function(range, isCut) {
    var me = this,
        sliceRange = me.getSliceRange() || {},
        combinedRange = lodash.merge(sliceRange, range),
        //try to retrieve copy data from the 'main' task if we don't have an active copy view task
        taskName = me.$macStore.viewTaskIsActive(me.$viewId, "copy") ? "copy" : "main",
        availableInCache = me.$madStore.hasCleanData(me.$viewId, taskName, combinedRange),
        copyTaskConfig = { isolatedData: true };

    if (isCut) {
        me.$cutRange = sliceRange;
    } else {
        delete me.$cutRange;
    }

    if (availableInCache) {
        if (me.$macStore.viewTaskIsActive(me.$viewId, "copy")) {
            me.$multiAxisConfigActionHandler.setViewTaskInactive(me.$viewId, "copy");
        }

        return me.$madStore.getDataRange(me.$viewId, taskName, combinedRange, me.$makeCellBuilder()).dataArray;
    } else {
        //make a viewtask identical to "main" but with the copy range, and in an isolated data storage so it can be removed later
        copyTaskConfig.maConfig = me.getConfig();
        me.$multiAxisConfigActionHandler.setViewTaskConfig(me.$viewId, "copy", copyTaskConfig).then(function() {
            return me.$multiAxisDataActionHandler.setViewTaskRange(me.$viewId, "copy", combinedRange);
        });
    }
};

/**
 * Save cell edits and commit.
 *
 * @param {Edit[]} inputEdits
 * @param {MultiAxisRange} inputEditRange
 * @return {Promise}
 *
 * where
 * @typedef {Object} Edit
 * @prop {Object} coord
 * @prop {Number} coord.X
 * @prop {Number} coord.Y
 * @prop {Any} value
 */
MultiAxisProvider.prototype.pasteCells = function(inputEdits, inputEditRange) {
    var me = this,
        sliceRange = this.getSliceRange() || {},
        combinedRange = lodash.merge(sliceRange, inputEditRange);

    //have to make a view for this paste to get the editability and such
    me.$multiAxisConfigActionHandler.setViewTaskConfig(me.$viewId, "paste", {maConfig: this.getConfig(), isolatedData: true}).then(function() {
        return me.$multiAxisDataActionHandler.setViewTaskRange(me.$viewId, "paste", combinedRange);
    }).then(function() {
        var metricDisplayTypes = {},
            formattedEdits = lodash.compact(inputEdits.map(function (edit) {
                var coord = me.addSliceToCoord(edit.coord),
                    cellInfo = me.$madStore.getCellInfoAt(me.$viewId, "main", coord),
                    valueEditMetricName = cellInfo.editConfigs.value.coreEditMeasure.metric.name,
                    metricConfig,
                    metricInfo,
                    measureCellType,
                    valueQuery,
                    cellData,
                    parsedEdit,
                    currentValue,
                    editConfigName = "value", //the default edit config name
                    editValue = edit.value;

                if (!cellInfo) {
                    throw new Error("Error editing at coord: " + JSON.stringify(coord) + ". Coord not found.");
                }

                if (cellInfo.queries.value.query.validityMessages && cellInfo.queries.value.query.validityMessages.length) return;

                if (!metricDisplayTypes[valueEditMetricName]) {
                    metricConfig = pchs.getMetricConfig(me.$modelerState.pivotConfig, valueEditMetricName);
                    measureCellType = metricConfig && metricConfig.cellType;
                    metricInfo = me.$modelerState.measureModel.getMeasureInfo(valueEditMetricName);
                    metricDisplayTypes[valueEditMetricName] = measureCellType || pch.getDefaultDisplayTypeForMeasureType(metricInfo.type, metricConfig.format);
                }

                valueQuery = cellInfo.queries.value;
                cellData = me.getCellData(edit.coord);
                currentValue = (hasValueQueryData(cellData) && getValueQueryData(cellData)[0] || [])[0];
                if (metricDisplayTypes[valueEditMetricName] === "dropdown") {
                    editConfigName = "selectedDataLabel"; //when pasting into dropdowns, we use the custom edit for selected data label
                }
                parsedEdit = inputParser.createParser(valueQuery.formatter).parseEditInput(editValue, valueQuery.type, currentValue);
                //for now we assume we're always editing the 'value' edit config
                return {cellInfo: cellInfo, editConfigName: editConfigName, edit: parsedEdit};
            })),
            cellInfos;

        if (me.$cutRange) {
            cellInfos = me.$madStore.getCellInfoInRange(me.$viewId, "main", me.$cutRange);
            cellInfos.dataArray.forEach(function(cellInfo) {
                formattedEdits.push({cellInfo: cellInfo, editConfigName: "value", edit: {data: "", isDelete: true}});
            });

            me.$isCutOperation = false;
        }

        delete me.$cutRange;
        return formattedEdits;
    }).then(function(formattedEdits) {
        return me.$updateCells(formattedEdits);
    });
};

function PageGrid(xPageSize, xLength, yPageSize, yLength) {
    this.$xPageSize = xPageSize;
    this.$yPageSize = yPageSize;
    this.$xLength = xLength;
    this.$yLength = yLength;

    this.$fullSizeXPageCt = Math.floor(xLength / xPageSize);
    this.$fullSizeYPageCt = Math.floor(yLength / yPageSize);
}

PageGrid.prototype.calculatePrimaryPage = function(possiblePrimaryPages, dataRange) {
    var primaryPage,
        adjustedRange = {
            X: {
                start: dataRange.X.start || 0,
                length: dataRange.X.length || 1
            },
            Y: {
                start: dataRange.Y.start || 0,
                length: dataRange.Y.length || 1
            }
        },
        rangeXCenter = adjustedRange.X.start + adjustedRange.X.length/2,
        rangeYCenter = adjustedRange.Y.start + adjustedRange.Y.length/2,
        nearestDistance;

    possiblePrimaryPages.forEach(function(page) {
        var xCenter = page.X.start + page.X.length/2,
            yCenter = page.Y.start + page.Y.length/2,
            dist;

        if (xCenter >= adjustedRange.X.start && xCenter <= (adjustedRange.X.start + adjustedRange.X.length) &&
            yCenter >= adjustedRange.Y.start && yCenter <= (adjustedRange.Y.start + adjustedRange.Y.length)) {
            dist = Math.pow(Math.pow((rangeXCenter - xCenter), 2) + Math.pow((rangeYCenter - yCenter), 2), 2);
            if (lodash.isUndefined(nearestDistance) || dist < nearestDistance)
                primaryPage = page;
        }
    });

    return primaryPage;
};

PageGrid.prototype.calculatePageForCoord = function(coord) {
    //undefined for illegal coordinate
    if (coord.X < 0 || coord.Y < 0 || coord.X >= this.$xLength || coord.Y >= this.$yLength)
        return;

    var xPageIdx = Math.floor(coord.X / this.$xPageSize),
        yPageIdx = Math.floor(coord.Y / this.$yPageSize);

    return this.$makePage(xPageIdx, yPageIdx);
};

PageGrid.prototype.$makePage = function(xPageIdx, yPageIdx) {
    return {
        X: {
            pageIdx: xPageIdx,
            start: this.$calcXPageStart(xPageIdx),
            length: this.$calcXPageEnd(xPageIdx) - this.$calcXPageStart(xPageIdx)
        },
        Y: {
            pageIdx: yPageIdx,
            start: this.$calcYPageStart(yPageIdx),
            length: this.$calcYPageEnd(yPageIdx) - this.$calcYPageStart(yPageIdx)
        }
    };
};

PageGrid.prototype.$lastXPageIdx = function(pageIdx) {
    return this.$fullSizeXPageCt === pageIdx;
};

PageGrid.prototype.$lastYPageIdx = function(pageIdx) {
    return this.$fullSizeYPageCt === pageIdx;
};

PageGrid.prototype.$calcXPageStart = function(pageIdx) {
    return pageIdx === 0 ? 0 : pageIdx*this.$xPageSize;
};

PageGrid.prototype.$calcXPageEnd = function(pageIdx) {
    return this.$lastXPageIdx(pageIdx) ? this.$xLength : (pageIdx+1)*this.$xPageSize;
};

PageGrid.prototype.$calcYPageStart = function(pageIdx) {
    return pageIdx === 0 ? 0 : pageIdx*this.$yPageSize-1;
};

PageGrid.prototype.$calcYPageEnd = function(pageIdx) {
    return this.$lastYPageIdx(pageIdx) ? this.$yLength : (pageIdx+1)*this.$yPageSize;
};

PageGrid.prototype.pageRightFrom = function(page) {
    if (this.$lastXPageIdx(page.X.pageIdx))
        return page;
    else
        return this.$makePage(page.X.pageIdx + 1, page.Y.pageIdx);
};

PageGrid.prototype.pageLeftFrom = function(page) {
    if (page.X.pageIdx === 0)
        return page;
    else
        return this.$makePage(page.X.pageIdx - 1, page.Y.pageIdx);
};

PageGrid.prototype.pageUpFrom = function(page) {
    if (page.Y.pageIdx === 0)
        return page;
    else
        return this.$makePage(page.X.pageIdx, page.Y.pageIdx - 1);
};

PageGrid.prototype.pageDownFrom = function(page) {
    if (this.$lastYPageIdx(page.Y.pageIdx))
        return page;
    else
        return this.$makePage(page.X.pageIdx, page.Y.pageIdx + 1);
};

},{"../constant":191,"../constant/gridoptions":190,"../cubiql":211,"../event_emitter":224,"../helpers/pivotconfighelpers":231,"../inputparser":232,"../multiaxisconfig":253,"../pivotconfig_helper":255,"../store/multiaxisdatastore":271,"../util":280,"../validationtool":287,"./pivot/config_helper":289,"assert":undefined,"immutable":44,"lodash":90,"pivottable/src/constants":116}],289:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var assert = require("assert");
var Immutable = require("immutable");
var modstate = require("../../modelerstate");
var util = require("../../util");
var cubiql = require("../../cubiql");
var mac = require("../../multiaxisconfig");
var FieldTypes = mac.FieldTypes;

var GridOptions = require("../../constant/gridoptions");
var Conditionals = lodash.map(lodash.values(GridOptions.CONDITIONALS), "name"); //get ids of the conditionals

var pch = module.exports;

pch.convertOldPivotConfigToNew = function(oldPivotConfig, viewId) {
    //if there's no aggregate defined, just return the prior config as we don't do anything else currently
    if (!oldPivotConfig.aggregate) return oldPivotConfig;
    var newPivotConfig = lodash.cloneDeep(oldPivotConfig);


    //basically if there is an aggregate defined,
    //then loop through the axes and
    //  if the qName of an aggregate appears and it doesn't have a rollup property configured on it,
    //  update it to have it.  If it does have a rollup property, warn that we're ignoring the aggregate definition
    //
    //  if the qName of an aggregate does not appear but a qName of the same dimension Does appear, add
    //  a field for this qName next to the first one we find (we'll reorder them later) and set the rollup
    //  property for that field and set its displayMode to NONE
    lodash.forEach(newPivotConfig.aggregate, function(aggDef, key) {
        var qName = aggDef.qualifiedName || key,
            isMeasure = cubiql.isMeasure(qName),
            isLevel = !isMeasure,
            aggDim = isLevel && cubiql.parseDimLvl(qName).dimension,
            matchingField,
            aggAxisName,
            insertIdx;

        // Search all axes for a matching field. If a matching field is found, stop search. Otherwise,
        // keep track of any field that is on the same dimension as agg field and continue the search.
        lodash.some(newPivotConfig.axis, function(pivotFields, axisName) {
            var sameDimIdx;
            matchingField = lodash.find(pivotFields, function(f) {
                return f.qualifiedName === qName;
            });
            sameDimIdx = isLevel && !matchingField && lodash.findIndex(pivotFields, function(f) {
                return !cubiql.isMeasure(f.qualifiedName) && cubiql.parseDimLvl(f.qualifiedName).dimension === aggDim;
            });

            if (matchingField) {
                return true;
            } else if (isLevel && sameDimIdx > -1) {
                aggAxisName = axisName;
                insertIdx = sameDimIdx;
            }
        });

        if (matchingField) {
            if (matchingField.rollup)
                console.warn("discarding aggregate definition for '" + qName + "' in sheet '" + viewId + "' because the associated field already has a rollup defined."); 
            else
                matchingField.rollup = { methodName: aggDef.method || "DEFAULT" };
        } else if (isLevel && insertIdx > -1) {
            newPivotConfig.axis[aggAxisName].splice(insertIdx, 0, createLevelFieldConfig(qName, undefined, mac.LevelDisplayMode.NONE, { methodName: aggDef.method || "DEFAULT" }));
        } else {
            throw Error("Could not convert agg aggDef " + JSON.stringify(aggDef) + 
                ". Could not find axis with dimension ''" + aggDim + "' in sheet '" + viewId + "'");
        }
    });
    delete newPivotConfig.aggregate;

    return newPivotConfig;
};

/**
 * A Record that represents the entire pivot state for a pivot.
 *
 * @typedef {Immutable.Record}
 * @property {String} id -the id of the pivot
 * @property {Immutable.Map} axis - each key is the name of an axis the value
 *                                  is an list of Fields on that axis
 * @property {Immutable.Map<FieldId, SelectedValue>} sliceValues - 
 * @property {Immutable.List} measureGroups - a list of MeasureGroup fields that
 * are not currently on an axis b/c removing a measure group from an axis does
 * not necessarily mean it should disappear, especially in the case of visible measures
 * @property {Immutable.Map} filter - an map of qualified names to their filter configuration
 * @property {Immutable.List} maskFilter - an list of MeasureFields that are being used as mask filters
 * @property {Immutable.Map} sliceValueMeasure - a map of Fields to the measure name that is 
 *                                               used to store the selected slice value
 *
 * @property {Immutable.Map} gridOptions
 * 
 * // TODO the below attributes should be moved to the grid option store
 * @property {Boolean} isNonEmpty - whether or not to show empty headers
 * @property {Immutable.Map} - the stored scroll positions for the grid
 * @property {Immutable.Map} - the direction to move after hitting the Tab key
 */
var PivotState = pch.PivotState = Immutable.Record({
    id: undefined,
    axis: Immutable.Map({ 
        X: Immutable.List(),
        Y: Immutable.List(),
        Z: Immutable.List()
    }),
    sliceValues: Immutable.Map(),
    measureGroups: Immutable.Map(),
    dropdownMeasureFilter: Immutable.List(),
    filter: Immutable.Map(),
    maskFilter: Immutable.List(),
    sliceValueMeasure: Immutable.Map(),
    isNonEmpty: false,
    scrollPositions: undefined,
    moveSelectionDirection: undefined,
    displayOptions: Immutable.Map(),
    conditionalFormatting: Immutable.Map()
});

/**
 * Takes the configuration from the sheet's pivotConfig attribute and converts
 * it to the PivotState object representation
 * 
 * @param  {ModelerState} modelerState
 * @param  {String} pivotId
  @param  {PivotConfig} pivotConfig
 * @param  {GridOptions} gridOptions
 */
pch.pivotStateFromPivotConfig = function(modelerState, pivotId, pivotConfig, gridOptions) {
    // TODO really should do some validation here
    var updatedConfig = pch.convertOldPivotConfigToNew(pivotConfig, pivotId),
        iState,
        pivotState;

    iState = Immutable.fromJS(updatedConfig);
    pivotState = new PivotState({ id: pivotId });
    
    // always create a visible measures group
    pivotState = $addMeasureGroup(modelerState, pivotState, "-:Measures");

    if (gridOptions && gridOptions.display) {
        pivotState = pivotState.set("displayOptions", Immutable.fromJS(gridOptions.display));
    }

    if (gridOptions && gridOptions.conditionalFormatting) {
        pivotState = this.setConditionalFormatting(pivotState, gridOptions.conditionalFormatting);
    }

    if (iState.hasIn(["axis","x"])) {
        pivotState = pivotState.setIn(["axis", "X"], $groupedFieldsFromConfig(modelerState, iState.getIn(["axis","x"])));
    }
    
    if (iState.hasIn(["axis","y"])) {
        pivotState = pivotState.setIn(["axis", "Y"], $groupedFieldsFromConfig(modelerState, iState.getIn(["axis","y"])));
    }
    
    if (iState.hasIn(["axis","slice"])) {
        pivotState = pivotState.setIn(["axis", "Z"], $groupedFieldsFromConfig(modelerState, iState.getIn(["axis","slice"])));

        iState.getIn(["axis","slice"]).forEach(function(f) {
            if (f.has("value")) {
                pivotState = pivotState.setIn(["sliceValues", f.get("qualifiedName")], f.get("value"));
            }
        });
    }

    pivotState = applyLevelSortConfig(pivotState, iState.get("sort"));

    // add the fields from visible measures to the measure group after adding fields
    // to the axis so the -:Measures field will be updated automatically
    if (iState.hasIn(["axis","z"])) {
        pivotState = $addMeasuresToGroup(modelerState, pivotState, "-:Measures", iState.getIn(["axis","z"]).map(function(f) {
            return f.get("qualifiedName");
        }));
    }
    
    if (iState.has("filter")) {
        pivotState = pivotState.set("filter", iState.get("filter"));
    }

    if (iState.has("maskFilter")) {
        pivotState = setMaskFilter(modelerState, pivotState, iState.get("maskFilter"));
    }

    if (iState.has("isNonEmpty")) {
        pivotState = pivotState.set("isNonEmpty", iState.get("isNonEmpty"));
    }

    if (iState.has("scrollPositions")) {
        pivotState = pivotState.set("scrollPositions", iState.get("scrollPositions"));
    }

    if (iState.has("moveSelectionDirection")) {
        pivotState = pivotState.set("moveSelectionDirection", iState.get("moveSelectionDirection"));
    }
    
    if (iState.has("dropdownMeasureFilter")) {
        pivotState = pivotState.set("dropdownMeasureFilter", iState.get("dropdownMeasureFilter"));
    }
    
    if (iState.has("sliceValueMeasure")) {
        pivotState = pivotState.set("sliceValueMeasure", iState.get("sliceValueMeasure").reduce(function(map, config) {
            var field = modstate.fields.getField(modelerState.fields, config.get("qualifiedName"), FieldTypes.LEVEL);
            assert(!!field, "Could not find field for slice by measure with qualified name: " + config.get("qualifiedName"));
            
            return map.set(field, config.get("measure"));
        }, Immutable.Map()));
    }
    
    if (iState.has("sort-by-measure-value")) {
        pivotState = pch.setSortByMeasureValue(modelerState, pivotState,
            iState.getIn(["sort-by-measure-value", "metricName"]),
            iState.getIn(["sort-by-measure-value", "floatingAxis"]).toUpperCase(),
            iState.getIn(["sort-by-measure-value", "sortPositions"]).toJS(),
            iState.getIn(["sort-by-measure-value", "sortOrder"]));
    }

    return pivotState;
};

/**
 * Inserts the given field onto the given axis before the before field. If
 * before is not given, appends to the end of the list of fields on the axis.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState}  state
 * @param  {Field}  field
 * @param  {String} axisName
 * @param  {Field}  [before]
 */
pch.moveField = function(modelerState, state, field, axisName, before) {
    state = pch.moveToAxis(modelerState, state, field, axisName, before);

    if (axisName === "Z") {
        state = adjustSortByMeasureValueForSlice(state, field);            
    }
    
    // adjust sort by measure value first b/c it takes priority over label sort
    state = adjustSortByMeasureValue(modelerState, state);
    
    return state;
};

/**
 * Removes the given field from the pivot. Adjust the rest of the pivot 
 * state to be valid after the removal.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {Field} field
 */
pch.removeField = function(modelerState, state, field) {
    state = removeFromAxis(modelerState, state, field);

    // clear filters for that field
    if (field instanceof mac.MeasureField) {
        state = pch.setMeasureFilter(state, field.id);
    } else if (field instanceof mac.LevelField) {
        state = pch.setFilter(state, field.id, null);
    } else if (field instanceof mac.DimensionField) {
        state = field.fields.reduce(function(s, f) { return pch.setFilter(s, f.id, null); }, state);
    }

    state = state.deleteIn(["sliceValues", field.id]);

    state = adjustSortByMeasureValue(modelerState, state);
    
    return state;
};

/** 
 * Public Methods
 */

/**
 * @param {PivotState} state
 * @param {Field} field
 * @param {String} [axisName] optional axis name to limit the search to
 * @return {Boolean}
 */
pch.hasField = function(pivotState, field, axisName) {
    return !lodash.isUndefined(pch.getField(pivotState, field.get("id"), axisName));
};
    
/**
 * Gets a field from one of the axis based on the given id and type
 * 
 * @param  {PivotState}  state
 * @param  {String}  fieldId
 * @param  {String} [optionalAxisName] an optional axis name to search
 * @return {Field}
 */
pch.getField = function(state, fieldId, optionalAxisName) {
    return getAxisFields(state, function(f) { return f && f.get("id") === fieldId; }, optionalAxisName).first();
};


/**
 * Finds a field based on the given id. If there is more than one field with
 * the given id, this function will throw an error. To avoid the ambiguity of
 * this function, use getField instead which guarantees uniqueness.
 * 
 * @param  {PivotState} pivotState the pivotState to search
 * @param  {String} fieldId the id of the field to find, typically this is a qualified name
 * @return {Field|undefined}         the found field or undefined if not found
 */
pch.findField = function(state, fieldId) {
    var fields = getAxisFields(state, function(f) { return f.get("id") === fieldId; });
    
    if (fields.size > 1) {
        throw new Error("Found more than one field with id: " + fieldId + ". " + JSON.stringify(fields));
    }
    
    // returns either the found field or undefined if the list is empty
    return fields.first();
};

/**
 * @param {ModelerState} modelerState
 * @param {PivotState} state
 * @return {mac.Intersection}
 */
pch.computeBaseLevelFields = function(modelerState, state) {
    var levelFields = []; 

    state.axis.forEach(function(fields) {
        fields.forEach(function(f) {
            var hierarchy;
            if (f instanceof mac.LevelField) {
                hierarchy = mac.getHierarchyForLevelFields(new Immutable.List([f]), modelerState.measureModel);
                levelFields.push(mac.updateHierarchyInLevelField(f, hierarchy.name));
            } else if (f instanceof mac.DimensionField) {
                hierarchy = mac.getHierarchyForLevelFields(f.fields, modelerState.measureModel);
                levelFields.push(mac.updateHierarchyInLevelField(f.fields.last(), hierarchy.name));
            }
        });
    });

    return new Immutable.List(levelFields);
};

/**
 * @param {ModelerState} modelerState
 * @param {PivotState} state
 * @return {mac.Intersection}
 */
pch.computeBaseIntersection = function(modelerState, state) {
    return new Immutable.List(pch.computeBaseLevelFields(modelerState, state).map(function(f) {
        return f.level;
    }));
};

/**
 * Returns the special -:Measures measure group if it exists on an axis
 * 
 * @param  {PivotState} state
 * @return {MeasureGroup|undefined}
 */
pch.getVisibleMeasures = function(state) {
    return state.getIn(["measureGroups", "-:Measures"]);
};

/**
 * Returns the list of fields on the given axis name
 * @param  {PivotState}  pivotState
 * @param  {String} axisName
 * @return {Immutable.List<Field>}
 */
pch.getAxis = function(pivotState, axisName) {
    return pivotState.getIn(["axis", axisName]);
};

/**
 * Gets the slice measure configuration for a given field
 * 
 * @param  {PivotState}  pivotState
 * @param  {Field} field
 * @return {String} the name of the measure in which to store the slice value
 */
pch.getSliceMeasure = function(pivotState, field) {
    return pivotState.getIn(["sliceValueMeasure", field]);
};

pch.getRollupFields = function(pivotState) {
    return getAxisFields(pivotState, function(f) {
        return f.has("rollupConfigs") && f.rollupConfigs.size > 0;
    });
};

/**
 * Gets the filter configuration for this pivot
 * @param  {PivotState}  pivotState
 * @return {Immutable.Map}
 */
pch.getFilters = function(pivotState) {
    return pivotState.getIn(["filter"]);
};

/**
 * Returns the sort by measure value configuration from the given PivotState record.
 * 
 * @param  {PivotState} state
 * @return {Immutable.Map|undefined}
 */
pch.getSortByMeasureValue = function(state) {
    var floatingLevel,
        floatingAxisName;

    floatingLevel = getAxisFields(state, hasSortMeasure).first();

    if (floatingLevel) {
        floatingAxisName = findAxisForField(state, floatingLevel.id);
        
        if (floatingAxisName === "Z")
            return;
        
        return Immutable.fromJS({
            field: floatingLevel,
            floatingAxis: floatingAxisName,
            sortAxis: $getOppositeAxis(floatingAxisName)
        });
    }
};

/**
 * Gets the scroll positions values for this pivot
 * @param  {PivotState} state
 * @return {Immutable.Map}
 */
pch.getScrollPositions = function(state) {
    return state.getIn(["scrollPositions"]);
};

/**
 * Gets the move direction configuration for this pivot
 * @param  {PivotState} state
 * @return {Immutable.Map}
 */
pch.getMoveDirection = function(state) {
    return state.getIn(["moveSelectionDirection"]);
};

/**
 * Whether or not this pivot is showing non empty values
 * @param  {PivotState} state
 * @return {boolean}
 */
pch.isNonEmpty = function(state) {
    return !!state.get("isNonEmpty");
};

/**
 * Gets the list of measure fields that are currently being used as mask filters
 * 
 * @param  {PivotState} state
 * @return {Immutable.List<MeasureField>}
 */
pch.getMaskFilter = function(state) {
    return state.getIn(["maskFilter"]);
};

/**
 * Returns the index of the given field in the given axis
 * 
 * @param  {PivotState} state
 * @param  {Field}  field
 * @param  {String} axisName
 * @return {Number} the index or -1 if not found
 */
pch.indexInAxis = function(state, field, axisName) {
    var path = findPathToField(state, field.get("id"), axisName);

    if (path.length > 0)
        return path[path.length - 1];

    return -1;
};

pch.indexInFields = function(axisFields, field) {
    return axisFields.findIndex(function(f) {
        return pch.fieldsMatch(f, field) ||
            (f.fields || []).some(function(cf) {
                return pch.fieldsMatch(cf, field);
            });
    });
};

/**
 * @param {Field} field1
 * @param {Field} field2
 * @param {Boolean} [strict] Whether fields must match exactly or if an id check is satisfactory. defaults to false
 * @return {Boolean}
 */
pch.fieldsMatch = function(field1, field2, strict) {
    return Immutable.is(field1, field2) || (!strict && field1.id === field2.id);
};

/**
 * Returns whether the given axis contains a different field with the same 
 * dimension as the given field. Returns false if the given field is the only
 * field from that dimension on the axis.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {String} axisName
 * @param  {LevelField|DimensionField}  field 
 * @return {Boolean}
 */
pch.axisContainsOtherFieldsWithDimension = function(modelerState, state, axisName, field) {
    if (!(field instanceof mac.LevelField || field instanceof mac.DimensionField))
        return false;

    var dimName = $getDimensionNameFromField(field);

    return $axisContainsDimension(removeFromAxis(modelerState, state, field), axisName, dimName);
};

function $getDimensionNameFromField(field) {
    if (!(field instanceof mac.LevelField || field instanceof mac.DimensionField))
        return;
    return field instanceof mac.LevelField ? field.level.dimensionName : field.dimension;
}

/**
 * Returns true if the field param is an ALL level field
 * @param  {Field} field
 * @return {Boolean}
 */
pch.isAllField = function(field) {
    return field instanceof mac.LevelField && field.level.levelName === "ALL";
};

/**
 * Returns true if this field is a LevelField and is an ALL field or if it is
 * a DimensionField and contains an ALL LevelField
 * @param  {Field} field
 * @return {Boolean}
 */
pch.containsAllField = function(field) {
    if (field instanceof mac.DimensionField) {
        return field.fields.some(pch.isAllField);
    }
    
    return pch.isAllField(field);
};

/**
 * Returns true if we can move a level into an axis.
 * 
 * In summary, it returns true if we are not dimension splitting within a single axis (dimension splitting across axes is ok)
 * In the future, if we make smarter mouseover functionality in the axis panel or menu settings, we can support dimension-splitting
 * within an axis, we only prevent it here to eliminate user confusion given the current UI options.
 *
 * Another way of saying this is, we only return true if we can find a hierarchy to use for the dimension on that axis, given
 * all of the fields on the axis with that dimension including the candidate field.
 * 
 * @param {ModelerState} modelerState
 * @param {PivotState} state
 * @param {String} axisName
 * @param {Field} qualifiedLevel
 * @param {Boolean} isMove
 * @return {Boolean}
 */
pch.canMoveInto = function(modelerState, state, axisName, field, isMove) {
    validateAxisName(axisName);

    if (this.hasField(state, field) && !isMove) {
            return false;
    }

    // Measure groups can be moved to any axis
    if (field instanceof mac.MeasureGroupField) {
        return true;
    }
    
    // Measure fields cannot be placed into the slice
    if (field instanceof mac.MeasureField) {
        return axisName !== "Z";
    }
    
    // Cannot move the All field into the slice
    if (pch.containsAllField(field) && axisName === "Z") {
        return false;
    }

    // Do not allow dimension splitting with lower level on slice
    if (axisName === "Z" && field instanceof mac.LevelField && this.hasHigherLevelOnXOrY(modelerState, state, field)) {
            return false;
    }

    if ((axisName === "X" || axisName === "Y") && field instanceof mac.LevelField && this.hasLowerLevelOnZ(modelerState, state, field)){
            return false;
    }
    
    // In order to check whether or not you can move a field, we use a temporary
    // state object that represents what the state of the pivot would be if this 
    // field were removed.
    var testState = removeFromAxis(modelerState, state, field),
        dimensionName = $getDimensionNameFromField(field),
        model = modelerState.measureModel,
        isSameDimension = function(f) {
            return $getDimensionNameFromField(f) === dimensionName;
        },
        levelFields = field instanceof mac.DimensionField ? field.get("fields") : Immutable.List([field]),
        levelsInSameDimension = getFieldsForAxis(testState, axisName)
            .filter(isSameDimension)
            .concat(levelFields)
            .map(function(f) { return f.level.levelName; })
            // don't include the ALL level in the hierarchy check
            .filter(function(lvl) { return lvl !== "ALL"; }),
        // check to see if a hierarchy exists that contains all levels from that dimension
        hasHierarchy = model.findHierarchiesWithLevels(dimensionName, levelsInSameDimension).length > 0;

    if (pch.isAllField(field)) {
        return levelsInSameDimension.size > 0;
    } else {
        return hasHierarchy;
    }
};

/**
 * Returns true if X or Y axies have higher level fields than input field.
 *
 * For example, if Class is on X axis, it will return true for field == Subclass.
 *
 * @param {ModelerState} modelerState
 * @param {PivotState} state
 * @param {Field} qualifiedLevel
 */
pch.hasHigherLevelOnXOrY = function(modelerState, pivotState, field) {
    var me = this,
        dimensionName = $getDimensionNameFromField(field),
        parentList = modelerState.measureModel.getParents(dimensionName, field.level.levelName);

    return ['X', 'Y'].reduce(function(prev, current) {
        return prev || getFieldsForAxis(pivotState, current).reduce(function(prev, curr) {
            return prev || ((!me.fieldsMatch(field, curr) && ($getDimensionNameFromField(curr) === dimensionName))
                && parentList.has(curr.id))
        }, false);
    }, false);
};

/**
 * Returns true if Slice(Z) has lower level fields than input field.
 *
 * For example, if Subclass is on Slice, it will return true for field == Class.
 *
 * @param {ModelerState} modelerState
 * @param {PivotState} state
 * @param {Field} qualifiedLevel
 */
pch.hasLowerLevelOnZ = function(modelerState, pivotState, field) {
    var self = this,
        dimensionName = $getDimensionNameFromField(field);

    return getFieldsForAxis(pivotState, "Z").reduce(function(prev, curr) {
        return prev || ((!self.fieldsMatch(field, curr) && ($getDimensionNameFromField(curr) === dimensionName))
            && modelerState.measureModel.getParents(dimensionName, curr.level.levelName).has(field.id))
    }, false);
};


function hasRollup(field) {
    return field.has("rollupConfigs") && field.rollupConfigs.size > 0;
}

pch.hasRollup = hasRollup;

function getRollupConfig(state) {
    var rollupFields = getAxisFields(state, hasRollup),
        config = {};
    
    rollupFields.forEach(function(f) {
        if (f instanceof mac.LevelField)
            config[f.id] = { qualifiedName: f.id, method: f.rollupConfigs.getIn([0, "methodName"])};
    });
    
    return config;
}

/**
 * Returns an Object that is the JSON representation of the pivot as the user
 * would configure it. We use this to store the sheet configuration back to the
 * database.
 * 
 * @param  {PivotState} state
 * @return {Object} the pivot configuration as you would see in the sheet's JSON
 */
pch.getConfig = function(state) {
    var visibleMeasuresField = pch.getVisibleMeasures(state),
        z = visibleMeasuresField && visibleMeasuresField.get("fields")
            .map(function(f) { return { qualifiedName: f.get("id") }; })
            .toJS(),
        sortByMeasureValueConfig = convertSortByMeasureValueToConfig(state),
        filters = state.get("filter"),
        sliceValueMeasure = state.get("sliceValueMeasure"),
        dropdownMeasureFilter = state.get("dropdownMeasureFilter"),
        maskFilter = state.get("maskFilter").map(function(field) {
            return field.get("id");
        }),
        scrollPositions = state.get("scrollPositions"),
        moveSelectionDirection = state.get("moveSelectionDirection"),
        isNonEmpty = state.get("isNonEmpty"),
        config = {
            id: state.get("id"),
            axis: {
                x: convertAxisToConfig(state, "X"),
                y: convertAxisToConfig(state, "Y"),
                slice: convertAxisToConfig(state, "Z"),
                z: z || []
            },
            scrollPositions: (scrollPositions && scrollPositions.toJS()) || {}
        };

    function setSortConfigForField(field) {
        var sortObj = pch.getFieldAttributeSort(field);
        if (sortObj) {
            config.sort[field.id] = sortObj;
        }
    }
    
    if (!lodash.isEmpty(sortByMeasureValueConfig)) {
        // floating level is computed so we don't need to store it
        delete sortByMeasureValueConfig.floatingLevel;
        config["sort-by-measure-value"] = sortByMeasureValueConfig;
    }
    
    if (moveSelectionDirection)
        config.moveSelectionDirection = moveSelectionDirection;
        
    if (!lodash.isUndefined(isNonEmpty))
        config.isNonEmpty = isNonEmpty;

    if (filters.size > 0)
        config.filter = filters.toJS();
        
    if (dropdownMeasureFilter.size > 0)
        config.dropdownMeasureFilter = dropdownMeasureFilter.toJS();

    if (maskFilter.size > 0)
        config.maskFilter = maskFilter.toJS();

    if (sliceValueMeasure.size > 0)
        config.sliceValueMeasure = sliceValueMeasure.reduce(function(reduction, metricName, field) {
            return reduction.push({ qualifiedName: field.get("id"), measure: metricName });
        }, Immutable.List()).toJS();

    config.sort = {};
    
    state.axis.forEach(function(axisFields) {
        axisFields.forEach(function(f) {
            if (f instanceof mac.LevelField) {
                setSortConfigForField(f);
            } else if (f instanceof mac.DimensionField) {
                f.fields.forEach(function(cf) {
                    setSortConfigForField(cf);
                });
            }
        });
    });

    return {
        id: state.get("id"),
        pivotConfig: config,
        gridOptions: {
            display: state.displayOptions.toJS(),
            conditionalFormatting: state.conditionalFormatting.toJS()
        }
    };
};

/**
 * Determines if the field has an active filter applied on it.
 *
 * @param {PivotState} state
 * @param {String} qualifiedName - qualified name of the field that will be checked
 *
 * @return {Boolean} the result of checking if the field has an active filter
 */
pch.hasFilter = function(state, qualifiedName){
    return !!state.getIn(["filter", qualifiedName]);
};

/**
 * Private methods
 */

/** Find dual to axis "x" or "y"
 * @param {String} axisName
 */
function $getOppositeAxis(axisName) {
    assert(axisName === "X" || axisName === "Y");
    return axisName === "X" ? "Y" : "X";
}

/**
 * Returns whether or not the given field is in a group. For LEVEL fields
 * this means they are in a DIMENSION, for MEASURE fields, they are in a
 * MEASURE_GROUP.
 * 
 * @param  {PivotState} state 
 * @param  {Field} field
 * @return {Boolean}
 */
function isFieldInGroup(state, field) {
    var path = findPathToField(state, field.get("id"));
    return path[path.length - 2] === "fields";
}

/**
 * Finds a previous instance of the field in an axis and replaces it with
 * the given field. If field is not found, returns the original state.
 * @param  {PivotState} state
 * @param  {Field} field
 * @return {PivotState} the new state
 */
function replaceField(state, field) {
    var path = findPathToField(state, field.get("id"));
    
    if (path.length === 0)
        return state;

    return state.setIn(path, field);
}

/**
 * Returns the axis name that the given field is on
 * @param  {PivotState}  state
 * @param  {String}  fieldId
 * @return {String|undefined}
 */
function findAxisForField(state, fieldId) {
    var path = findPathToField(state, fieldId);

    if (path.length >= 2)
        return path[1];
}

pch.findAxisForField = findAxisForField;

/**
 * Returns the axis name that the given measure is directly on
 * @param  {PivotState}  state
 * @param  {String}  fieldId
 * @return {String|undefined}
 */
function findAxisForMeasureField(state, fieldId) {
    var axis = state.axis,
        axisName = axis.keySeq().toArray().find(function(axisName) {
            return axis.get(axisName).find(function(field) {
                return field.id === fieldId;
            });
        });

    return axisName;
}

pch.findAxisForMeasureField = findAxisForMeasureField;

/**
 * Returns whether the given field is a group field (i.e. has a fields attribute)
 * 
 * @param  {Field}  field
 * @return {Boolean}
 */
function isFieldGroup(field) {
    return field.has("fields");
}

/**
 * Returns all the lower level fields on an axis (i.e. all the fields directly
 * on the axis plus those in a group).
 * 
 * @param  {PivotState} state
 * @param  {String} axisName  the axis for which to get fields
 * @return {Immutable.List<Field>}
 */
function getFieldsForAxis(state, axisName) {
    return getAxisFields(state, util.not(isFieldGroup), axisName);
}

pch.getFieldsForAxis = getFieldsForAxis;

/**
 * Given a compareFn and an optional axis name, filters all fields by the
 * given compareFn. If you do not pass an optionalAxisName, then it will
 * filter on all axes.
 * 
 * @param  {PivotState} state
 * @param  {Function}  filterFn
 * @param  {String} [optionalAxisName]
 * @return {Immutable.List<Field>}
 */
function getAxisFields(state, filterFn, optionalAxisName) {
    return state.get("axis").reduce(function(reduction, fields, axisName) {
        if (optionalAxisName && optionalAxisName !== axisName)
            return reduction;
        
        fields.forEach(function(f) {
            if (f.has("fields")) {
                reduction = reduction.concat(f.get("fields").filter(filterFn));
            }
            
            if (filterFn(f)) {
                reduction = reduction.push(f);
            }
        });

        return reduction;
    }, Immutable.List());
}

pch.getAxisFields = getAxisFields;

/**
 * Finds the path to the given field on an axis for use with Immutable's
 * *In functions (e.g. getIn, setIn). If an optionalAxiName is given,
 * only search within that axis. This is mostly necessary b/c fields
 * may or may not be grouped inside other fields.
 * 
 * @param  {PivotState}  state
 * @param  {String}  fieldId
 * @param  {String} [optionalAxisName]
 * @return {Immutable.List}
 */
function findPathToField(state, fieldId, optionalAxisName) {
    var path = [];

    state.get("axis").some(function(fields, axisName) {
        // if we provided an optional axisName, only look in that axis
        if (optionalAxisName && axisName !== optionalAxisName)
            return false;

        return fields.some(function(f, fIdx) {
            var foundField = f.get("id") === fieldId;

            // is a group of fields
            if (f.has("fields") && !foundField) {
                // go deeper
                foundField = f.get("fields").some(function(childField, childIdx) {
                    if (childField.get("id") === fieldId) {
                        path = ["axis"].concat(axisName, fIdx, "fields", childIdx);
                        return true;
                    }
                });
            } else {
                if (foundField) {
                    path = ["axis"].concat(axisName, fIdx);
                }
            }
            return foundField;
        });
    });

    return path;
}

pch.findPathToField = findPathToField;

/**
 * Whether or not the given measure name is in the list of Visible Measures
 * 
 * @param  {PivotState}  state
 * @param  {String}  measureName
 * @return {Boolean}
 */
function $hasVisibleMeasure(state, measureName) {
    return pch.getVisibleMeasures(state).get("fields").some(function(m) {
        return m.get("id") === measureName;
    });
}

/**
 * Converts all the axis configurations from the pivot config into Fields
 * and groups them as appopriate.
 * 
 * @param  {ModelerState} modelerState
 * @param  {Object[]} fieldConfigs
 * @return {Immutable.List<Field>}
 */
function $groupedFieldsFromConfig(modelerState, fieldConfigs) {
    return $groupFields(modelerState, $getFields(modelerState, fieldConfigs));
}

/**
 * Converts all the axis configurations from the pivot config into Fields.
 * 
 * @param  {ModelerState} modelerState
 * @param  {Object[]} fieldConfigs
 * @return {Immutable.List<Field>}
 */
function $getFields(modelerState, fieldConfigs) {
    return fieldConfigs.map(function(f) {
        var field = modstate.fields.getFieldFromQualifiedName(modelerState.fields, f.get("qualifiedName"));
        assert(!!field, "Could not find field with qualifiedName: " + f.get("qualifiedName"));
        //default display mode to outline

        if (field instanceof mac.LevelField) {
            field = field.set("displayMode", mac.LevelDisplayMode[f.get("displayMode")] || mac.LevelDisplayMode.OUTLINE);

            if (f.get("rollup")) {
                field = field.set("rollupConfigs", new Immutable.List([
                    mac.mkRollupConfig({
                        methodName: f.getIn(["rollup","methodName"])
                    })
                ]));
            }
        }
        
        return field;
    });
}

/**
 * Given a list of fields, it appropriately groups them in higher level
 * fields if possible. E.g. LevelFields from the same dimension will be added
 * to a Dimension field.
 *
 * @param  {ModelerState} modelerState
 * @param  {Immutable.List<Field>} fields a list of individual fields
 * @return {Immutable.List<Field} a list of fields which may be grouped
 */
function $groupFields(modelerState, fields) {
    var groupedFields = fields.groupBy(function(f) {
            if (f instanceof mac.LevelField) {
                return Immutable.Map({ type: FieldTypes.DIMENSION, name: $getDimensionNameFromField(f) });
            } else if (f instanceof mac.MeasureField) {
                return Immutable.Map({ type: FieldTypes.MEASURE, name: f.get("id") });
            } else if (f instanceof mac.MeasureGroupField) {
                return Immutable.Map({ type: FieldTypes.MEASURE_GROUP, name: f.get("id") });
            } else {
                throw new Error("Unknown field type " + JSON.stringify(f));
            }
        }),
        compareFn = mac.compareLevelFields.bind(null, modelerState.measureModel);
    
    return groupedFields.entrySeq().map(function(entry) {
        var group = entry[0],
            fields = entry[1];

        if (group.get("type") === FieldTypes.DIMENSION) {
            if (fields.size === 1) {
                return fields.get(0);
            } else {
                return modstate.fields.getField(modelerState.fields, group.get("name"), FieldTypes.DIMENSION)
                    .set("fields", fields.sort(compareFn).reverse());
            }
        } else {
            return fields.get(0);
        }
    }).toList();
}

/**
 * Whether or not the given Field has a sort measure attribute
 * @param  {LevelField} field
 * @return {Boolean}
 */
function hasSortMeasure(field) {
    return !!getSortMeasureConfig(field);
}

pch.hasSortMeasure = hasSortMeasure;

function getSortMeasureConfig(field) {
    return field instanceof mac.LevelField && field.sortConfigs.find(function(scfg) {
        return !!scfg.measure.metric;
    });
}

/**
 * Whether or not the given axis in the given pivot state has at least one field from
 * the given dimension name.
 * 
 * @param  {PivotState}  state
 * @param  {String} axisName
 * @param  {String}  dimensionName
 * @return {Boolean}
 */
function $axisContainsDimension(state, axisName, dimensionName) {
    return !!getFieldForDimension(state, axisName, dimensionName);
}

/**
 * Creates the field configuration object that is used in the sheet JSON
 * @param  {String} qName the fields qualifiedName, i.e. id
 * @param  {String} [value] the selected slice value, if any 
 * @return {Object}
 */
function createLevelFieldConfig(qName, value, displayMode, rollup) {
    var config = { 
        qualifiedName: qName,
        displayMode: displayMode || mac.LevelDisplayMode.OUTLINE
    };
    if (rollup) {
        config.rollup = rollup;
    }

    if (value) {
        config.value = value;
    }
    
    return config;
}

function createMeasureGroupFieldConfig(qName, value) {
    var config = { 
        qualifiedName: qName
    };

    if (value) {
        config.value = value;
    }
    
    return config;
}

function createMeasureFieldConfig(qName) {
    var config = { 
        qualifiedName: qName
    };

    return config;
}


/**
 * @param {PivotState} state
 * @param {String} fieldId
 * @return {String} value
 */
pch.getSliceValueForField = function(state, fieldId) {
    return state.sliceValues.get(fieldId);
};

function $rollupConfigsToPivotRollup(rollupCfgs) {
    //we only use the first
    if (rollupCfgs && rollupCfgs.size)
        return { methodName: rollupCfgs.get(0).methodName };
}

/**
 * Converts the PivotState's axis to the configuration JSON
 * @param  {PivotState} state
 * @param  {String} axisName
 * @return {Object[]}
 */
function convertAxisToConfig(state, axisName) {
    return state.getIn(["axis", axisName])
        .map(function(f) {
            if (f instanceof mac.LevelField) {
                return createLevelFieldConfig(f.get("id"), pch.getSliceValueForField(state, f.get("id")), f.get("displayMode"), $rollupConfigsToPivotRollup(f.get("rollupConfigs")));
            } else if (f instanceof mac.MeasureField) {
                return createMeasureFieldConfig(f.get("id"));
            } else if (f instanceof mac.MeasureGroupField) {
                return createMeasureGroupFieldConfig(f.get("id"), pch.getSliceValueForField(state, f.get("id")));
            } else if (f instanceof mac.DimensionField) {
                return f.get("fields").map(function(df) {
                    return createLevelFieldConfig(df.get("id"), pch.getSliceValueForField(state, df.get("id")), df.get("displayMode"), $rollupConfigsToPivotRollup(df.get("rollupConfigs"))); 
                });
            }
        })
        .flatten(true)
        .toJS();
}

/**
 * Returns the sort by measure value configuration from the given field 
 * 
 * @param  {LevelField} field
 * @return {Object}
 */
function getSortByMeasureValueInfoFromField(field) {
    var sortCfg = getSortMeasureConfig(field),
        floatingLevel = mac.levelToQualifiedLevel(field.level),
        metricName = sortCfg.measure.metric.name,
        sortOrder = sortCfg.sortType,
        sortPositions = sortCfg.measure.metric.filters.map(function(f) {
            var attr = f.measure.attribute,
                ql = attr && mac.levelToQualifiedLevel(attr.level),
                firstComparison = f.comparisons.get(0),
                comparator = firstComparison && firstComparison.comparator,
                literal = comparator && comparator.literal;

            if (!lodash.isUndefined(literal))     {
                return { qualifiedLevel: ql, memberId: literal };
            }
        });

    return {
        floatingLevel: floatingLevel, 
        metricName: metricName, 
        sortOrder: sortOrder,
        sortPositions: sortPositions 
    };
}

pch.getSortByMeasureValueInfoFromField = getSortByMeasureValueInfoFromField;

pch.getSortByMeasureValueConfig = function(state) {
    var config = pch.getSortByMeasureValue(state);
    
    if (config) {        
        return convertSortByMeasureValueToConfig(state);
    }
};

/**
 * Converts the PivotState's sort by measure value information to the configuration JSON
 * @param  {PivotState} state
 * @return {Object}
 */
function convertSortByMeasureValueToConfig(state) {
    var sortByMeasureValue = pch.getSortByMeasureValue(state),
        sortInfo,
        config = {};
    
    if (sortByMeasureValue) {
        sortInfo = pch.getSortByMeasureValueInfoFromField(sortByMeasureValue.get("field"));
        config = {
            floatingAxis: sortByMeasureValue.get("floatingAxis").toLowerCase(),
            metricName: sortInfo.metricName,
            sortOrder: sortInfo.sortOrder,
            sortPositions: sortInfo.sortPositions.toJS()
        };
    }
    
    return config;
}

/**
 * Stores the slice values for the given field Ids
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {Object} slices keys are field ids, values are slice values
 */
pch.storeSliceValues = function(modelerState, state, slices) {
    var path,
        isGrouped,
        prevValue,
        lastField,
        lastValue,
        groupedSlices,
        dim,
        field,
        compareFn = mac.compareLevelFields.bind(null, modelerState.measureModel);
        
    groupedSlices = lodash.reduce(slices, function(memo, val, fieldId) {
        dim = cubiql.parseDimLvl(fieldId).dimension;
        field = pch.getField(state, fieldId, "Z");
            
        assert(field, "Could not find field '" + fieldId + "' on the Z axis!");
        
        memo[dim] = memo[dim] || [];
        
        memo[dim].push({
            field: field,
            value: val
        });
        
        return memo;
    }, {});
    
    lodash.forEach(groupedSlices, function(slices) {
        slices = slices.sort(function(a, b) {
            return compareFn(a.field, b.field);
        }).reverse();
        
        lastField = slices[slices.length - 1].field;
        lastValue = slices[slices.length - 1].value;
        
        path = findPathToField(state, lastField.id, "Z");
        isGrouped = isFieldInGroup(state, lastField);
        path = isGrouped ? path.slice(0, -1) : path;
        prevValue = state.getIn(["sliceValues", lastField.get("id")]);
        
        //making changes only when the last field value is changed
        if (prevValue !== lastValue) {
            //clearing whole dimension
            if (isGrouped) {
                state.getIn(path)
                    .forEach(function(f) {
                        state = state.deleteIn(["sliceValues", f.get("id")]);
                    });
            }
            
            slices.forEach(function(s) {
                state = state.update("sliceValues", function(sliceValues) {
                    return sliceValues.set(s.field.id, s.value);
                });
            });
            
            state = adjustSortByMeasureValueForSlice(state, lastField);
        }
    });
    
    return state;
};

/**
 * Sets the filter for the given qualified name to the given filter values.
 * 
 * @param {PivotState} state
 * @param {String} qualifiedName
 * @param {Object} filteredValues
 */
pch.setFilter = function(state, qualifiedName, filteredValues) {
    var path,
        field,
        sliceValue,
        immutableFilteredValues = Immutable.fromJS(filteredValues);

    if (immutableFilteredValues && immutableFilteredValues.size > 0) {
        state = state.setIn(["filter", qualifiedName], immutableFilteredValues);
    } else {
        state = state.deleteIn(["filter", qualifiedName]);
    }

    path = findPathToField(state, qualifiedName, "Z");
    field = state.getIn(path);
    
    sliceValue = pch.getSliceValueForField(state, qualifiedName); 
    
    // if the field is on the slice and the slice value is not in the list of filtered values,
    // just choose the first filtered value as the slice value
    if (sliceValue && immutableFilteredValues && !immutableFilteredValues.has(sliceValue)) {
        state = state.set("sliceValues", state.sliceValues.set(qualifiedName, immutableFilteredValues.keySeq().first()));
    }
    
    return state;
};

/**
 * Sets the mask filters for the pivot from the given list of measure names
 *
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {String[]} filters a list of measure names to use as mask filters
 * @return {PivotState}
 */
function setMaskFilter(modelerState, state, filters) {
    var measureFields = Immutable.List(filters).map(function(f) {
        return modstate.fields.getField(modelerState.fields, f, FieldTypes.MEASURE);
    });

    return state.set("maskFilter", measureFields);
}

pch.setMaskFilter = setMaskFilter;

/**
 * Sets the filter by measure value configuration for the given measure name
 * 
 * @param {PivotState} state
 * @param {String} qualifiedName  a measure name
 * @param {Object} filter configuration for a measure
 */
pch.setMeasureFilter = function(state, qualifiedName, filterConfig) {
    return state.update("filter", function(filter) {
        if (!filterConfig || !Object.keys(filterConfig).length) {
            return filter.delete(qualifiedName);
        } else {
            return filter.set(qualifiedName, Immutable.fromJS(filterConfig));
        }
    });
};

/**
 * Replaces the rollup configuration for the given dimension name
 * 
 * @param  {PivotState} state
 * @param  {Field} field 
 * @param  {String} rollupMethodName
 */
pch.setRollupForField = function(state, field, rollupMethodName, axisName) {
    var path = findPathToField(state, field.get("id"), axisName);

    assert(path.length, "Couldn't find field '" + field.id + "' in PivotState"); 

    return state.updateIn(path, function(field) {
        return mac.setRollupForField(field, rollupMethodName);
    });
};

pch.removeRollupForField = function(state, field, axisName) {
    var path = findPathToField(state, field.get("id"), axisName);

    assert(path.length, "Couldn't find field '" + field.id + "' in PivotState"); 

    return state.updateIn(path, mac.removeRollupForField);
};

pch.enableOutlineForField = function(state, field, axisName) {
    var path = findPathToField(state, field.get("id"), axisName);

    assert(path.length, "Couldn't find field '" + field.id + "' in PivotState"); 

    return state.updateIn(path, function(field) {
        return mac.enableOutlineForField(field);
    });
};

pch.disableOutlineForField = function(state, field, axisName) {
    var path = findPathToField(state, field.get("id"), axisName);

    assert(path.length, "Couldn't find field '" + field.id + "' in PivotState"); 

    return state.updateIn(path, function(field) {
        return mac.disableOutlineForField(field);
    });
};

/**
 * Sets the sort configuration for the given level to be sorted by the given attribute.
 *
 * @param  {PivotState} state
 * @param {String} qualifiedName the qualified name of the level to sort 
 * @param {SORT} sortType the sort order
 * @param {String} sortAttr the attribute of the level by which to sort
 * @return {PivotState}
 */
pch.setSort = function(state, qualifiedName, sortType, sortAttr) {
    var path = findPathToField(state, qualifiedName);

    return state.updateIn(path, function(field) {
        if (field instanceof mac.LevelField) {
            //pivot convention is to replace all acting sorts with just this one
            return field.set("sortConfigs", new Immutable.List([mac.mkSortConfig({
                sortType: sortType,
                measure: {
                    attribute: {
                        name: sortAttr || "label",
                        level: field.level
                    } 
                }
            })]));
        } else {
            return field;
        }
    });
};

function applyLevelSortConfig(pivotState, sortObj) {
    if (!sortObj) return pivotState;

    sortObj.forEach(function(sort, qName) {
        pivotState = pch.setSort(pivotState, qName, sort.get("sortType"), sort.get("sortAttr"));
    });

    return pivotState;
}

pch.getFieldAttributeSort = function(field) {
    var attrSort = field.sortConfigs && field.sortConfigs.find(function(scfg) {
        return !!scfg.measure.attribute;
    });

    if (attrSort) {
        return {
            qualifiedName: field.id,
            sortAttr: attrSort.measure.attribute.name,
            sortType: attrSort.sortType
        };
    }
};

/**
 * Clears the sort by measure value configuration on the given PivotState object.
 * 
 * @param  {PivotState} state 
 * @return {PivotState}
 */
function clearSortByMeasureValue(state) {
    return state.update("axis", function(axis) {
        return axis.map(function(fields, axisName) {
            return fields.map(function(field) {
                if (field instanceof mac.DimensionField) {
                    return field.update("fields", function(fields) {
                        return fields.map(function(f) {
                            //filter out metric filters
                            return f.set("sortConfigs", f.sortConfigs.filter(function(sortCfg) {
                                return !sortCfg.measure.metric;
                            }));
                        });
                    });
                } else if (field instanceof mac.LevelField) {
                    //filter out metric filters
                    return field.set("sortConfigs", field.sortConfigs.filter(function(sortCfg) {
                        return !sortCfg.measure.metric;
                    }));
                } else {
                    return field;
                }
            });
        });
    });
}

pch.hasVisibleMeasure = $hasVisibleMeasure;

pch.clearSortByMeasureValue = clearSortByMeasureValue;

/**
 * The configuration object for how to configure sorting by a measure's value
 * 
 * @typedef {SortByMeasureConfig}
 * @property {String} metricName - the metric to sort by
 * @property {String} floatingAxis - the axis "x" or "y" where the floatingLevel is located.
 *                                   the floatingAxis contains levels that are from exactly 
 *                                   one dimension (the floating dimension)
 * @property {QualifiedLevel} floatingLevel - (automatically calculated). the lowest level in 
 *                            floatingAxis, which is allowed to float relative to the measure values
 * @property {MemberValue[]} sortPositions
 * @property {String} sortOrder
 *
 * When sorting a measure by value, the grid allows one level to "float" and groups by the remaining levels.
 * If the grid has Sales by value with Year/Day on x and Sku/Store/Measures on y, initially sorted by level members:
 *                   sku-1
 *                   store-1
 * Year | Day      | Sales
 * -------------------------
 * 2013 | 2013Jan1 | 20
 * 2013 | 2013Jan2 | 3
 * 2013 | 2013Jan3 | 100
 * 2014 | 2014Dec1 | 20
 * 2014 | 2014Dec2 | 300
 * 2014 | 2014Dec3 | 1
 *
 * Then we sort by measure value with the configuration:
 *     metricName: Sales
 *     floatingAxis: x
 *     floatingLevel: Day
 *     sortPositions: sku-1/store-1
 *     sortOrder: asc
 *
 * and get the grid:
 *                   sku-1
 *                   store-1
 * Year | Day      | Sales
 * -------------------------
 * 2013 | 2013Jan2 | 3
 * 2013 | 2013Jan1 | 20
 * 2013 | 2013Jan3 | 100
 * 2014 | 2014Dec3 | 1
 * 2014 | 2014Dec1 | 20
 * 2014 | 2014Dec2 | 300
 *
 * Note that Day floats so that Sales@sku-1/store-1 is in sorted order, while the values are grouped by Year.
 */

/**
 * Sets the sort by measure value configuration on the given PivotState object.
 * If the given sort information results in a bad sort by measure value configuration
 * the original state object is returned unchanged.
 *
 * @param {ModelerState} modelerState
 * @param {PivotState}  state
 * @param {String} metricName
 * @param {String} floatingAxisName
 * @param {Object[]} sortPositions
 * @param {SORT} sortOrder
 *
 * @return {PivotState}
 */
pch.setSortByMeasureValue = function(modelerState, state, metricName, floatingAxisName, sortPositions, sortOrder) {
    assert(floatingAxisName === "X" || floatingAxisName === "Y", "Invalid floating axis: " + floatingAxisName);

    var originalState = state,
        floatingAxis = state.getIn(["axis", floatingAxisName]),
        sortAxis = $getOppositeAxis(floatingAxisName),
        floatingLevel,
        validSortPositions = getValidSortPositions(state, sortPositions, sortAxis);

    if (floatingAxis.size > 1) {
        console.warn("Invalid sort by measure value configuration. Floating axis cannot have more than one dimension.");
        return state;
    }

    if (floatingAxis.size === 0) {
        console.warn("Invalid sort by measure value configuration. Floating axis must have at least one level.");
        return state;
    }

    // clear out any previous measure value sorting
    state = clearSortByMeasureValue(state);

    floatingLevel = floatingAxis.first() instanceof mac.DimensionField ? floatingAxis.first().get("fields").last() : floatingAxis.first();
    
    state = replaceField(state, applySortByMeasureToField(modelerState, state, floatingLevel, {
        metricName: metricName,
        sortOrder: sortOrder,
        sortPositions: validSortPositions
    }));

    return isSortByMeasureValid(state) ? state : originalState;
};

/**
 * @typedef {Object} SortPosition
 * @prop {QualifiedLevel} qualifiedLevel
 * @prop {String} memberId
 *
 * @typedef {Object} SortByMeasureValue
 * @prop {String} metricName
 * @prop {String} floatingAxis
 * @prop {SortPosition[]} sortPositions
 * @prop {Sort} [sortOrder]
 */
/**
 * @param {ModelerState} modelerState
 * @param {State} pivotState
 * @param {Field} field
 * @param {SortByMeasureValue} sortByMeasure
 * @return {Field}
 */
function applySortByMeasureToField(modelerState, state, field, sortByMeasure) {
    //by pivot convention sorting by measure is at the base intersection of the table
    //since the pivot configuration can't specify an intersection for sort-by-measure
    var baseIntersection = pch.computeBaseIntersection(modelerState, state),
        sortPositions = sortByMeasure.sortPositions || [];

    return field.update("sortConfigs", function(cfgs) {
        //first filter out existing measure value sorts if they exist for some reason
        cfgs = cfgs.filter(function(cfg) {
            return !cfg.measure.metric;
        });

        return cfgs.splice(0, 0, new mac.SortConfig({
            measure: new mac.Measure({
                metric: new mac.Metric({
                    name: sortByMeasure.metricName,
                    intersection: baseIntersection,
                    filters: createFiltersForSortPositions(modelerState, sortPositions)
                })
            }),
            sortType: sortByMeasure.sortOrder
        }));
    });
}

/**
 * Given an array of sort positions, it creates an Immutable List of filters
 * to correspond to those positions.
 * 
 * @param  {ModelerState} modelerState
 * @param  {Object[]} sortPositions
 * @return {Immutable.List}
 */
function createFiltersForSortPositions(modelerState, sortPositions) {
    return new Immutable.List(sortPositions.map(function(sortPos) {
        return new mac.Filter({
            measure: new mac.Measure({
                attribute: new mac.Attribute({
                    name: "id",
                    level: mac.qualifiedLevelToLevel(sortPos.qualifiedLevel, modelerState.measureModel)
                })
            }),
            comparisons: new Immutable.List([
                new mac.Comparison({
                    operator: "=",
                    comparator: new mac.Comparator({
                        literal: sortPos.memberId
                    })
                })
            ])
        });
    }));
}

/**
 * Adjust the sort by measure value of the given pivot state by removing
 * invalid sort positions and validating the configuration. If it is invalid,
 * clears the sort by measure value config.
 * 
 * @param  {PivotState} state
 * @return {PivotState}
 */
function adjustSortByMeasureValue(modelerState, state) {
    var sortConfig = pch.getSortByMeasureValue(state),
        sortField,
        sortByMeasInfo,
        validSortPositions;

    if (!sortConfig)
        return state;
    
    sortField = sortConfig.get("field");
    
    // some sort positions may be invalid due to a pivot configuration change
    // (e.g. removing a level that was a valid sort position)
    sortByMeasInfo = getSortByMeasureValueInfoFromField(sortField);
    
    validSortPositions = getValidSortPositions(state, sortByMeasInfo.sortPositions, sortConfig.get("sortAxis"));

    sortField = sortField.update("sortConfigs", function(sortConfigs) {
        return sortConfigs.map(function(sortConfig) {
            if (sortConfig.measure.metric)
                return sortConfig.setIn(["measure","metric","filters"], createFiltersForSortPositions(modelerState, validSortPositions));
            else
                return sortConfig;
        });
    });

    if (!isSortByMeasureValid(state, sortField)) {
        return clearSortByMeasureValue(state);
    } else {
        return replaceField(state, sortField);
    }
}

/**
 * After a slice change has been made, this will validate that the moved
 * slice field did not impact the sort by measure value configuration. If it
 * did, it will remove the sort by measure value configuration.
 * 
 * @param  {PivotState} state
 * @param  {Field} sliceField the field that was just modified in the slice axis
 * @return {PivotState}
 */
function adjustSortByMeasureValueForSlice(state, sliceField) {
    var sortConfig = pch.getSortByMeasureValue(state),
        sortAxis,
        sortDimensionChanged,
        sliceDimName = $getDimensionNameFromField(sliceField);
    
    if (!sortConfig)
        return state;

    sortAxis = state.getIn(["axis", sortConfig.get("sortAxis")]);
    
    // is invalid if a level from one dimension is on both the sort axis and the slice axis
    sortDimensionChanged = sortAxis.some(function(field) {
        var dimName = $getDimensionNameFromField(field);
        return dimName && sliceDimName && dimName === sliceDimName;
    });
    
    if (sortDimensionChanged) {
        state = clearSortByMeasureValue(state);
    }
    
    // if the field that changed is the VisibleMeasures group, then we should clear
    if (sliceField instanceof mac.MeasureGroupField && sliceField.id === "-:Measures") {
        state = clearSortByMeasureValue(state);
    }
    
    return state;
}

/**
 * Determines whether or not the given state has a valid sort by measure value
 * configuration.
 * 
 * @param  {PivotState} state 
 * @return {Boolean}
 */
function isSortByMeasureValid(state) {
    var sortConfig = pch.getSortByMeasureValue(state),
        sortField = sortConfig.get("field"),
        sortByMeasInfo = getSortByMeasureValueInfoFromField(sortField),
        floatingAxis = state.getIn(["axis", sortConfig.get("floatingAxis")]),
        isMetricFieldOnSortAxis = getAxisFields(state, function(f) { return f.id === sortByMeasInfo.metricName; }, sortByMeasInfo.sortAxis).size > 0,
        isVisibleMeasure = $hasVisibleMeasure(state, sortByMeasInfo.metricName);

    // cannot have more than one dimension on the floating axis
    if (floatingAxis.size > 1) {
        console.warn("Invalid sort by measure configuration, must have exactly one dimension on the floating axis.");
        return false;
    }

    // cannot have no levels on the floating axis
    if (floatingAxis.size === 0) {
        console.warn("Invalid sort by measure configuration, must have exactly one dimension on the floating axis.");
        return false;
    }

    
    if (!isMetricFieldOnSortAxis) {
        console.warn("Invalid sort by measure configuration, the sort measure does not appear on the axis opposite the floating axis.");
        return false;
    }
    
    // No such thing as sort positions for measures directly on an axis
    if (isVisibleMeasure && !areSortPositionsValid(state, sortByMeasInfo.sortPositions)) {
        console.warn("Invalid sort by measure configuration, the sort positions are invalid.");
        return false;
    }

    return true;
}

function getValidSortPositions(state, sortPositions, sortAxisName) {
    // having no sort positions is valid
    if (!sortPositions)
        return sortPositions;

    var levelFields = getFieldsForAxis(state, sortAxisName).filter(function(f) { return f.type === FieldTypes.LEVEL; });
    
    // return only sort positions that are currently on the sort axis
    return sortPositions.filter(function(position) {
        var ql = position.qualifiedLevel;
        return levelFields.some(function(f) {
            var level = f.get("level");
            return level.get("dimensionName") === ql.dimension && level.get("levelName") === ql.level;
        });
    });
}

pch.getValidSortPositions = getValidSortPositions;

/**
 * Returns the lowest LEVEL fields in each dimension on the axis.
 * 
 * @param  {PivotState} state
 * @param  {String} axisName
 * @return {Boolean}
 */
function getLowestLevelFieldsOnAxis(state, axisName) {
    return state.getIn(["axis", axisName]).map(function(field) {
        return field instanceof mac.DimensionField ? field.get("fields").last() : field;
    }).filter(function(field) {
        return field instanceof mac.LevelField;
    });
}

pch.getLowestLevelFieldsOnAxis = getLowestLevelFieldsOnAxis;

/**
 * Returns the minimum set of sort positions that must be set based on the
 * given pivot state's sort by measure value configuration.
 * 
 * @param  {PivotState} state
 * @param  {String} sortAxisName
 * @return {Immutable.List}
 */
function getMinimumValidSortPositions(state, sortAxisName) {
    var lowestFields = getLowestLevelFieldsOnAxis(state, sortAxisName),
        rollupQNames = pch.getRollupFields(state)
            // convert rollups to qualified names
            .map(function(f) { return f.get("id"); })
            // filter out qualified names that do not have dimensions on the sort axis
            .filter(function(qName) { 
                return lowestFields
                    .map($getDimensionNameFromField)
                    .includes(cubiql.parseDimLvl(qName).dimension);
            });
    
    // the minumum set of sort positions that must be included to be valid,
    // which is made up of the lowest levels in each dimension on the sort axis
    // plus the rollups for those dimensions
    return lowestFields
        .map(function(f) { return f.get("id"); })
        .concat(rollupQNames)
        .groupBy(function(qName) { return cubiql.parseDimLvl(qName).dimension; });
}

/**
 * Given a list of sort positions, determines whether or not they are valid
 * based on the given sort axis
 * @param  {PivotState} state
 * @param  {Immutable.List} sortPositions
 * @return {Boolean}
 */
function areSortPositionsValid(state, sortPositions) {
    var minimumSortPositions,
        sortAxisName = pch.getSortByMeasureValue(state).get("sortAxis");

    // having no sort positions is valid
    if (!sortPositions)
        return true;
    
    minimumSortPositions = getMinimumValidSortPositions(state, sortAxisName);

    // if there are no valid sort positions then all given sort positions must be invalid
    if (minimumSortPositions.size === 0)
        return sortPositions.size === 0;

    // there must be a sort position for every dimension on the sort axis and 
    // that position must either be the lowest level on the axis OR a rollup
    return minimumSortPositions.every(function(qNames) {
        return sortPositions.some(function(position) {
            return qNames.includes(cubiql.qualifiedLevelToQualifiedName(position.qualifiedLevel));
        });
    });
}

pch.hideEmptyValues = function(state, isNonEmpty) {
    return state.set("isNonEmpty", isNonEmpty);
};

/**
 * Removes a level from a dimension field. If it would only have one level left,
 * then we return the remaining level field. If it would only have the ALL level
 * left, it returns undefined
 * 
 * @param  {DimensionField} dimensionField the dimension field
 * @param  {LevelField} levelField      the field to remove
 * @return {DimensionField|LevelField} the updated dimension field, unless it would only have one level left,
 *                                     in which case we return the remaining level field
 */
function $removeLevelFromDimension(modelerState, state, dimensionField, levelField) {
    var updatedField = dimensionField,
        sortInfo;

    // if the removed levelField was the floating level, we need to transfer the 
    // sort by measure value config
    if (hasSortMeasure(levelField)) {
        sortInfo = getSortByMeasureValueInfoFromField(levelField);
        updatedField = updatedField.updateIn(["fields", dimensionField.get("fields").size - 2], function(newFloatingField) {
            return applySortByMeasureToField(modelerState, state, newFloatingField, {
                metricName: sortInfo.metricName,
                sortOrder: sortInfo.sortOrder,
                sortPositions: sortInfo.sortPositions
            });
        });
    }
    // if there are only two fields in this group and we are removing one of them 
    // then removing the field also needs to remove the group
    if (updatedField.get("fields").size === 2) {
        // replace the group field with the remaining field from within the group
        return updatedField.get("fields").find(function(f) {
            return f.get("id") !== levelField.get("id");
        });
    } else {
        return updatedField.update("fields", function(fields) {
            return fields.filter(function(f) { return f.get("id") !== levelField.get("id"); });
        });
    }
}

/**
 * Removes the given field from whatever axis it is on. If it would result in
 * a field group only having one item in it, it will remove that group as well
 * and place the remaining individual field directly on the axis.
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {Field} field
 * @return {PivotState}
 */
function removeFromAxis(modelerState, state, field) {
    var path = findPathToField(state, field.get("id")),
        groupPath,
        updatedField,
        inGroup;

    if (path.length === 0)
        return state;

    // path to group field
    groupPath = path.slice(0,-2);

    inGroup = isFieldInGroup(state, field);

    if (inGroup && field instanceof mac.LevelField) {
        updatedField = $removeLevelFromDimension(modelerState, state, state.getIn(groupPath), field);
        
        if (pch.isAllField(updatedField)) {
            return state.deleteIn(groupPath);
        } else {
            return state.setIn(groupPath, updatedField);
        }
    } else if (inGroup && field instanceof mac.MeasureField) {
        return pch.removeMeasureFromGroup(state, state.getIn(groupPath), field);
    } else {
        return state.deleteIn(path);
    }
}

/**
 * Throws an error if the given axisName is invalid.
/**
 * Returns the field for the given dimension on the given axis name. If there
 * is only one level from that dimension, returns the level, otherwise it
 * returns the dimension field.
 * 
 * @param  {PivotState} state
 * @param  {String} axisName
 * @param  {String} dimensionName
 * @return {DimensionField|LevelField|undefined}
 */
function getFieldForDimension(state, axisName, dimensionName) {
    return state.getIn(["axis", axisName]).find(function(f) {
        return (f instanceof mac.LevelField || f instanceof mac.DimensionField) && 
            $getDimensionNameFromField(f) === dimensionName;
    });
}

/**
 * Adds a given level field to some other field. If the originalField is a
 * DimensionField, adds the newField in the appropriate place in the list of
 * fields. If originalField is also a LevelField, then creates a new DimensionField
 * and places both in the list of fields in the correct hierarchy order.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {DimensionField|LevelField} originalField
 * @param  {LevelField} newField
 * @return {DimensionField}
 */
pch.addLevelToField = function(modelerState, state, originalField, newField) {
    assert($getDimensionNameFromField(originalField) === $getDimensionNameFromField(newField), "Cannot combine two levels from different dimensions.");
    var dimension = $getDimensionNameFromField(originalField),
        compareFn = mac.compareLevelFields.bind(null, modelerState.measureModel),
        dimField;

    if (originalField instanceof mac.LevelField) {
        // get the dimension field and add both fields
        dimField = modstate.fields.getField(modelerState.fields, dimension, FieldTypes.DIMENSION)
            .set("fields", Immutable.List([originalField, newField])
                .sort(compareFn)
                .reverse());
    } else if (originalField instanceof mac.DimensionField) {
        // a dimension field for this is already on the axis, just update the fields
        dimField = originalField.update("fields", function(fields) {
            return fields
                .push(newField)
                .sort(compareFn)
                .reverse();
        });
    }

    return dimField.update("fields", function(fields) {
        var fieldCt = fields.size,
            sortInfo;

        return fields.map(function(field, i) {

            if (i === fieldCt-1) {
                //last one, apply sort by measure value
                if (sortInfo) {
                    return applySortByMeasureToField(modelerState, state, field, {
                        metricName: sortInfo.metricName,
                        sortOrder: sortInfo.sortOrder,
                        sortPositions: sortInfo.sortPositions
                    }); 
                } else {
                    return field;
                }
            } else if (hasSortMeasure(field)) {
                sortInfo = getSortByMeasureValueInfoFromField(field);
                return field.set("sortConfigs", field.sortConfigs.filter(function(sortCfg) {
                    return !sortCfg.measure.metric;
                }));
            } else {
                return field;
            }
        });
    });
};

/**
 * Adds a measure group to the given PivotState. Looks in the modelerState first 
 * for an existing measure group with the given id, if none is found, then it
 * creates one.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState} state
 * @param  {String} measureGroupId
 * @return {PivotState}
 */
function $addMeasureGroup(modelerState, state, measureGroupId) {
    var measureGroups = state.get("measureGroups"),
        measureGroup = measureGroups.get(measureGroupId);

    if (!measureGroup) {
        // look for the measure group in the field store
        measureGroup = modstate.fields.getField(modelerState.fields, measureGroupId, FieldTypes.MEASURE_GROUP);
        
        if (!measureGroup) { 
            measureGroup = new mac.MeasureGroupField({ id: measureGroupId, fieldLabel: measureGroupId });
        }
    }
    
    return state.set("measureGroups", measureGroups.set(measureGroupId, measureGroup));
};

/**
 * Adds the given measure names to the list of fields in the measure group
 * with the given id. If the measure group already appears on an axis,
 * this also replaces the previous field on the axis with the new one.
 * 
 * @param  {ModelerState} modelerState 
 * @param  {PivotState} state
 * @param  {String} measureGroupId - the id of a measure group
 * @param  {String[]} measureNames - the list of measure names to add
 * @return {PivotState}
 */
function $addMeasuresToGroup(modelerState, state, measureGroupId, measureNames) {
    var measureGroup = state.get("measureGroups").find(function(mg) { return mg.id === measureGroupId; }),
        measureFields = Immutable.List(measureNames)
            .map(function(measureName) {
                var field = modstate.fields.getField(modelerState.fields, measureName, FieldTypes.MEASURE);
                assert(!!field, "Could not find measure in the model with name: " + measureName);
                return field;
            });

    if (!measureGroup)
        return state;

    return measureFields.reduce(function(pivotState, measureField) {
        return pch.addMeasureToGroup(pivotState, measureGroup, measureField);
    }, state);
}

/**
 * @param {PivotState} state,
 * @param {MeasureGroupField} measureGroup
 * @param {MeasureField} MeasureField
 * @return {PivotState}
 */
pch.removeMeasureFromGroup = function(state, measureGroup, measureField) {
    var group = state.getIn(["measureGroups", measureGroup.id]),
        prevFields = group.get("fields"),
        prevIdx = prevFields.indexOf(measureField),
        axisField;
    
    if (prevIdx === -1)
        return state;

    group = group.deleteIn(["fields", prevIdx]);
    state = state.setIn(["measureGroups", group.id], group);

    // udpate the -:Measures field if it exists
    axisField = pch.getField(state, group.id);
    if (axisField) {
        // update the list of measure fields
        axisField = axisField.set("fields", group.fields);
        
        state = replaceField(state, axisField);
        
        if (findAxisForField(state, axisField.id) === "Z" && pch.getSliceValueForField(state, group.id) === measureField.id) {
            // we removed the selected slice measure, so update the sliceValue
            if (group.fields.size > 0) {
                state = state.setIn(["sliceValues", group.id], group.fields.first().id);
            } else {
                state = state.deleteIn(["sliceValues", group.id]);
            }
        }
    }
    
    // remove any filters for that field
    state = pch.setMeasureFilter(state, measureField.id);

    return state;
};

pch.addMeasureToGroup = function(state, measureGroup, measureField, before) {
    assert(!!measureField, "measureField cannot be empty");
    assert(measureField.type === FieldTypes.MEASURE, "Field " + measureField.get("id") + " is not a measure field.");

    // we look up the current measure group just in case the parameter is stale
    var group = state.getIn(["measureGroups", measureGroup.id]), 
        prevFields = group.get("fields"),
        prevIdx = prevFields.indexOf(measureField),
        axisField,
        beforeIdx;

    // remove it if it already existed (allows moving)
    if (prevIdx >= 0)
        prevFields = prevFields.delete(prevIdx);
        
    beforeIdx = prevFields.indexOf(before);

    if (beforeIdx >= 0) {
        group = group.set("fields", prevFields.splice(beforeIdx, 0, measureField)); 
    } else {
        group = group.set("fields", prevFields.push(measureField));
    }
    
    state = state.setIn(["measureGroups", group.id], group);
    
    // udpate the -:Measures field if it exists
    axisField = pch.getField(state, group.id);
    if (axisField) {
        axisField = axisField.set("fields", group.fields);
        if (findAxisForField(state, axisField.id) === "Z" && !pch.getSliceValueForField(state, group.id)) {
            state = state.setIn(["sliceValues", group.id], group.fields.first().id);
        }

        state = replaceField(state, axisField);
    }
    
    return state;
};

/**
 * Throws an error if the given axisName is invalid.
 * 
 * @param  {String} axisName
 */
function validateAxisName(axisName) {
    if (["X", "Y", "Z"].indexOf(axisName) === -1)
        throw new Error("Axis " + axisName + " does not exist");
}

/**
 * Returns a new state after inserting the given field onto the given axis before the before field. If
 * before is not given, appends to the end of the list of fields on the axis.
 * 
 * @param  {ModelerState} modelerState
 * @param  {PivotState}  state
 * @param  {Field}  field
 * @param  {String} axisName
 * @param  {Field}  [before]
 * @return {PivotState}
 */
pch.moveToAxis = function(modelerState, state, field, axisName, before) {
    var isLevel = field instanceof mac.LevelField,
        isValidMove = pch.canMoveInto(modelerState, state, axisName, field, true),
        existingField,
        updatedDimensionField;

    assert(isValidMove, "Cannot move field " + field.get("id") + " to axis " + axisName);

    // remove from old axis
    state = removeFromAxis(modelerState, state, field);

    if (isLevel) {
        // is there already a field on this axis with the same dimension
        existingField = getFieldForDimension(state, axisName, $getDimensionNameFromField(field));
        
        // if so, combine the new field with the existing fields into a dimension field
        updatedDimensionField = existingField && pch.addLevelToField(modelerState, state, existingField, field);
    }
    
    if (updatedDimensionField) {
        return state.updateIn(["axis", axisName], function(fields) {
            return fields.set(fields.indexOf(existingField), updatedDimensionField);
        });
    } else {
        return state.updateIn(["axis", axisName], function(fields) {
            var beforeIdx = before ? fields.findIndex(function(f) { return f.get("id") === before.get("id"); }) : -1;

            // always put measure fields first if they have no before index
            if (field instanceof mac.MeasureField && beforeIdx === -1) {
                beforeIdx = 0;
            }

            if (beforeIdx !== -1) {
                return fields.splice(beforeIdx, 0, field);
            } else {
                return fields.push(field);
            }
        });
    }
};

/**
 * Finds the level to insert a level before in an axis.
 * Returns the first level in the axis that is lower than the added level
 *
 * @param {ModelerState} modelerState
 * @param {string} qualifiedName
 * @param {QualifiedLevel[]} qualifiedLevels
 * 
 * @return {string} qualified name of level to insert before
 */
pch.findInsertPosition = function(modelerState, qualifiedName, qualifiedNames) {
    var qualifiedLevels = qualifiedNames.filter(notMeasures).map(cubiql.parseDimLvl),
        qualifiedLevel = cubiql.parseDimLvl(qualifiedName),
        dimensionName = qualifiedLevel.dimension,
        model = modelerState.measureModel, 
        insertBefore,
        insertAfter;
        
    function notMeasures(qn) {
        return qn !== "-:Measures";
    }
    
    insertBefore = qualifiedLevels.find(function(candidateQualifiedLevel) {
        return candidateQualifiedLevel.dimension === dimensionName &&
            model.qLevelBelow(candidateQualifiedLevel, qualifiedLevel.level);
    });
    
    if (insertBefore) {
        return cubiql.qualifiedLevelToQualifiedName(insertBefore);
    } else if (model.hasDimension(dimensionName)) {
        insertAfter = model.findLowestLevel(dimensionName, lodash.reject(qualifiedLevels, qualifiedLevel));
        return insertAfter && qualifiedNames[qualifiedNames.indexOf(cubiql.qualifiedLevelToQualifiedName(insertAfter)) + 1];
    }
};

/**
 * @param {PivotState} state
 * @return {PivotState}
 */
pch.setScrollPositions = function(state, scrollPositions) {
    return state.set("scrollPositions", Immutable.fromJS(scrollPositions));
};

/**
 * @param {PivotState} state
 * @param {String} moveDirection
 * @return {PivotState}
 */
pch.setMoveDirection = function(state, moveDirection) {
    return state.set("moveSelectionDirection", moveDirection);
};

pch.validateDisplayConfig = function(displays) {
    var validDisplays = {},
        display;

    if (!displays)
        return validDisplays;

    for (var key in displays) {
        display = displays[key];
        validDisplays[key] = {};
        for (var displaykey in display){
            if (displaykey !== "width" && displaykey !== "height" && displaykey !== "members" && displaykey !== "rollups")
                console.warn("wrong key " + displaykey + " in display configuration: " + key);
        }

        if (display.width)
            if (typeof display.width === "number")
                validDisplays[key].width = display.width;
            else
                console.warn("wrong width type " + typeof display.width + " in display configuration: " + key);
        if (display.height)
            if (typeof display.height === "number")
                validDisplays[key].height = display.height;
            else
                console.warn("wrong height type " + typeof display.height + " in display configuration: " + key);

        if (display.members)
            if (typeof display.members === "object")
                validDisplays[key].members = display.members;
            else
                console.warn("wrong members type " + typeof display.members + " in display configuration: " + key);

        if (display.rollups)
            if (typeof display.rollups === "object")
                validDisplays[key].rollups = display.rollups;
            else
                console.warn("wrong rollups type " + typeof display.rollups + " in display configuration: " + key);
    }
    return validDisplays;
};

/**
 * @typedef {Object} ConditionalFormattingRule
 * @property {GridOptions.CONDITIONALS.name} condition - the string name of a condition
 * @property {Any} value - the value against which to check the condition
 * @property {Object} style
 * @property {String} style.color - a CSS color (hexcode or color name) for the text color
 * @property {String} style.backgroundColor -  - a CSS color (hexcode or color name) for the cell's background color
 * @property {String} style.fontStyle - a CSS string for the text font style
 */

/**
 * This validates that the conditional formatting configuration
 * has the right form and returns a valid conditional formatting object.
 *
 * @param  {Object} formattingConfig formatting configuration
 * @return {Object} valid formatting configuration
 */
pch.getValidFormattingConfig = function(formattingConfig) {
    if (!formattingConfig) {
        return {};
    }

    return lodash.mapValues(formattingConfig, function(measureConfig) {
        return measureConfig
            .map(pch.$validateFormattingRule)
            .filter(lodash.negate(lodash.isUndefined));    
    });
};

pch.hasConditionalFormatting = function(pivotState, measure) {
    return pivotState.getIn(["gridOptions", "conditionalFormatting", measure]);
};

pch.$validateFormattingRule = function(ruleConfig) {
    if (lodash.includes(Conditionals, ruleConfig.condition)) {
        return ruleConfig;
    } else {
        console.warn("The conditional '" + ruleConfig.condition + "' is not allowed");
    }    
};

/**
 * Gets a list of formatting config for a specific cell
 *
 * @param   {PivotState} pivotState - the pivotState containing the formatting configuration
 * @param   {String}    measureName - the name of the measure
 * @param   {Object[]}  intersections - array of qualified names specifying the intersection
 * @return  {Object[]} a list of conditional formatting objects for which to apply to the cell
 */
pch.getCellFormattingConfig = function(pivotState, measureName, intersections) {
    var sheetConfig = this.getConditionalFormatting(pivotState, measureName, intersections);

    return !lodash.isUndefined(sheetConfig) ?
        sheetConfig && sheetConfig.get("measureConfigs").concat(sheetConfig.get("intersectionConfigs")).toJS() :
        Immutable.List();
};

/**
 * @param   {PivotState} pivotState - the pivotState containing the formatting configuration
 * @param   {String}     measureName - the name of the measure
 * @param   {Object[]}   intersections - array of qualified names specifying the intersection
 *
 * @typedef {Immutable.Map} CellFormattingConfig
 * @property {Immutable.List} measureConfigs
 * @property {Immutable.List} intersectionConfigs
 *
 * @returns {CellFormattingConfig|undefined} cellFormattingConfig
 * */
pch.getConditionalFormatting = function(pivotState, measureName, intersections) {
    var formattingConfigs = pivotState.getIn(["conditionalFormatting", measureName]),
        iIntersections = Immutable.fromJS(intersections);

    if (!formattingConfigs)
        return;
    
    return Immutable.Map({
        // get the configurations that have no intersections specified
        measureConfigs: formattingConfigs.filter(function(measureConfig) {
            return !measureConfig.has("intersections");
        }),
        intersectionConfigs: formattingConfigs.filter(function(config) {
            var configIntersections = config.get("intersections");

            return iIntersections && configIntersections && iIntersections.isSubset(configIntersections);
        })
    });
};

/**
 * Sets the conditional formatting configuration on a given PivotState
 * 
 * @param  {PivotState} pivotState - the pivot state to update
 * @param  {Object} formattingConfig - the conditional formatting configuration
 * @return {PivotState} an updated PivotState
 */
pch.setConditionalFormatting = function(pivotState, formattingConfig) {
    var validatedConfig = this.getValidFormattingConfig(formattingConfig) || {};
    
    return pivotState.set("conditionalFormatting", Immutable.fromJS(validatedConfig));
};

/**
 * Adds a new conditional formatting rule for the given measureName. Returns a
 * new PivotState.
 * 
 * @param  {PivotState} pivotState
 * @param  {String} measureName
 * @param  {ConditionalFormattingRule} ruleConfig
 * @return {PivotState}
 */
pch.addConditionalFormattingRule = function(pivotState, measureName, ruleConfig) {
    var iRuleConfig = Immutable.fromJS(this.$validateFormattingRule(ruleConfig)),
        updatedPivotState = pivotState.updateIn(["conditionalFormatting", measureName], function(formatting) {
            if (!formatting) {
                return Immutable.List([iRuleConfig]);
            } else {
                return formatting.push(iRuleConfig);
            }
        });

    return updatedPivotState;
};

/**
 * Removes the given conditional formatting rule from the given measureName. Returns a
 * new PivotState.
 * 
 * @param  {PivotState} pivotState
 * @param  {String} measureName
 * @param  {ConditionalFormattingRule} ruleConfig
 * @return {PivotState}
 */
pch.removeConditionalFormattingRule = function(pivotState, measureName, ruleConfig) {
    var iRuleConfig = Immutable.fromJS(ruleConfig),
        updatedPivotState = pivotState.updateIn(["conditionalFormatting", measureName], function(formatting) {
            return formatting.remove(formatting.indexOf(iRuleConfig));
        });

    return updatedPivotState;
};

/**
 * Removes all conditional formatting rules from the given measureName. Returns a
 * new PivotState.
 *
 * @param  {PivotState} pivotState
 * @param  {String} measureName
 * @return {PivotState}
 */
pch.removeConditionalFormattingForMeasure = function(pivotState, measureName) {
    var updatedPivotState = pivotState.updateIn(["conditionalFormatting"], function(formatting) {
        return formatting.delete(measureName);
    });

    return updatedPivotState;
};

/**
 * Updates the given ruleConfigToUpdate from the given measureName with the
 * given newRuleConfig. Returns a new PivotState.
 * 
 * @param  {PivotState} pivotState
 * @param  {String} measureName
 * @param  {ConditionalFormattingRule} ruleConfigToUpdate - the rule config to replace
 * @param  {ConditionalFormattingRule} newRuleConfig - the new rule config
 * @return {PivotState}
 */
pch.updateConditionalFormattingRule = function(pivotState, measureName, ruleConfigToUpdate, newRuleConfig) {
    var iRuleConfigToUpdate = Immutable.fromJS(ruleConfigToUpdate),
        iNewRuleConfig = Immutable.fromJS(this.$validateFormattingRule(newRuleConfig)),
        updatedPivotState = pivotState.updateIn(["conditionalFormatting", measureName], function(formatting) {
            return formatting.set(formatting.indexOf(iRuleConfigToUpdate), iNewRuleConfig);
        });

    return updatedPivotState;
};

/**
 * Returns the measure filter object of the given metric if found.
 *
 * @param {PivotState} pivotState
 * @param {String} metricName
 * @return {PivotConfigMeasureFieldFilter|undefined}
 */
pch.findMetricFilter = function(pivotState, metricName) {
    return pch.getFilters(pivotState).get(metricName);
};

},{"../../constant/gridoptions":190,"../../cubiql":211,"../../modelerstate":239,"../../multiaxisconfig":253,"../../util":280,"assert":undefined,"immutable":44,"lodash":90}],290:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var cubiql = require("../../cubiql");
var mac = require("../../multiaxisconfig");
var pch = require("../../pivotconfig_helper");
var ch = require("./config_helper");

var exp = module.exports;

/**
 * Convert a given PivotState into one that conforms to a CSV format, i.e.
 * a table with all Levels on one axis and all Measures on the other.
 *
 * We convert slice positions to position filters so that we can query the levels
 * and measures at the same time. We also remove any rollup configurations.
 */
exp.convertToCSVFriendlyState = function(pivotState, headingData, measureModel) {
    var headingFields = [],
        measureFields = [],
        slicePosition = headingData.getSlicePosition(),
        sliceLevels = Object.keys(slicePosition),
        lowestSliceLevels;

    // filter out all slice levels that are not the lowest for a given dimension
    // we do this to prevent an issue in the filter tree generation that can result
    // in incorrectly stacked filters
    lowestSliceLevels = sliceLevels.filter(function(lvlId) {
        var qLevel = cubiql.parseDimLvl(lvlId);

        // ignore the -:Measures field
        if (!cubiql.qNameIsRealLevel(lvlId)) {
            return false;
        }

        return sliceLevels.every(function(otherLvlId) {
            var otherQLevel = cubiql.parseDimLvl(otherLvlId);
            return !measureModel.qLevelBelow(otherQLevel, qLevel);
        });
    });

    // add the slices as position filters since we actually want to return the
    // headers for the levels as well
    lowestSliceLevels.forEach(function(lvlId) {
        var filter = {};
        filter[slicePosition[lvlId]] = true;
        pivotState = ch.setFilter(pivotState, lvlId, filter);
    });

    ["X","Y","Z"].forEach(function(axisName) {
        if (pivotState.axis.get(axisName)) {
            pivotState.axis.get(axisName).forEach(function(f) {
                if (f instanceof mac.DimensionField) {
                    f.fields.forEach(function(lf) {
                        if (!ch.isAllField(lf)) {
                            headingFields.push(removeRollupConfig(lf));
                        }
                    });
                }

                if (f instanceof mac.LevelField) {
                    headingFields.push(removeRollupConfig(f));
                } else if (f instanceof mac.MeasureGroupField) {
                    // if on slice, only keep the selected measure
                    if (axisName === "Z" && slicePosition.hasOwnProperty(f.id)) {
                        measureFields.push(f.fields.find(function(mf) {
                            return mf.id === slicePosition[f.id];
                        }));
                    } else {
                        measureFields = measureFields.concat(f.fields.toArray());
                    }
                } else if (f instanceof mac.MeasureField) {
                    measureFields.push(f);
                }
            });
        }
    });

    pivotState = pivotState.set("axis", new Immutable.Map({
        X: Immutable.List(measureFields),
        Y: Immutable.List(headingFields),
        Z: Immutable.List()
    }));

    // remove dropdownMeasureFilters are they aren't needed since we only show values inthe export not options
    pivotState = pivotState.delete("dropdownMeasureFilter");

    // remove sort-by-measure-value since it's not always possible when rearranging
    // levels all onto one axis
    pivotState = ch.clearSortByMeasureValue(pivotState);

    return pivotState;
};

function removeRollupConfig(f) {
    return f.delete("rollupConfigs");
}

exp.createCSVMAConfig = function(viewId, pivotState, headingData, modelerState) {
    var csvPivotState = exp.convertToCSVFriendlyState(pivotState, headingData, modelerState.measureModel),
        maConfig = pch.pivotConfigToMultiAxisConfig(modelerState, viewId, ch.getConfig(csvPivotState).pivotConfig);

    maConfig = maConfig.delete("sliceConfigs");
    maConfig = maConfig.delete("measureGroups");

    maConfig = keepOnlyNecessaryAttrForDropdownTypes(maConfig, modelerState);

    maConfig = mac.regenerateHeaderConfig(maConfig);

    return maConfig;
};

/**
 * Convert a given PivotState into one that can query Excel.
 *
 * We convert slice positions to position filters so that we can query the levels
 * and measures at the same time.
 */
exp.convertToExcelFriendlyState = function(pivotState, headingData, measureModel) {
    var slicePosition = headingData.getSlicePosition(),
        sliceLevels = Object.keys(slicePosition),
        sliceMeasure = slicePosition["-:Measures"],
        lowestSliceLevels;

    // filter out all slice levels that are not the lowest for a given dimension
    // we do this to prevent an issue in the filter tree generation that can result
    // in incorrectly stacked filters
    lowestSliceLevels = sliceLevels.filter(function(lvlId) {
        var qLevel = cubiql.parseDimLvl(lvlId);

        // ignore the -:Measures field
        if (!cubiql.qNameIsRealLevel(lvlId)) {
            return false;
        }

        return sliceLevels.every(function(otherLvlId) {
            var otherQLevel = cubiql.parseDimLvl(otherLvlId);
            return !measureModel.qLevelBelow(otherQLevel, qLevel);
        });
    });

    // add the slices as position filters since we actually want to return the
    // headers for the levels as well
    lowestSliceLevels.forEach(function(lvlId) {
        var filter = {};
        filter[slicePosition[lvlId]] = true;
        pivotState = ch.setFilter(pivotState, lvlId, filter);
    });

    if (sliceMeasure) {
        // remove all other measures from the measure group in slice
        pivotState.get("measureGroups").forEach(function(mg) {
            mg.fields.forEach(function(f) {
                if (f.id !== sliceMeasure) {
                    pivotState = ch.removeMeasureFromGroup(pivotState, mg, f);
                }
            });
        });
    }

    // remove dropdownMeasureFilters are they aren't needed since we only show values in the export, not options
    pivotState = pivotState.delete("dropdownMeasureFilter");

    return pivotState;
};

exp.createExcelMAConfig = function(viewId, pivotState, headingData, modelerState) {
    var csvPivotState = exp.convertToExcelFriendlyState(pivotState, headingData, modelerState.measureModel),
        maConfig = pch.pivotConfigToMultiAxisConfig(modelerState, viewId, ch.getConfig(csvPivotState).pivotConfig);

    maConfig = maConfig.delete("sliceConfigs");

    maConfig = keepOnlyNecessaryAttrForDropdownTypes(maConfig, modelerState);

    return maConfig;
};

/**
 * Helper function to filter the "selectedDataLabel" config from the input list of data configs.
 * @param {Immutable.List<mac.DataConfig>} maconfig
 * @return {Immutable.List<mac.DataConfig>}
 */
function selectedDataLabelFilter(dcs) {
    return dcs.filter(function(dc) {
        return dc.get("name") === "value" || dc.get("name") === "selectedDataLabel";
    })
}

/**
 * Helper function that keeps only the "selectedDataLabel" config if the measureField's "data" has it otherwise keeps all the configs.
 * The function also applies the same change to the configs in the "dataPerFieldSet" lists.
 * @param {MAConfig} maConfig
 * @param {List<String>} measureFieldPath - is the path of the meausreField in maConfig`
 * @param {Immutable<Record>} measureField
 * @param {Immutable.List<mac.DataConfig>} maconfig
 * @return {MAConfig}
 */
function filterEntityTypeQueryDataList(maConfig, measureFieldPath, measureField) {
    // Keep only the "selectedDataLabel" data config if it is in the list, otherwise keep all the data configs.
    // NOTE: The "selectedDataLabel" is included in the list only if the queried metric is an dropdown metric.
    if (0 !== selectedDataLabelFilter(maConfig.getIn(measureFieldPath.concat("data"))).size) {
        maConfig = maConfig.updateIn(measureFieldPath.concat("data"), selectedDataLabelFilter);
        maConfig = maConfig.updateIn(measureFieldPath.concat("dataPerFieldSet"), function(dataPerFieldSet) {
            return dataPerFieldSet.map(selectedDataLabelFilter);
        });
    }
    return maConfig;
}

/**
 * In the given maConfig, this function keeps only the 'value' & 'selectedDataLabel' query configs for the dropdown data type measures
 * @param {MAConfig} maConfig
 * @param {Object} modelerState
 * @return {MAConfig}
 */
function keepOnlyNecessaryAttrForDropdownTypes(maConfig, modelerState) {
    var requiredAttr,
        axisMeasureFields,
        measureGroupFields = maConfig.getIn(["measureGroups", "-:Measures", "fields"]),
        measureGroupFieldsPath = ["measureGroups", "-:Measures", "fields"];
    
    if (measureGroupFields) {
        // Update the measureGroup measure fields to have only the 'selectedDataLabel' query for entity type ('dropdown') metrics.
        // Also, use it to update the measure fields in the axes.
        measureGroupFields.forEach(function(measureField, idx) {
            maConfig = filterEntityTypeQueryDataList(maConfig, measureGroupFieldsPath.concat(idx), measureField);
        });
        maConfig = mac.refreshAllMeasureGroupFieldsOnAxes(maConfig);
    }
    
    // Keep only the 'selectedDataLabel' query for entity type ('dropdown') metrics that are placed directly on the axes
    maConfig.get("axis").forEach(function(fields, axisName) {
        fields.forEach(function(f) {
            if (f instanceof mac.MeasureField) {
                maConfig = filterEntityTypeQueryDataList(maConfig, ch.findPathToField(maConfig, f.get("id")), f);
            }
        });
        return true;
    });
    return maConfig;
}

},{"../../cubiql":211,"../../multiaxisconfig":253,"../../pivotconfig_helper":255,"./config_helper":289,"immutable":44}],291:[function(require,module,exports){
    "use strict";

    var EventEmitter = require("./event_emitter").EventEmitter;
    var lodash = require("lodash");

    lodash.mixin(ModelerWebSocket.prototype, EventEmitter.prototype);
    function ModelerWebSocket(webSocketUrl, urlDriver, logActionHandler, userStore) {
        this.$websocketSuffix = webSocketUrl;
        this.$logActionHandler = logActionHandler;
        this.$userStore = userStore;
        this.$driver = urlDriver;
        
        this.WEBSOCKET_URL = (window.location.protocol === "https:" ? 'wss' : 'ws') + '://' + window.location.host + webSocketUrl;
        this.MAX_RECONNECTION_ATTEMPTS = 1000;
        this.support = "MozWebSocket" in window ? 'MozWebSocket' : ("WebSocket" in window ? 'WebSocket' : null);
        this.$messageHandler;
        this.$reconnectionAttemps = 0;
        this.MAX_RECONNECTION_ATTEMPTS = 10;
    }


    ModelerWebSocket.prototype.getWebSocket = function() {
        return this.$websocket;
    };

    /**
     * Starts/Restarts the websocket
     */
    ModelerWebSocket.prototype.restart = function() {
        var me = this,
            ws;

        if (!me.$websocketSuffix) {
            //configuration doesn't support Websockets
            return;
        }

        if (me.support == null) {
            this.$logActionHandler.error("Your browser doesn't support Websockets.");
            return;
        }

        // if websocket is not closed or the user is logging out don't restart the websocket
        if (this.shouldAbortConnection())
            return;

        ws = new window[me.support](me.WEBSOCKET_URL);

        if (ws && ws.readyState === 1)
            me.$reconnectionAttemps = 0;

        me.$websocket = ws;
        me.setHandlers(me.$messageHandler);
    };

    /**
     * Closes the websocket
     */
    ModelerWebSocket.prototype.close = function() {
        if (!this.$websocket || this.$websocket.readyState === 3)
            return;

        this.$websocket.close();
        this.$websocket = null;
    };

    /**
     * sets a raw message callback for the socket handlers
     * @param {Function} callback
     */
    ModelerWebSocket.prototype.setRawMessageHandler = function(callback) {
        this.$messageHandler = callback;
    };

    ModelerWebSocket.prototype.isConnected = function() {
        return this.$websocket && this.$websocket.readyState === 1;
    };

    ModelerWebSocket.prototype.setHandlers = function(callback) {
        var me = this;

        if (!this.$websocket)
            return;

        this.$websocket.onopen = callback;
        this.$websocket.onmessage = callback;
        this.$websocket.onclose = function(args) {
            me.reconnect();
            callback(args);
        }
    };
    /**
     * Aborts connection if the websocket is connecting or exceeded the maximum number of reconnection attempts
     * @return {Boolean} shouldAbort
     */
    ModelerWebSocket.prototype.shouldAbortConnection = function() {
        return (this.$websocket && (this.$websocket.readyState === 0 || this.$reconnectionAttemps > this.MAX_RECONNECTION_ATTEMPTS));
    };

    /**
     * Reconnects the websocket
     */
    ModelerWebSocket.prototype.reconnect = function() {
        var me = this;

        return new Promise(function(resolve, reject) {
            if (me.$userStore.isAuthenticated()) {
                console.info("Websocket connection lost, trying to reconnect...");
                if (me.$reconnectionAttemps < me.MAX_RECONNECTION_ATTEMPTS) {
                    setTimeout(function() {
                        me.$reconnectionAttemps++;
                        //check if the current user is connected
                        console.info("Reconnecting websocket.");
                        //try to reconnect
                        me.restart();
                        resolve();
                    }, 1000);
                } else {
                    //TODO: display a button to reconnect manually ?
                    console.warn("Could not reconnect websocket.");

                    reject();
                }
            } else {
                console.warn("User is not logged in, could not reconnect websocket.")
                reject();
            }
        });
    };

    exports.ModelerWebSocket = ModelerWebSocket;

},{"./event_emitter":224,"lodash":90}],292:[function(require,module,exports){
"use strict";
var lodash = require("lodash");
var CollaborationActions = require("./constant").Collaboration.ACTIONS;
var CollaborationEvents = require("./constant").Collaboration.EVENTS;
var MessageProperties = require("./constant").Collaboration.MESSAGE_PROPERTIES;

function WebsocketParser() {}

/**
 * Parses raw messages received from the websocket to retrieve a message and/or a status
 * @param  {Object} message Websocket Message
 * @return {Object}         Message
 */
WebsocketParser.prototype.parseMessage = function(message) {
    if (message.data && lodash.isString(message.data)) {
        message = this.deserializeMessage(message.data);

        if (message.msg && message.msg.messageType) {
            if (message.msg.messageType === CollaborationActions.BROADCAST_EDITS_WERE_MADE) {
                message.type = CollaborationEvents.DATA_UPDATED;
            } else if (message.msg.messageType === CollaborationActions.BROADCAST_ACTION_CHANGED_STATE) {
                message.type = CollaborationEvents.ACTION_STATE_CHANGED;
            }
        } else if (message.hasOwnProperty(MessageProperties.PEERS)) {
            message.type = CollaborationEvents.USER_LIST_UPDATED;
        } else if (message.hasOwnProperty(MessageProperties.LEAVE_CODE)) {
            message.type = CollaborationEvents.USER_DISCONNECTED;
        } else if (message.hasOwnProperty(MessageProperties.JOIN) && message.join) {
            message.type = CollaborationEvents.USER_CONNECTED;
        }
    }

    return message;
};

/**
 * Turns stringified messages into objects
 * @param  {String} message
 * @return {Object} message
 */
WebsocketParser.prototype.deserializeMessage = function(message) {
    return JSON.parse(message);
};

/*********************** Potential future methods ****************************
*
* WebsocketParser.prototype.sendChatMessageTo = function(user, message) {}
*
* WebsocketParser.prototype.broadcastChatMessage = function(message) {}
*
*******************************************************************************/
module.exports = new WebsocketParser();

},{"./constant":191,"lodash":90}],293:[function(require,module,exports){
"use strict";

var HttpHelper = require("../logicblox.core/network").HttpHelper;

function CubiqlDAO(measureUrl) {
    this.$measureUrl = measureUrl;
    this.$http = new HttpHelper();
}

CubiqlDAO.prototype.query = function(s) {
    var measureUrl = this.$measureUrl,
        http = this.$http;

    return http.post(measureUrl, {
        query_request: [{measure: {str: s}}]
    }).then(function(response) {
        return new MeasureResponse(response.report[0]);
    });
};

function MeasureResponse(resp) {
    this.$resp = resp;
}

MeasureResponse.prototype.getColumnValues = function(i) {
    return this.$getValues(this.$resp.report_column[i]);
};

MeasureResponse.prototype.$getValues = function(r) {
    var key = Object.keys(r).filter(function(name) {
        return name.indexOf("_column") >= 0;
    })[0];
    return r[key].value;
};

module.exports = CubiqlDAO;

},{"../logicblox.core/network":156}],294:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var testutils = require("./test_utils");

/**
 * Utility to build tests.
 *
 * Example:
 *
 *      var sku1 = {"product:sku": "sku-1"},
 *          sku2 = {"product:sku": "sku-2"};
 *      CubiqlTestBuilder.newBuilder(cubiqlUtil, connectblox)
 *          .setSetupLogic(logic)
 *          .addEdit({Sales: 100, Returns: 50, at: sku1})
 *          .addEdit([
 *              {Sales: 90, Netsales: 30, at: sku1},
 *              {Sales: 100, Netsales: 40, at: sku2}])
 *          .setQuery([
 *              {metric: ["Sales", "Returns", "Netsales"], at: sku1},
 *              {metric: ["Sales", "Returns", "Netsales"], at: sku2}
 *          ])
 *          .setExpectation(function(result) {
 *              expect(result.get("Sales", sku1).toEqual(90));
 *              expect(result.get("Returns", sku1).toEqual(60));
 *              ...
 *          })
 *          .finish(done);
 *
 *  setSetupLogic, addEdit are optional. 
 *  
 *  It is possible to do a sequence of tests:
 *
 *      CubiqlTestBuilder.newBuilder(cubiqlUtil, connectblox)
 *          // test 1
 *          .addEdit(...)
 *          .setQuery(...)
 *          .setExpectation(...)
 *          // test 2
 *          .addEdit(...),
 *          .setQuery(...)
 *          .setExpectation(...)
 *          .finish(done);
 *          
 */
var CubiqlTestBuilder = {
    newBuilder: function(cubiqlUtil, connectblox) {
        this.cubiqlUtil = cubiqlUtil;
        this.connectblox = connectblox;
        this.setupLogic = "";
        this.edits = [];
        this.query = [];
        this.cubiqlQuery = null;
        this.expectationFn = function() {};
        this.chain = Promise.resolve();
        return this;
    },
    runTest: function() {
        var test = lodash.cloneDeep(this);
        test.cubiqlUtil = this.cubiqlUtil;
        test.expectationFn = this.expectationFn;
        this.chain = this.chain.then(this._runTest.bind(null, test));
        this.setupLogic = "";
        this.edits = [];
        this.query = [];
        this.cubiqlQuery = null;
        this.expectationFn = function() {};
        return this;
    },
    _runTest: function(test) {
        var cubiqlUtil = test.cubiqlUtil,
            connectblox = test.connectblox,
            setupLogic = test.setupLogic,
            edits = test.edits,
            query = test.query,
            cubiqlQuery = test.cubiqlQuery,
            expectationFn = test.expectationFn;

        return connectblox.execBlock(setupLogic).then(function() {
                var editPromise = Promise.resolve();
                edits.forEach(function(edit) {
                    editPromise = editPromise.then(function() {
                         return cubiqlUtil.edit(edit);
                    });
                });
                return editPromise;
            })
            .then(function() {
                var queries = [cubiqlUtil.query(query)];
                if (cubiqlQuery) {
                    queries.push(cubiqlUtil.getCubiqlDAO().query(cubiqlQuery));
                }
                return Promise.all(queries);
            })
            .then(function(results) {
                var queryResult = results[0],
                    cubiqlQueryResult = results[1];
                expectationFn(queryResult, cubiqlQueryResult);
            })
            .catch(testutils.fail);
    },
    setSetupLogic: function(setupLogic) {
        this.setupLogic = setupLogic;
        return this;
    },
    addEdits: function(edit) {
        this.edits.push(edit);
        return this;
    },
    setQuery: function(query) {
        if (!lodash.isArray(query)) {
            query = [query];
        }
        this.query = query;
        return this;
    },
    setCubiqlQuery: function(query) {
        this.cubiqlQuery = query;
        return this;
    },
    setExpectation: function(fn) {
        this.expectationFn = fn;
        return this;
    },
    finish: function(done) {
        return this.chain.then(done);
    }
};

module.exports = CubiqlTestBuilder;

},{"./test_utils":300,"lodash":90}],295:[function(require,module,exports){
"use strict";

var lodash = require("lodash");
var Immutable = require("immutable");
var util = require("../logicblox.pivot/util");
var cubiql = require("../logicblox.pivot/cubiql");
var ModelerTestUtil = require("./modelertestutil");
var UrlDriver = require("../logicblox.pivot/urldriver").UrlDriver;
var MeasureModelDAO = require("../logicblox.pivot/dao/measuremodeldao").MeasureModelDAO;
var MeasureModel = require("../logicblox.pivot/measuremodel");
var CubiqlDAO = require("./cubiqldao");

/**
 * Utility used for querying and editing measures
 * 
 * @param {string} measureServiceUri - uri to the measure service
 * @param {string} workspace - workspace name
 */
function CubiqlUtil(measureServiceUri, workspace) {
    var config = {
            workspace: workspace,
            urls: {
                measureUrl: measureServiceUri
            },
            connectblox: {
                workspace: workspace
            }
        },
        urlDriver = new UrlDriver(config),
        measureModelDAO = new MeasureModelDAO(urlDriver),
        cubiqlDAO = new CubiqlDAO(measureServiceUri);

    this.$cubiqlDAO = cubiqlDAO;
    this.$uri = measureServiceUri;
    this.$modelerTestUtil = new ModelerTestUtil(config);
    this.$model = measureModelDAO.fetchModel().then(function(model) {
        return new MeasureModel(Immutable.fromJS(model));
    });
}

CubiqlUtil.prototype.getCubiqlDAO = function() {
    return this.$cubiqlDAO;
};

/**
 * @typedef {Object} CubiqlPosition
 * @example {"Product:sku": "sku-1", "Calendar:day": "20120101"}
 * @example {}
 * @example {"Product:class": "class-1"}
 */

/**
 * @typedef {Object} CubiqlEdit
 * @example {Sales: "100", "Returns": "40", at: {"Product:sku": "sku-1", "Calendar:day": "20120101"}}
 * @example {Sales: "100", at: {"Product:sku": "sku-1"}}
 */    

/**
 * @typedef {Object} CubiqlQuery
 * @example {metric: "Sales", at: {"Product:sku": "sku-1", "Calendar:day": "20120101"}}
 * @example {metric: ["Sales", "Returns"], at: {"Product:sku": "sku-1", "Calendar:day": "20120101"}}
 */    

/**
 * Edit measures. Edits are made in deferred commit mode.
 * 
 * @param  {CubiqlEdit[]} edits
 * @return {Promise}
 */
CubiqlUtil.prototype.edit = function(edits) {
    var modelerTestUtil = this.$modelerTestUtil,
        buildAndValidateSheet = this.buildAndValidateSheet.bind(this);

    if (!lodash.isArray(edits)) {
        edits = [edits];
    }

    return Promise.all(edits.map(function(edit) {
        var metrics = Object.keys(edit).filter(function(key) { return key !== "at"; });

        return buildAndValidateSheet(metrics, edit.at).then(function(sheet) {
            return modelerTestUtil.dev.queryForSheet(sheet).then(function() {
                modelerTestUtil.setDeferredCommitMode(sheet.id);
                return Promise.all(metrics.map(function(metric, i) { 
                    try {
                        return modelerTestUtil.editCells(sheet.id, [{coord: {X: 0, Y: i}, value: edit[metric]}]);
                    } catch (err) {
                        throw new Error("Error editing " + metric + " at " + JSON.stringify(edit.at) +
                            " Please make sure that position exists for metric");
                    }
                }));
            });            
        });
    }))
    .then(function() {
        return commit(modelerTestUtil); 
    });    
};

CubiqlUtil.prototype.query = function() {
    var args = Array.prototype.slice.call(arguments);

    if (args.length === 2) {
        return this.querySingle(args[0], args[1]);
    }
    else if (args.length === 1) {
        if (lodash.isString(args[0])) {
            return this.querySingle(args[0]);
        }
        else {
            return this.queryMultiple(args[0]);    
        }        
    }
};

/**
 * Query metrics
 * 
 * @param  {string[]|string} metrics - a single metric name or an array of metric names to be queried
 * @param  {CubiqlPosition} position
 * @return {Promise<Object>} Promise that resolves into an object keyed by metrics
 */
CubiqlUtil.prototype.querySingle = function(metrics, position) {
    position = position || {};
    var modelerTestUtil = this.$modelerTestUtil,
        buildAndValidateSheet = this.buildAndValidateSheet.bind(this),
        metricsArray = lodash.isArray(metrics) ? metrics : [metrics];

    return buildAndValidateSheet(metricsArray, position).then(function(sheet) {
        return modelerTestUtil.dev.queryForSheet(sheet).then(function() {
            var values = {};

            metricsArray.forEach(function(metric, i) {
                var cellValue = modelerTestUtil.getCellValue(sheet.id, {X: 0, Y: i});
                values[metric] = cellValue && cellValue.rawValue;
            });

            if (lodash.isArray(metrics)) {
                return values;
            }
            else {
                return values[metrics];
            }
        });        
    });
};

CubiqlUtil.prototype.$getMeasureModel = function() {
    return this.$model;
};

/**
 * @param  {CubiqlQuery[]} qs
 * @return {Promise<QueryResult>}
 */
CubiqlUtil.prototype.queryMultiple = function(qs) {
    if (!lodash.isArray(qs)) qs = [qs];

    var querySingle = this.querySingle.bind(this),
        result = new QueryResult();

    return Promise.all(lodash.map(qs, function(q) {
        if (!lodash.isArray(q.metric)) {
            q.metric = [q.metric];
        }
        return querySingle(q.metric, q.at).then(function(r) {
            if (lodash.isObject(r)) {
                q.metric.forEach(function(m) {
                    result.add(m, q.at, r[m]);
                });
            }
            else {
                result.add(q.metric[0], q.at, r);    
            }            
        });        
    })).then(function() {
        return result;
    });
};

/**
 * Make edits then query. This makes it easier for developers since they
 * don't have to worry about chaining promises.
 * 
 * @param  {CubiqlEdit[]} edits
 * @param  {CubiqlQuery} qs
 * @return {Promise<QueryResult>}
 */
CubiqlUtil.prototype.editAndQuery = function(edits, qs) {
    return this.edit(edits).then(this.queryMultiple.bind(this, qs));
};

CubiqlUtil.prototype.buildAndValidateSheet = function(metrics, position) {
    position = convertPositionArrayToObject(position || {});
    return this.$getMeasureModel().then(function(model) {
        var metricErrors = metrics.filter(util.not(validateMetric.bind(null, model))),
            levelErrors = Object.keys(position).filter(util.not(validateLevel.bind(null, model))),
            errors = metricErrors.concat(levelErrors);

        if (errors.length > 0) {
            throw new Error("Invalid metrics/levels: " + errors.join(', '));
        }
        return buildSheet(metrics, position);
    });
};

/**
 * @typedef {Object} MetricValue
 * @example {Sales: "100", Returns: "50"}
 * @example {Sales: "10"}
 */

/**
 * @typedef {Object} CubiqlTest
 * @property {CubiqlEdit} edit
 * @property {MetricValue} expect
 */

function QueryResult() {
    this.$rs = [];
}

QueryResult.prototype.add = function(metric, position, value) {
    position = convertPositionArrayToObject(position);
    this.$rs.push({metric: metric, at: position, value: value});
};

QueryResult.prototype.get = function(metric, position) {
    position = convertPositionArrayToObject(position);
    var r = this.$rs.find(function(r) {
        return r.metric === metric && lodash.isEqual(r.at, position);
    });
    return r && r.value;
};

function validateMetric(model, metricName) {
    return !!model.getMeasureInfo(metricName);
}

function validateLevel(model, qualifiedName) {
    try {
        var qualifiedLevel = cubiql.parseDimLvl(qualifiedName);
        return !!model.getLevel(qualifiedLevel.dimension, qualifiedLevel.level);        
    } catch(err) {
        return false;
    }
}

function convertPositionArrayToObject(pos) {
    var result = pos;
    if (lodash.isArray(pos)) {
        result = {};
        pos.forEach(function(p) {
            lodash.forEach(p, function(v, k) {
                result[k] = v;
            });
        });
    }
    return result;
}

function commit(modelerTestUtil) {
    var dummySheet = {
            id: util.uuid(),
            pivotConfig: {}
        };

    return modelerTestUtil.dev.queryForSheet(dummySheet).then(function() {
        var multiAxisProvider = modelerTestUtil.getMultiAxisProvider(dummySheet.id);
        multiAxisProvider.commit(); 
        return modelerTestUtil.waitForResults();
    });
}

function buildSheet(metrics, position) {
    var filter = {};

    position = convertPositionArrayToObject(position);

    lodash.forEach(position, function(value, qualifiedName) {
        var p = {};
        p[value] = true;
        filter[qualifiedName] = p;
    });

    return {
        id: util.uuid(),
        pivotConfig: {
            axis: {
                x: Object.keys(position).map(function(name) { return {qualifiedName: name}; }),
                y: [{qualifiedName: "-:Measures"}],
                z: metrics.map(function(name) { return {qualifiedName: name}; })
            },
            filter: filter
        }
    };
}

module.exports = CubiqlUtil;

},{"../logicblox.pivot/cubiql":211,"../logicblox.pivot/dao/measuremodeldao":216,"../logicblox.pivot/measuremodel":236,"../logicblox.pivot/urldriver":279,"../logicblox.pivot/util":280,"./cubiqldao":293,"./modelertestutil":298,"immutable":44,"lodash":90}],296:[function(require,module,exports){
"use strict";

var Immutable = require("immutable");
var assert = require("assert");
var lodash = require("lodash");
var util = require("../logicblox.pivot/util");
var ch = require("../logicblox.pivot/view/pivot/config_helper");
var exp = require("../logicblox.pivot/view/pivot/export");
var csv = require("../logicblox.pivot/csvexport");
var excel = require("../logicblox.pivot/excelexport");
var excelcreator = require("../logicblox.pivot/util/excelcreator");

/**
 * An object that mixes in the given ModelerTestUtil by adding additional functionality
 * that is beyond the normal functionality of the modeler application. This is 
 * primarily to facilitate testing of the modeler itself as we have different
 * testing needs than applications.
 *
 * @class
 *
 * @param {ModelerTestUtil} testUtil - the modeler test util to mixin
 */
function DevTestUtil(testUtil) {
    this.testUtil = testUtil;
}

/**
 * @typedef {Object} CSVExportOptions
 * @property  {boolean} csvOptions.exportLevelMemberId Export csv with level memeber id instead of label.
 *                                                     Defaults to false.
 * @property  {boolean} csvOptions.exportRawValue      Export raw instead of formatted values. Defaults to false.
 */

/**
 * Given a sheet configuration, it will issue all required
 * queries for that sheet. Similar to how the modeler works in the browser,
 * this will only query level members if they have not been queried previously.
 * 
 * @param  {Object|Immutable.Map} sheetConfig   a sheet's JSON configuration, as you would store
 *                                in the workspace
 * @param {MultiAxisRange} [range] an optional parameter that says what the range of the view is,
                                  defaults to {X: { start: 0, length: 50}, Y: { start: 0, length: 20 }}
 * @param {boolean} failOnError if this should fail on any query error. Defaults to true
 * @return {Promise}              a promise that is resolved when the queries are complete
 */
DevTestUtil.prototype.queryForSheet = function(sheetConfig, range, failOnError) {
    var me = this,
        testUtil = this.testUtil,
        pivotId = sheetConfig.id,
        promise;

    promise = testUtil.initializeSheet(sheetConfig)
        .then(function() {
            testUtil.getMultiAxisProvider(pivotId).markViewAsActive();
            return testUtil.$querySheetConfig(sheetConfig, range, failOnError);
        });

    promise.catch(util.logError);

    return promise;
};

/**
 * @param  {SheetConfig} sheetConfig
 * @param  {CSVExportOptions} csvOptions
 * @return {Promise<String>}
 */
DevTestUtil.prototype.queryCSV = function(sheetConfig, csvOptions) {
    var testUtil = this.testUtil,
        viewId = sheetConfig.id,
        modelerApp = testUtil.modelerApp,
        modelerState = testUtil.getModelerState(),
        maConfigActions = modelerApp.getMultiAxisConfigActionHandler(),
        pivotState = ch.pivotStateFromPivotConfig(modelerState, viewId, sheetConfig.pivotConfig);

    // first query out the headers (needed to apply slice to CSV export)
    return this.queryForSheet(sheetConfig)
        .then(function() {
            // now query the CSV
            var headingData = modelerApp.getMultiAxisDataStore().getHeadingData(viewId, "main"),
                maConfig = exp.createCSVMAConfig(viewId, pivotState, headingData, modelerState);

            if (maConfig.axis.get("X").size === 0 && maConfig.axis.get("Y").size === 0) {
                throw new Error("Sheet " + viewId + " is empty. Nothing to export.");
            } else {
                return maConfigActions.setViewTaskConfig(viewId, "exportCsv", {maConfig: maConfig, isolatedData: true, isUnmasked: true});
            }
        })
        .then(function() {
            return testUtil.waitForResults(false);
        })
        .then(function() {
            var promise = new Promise(function(resolve) {
                csv.getExportData(viewId, modelerApp.getMultiAxisDataStore(), function(csvData) {
                    resolve(csvData);
                }, csvOptions);
            });
            return promise;
        });
};

DevTestUtil.prototype.queryExcel = function(sheetConfig) {
    var testUtil = this.testUtil,
        viewId = sheetConfig.id,
        modelerApp = testUtil.modelerApp,
        modelerState = testUtil.getModelerState(),
        maConfigActions = modelerApp.getMultiAxisConfigActionHandler(),
        pivotState = ch.pivotStateFromPivotConfig(modelerState, viewId, sheetConfig.pivotConfig);

    return this.queryForSheet(sheetConfig)
        .then(function() {
            // now query the excel 
            var headingData = modelerApp.getMultiAxisDataStore().getHeadingData(viewId, "main"),
                maConfig = exp.createExcelMAConfig(viewId, pivotState, headingData, modelerState);

            return maConfigActions.setViewTaskConfig(viewId, "exportExcel", {maConfig: maConfig, isolatedData: true, isUnmasked: true});
        })
        .then(function() {
            return testUtil.waitForResults(false);
        })
        .then(function() {
            var promise = new Promise(function(resolve) {
                excel.getExportData(viewId, modelerApp.getMultiAxisDataStore(), true, function(sheetData) {
                    resolve(sheetData);
                });
            });
            return promise;
        });
};

/**
 * Queries a sheet by it's id. Marks this sheet as active but does not de-activate
 * other sheets.
 * 
 * @param  {String} sheetId the sheet id to query
 * @param  {MultiAxisRange} [range] an optional parameter that says what the range of the view is, 
 *                                  defaults to {X: { start: 0, length: 50}, Y: { start: 0, length: 20 }}
 * @param {boolean} failOnError if this should fail on any query error. Defaults to true
 * @return {Promise}
 */
DevTestUtil.prototype.querySheetById = function(sheetId, range, failOnError) {
    var sheetConfig = this.testUtil.getViewState(sheetId);
    assert(sheetConfig, "Sheet with id: " + sheetId + " could not be found.");
    
    return this.queryForSheet(sheetConfig, range, failOnError);
};

/**
 * Marks all data dirty so the next request for data will query it from the server.
 * @return {Promise} when data has been marked dirty
 */
DevTestUtil.prototype.markAllDataDirty = function() {
    return this.testUtil.modelerApp.getMultiAxisDataActionHandler().markAllDataDirty();
};

DevTestUtil.prototype.findCoordForPosition = function(sheetId, metricName, position) {
    var provider = this.testUtil.getMultiAxisProvider(sheetId);

    return provider.findCoordForPosition(metricName, position);
};

module.exports = DevTestUtil;

},{"../logicblox.pivot/csvexport":210,"../logicblox.pivot/excelexport":225,"../logicblox.pivot/util":280,"../logicblox.pivot/util/excelcreator":281,"../logicblox.pivot/view/pivot/config_helper":289,"../logicblox.pivot/view/pivot/export":290,"assert":undefined,"immutable":44,"lodash":90}],297:[function(require,module,exports){
"use strict";

var assert = require("assert");
var lodash = require("lodash");
var mac = require("../logicblox.pivot/multiaxisconfig");
var cubiql = require("../logicblox.pivot/cubiql");

var CUSTOM_MATCHERS = {
    toMatchCoord: function(util) {
        return {
            compare: function(actual, expected) {
                var messages = [];
                assert(actual instanceof Object);

                Object.keys(actual).forEach(function(axisName) {
                    if (!util.equals(actual[axisName], expected[axisName])) {
                        messages.push("For axis " + axisName + ", expected " + expected[axisName] + " but got " + actual[axisName]);
                    }
                });

                if (messages.length) {
                    return {
                        message: messages.join("\n"),
                        pass: false
                    };
                } else {
                    return {
                        message: "Expect coordinate to not match but it did!",
                        pass: true
                    };
                }
            }
        };
    },
    toMatchCell: function(util) {
        return {
            /**
             * @param {CellData} actualCell
             * @param {ExpectedCell} expectedCell
             * @param {Function<Value, Value>:Boolean} [comparisonFn]
             * @param {Boolean} [strictPositionLabels] whether or not to strictly enforce label checks when comparing expected to actual positions. Default to fasle for now, will switch to true in a later version
             */
            compare: function(actualCell, expectedCell, comparisonFn, strictPositionLabels) {
                comparisonFn = comparisonFn || util.equals;

                var actualValue = actualCell.data && actualCell.data.value && actualCell.data.value.value,
                    actualValidityMessages = actualCell.validityMessages || [],
                    actualInvalid = actualValidityMessages.length,
                    expectedValidityMessages = expectedCell.validityMessages || [],
                    expectedInvalid = expectedCell.invalid || expectedValidityMessages.length,
                    actualInfo = actualCell.cellInfo,
                    actualPosition,
                    failMessages = [],                    
                    result = {
                        pass: true,
                        message: "Expected cell data to not match, but it matched!"
                    },
                    expectedValues;

                if (actualInfo && actualInfo.positionInfo && actualInfo.positionInfo.position) {
                    actualPosition = {};
                    Object.keys(actualInfo.positionInfo.position).forEach(function(qName) {
                        //the actual position is stored more precisely (includes the hierarchy)
                        //so to relax that restriction we remap it for the comparison to simply
                        //label:level
                        var ql = mac.qNameToMQGLevel(qName),
                            label = strictPositionLabels ? cubiql.qlevel.getLabel(ql) : cubiql.qlevel.getDimension(ql),
                            actualQName = label + ":" + cubiql.qlevel.getLevel(ql);

                        if (cubiql.qlevel.getLevel(ql) === "ALL") 
                            actualPosition[actualQName] = "ALL"; //set to ALL 
                        else
                            actualPosition[actualQName] = actualInfo.positionInfo.position[qName];
                    });
                }

                //expected cell can either have 'invalid' set to true or have validity messages.
                //actual cell is invalid if validityMessages has length.
                if (Boolean(expectedInvalid) !== Boolean(actualInvalid)) { 
                    if (expectedInvalid) {
                        failMessages.push("Expected cell to be invalid but it is valid");
                        result.pass = false;
                    } else {
                        failMessages.push("Expected cell to be valid but it is invalid, with messages: \n" + actualValidityMessages.join("\t\n"));
                        result.pass = false;
                    }
                }
                //now if validity messages are expected, then we check them
                if (expectedValidityMessages.length) {
                    if (expectedValidityMessages != actualValidityMessages) {
                        failMessages.push("Expected validity messages '" + actualValidityMessages + "' to be: '" + expectedValidityMessages + "'"); 
                        result.pass = false;
                    }
                }
                

                //short circuit if invalid
                if (!actualInvalid) {
                    assert(actualValue, "value not defined for actual cell!");

                    if (lodash.isUndefined(expectedCell.value)) {
                        if (!lodash.isEmpty(actualValue.rawValue) && !lodash.isEmpty(actualValue.rawValue[0]) && !lodash.isUndefined(actualValue.rawValue[0][0])) {
                            failMessages.push("Expected value to be undefined but it is " + JSON.stringify(actualValue.rawValue));
                            result.pass = false;
                        }
                    } else {
                        if (!lodash.isArray(expectedCell.value)) {
                            expectedValues = [[expectedCell.value]];
                        } else {
                            expectedValues = expectedCell.value;
                        }
                        if (actualValue.rawValue.length > 0 && actualValue.rawValue[0].length > 0) {
                            actualValue.rawValue.forEach(function(row,i) {
                                row.forEach(function(cellValue,j) {
                                    if (!isNaN(cellValue)) {
                                        if (!toBeCloseTo(Number(cellValue), expectedValues[i][j]).pass) {
                                            failMessages.push("Expected " + cellValue + " to be close to " + expectedValues[i][j]);
                                            result.pass = false;
                                        }
                                    } else {
                                        if (!comparisonFn(cellValue, expectedValues[i][j])) {
                                            failMessages.push("Expected " + cellValue + " to equal " + expectedValues[i][j]);
                                            result.pass = false;
                                        }
                                    }
                                });
                            });
                        } else {
                            failMessages.push("Expected " + expectedCell.value + " but value was empty.");
                            result.pass = false;
                        }
                    }

                    if (!lodash.isUndefined(expectedCell.protected)) {
                        if (Boolean(expectedCell.protected) !== Boolean(actualCell.protected)) {
                            if (expectedCell.protected)
                                failMessages.push("Expected cell to be protected but it was not.");
                            else
                                failMessages.push("Expected cell to not be protected but it was.");

                            result.pass = false;
                        } 
                    }

                    if (!lodash.isUndefined(expectedCell.locked)) {
                        if (Boolean(expectedCell.locked) !== Boolean(actualCell.locked)) {
                            if (expectedCell.locked)
                                failMessages.push("Expected cell to be locked but it was not.");
                            else
                                failMessages.push("Expected cell to not be locked but it was.");

                            result.pass = false;
                        } 
                    }

                    if (!lodash.isUndefined(expectedCell.filtered)) {
                        var passedFilter = lodash.isUndefined(actualCell.data["_passed_filter_"]) ||
                                (actualCell.data["_passed_filter_"].value.rawValue[0] && 
                                 actualCell.data["_passed_filter_"].value.rawValue[0][0] === 1);
                        
                        if (expectedCell.filtered && passedFilter) {
                            failMessages.push("Expected cell to be filtered but it was not.");
                            result.pass = false;
                        } else if (!expectedCell.filtered && !passedFilter) {
                            failMessages.push("Expected cell to not be filtered but it was filtered.");
                            result.pass = false;
                        }
                    }

                    if (expectedCell.position) {
                        if (!actualPosition) {
                            failMessages.push("Expected position of " + JSON.stringify(expectedCell.position) + " but the no position was found!");
                            result.pass = false;
                        } else {
                            Object.keys(expectedCell.position).forEach(function(qName) {
                                var fieldIndex;

                                if (actualPosition[qName] !== expectedCell.position[qName]) {
                                    //it might be a higher level so we can try to find a matching field and check it's member if required
                                    fieldIndex = actualInfo.fields.findIndex(function(f) { return f.id === qName; }); 
                                    if (!(fieldIndex > -1 && actualInfo.members[fieldIndex] == expectedCell.position[qName])) {
                                        failMessages.push("Expected position of " + qName + " to be " + expectedCell.position[qName] + " but was " + actualPosition[qName]);
                                        result.pass = false;
                                    }
                                }
                            });
                        }
                    }
                }

                if (!result.pass)
                    result.message = "Cell at coordinate: " + JSON.stringify(expectedCell.coord) + "[" + JSON.stringify(actualPosition)  + "] did not match because:\n\t" + failMessages.join("\n\t");

                return result;
            }
        };
    },
    toMatchCells: function(util) {
        var compareCell = CUSTOM_MATCHERS.toMatchCell(util).compare;
        return {
            compare: function(actual, expected) {
                assert(actual instanceof Array);
                assert(expected instanceof Array);

                var failMessages = [],
                    result = {
                        pass: true,
                        message: "Expected cell data to not match, but it matched!"
                    };

                expected.forEach(function(expectedCell, i) {
                    var actualCell = actual[i],
                        cellResult;
                    assert(expectedCell instanceof Object);

                    if (!actualCell) {
                        failMessages.push("Expected a cell at " + JSON.stringify(expectedCell.position || expectedCell.coord) + " but this view does not have a cell at that position!");
                        result.pass = false;
                    } else {
                        assert(actualCell instanceof Object);
                        cellResult = compareCell(actualCell, expectedCell);
                        if (!cellResult.pass) {
                            result.pass = false;
                            failMessages.push(cellResult.message);
                        }
                    }
                });

                if (!result.pass)
                    result.message = failMessages.join("\n\n") + "\n";

                return result;
            }
        };
    }
};

//Machine epsilon varies by browser and is typically something ludicrously small like 1e-300
//Just setting this here rather than trying to detect or something.  Hopefully noone writes
//unit tests in the future using this framework that need to detect gravitational wave-induced measurement changes
var MIN_EPSILON = Math.pow(10, -16);

function computeEpsilon(num) {
    var strNum = num.toString(),
        decIdx = strNum.indexOf("."),
        strLen = strNum.length,
        nonZeroIdx,
        chr,
        power,
        i = 0;

    for (; i < strLen; i++) {
        chr = strNum[i];
        if (chr !== "0" && chr !== ".") {
            nonZeroIdx = i;
            break;
        }
    }

    if (nonZeroIdx > -1) {
        if (decIdx === -1 || nonZeroIdx < decIdx) {
            //number is non-fractional
            //power is the number of digits left of the decimal, if its there, or left of the end of string if not
            power = decIdx === -1 ? strLen - nonZeroIdx : decIdx - nonZeroIdx;
            //power need to be negative
            power = -power;
        } else {
            //number is fractional, so the power is the number digits to the right of the decimal
            power = 0 - (nonZeroIdx - decIdx);
        }

        return Math.max(Math.pow(10, power), MIN_EPSILON);
    } else {
        return MIN_EPSILON;
    }
}

function toBeCloseTo(actual, expected) {
    var abs1 = Math.abs(actual),
        abs2 = Math.abs(expected),
        diff = Math.abs(actual - expected),
        epsilon = Math.max.apply(null, [actual,expected].map(computeEpsilon)),
        close;

    if (actual == expected)
        close = true;
    else if (actual === 0 || expected === 0 || diff < MIN_EPSILON)
        close = diff < epsilon;
    else
        close = diff / (abs1 + abs2) < epsilon; 

    return {
        pass: close 
    };
}

module.exports = CUSTOM_MATCHERS;
// these are exported with a $ as they are only exported in order to test them
// CAUTION: exporting them without the '$' will overwrite the default jasmine methods!
module.exports.$computeEpsilon = computeEpsilon;
module.exports.$toBeCloseTo = toBeCloseTo;

},{"../logicblox.pivot/cubiql":211,"../logicblox.pivot/multiaxisconfig":253,"assert":undefined,"lodash":90}],298:[function(require,module,exports){
    /* globals Promise, console */
    "use strict";

    /**
     * The modelertestutil module is what we deliver to consumers of the modeler.
     * The purpose is to help facilitate testing on client projects. Utility functions
     * that are only useful for testing the modeler project itself should be placed
     * in the test_utils module.
     */

    var Immutable = require("immutable");
    var lodash = require("lodash");
    var assert = require("assert");
    var inherits = require("inherits");

    var cubiql = require("../logicblox.pivot/cubiql");
    var util = require("../logicblox.pivot/util");
    var ServiceCaller = require("../logicblox.pivot/util/servicecaller");
    var ModelerApp = require("../logicblox.pivot/modelerapp");
    var TestWorkspace = require("./workspaceutils").TestWorkspace;
    var MultiAxisDataEvents = require("../logicblox.pivot/store/multiaxisdatastore").MultiAxisDataEvents;
    var MultiAxisProvider   = require("../logicblox.pivot/view/multiaxisprovider");
    var DevTestUtil = require("./devtestutil");
    var CommitMode = require("pivottable/src/constants").CommitMode;
    var CUSTOM_MATCHERS = require("./jasminematchers");
    var warmups = require("../logicblox.pivot/util/warmups");
    var pch = require("../logicblox.pivot/pivotconfig_helper");
    var ch = require("../logicblox.pivot/view/pivot/config_helper");
    var modstate = require("../logicblox.pivot/modelerstate");

    var constants = require("../logicblox.pivot/constant");
    var ViewConfigEvents = constants.ViewConfig.EVENTS;
    var ViewConstants = constants.View;

    inherits(ModelerTestUtil, TestWorkspace);

    var DEFAULT_RANGE = { X: { start: 0, length: 15 }, Y: { start: 0, length: 20 } };

    var DATA_SHAPES = {
        SINGLE: "single",
        MULTI: "multi",
        TABLE: "table"
    };

    /**
     * We should gradually move things from test_utils over to here.
     * This should the main test util module that is exported.
     *
     * The test_utils should contain only things for testing the actual
     * modeler-js, like the MOCK_MODEL and the url configs for modeler
     * test applications.
     */

    /**
     * Main test module for testing modeler applications.
     * Use the buildUrlDriver function to build a UrlDriver, then
     * build ModelerTestUtil with the urldriver.
     *
            var modelerTestUtil = new ModelerTestUtil({
                serverUrl: "/your-app-prefix",
                workspace: "app-workspace",
                port: 8086
            });
     *
     * @param {ModelerAppConfig} appConfig
     * @param {String} defaultTestBranch The name of the workspace branch to create
     *                                   when using branches for test that update the workspace
     */
    function ModelerTestUtil(appConfig, defaultTestBranch) {
        var workspace,
            // cloning b/c we will potentially be changing the workspace
            config = lodash.cloneDeep(appConfig);

        try {
            jasmine.addMatchers(CUSTOM_MATCHERS);
        } catch (e) {
            //do nothing, this failure happens if we get called outside of a spec
            //or there is no jasmine
        }

        if (!appConfig.workspace) {
            console.error("workspace must be set in app config");
        }

        workspace = appConfig.workspace;

        // need to tell the connectblox services to hit the branch if one is provided
        if (defaultTestBranch) {
            if (appConfig.workbookId) {
                config.workspace = workspace + "@" + appConfig.workbookId;
            }
        }

        config = lodash.merge({
            modelingFeatures: {
                editRules: false,
                editSchema: false
            }
        }, config);

        this.$appConfig = ModelerApp.generateModelerAppConfig(config);
        this.$skipLoadSaveViewState = (lodash.isUndefined(this.$appConfig.testing && this.$appConfig.testing.queryViewState)) ? false :
            !(this.$appConfig.testing && this.$appConfig.testing.queryViewState);
        this.modelerApp = new ModelerApp(this.$appConfig);
        this.urlDriver = this.modelerApp.getUrlDriver();
        this.connectblox = this.modelerApp.getConnectBlox();

        if (appConfig.workbookId) {
            TestWorkspace.call(
                this, this.urlDriver, workspace, defaultTestBranch, appConfig.workbookId);
        }
        else {
            TestWorkspace.call(this, this.urlDriver, workspace, defaultTestBranch);
        }

        this.serviceCaller = new ServiceCaller(this.urlDriver);

        this.$multiAxisProviders = {}; //store the multiAxisProvider we have constructed for a given viewId
        this.$lastViewRange = {}; //store last view range used for a given pivotId

        this.dev = new DevTestUtil(this);
    }

    ModelerTestUtil.DataShapes = DATA_SHAPES;

    ModelerTestUtil.prototype.getModelerState = function() {
        return modstate.createModelerState(this.modelerApp);
    };

    /**
     * Returns ViewState for the given viewId from ViewConfigStore.
     * @param  {string} viewId
     * @return {Object|undefined}
     */
    ModelerTestUtil.prototype.getViewState = function(viewId) {
        var viewState = this.modelerApp.getViewConfigStore().getViewState(viewId);

        return viewState && viewState.toJS();
    };

    /**
     * Loads a view state from database, if view state is already loaded just resolves the promise.
     * @param  {string} viewId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.$loadViewState = function(viewId) {
        var viewState = this.getViewState(viewId);

        if (viewState) {
            return Promise.resolve(viewState);
        }

        var me = this,
            loadPromiseResolve, loadPromiseReject,
            loadPromise = new Promise(function(resolve, reject) {
                loadPromiseResolve = resolve;
                loadPromiseReject = reject;
            });

        this.modelerApp.getViewConfigStore().once(viewId, ViewConfigEvents.STATE_CHANGED, function() {
            loadPromiseResolve(me.getViewState(viewId));
        });

        this.modelerApp.getViewConfigActionHandler().loadView(viewId, this.$skipLoadSaveViewState);
        return loadPromise;
    };

    /**
     * Goes through views in the view w/ the given viewId and returns all view ids which are of the given type.
     * @param  {string} viewId
     * @param  {string} viewType
     * @return {Array}
     */
    ModelerTestUtil.prototype.$findViewIdsOfType = function(viewId, viewType) {
        var viewState = this.getViewState(viewId);

        return lodash.reduce(viewState.views, function(viewIds, view, id) {
            if (view.module === viewType) {
                viewIds.push(id);
            }
            return viewIds;
        }, []);
    };

    /**
     * Returns pivotConfig of the view w/ the given id.
     * @param  {string} pivotId
     * @return {Object}
     */
    ModelerTestUtil.prototype.getPivotConfig = function(pivotId) {
        var sheetConfig = this.getViewState(pivotId);
        assert(sheetConfig, "sheet with id '" + pivotId + "' not found in ViewConfigStore, please make sure it was initialized or queried");
        return sheetConfig.pivotConfig;
    };

    ModelerTestUtil.prototype.getPivotState = function(pivotId) {
        return ch.pivotStateFromPivotConfig(this.getModelerState(), pivotId, this.getPivotConfig(pivotId));
    };

    ModelerTestUtil.prototype.makeMAConfig = function(pivotState) {
        var pivotId = pivotState.id,
            pivotConfig,
            computedConfig;

        if (pivotState) {
            computedConfig = ch.getConfig(pivotState);
            pivotConfig = computedConfig.pivotConfig;
        } else {
            pivotConfig = this.getPivotConfig(pivotId);
        }

        return pch.pivotConfigToMultiAxisConfig(this.getModelerState(), pivotId, pivotConfig);
    };

    ModelerTestUtil.prototype.updateMAConfig = function(pivotState, taskName) {
        var maConfig = this.makeMAConfig(pivotState);
        return this.modelerApp.getModelerActionHandler().setViewTaskConfig(pivotState.id, taskName, { maConfig: maConfig, isUnmasked: false});
    };

    ModelerTestUtil.prototype.updateNewPivotConfig = function(pivotState) {
        var me = this,
            viewId = pivotState.get("id"),
            viewState = this.modelerApp.getViewConfigStore().getViewState(viewId),
            newPivotState = ch.getConfig(pivotState),
            viewConfigActionHandler = this.modelerApp.getViewConfigActionHandler();

        viewState = viewState.set("pivotConfig", Immutable.fromJS(newPivotState.pivotConfig));
        viewState = viewState.set("gridOptions", Immutable.fromJS(newPivotState.gridOptions));

        return viewConfigActionHandler.setViewState(viewId, viewState)
            .then(viewConfigActionHandler.saveViewState.bind(viewConfigActionHandler, viewId, viewState))
            .then(function() {
                return me.updateMAConfig(pivotState, "main");
            });
    };

    ModelerTestUtil.prototype.setSliceValue = function(pivotId, qualifiedName, value) {
        console.warn("DEPRECATED: ModelerTestUtil.setSliceValue, please use ModelerTestUtil.setSliceValues instead.");

        var slices = {};

        slices[qualifiedName] = value;

        return this.setSliceValues(pivotId, slices);
    };

    ModelerTestUtil.prototype.setSliceValues = function(pivotId, slices) {
        var me = this,
            newState = ch.storeSliceValues(this.getModelerState(), this.getPivotState(pivotId), slices);

        lodash.forEach(slices, function(value, qualifiedName) {
            if (!me.isInSliceOptions(pivotId, qualifiedName, value)) {
                throw new Error("Value \"" + value+ "\" not a slice option for " + qualifiedName);
            }
        });

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    ModelerTestUtil.prototype.isInSliceOptions = function(pivotId, qualifiedName, value) {
        var provider = this.getMultiAxisProvider(pivotId),
            zAxisHeading = provider.getHeadingData().getHeadingAxisInfo("Z"),
            isMeasures = cubiql.isMeasuresQualifiedName(qualifiedName),
            // for -:Measures, the field position is { "Sales": "Sales" } not { ":-Measures": "Sales" }
            positionKey = isMeasures ? value : qualifiedName,
            fieldPos = lodash.zipObject([positionKey],[{id: value }]),
            rowNums = zAxisHeading.findMatchingRowNums(fieldPos);

        return rowNums.length > 0;
    };

    /**
     * Returns list of ids of level members in slice options
     * @param  {string} pivotId
     * @param  {string} qualifiedName
     * @return {Array<String>}
     */
    ModelerTestUtil.prototype.getSliceOptions = function(pivotId, qualifiedName) {
        var provider = this.getMultiAxisProvider(pivotId),
            zAxisHeading = provider.getHeadingData().getHeadingAxisInfo("Z"),
            fieldHeadings = zAxisHeading.getHeadingForField(qualifiedName);

        if (fieldHeadings) {
            return fieldHeadings.getHeadingRange(0, fieldHeadings.getLength()).map(function(h) {
                return h.members[0];
            });
        }

        return [];
    };

    ModelerTestUtil.prototype.getMultiAxisProvider = function(viewId) {
        if (!this.$multiAxisProviders[viewId]) {
            this.$multiAxisProviders[viewId] = new MultiAxisProvider(
                viewId,
                this.modelerApp.getMultiAxisDataStore(),
                this.modelerApp.getMultiAxisConfigStore(),
                this.modelerApp.getMultiAxisConfigActionHandler(),
                this.modelerApp.getMultiAxisDataActionHandler(),
                this.getModelerState(),
                this.getPivotState(viewId),
                100, 100, this.updateNewPivotConfig);
        }

        return this.$multiAxisProviders[viewId];
    };

    /**
     * Call service
     * @param  {string} url     url of service. This will be passed to getServiceUrl
     * @param  {Object} message
     * @return {Promise}
     */
    ModelerTestUtil.prototype.callService = function(url, message) {
        return this.serviceCaller.callService(
            this.urlDriver.getServiceUrl(url), message || {});
    };

    ModelerTestUtil.prototype.destroy = function() {
        this.modelerApp.destroy();
        this.modelerApp = null;
        this.dev = null;
        this.$multiAxisProviders = null;
    };

    /**
     * Call action and refreshes active sheets.
     *
     * @param  {string} actionId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.callAction = function(actionId) {
        var me = this,
            modelerActionHandler = this.modelerApp.getModelerActionHandler();

        return modelerActionHandler.callAction(actionId)
            .then(function(resp) {
                return me.$queryActivePivots().then(function() {
                    return resp;
                });
            });
    };

    ModelerTestUtil.prototype.$markOtherPivotsAsInactive = function(pivotIds) {
        var me = this,
            activeIds = lodash.isArray(pivotIds) ? pivotIds : [ pivotIds ];

        Object.keys(this.$multiAxisProviders).forEach(function(pivotId) {
            if (!lodash.includes(activeIds, pivotId))
                me.$multiAxisProviders[pivotId].markViewAsInactive();
        });
    };

    ModelerTestUtil.prototype.$getActivePivots = function() {
        var macstore = this.modelerApp.getMultiAxisConfigStore();

        return Object.keys(this.$multiAxisProviders).filter(function(viewId) {
            return macstore.viewIsActive(viewId);
        });
    };

    ModelerTestUtil.prototype.$queryActivePivots = function() {
        var me = this,
            dev = this.dev;

        return Promise.all(me.$getActivePivots().map(function(pivotId) {
                return dev.querySheetById(pivotId);
        })).then(function() {
            return me.waitForResults();
        });
    };

    /**
     * Initializes the modeler application. Queries out things like the measure
     * model, actions, etc.
     *
     * @return {Promise} when everything is loaded
     */
    ModelerTestUtil.prototype.initialize = function() {
        var me = this,
            promise = Promise.resolve();

        if (me.$appConfig.username) {
            promise = me.modelerApp.getUserActionHandler().authenticate(me.$appConfig.username, me.$appConfig.password);
        }

        return promise.then(function() {
            return me.modelerApp.getModelerActionHandler().initializeModeler();
        });
    };

    ModelerTestUtil.prototype.disablePerformanceTiming = function() {
        util.disablePerformanceTiming();
    };

    ModelerTestUtil.prototype.enablePerformanceTiming = function() {
        util.enablePerformanceTiming();
    };

    ModelerTestUtil.prototype.$configureCanvas = function(canvasId) {
        var promiseResolve,
            promiseReject,
            viewConfigStore = this.modelerApp.getViewConfigStore(),
            promise = new Promise(function(resolve, reject) {
                promiseResolve = resolve;
                promiseReject = reject;
            });

        if (viewConfigStore.hasViewState(canvasId)) {
            return Promise.resolve();
        }

        viewConfigStore.once(canvasId, ViewConfigEvents.STATE_CHANGED, function() {
            promiseResolve();
        });

        this.modelerApp.getViewConfigActionHandler().loadView(canvasId, this.$skipLoadSaveViewState).catch(promiseReject);

        return promise;
    };

    /**
     * Queries all sheets for the given canvas id. Uses the given range for all
     * sheets in the canvas
     *
     * @param {String}   a sheet's JSON configuration, as you would store
     *                                in the workspace
     * @param {Object} [sheetRanges] an optional parameter that says what the range of each
     *                               sheet is. The key of the object is a sheet id and the value
     *                               is a MultiAxisRange. Otherwise, each sheet's range defaults to
     *                               {X: { start: 0, length: 50}, Y: { start: 0, length: 20 }}
     * @return {Promise} when all sheets for that canvas have been queried
     */
    ModelerTestUtil.prototype.queryCanvasById = function(canvasId, sheetRanges) {
        assert(this.modelerApp.getMeasureModelStore().getModel(), "Measure Model is not loaded, did you run initialize()?");

        var me = this;
        me.$markOtherPivotsAsInactive([]);

        return this.$loadViewState(canvasId).then(function() {
            var sheetIds = me.$findViewIdsOfType(canvasId, ViewConstants.Modules.Sheet);

            return Promise.all(sheetIds.map(function(sheetId) {
                return me.$loadViewState(sheetId).then(function(sheetConfig) {
                    var range = sheetRanges && sheetRanges[sheetId];
                    return me.$querySheetConfig(sheetConfig, range);
                });
            }));
        });
    };

    /**
     * Finds all Sheet views in the canvas.
     * @param  {string} canvasId
     * @return {string[]}
     */
    ModelerTestUtil.prototype.getSheetIdsForCanvas = function(canvasId){
        var canvasViewState = this.getViewState(canvasId);

        return canvasViewState && lodash.reduce(canvasViewState.views, function(sheetIds, view, id){
            if (view.module === ViewConstants.Modules.Sheet) {
                sheetIds.push(id);
            }

            return sheetIds;
        }, []);
    };

    /**
     * Triggers queries for all metrics and intersections for all sheets in a canvas.
     *
     * @param  {string} canvasId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.warmupCanvas = function(canvasId) {
        var me = this,
            measureUrl = this.urlDriver.urls.measureUrl;

        return me.$configureCanvas(canvasId).then(function() {
            return me.$setQueryConfigForCanvas(canvasId);
        }).then(function() {
            var multiAxisDataStore = me.modelerApp.getMultiAxisDataStore(),
                outstandingRequests = multiAxisDataStore.getOutstandingDataRequests(),
                dataRequest = outstandingRequests[0] && outstandingRequests[0].serviceRequest;
            return warmups.warmupMeasureQueries(measureUrl, dataRequest);
        });
    };

    /**
     * Generates warmup queries for all sheets in a canvas
     * @param  {String[]} canvasIds
     * @return {Promise<Query>}
     */
    ModelerTestUtil.prototype.generateWarmupQueries = function(canvasIds) {
        var me = this;

        return Promise.all(canvasIds.map(function(canvasId) {
            return me.$configureCanvas(canvasId).then(function() {
                return me.$setQueryConfigForCanvas(canvasId);
            });
        })).then(function() {
            var multiAxisDataStore = me.modelerApp.getMultiAxisDataStore(),
                outstandingRequests = multiAxisDataStore.getOutstandingDataRequests(),
                dataRequest = outstandingRequests[0] && outstandingRequests[0].serviceRequest;

            me.modelerApp.getMultiAxisConfigActionHandler().setViewInactive()
            return warmups.generateWarmupQueries(dataRequest);
        });
    };

    /**
     * Loads canvas' config into the multi axis config handler
     * @param  {string} canvasId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.$setQueryConfigForCanvas = function(canvasId) {
        var me = this,
            canvasViewState = this.getViewState(canvasId),
            sheetIds = this.$findViewIdsOfType(canvasId, ViewConstants.Modules.Sheet),
            canvasMeasureQueries = [];

        return Promise.all(sheetIds.map(function(sheetId) {
            var viewWarmupConfig = pch.pivotConfigToMultiAxisConfig(me.getModelerState(), sheetId, me.getPivotConfig(sheetId));

            return me.modelerApp.getMultiAxisConfigActionHandler().setViewTaskConfig(sheetId, "viewWarmup", {maConfig: viewWarmupConfig, isolatedData: true, isUnmasked: true}).then(function() {
                return me.modelerApp.getMultiAxisDataActionHandler().setViewTaskRange(sheetId, "viewWarmup", {});
            });
        }));
    };

    ModelerTestUtil.prototype.generateWarmupQueryForSheet = function(sheetId, sheetConfig) {
        var me = this,
            viewWarmupConfig = pch.pivotConfigToMultiAxisConfig(me.getModelerState(), sheetId, sheetConfig.pivotConfig).set("queryLevelFilterFlag", true);

        return me.modelerApp.getMultiAxisConfigActionHandler().setViewTaskConfig(sheetId, "viewWarmup", {maConfig: viewWarmupConfig, isolatedData: true, isUnmasked: true})
            .then(function() {
                return me.modelerApp.getMultiAxisDataActionHandler().setViewTaskRange(sheetId, "viewWarmup", {});
            })
            .then(function() {
                var multiAxisDataStore = me.modelerApp.getMultiAxisDataStore(),
                    outstandingRequests = multiAxisDataStore.getOutstandingDataRequests(),
                    dataRequest = outstandingRequests[0] && outstandingRequests[0].serviceRequest;

                return warmups.generateWarmupQueries(dataRequest);
            });
    };

    /**
     * Returns the pivotDefs a sheet. Assumes that sheets have been loaded in stores
     * @param  {string} sheetId
     * @return {PivotDef}
     */
    ModelerTestUtil.prototype.$getPivotDefFromSheet = function(sheetId) {
        var measureModel = this.modelerApp.getMeasureModelStore().getModel(),
            pivotStore = this.modelerApp.getPivotStore();

        var pivotOptions = pivotStore.getQueryOptions(sheetId),
            pivotDef = pivothelper.pivotOptionsToPivotDef(pivotOptions, measureModel, undefined, true);
        //console.log(Date.now() + "  ================== Sheet ID: ==================" + sheetId + "\n\n\n");
        return pivotDef;
    };

    /**
     * Given a sheet configuration, it will issue all required
     * queries for that sheet. Similar to how the modeler works in the browser,
     * this will only query level members if they have not been queried previously.
     *
     * @param  {Object} sheetConfig   a sheet's JSON configuration, as you would store
     *                                in the workspace
     * @param {MultiAxisRange} [range] an optional parameter that says what the range of the view is,
                                      defaults to {X: { start: 0, length: 50}, Y: { start: 0, length: 20 }}
     * @param {boolean} failOnError if this should fail on any query error. Defaults to true
     * @return {Promise}              a promise that is resolved when the queries are complete
     */
    ModelerTestUtil.prototype.$querySheetConfig = function(sheetConfig, range, failOnError) {
        var me = this,
            viewId = sheetConfig.id,
            viewRange = range || DEFAULT_RANGE,
            promise;

        this.$lastViewRange[viewId] = range;

        promise = this.initializeSheet(sheetConfig)
            .then(function() {
                return me.waitForResults(failOnError);
            })
            .then(function() {
                return me.getMultiAxisProvider(viewId).getDataRange(viewRange);
            })
            .then(function() {
                return me.waitForResults(failOnError);
            });

        promise.catch(util.logError);

        return promise;
    };

    /**
     * Initializes a sheet configuration. In particular, it ensures the measure
     * model and level members are loaded for the given configuration. Results
     * are cached such that calling this a second time for the same sheet
     * configuration should resolve immediately.
     *
     * @param  {Object|Immutable.Map} sheetConfig   a sheet's JSON configuration, as you would store
     *                                in the workspace
     * @return {Promise}              a promise that is resolved when the sheet is initialized
     */
    ModelerTestUtil.prototype.initializeSheet = function(sheetConfig) {
        var me = this,
            pivotId = sheetConfig.id,
            state = sheetConfig.pivotConfig;

        return this.modelerApp.getModelerActionHandler().loadPivotState(pivotId, state).then(function() {
            return me.modelerApp.getViewConfigActionHandler().setViewState(pivotId, sheetConfig);
        });
    };

    /**
     * Initializes a sheet configuration. In particular, it ensures the measure
     * model and level members are loaded for the given configuration. Results
     * are cached such that calling this a second time for the same sheet
     * configuration should resolve immediately. It also requests data for this sheet.
     *
     * @param  {Object|Immutable.Map} sheetConfig   a sheet's JSON configuration, as you would store
     *                                in the workspace
     * @return {Promise}              a promise that is resolved when the sheet is initialized and its data is loaded
     */
    ModelerTestUtil.prototype.initializeSheetAndLoadItsData = function(sheetConfig) {
        sheetConfig = Immutable.fromJS(sheetConfig);

        var sheetId = sheetConfig.get("id");

        return this.initializeSheet(sheetConfig)
            .then(this.updatePivotData.bind(this, sheetId))
            .then(this.$listenForPivotStateChanges.bind(this, sheetId));
    };

    /**
     * @param {boolean} failOnError if this should fail on any query error. Defaults to true
     * @return {Promise}
     */
    ModelerTestUtil.prototype.waitForResults = function(failOnError) {
        var multiAxisDataStore = this.modelerApp.getMultiAxisDataStore(),
            multiAxisDataActions = this.modelerApp.getMultiAxisDataActionHandler();


        if (lodash.isUndefined(failOnError)) {
            failOnError = true;
        }

        // a promise that only resolves when there are no more outstanding
        // edit or data requests
        return new Promise(function(resolve, reject) {
            /**
             * A separate function that checks to see if there are still outstanding
             * requests every time the data request timer fires and resolves the
             * promise. It needs be a named function so it can remove itself as a listener
             * on the multiAxisDataStore when it resolves.
             */
            function onTick() {
                var edits = multiAxisDataStore.getNextQueuedEdits(),
                    hasInflightEdits = multiAxisDataStore.hasInflightEdits(),
                    hasInflightEditability = multiAxisDataStore.hasInflightEditability(),
                    editabilityRequest,
                    outstandingRequests,
                    promises = [];

                if (edits && edits.length && !hasInflightEdits) {
                    promises.push(multiAxisDataActions.sendEdits(edits));
                } else if (!edits && !hasInflightEdits) {
                    outstandingRequests = multiAxisDataStore.getOutstandingDataRequests();
                    if (outstandingRequests.length > 0) {
                        promises.push(multiAxisDataActions.sendOutstandingDataRequests(outstandingRequests));
                    }
                }

                if (!hasInflightEditability) {
                    editabilityRequest = multiAxisDataStore.getOutstandingEditabilityRequest();
                    if (editabilityRequest) {
                        promises.push(multiAxisDataActions.sendEditabilityRequest(editabilityRequest));
                    }
                }

                if (failOnError) {
                    Promise.all(promises).catch(function(err) {
                        reject(err);
                    });
                }

                if (promises.length === 0 && !multiAxisDataStore.hasRunningQueries() && !hasInflightEdits && !hasInflightEditability) {
                    multiAxisDataStore.off(MultiAxisDataEvents.DATA_REQUEST_TIMER_FIRED, onTick);
                    resolve();
                }
            }

            multiAxisDataStore.on(MultiAxisDataEvents.DATA_REQUEST_TIMER_FIRED, onTick);
        });
    };

    /**
     * @param {String} pivotId
     * @param {String} metric
     * @param {Position} position
     */
    ModelerTestUtil.prototype.deleteCellByPos = function(pivotId, metric, position) {
        var coord = this.$calcCoordForValidation(pivotId, metric, position);

        return this.deleteCell(pivotId, coord);
    };

    /**
     * @param {String} pivotId
     * @param {{metric: {String}, position: {Position}}[]} metricPositions
     */
    ModelerTestUtil.prototype.deleteCellsByPos = function(pivotId, metricPositions) {
        var me = this,
            coords = metricPositions.map(function(metricPos) {
                return me.$calcCoordForValidation(pivotId, metricPos.metric, metricPos.position);
            });

        return this.deleteCells(pivotId, coords);
    };

    /**
     * Immediately deletes the given cell.
     *
     * @param  {String} pivotId the id of the pivot to edit
     * @param  {Coord}  coord   the cell coordinate to edit
     * @return {Promise}        when the deletes have been successfully committed to the server
     */
    ModelerTestUtil.prototype.deleteCell = function(pivotId, coord) {
        return this.deleteCells(pivotId, [coord]);
    };

    /**
     * Deletes multiple cells at once. Use this to test calculating multiple
     * deferred calc deletes.
     *
     * @param  {String} pivotId   the id of the pivot to edit
     * @param  {Coord[]} coords   the cell coordinate to edit
     * @return {Promise}          when the edits have been successfully committed to the server
     */
    ModelerTestUtil.prototype.deleteCells = function(pivotId, coords) {
        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(pivotId),
            previousCommitMode = multiAxisProvider.getCommitMode(); //save previous mode so we can switch back

        assert(this.$getActivePivots().indexOf(pivotId) > -1, "Sheet with id: " + pivotId  + " is not marked active. Cannot edit an inactive sheet.");

        //for plurals, always do in deferred to keep them together
        this.setDeferredCommitMode(pivotId);
        return Promise.all(coords.map(function(coord) {
                assert(coord, "Must specify a coordinate to delete.");
                assert(lodash.isNumber(coord.X), "X coordinate must be a number.");
                assert(lodash.isNumber(coord.Y), "Y coordinate must be a number.");
                multiAxisProvider.checkCoord(coord);

                return me.$moveToCoordIfNecessary(pivotId, coord).then(function() {
                    return multiAxisProvider.deleteCells([coord]);
                });
            }))
            .then(function() {
                multiAxisProvider.setCommitMode(previousCommitMode);
                if (previousCommitMode === CommitMode.SINGLE)
                    return multiAxisProvider.commit();
            })
            .then(function() {
                return me.waitForResults();
            });
    };

    ModelerTestUtil.prototype.setDeferredCommitMode = function(pivotId) {
        this.getMultiAxisProvider(pivotId).setCommitMode(CommitMode.DEFERRED);
    };

    ModelerTestUtil.prototype.setSingleEditCommitMode = function(pivotId) {
        this.getMultiAxisProvider(pivotId).setCommitMode(CommitMode.SINGLE);
    };

    /**
     * @param {String} pivotId
     * @param {String} metric
     * @param {Position} position
     * @param {Value} value
     * @param {String} force                              forces the edit. This allows us to
     *                                                    edit read only measures, which is useful
     *                                                    when setting up measure tests
     */
    ModelerTestUtil.prototype.editCellByPos = function(pivotId, metric, position, value, force) {
        var coord = this.$calcCoordForValidation(pivotId, metric, position);

        return this.editCell(pivotId, coord, value, force);
    };

    /**
     * Immediately edits the given cell.
     *
     * @param  {String} pivotId the id of the pivot to edit
     * @param  {Coord}  coord   the cell coordinate to edit
     * @param  {String} value   the new value
     * @param {String} force                              forces the edit. This allows us to
     *                                                    edit read only measures, which is useful
     *                                                    when setting up measure tests
     * @return {Promise}        when the edits have been successfully committed to the server
     */
    ModelerTestUtil.prototype.editCell = function(pivotId, coord, value, force) {
        // FIXME: force doesn't really do anything since ModelerTestUtil
        // does not respect the ReadOnly attributes of measures. Once
        // that is fixed, we should make force allow those edits.

        assert(coord, "Must specify a coordinate to edit.");
        assert(lodash.isNumber(coord.X), "X coordinate must be a number.");
        assert(lodash.isNumber(coord.Y), "Y coordinate must be a number.");

        return this.editCells(pivotId, [{ coord: coord, value: value }]);
    };

    /**
     * Edits multiple cells at once. Use this to test calculating multiple
     * deferred calc edits.
     *
     * @param  {String} pivotId                           the id of the pivot to edit
     * @param  {{coord:Coord, value:string}[]} edits      a list of edits
     * @param {String} force                              forces the edit. This allows us to
     *                                                    edit read only measures, which is useful
     *                                                    when setting up measure tests
     * @return {Promise} when the edits have been successfully committed to the server
     */
    ModelerTestUtil.prototype.editCells = function(pivotId, edits, force) {
        // FIXME: force doesn't really do anything since ModelerTestUtil
        // does not respect the ReadOnly attributes of measures. Once
        // that is fixed, we should make force allow those edits.

        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(pivotId),
            previousCommitMode = multiAxisProvider.getCommitMode(); //save previous mode so we can switch back

        assert(this.$getActivePivots().indexOf(pivotId) > -1, "Sheet with id: " + pivotId  + " is not marked active. Cannot edit an inactive sheet.");

        edits.forEach(function(edit) {
            $assertEditIsValid(edit);

            if (!edit.coord)
                edit.coord = me.$calcCoordForValidation(pivotId, edit.metric, edit.position);
        });

        //for plurals, always do in deferred to keep them together
        this.setDeferredCommitMode(pivotId);
        return Promise.all(edits.map(function(edit) {
                //multiAxisProvider.checkCoord(edit.coord);

                return me.$moveToCoordIfNecessary(pivotId, edit.coord).then(function() {
                    return multiAxisProvider.editCells([edit]);
                });
            }))
            .then(function() {
                multiAxisProvider.setCommitMode(previousCommitMode);
                if (previousCommitMode === CommitMode.SINGLE)
                    return multiAxisProvider.commit();
            })
            .then(function() {
                return me.waitForResults();
            });
    };

    /**
     * Locks multiple cells at once.
     *
     * @param  {String} pivotId the id of the pivot
     * @param  {{coord:Coord}[]} locks a list of locked cells
     * @return {Promise}
     */
    ModelerTestUtil.prototype.lockCells = function (pivotId, locks) {
        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(pivotId);

        assert(this.$getActivePivots().indexOf(pivotId) > -1, "Sheet with id: " + pivotId  + " is not marked active. Cannot edit an inactive sheet.");

        locks.forEach(function (lock) {
            $assertEditIsValid(lock);

            if (!lock.coord)
                lock.coord = me.$calcCoordForValidation(pivotId, lock.metric, lock.position);
        });

        return Promise.all(lodash.map(locks, function (lock) {
                multiAxisProvider.checkCoord(lock.coord);
                return me.$moveToCoordIfNecessary(pivotId, lock.coord).then(function () {
                    return {
                        X: {
                            start: lock.coord.X,
                            length: 1
                        },
                        Y: {
                            start: lock.coord.Y,
                            length: 1
                        }
                    };
                });
            }))
            .then(function(cellRanges) {
                return Promise.all(cellRanges.map(function(cellRange) {
                    return multiAxisProvider.setLock(cellRange);
                }));
            })
            .then(function () {
                return me.waitForResults();
            });
    };

    /**
     * Unlock multiple cells at once.
     *
     * @param  {String} pivotId the id of the pivot
     * @param  {{coord:Coord}[]} locks a list of locked cells
     * @return {Promise}
     */
    ModelerTestUtil.prototype.unlockCells = function (pivotId, locks) {
        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(pivotId);

        assert(this.$getActivePivots().indexOf(pivotId) > -1, "Sheet with id: " + pivotId  + " is not marked active. Cannot edit an inactive sheet.");

        locks.forEach(function (lock) {
            $assertEditIsValid(lock);

            if (!lock.coord)
                lock.coord = me.$calcCoordForValidation(pivotId, lock.metric, lock.position);
        });

        return Promise.all(lodash.map(locks, function (lock) {
                multiAxisProvider.checkCoord(lock.coord);
                return me.$moveToCoordIfNecessary(pivotId, lock.coord).then(function () {
                    return {
                        X: {
                            start: lock.coord.X,
                            length: 1
                        },
                        Y: {
                            start: lock.coord.Y,
                            length: 1
                        }
                    };
                });
            }))
            .then(function(cellRanges) {
                return Promise.all(cellRanges.map(function(cellRange) {
                    return multiAxisProvider.unsetLock(cellRange);
                }));
            })
            .then(function () {
                return me.waitForResults();
            });
    };

    /**
     * Commits the pending edits in a pivot
     *
     * @param {String} pivotId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.commit = function(pivotId) {
        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(pivotId);

        return multiAxisProvider.commit().then(function() {
            return me.waitForResults();
        });
    };

    ModelerTestUtil.prototype.$calcCoordForValidation = function(pivotId, metric, position) {
        var multiAxisProvider = this.getMultiAxisProvider(pivotId),
            onSlice = multiAxisProvider.positionOnCurrentSlice(position, metric),
            coord = multiAxisProvider.findCoordForPosition(metric, position);

        assert(onSlice, "Position " + metric + " @ " + JSON.stringify(position) + " is not in the current slice of " + pivotId);
        assert(coord, "Could not find position: " + JSON.stringify(position) + " for metric " + metric + " on sheet " + pivotId);

        Object.keys(coord).forEach(function(axisName) {
            assert(!lodash.isUndefined(coord[axisName]), "Unable to find coordinate on axis " + axisName + " for position " + metric + " @ " + JSON.stringify(position));
        });

        return coord;
    };

    ModelerTestUtil.prototype.calcCoordForPosition = function(pivotId, metric, position) {
        var me = this;

        return me.$calcCoordForValidation(pivotId, metric, position);
    };

    /**
     * Returns promise that resolves in a list of the actual cells that correspond to each in a list of validations for a sheet.  Primarily differs from validateCell
     * in that it returns a promise and also automatically moves the sheet (if necessary) to put the coordinate of a validation in view.
     *
     * Only works with the jasmine testing framework.
     *
     * @param  {String} sheetId                       the sheet id whose values we are checking
     * @param  {Validation|Validation[]} validation   a validation or list of validations
     * @return {Promise}
     */
    ModelerTestUtil.prototype.getCells = function(sheetId, validations) {
        assert(!lodash.isUndefined(expect), "The 'expect' function was not found. validateCell only works when using the Jasmine test framework.");
        validations = lodash.isArray(validations) ? validations : [ validations ];
        var me = this,
            multiAxisDataProvider = this.getMultiAxisProvider(sheetId),
            checkPromise = Promise.resolve(), //starting the chain off with an always succeeding promise
            actualCells = [];

        //remap any validations that don't have coordinates to get their coordinate
        validations = validations.map(function(validation) {
            $assertValidationIsSufficient(validation);
            if (lodash.isUndefined(validation.coord)) {
                validation.coord = me.$calcCoordForValidation(sheetId, validation.metric, validation.position);
            }

            return validation;
        });

        //progressively build up the chain in sequence.
        //NOTE: the reason this isn't a Promise.all is because the sheets cannot be moved in-tandem to two different
        //ranges (obviously that makes no physical sense but also the multiAxisDataStore doesn't support it).  Therefore the
        //validations are built up as a chain in sequence
        validations.forEach(function(validation) {
            checkPromise = checkPromise.then(function() {
                return me.$moveToCoordIfNecessary(sheetId, validation.coord).then(function() {
                    actualCells.push(multiAxisDataProvider.cloneCellData((multiAxisDataProvider.getCellData(validation.coord))));
                });
            });
        });

        return checkPromise.then(function() {
            return actualCells;
        });
    };

    function $assertEditIsValid(edit) {
        if (!edit.coord) {
            assert(!lodash.isUndefined(edit.metric) && !lodash.isUndefined(edit.position), "Edit either must specify the coord or both metric and position");
        } else {
            assert(lodash.isNumber(edit.coord.X), "X coordinate must be a number.");
            assert(lodash.isNumber(edit.coord.Y), "Y coordinate must be a number.");
        }
    }

    function $assertValidationIsSufficient(validation) {
        if (!validation.coord)
            assert(!lodash.isUndefined(validation.metric) && !lodash.isUndefined(validation.position), "Validation either must specify the coord or both metric and position");
    }

    /**
     * @typedef {Object} Validation
     * @property {Coord} coord     the X/Y value of the cell to check (optional if position provided)
     * @property {Object} position key value pairs where the keys are qualified levels
     *                         and the values are the actual position for the level (optional if coord provided, but is checked if provided)
     * @property {String} metric the metric name of the cell.  This is optional if the coord is provided, but is checked if provided.
     * @property {Any} value       the value that we expect the cell will contain, undefined
     *                         is an acceptable value
     */

    /**
     * Used during testing to validate current cell values against expected values.
     * Only works with the jasmine testing framework.
     *
     * NOTE: Only validations pointing to cells currently visible on the sheet will work.  If any validations
     * are not visible on the current sheet, an error will be thrown instead.  This is true for either
     * position- or coordinate-based testing.
     *
     * @param  {String} sheetId                       the sheet id whose values we are checking
     * @param  {Validation|Validation[]} validation   a validation or list of validations
     */
    ModelerTestUtil.prototype.validateCell = function(sheetId, validation) {
        assert(jasmine, "ModelerTestUtil.validateCell can only be used in the jasmine runner (either directly or indirectly through e.g. karma).");
        assert(!lodash.isUndefined(expect), "The 'expect' function was not found. validateCell only works when using the Jasmine test framework.");

        var me = this,
            multiAxisProvider = this.getMultiAxisProvider(sheetId),
            validations = (lodash.isArray(validation) ? validation : [ validation ]).map(function(v) {
                var newV = lodash.cloneDeep(v);
                if (!newV.coord)
                    newV.coord = me.$calcCoordForValidation(sheetId, v.metric, v.position);

                return newV;
            });

        /* globals expect */
        expect(validations.map(function(v) {
            return multiAxisProvider.getCellData(v.coord);
        })).toMatchCells(validations);
    };

    /**
     * A helper function for getting a value for a particular cell.
     *
     * @param  {String} sheetId
     * @param  {Coord} coord
     * @param  {String} [dataName]  the name of the data attribute to retrieve, defaults
     *                              to "value".
     * @param  {DATA_SHAPES} [dataShape] The shape of the data to return, defaults
     *                                  to DATA_SHAPE.SINGLE.
     * @return {Any}
     */
    ModelerTestUtil.prototype.getCellValue = function(sheetId, coord, dataName, dataShape) {
        var cellData = this.getCellData(sheetId, coord),
            dataCfgName = dataName || "value",
            cellValue = cellData.data.value[dataCfgName];

        switch(dataShape) {
            case DATA_SHAPES.TABLE:
                return cellValue;
            case DATA_SHAPES.MULTI:
                return {
                    rawValue: cellValue.rawValue[0],
                    formattedValue: cellValue.formattedValue[0]
                };
            default:
                return {
                    rawValue: cellValue.rawValue[0][0],
                    formattedValue: cellValue.formattedValue[0][0]
                };
        }

    };

    ModelerTestUtil.prototype.getCellData = function(sheetId, coord) {
        var multiAxisProvider = this.getMultiAxisProvider(sheetId);

        return multiAxisProvider.getCellData(coord);
    };

    ModelerTestUtil.prototype.getCellInfo = function(sheetId, coord) {
        var multiAxisProvider = this.getMultiAxisProvider(sheetId);
        return multiAxisProvider.getCellData(coord).cellInfo;
    };

    function $coordInRange(coord, range) {
        var inRange = true;
        Object.keys(coord).forEach(function(axisName) {
            var axisRange = range[axisName],
                axisCoord = coord[axisName];

            if (axisCoord < axisRange.start || axisCoord > axisRange.start + axisRange.length)
                inRange = false;
        });

        return inRange;
    }

    ModelerTestUtil.prototype.getCurrentRange = function(sheetId) {
        return this.$lastViewRange[sheetId];
    };

    ModelerTestUtil.prototype.$moveToCoordIfNecessary = function(sheetId, coord) {
        var currentRange = this.getCurrentRange(sheetId) || DEFAULT_RANGE,
            inRange = $coordInRange(coord, currentRange),
            sheetConfig = this.getViewState(sheetId),
            newRange;

        assert(!lodash.isUndefined(sheetConfig), "Sheet with id: " + sheetId + " could not be found.");

        //If we aren't already in range, make a new range with the same length
        //and query it
        if (!inRange) {
            newRange = {};

            Object.keys(currentRange).forEach(function(axisName) {
                newRange[axisName] = { start: coord[axisName], length: currentRange[axisName].length };
            });
            return this.$querySheetConfig(sheetConfig, newRange);
        } else {
            return Promise.resolve();
        }
    };

    /**
     * Returns the dropdown options in a given cell
     *
     * @param  {String} sheetId the sheet for which to get the options
     * @param  {Coord} coord   the cell coordinate
     * @return {Promise}
     */
    ModelerTestUtil.prototype.getCellOptions = function(sheetId, coord) {
        var provider = this.getMultiAxisProvider(sheetId),
            cellData = provider.getCellData(coord),
            cellOptionIds = cellData.data.optionIds.value.rawValue,
            cellOptionLabels = cellData.data.optionLabels.value.rawValue,
            cellOptionSort = cellData.data.optionSort.value.rawValue,
            cellOptionFilter = cellData.data.optionFilter && cellData.data.optionFilter.value.rawValue,
            findRowValueByKey = function(optData, id) {
                var i = 0,
                    len = optData.length,
                    row;
                for (; i < len; i++) {
                    row = optData[i];
                    if (row[0] == id) return row[1];
                }
            },
            options = [];

        //comically slow implementation, need to use utility for joining better
        cellOptionIds.forEach(function(row, i) {
            var id = row[1],
                filter;
            if (cellOptionFilter)
                if (!findRowValueByKey(cellOptionFilter, id)) return; //skip these filtered rows

            options.push({
                id: id,
                label: findRowValueByKey(cellOptionLabels, id),
                sort: cellOptionSort && findRowValueByKey(cellOptionSort, id)
            });
        });

        //TODO doesn't account for directionality
        return lodash.sortBy(options, function(opt) {
            return opt.sort;
        }).map(function(opt) {
            //drop sort key
            return {
                id: opt.id,
                label: opt.label
            };
        });
    };

    /**
     * Returns the dropdown options in a given cell
     *
     * @param  {String} sheetId the sheet for which to get the options
     * @param  {Coord} coord   the cell coordinate
     * @return {Promise}
     */
    ModelerTestUtil.prototype.getCellOptionIds = function(sheetId, coord) {
        var provider = this.getMultiAxisProvider(sheetId),
            cellData = provider.getCellData(coord);

        return cellData.data.optionIds.value.rawValue;
    };

    /**
     * Returns the dropdown options in a given cell
     *
     * @param  {String} sheetId the sheet for which to get the options
     * @param  {Coord} coord   the cell coordinate
     * @return {Promise}
     */
    ModelerTestUtil.prototype.getCellOptionLabels = function(sheetId, coord) {
        var provider = this.getMultiAxisProvider(sheetId),
            cellData = provider.getCellData(coord);

        return cellData.data.optionLabels.value.rawValue;
    };

    /**
     * Removes a field from a pivot
     *
     * @param  {String} pivotId            the id of the pivot table into which to move
     *                                     the field
     * @param  {String} fieldName          the name of the field to move
     * @return {Promise}                   when the field has been moved
     */
    ModelerTestUtil.prototype.removeField = function(pivotId, fieldName) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            field = ch.getField(oldState, fieldName),
            newState = ch.removeField(this.getModelerState(), this.getPivotState(pivotId), field);

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
     * Moves a field onto the given axis
     *
     * @param  {String} pivotId            the id of the pivot table into which to move
     *                                     the field
     * @param  {String} fieldName          the name of the field to move
     * @param  {String} axis               the axis onto which to place the field
     * @param  {String} [before]           the name of the field to place this field before
     * @param  {Boolean} [showRollup]      whether or not to show the field as a rollup
     * @param  {Boolean} [hideOutline]     whether or not to hide the outline
     * @return {Promise}                   when the field has been moved
     */
    ModelerTestUtil.prototype.moveField = function(pivotId, fieldName, axis, before, showRollup, hideOutline) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            modelerState = this.getModelerState(),
            field = ch.getField(oldState, fieldName) || modstate.fields.getFieldFromQualifiedName(modelerState.fields, fieldName),
            beforeField = before ? ch.getField(oldState, before) : undefined,
            newState = ch.moveField(this.getModelerState(), this.getPivotState(pivotId), field, axis, beforeField);

        if (showRollup) {
            newState = ch.setRollupForField(newState, field, "DEFAULT", axis);
        }

        if (hideOutline) {
            newState = ch.disableOutlineForField(newState, field, axis);
        }

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
     * Resets a user's version config for a sheet back to the original version
     *
     * @param  {String} sheetId
     * @return {Promise}
     */
    ModelerTestUtil.prototype.resetSheetConfig = function(sheetId) {
        var me = this,
            viewConfigActionHandler = this.modelerApp.getViewConfigActionHandler(),
            viewConfigStore = this.modelerApp.getViewConfigStore(),
            dev = this.dev;

        return viewConfigActionHandler.resetViewState(sheetId).then(function() {
            return me.$skipLoadSaveViewState ? Promise.resolve() : viewConfigActionHandler.saveViewState(sheetId, viewConfigStore.getViewState(sheetId));
        }).then(function() {
            var viewState = viewConfigStore.getViewState(sheetId);
            return dev.queryForSheet(viewState.toJSON());
        });
    };

    /**
     * Applies a level filter to a pivot configuration
     *
     * @param {String} sheetId
     * @param {String} fieldName
     * @param {String[]} filteredValues - the list of ids to show
     * @return {Promise}
     */
    ModelerTestUtil.prototype.setFilter = function(pivotId, fieldName, filteredValues) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            newState = ch.setFilter(oldState, fieldName, filteredValues);

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
     * Applies a level filter to a pivot configuration
     *
     * @param {String} sheetId
     * @param {String} fieldName
     * @param {String} sortType
     * @param {String} [sortAttr] defaults to whatever is configured for the level,
     *                            typically "label" or "order"
     * @return {Promise}
     */
    ModelerTestUtil.prototype.setSort = function(pivotId, fieldName, sortType, sortAttr) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            newState = ch.setSort(oldState, fieldName, sortType, sortAttr);

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
     * Sets the list of rollups on a dimension for a given pivot id.
     *
     * @param {String} pivotId       the id of the pivot on which to set rollups
     * @param {String} fieldName the name of the field name to set a rollup for
     * @param {String} [rollupMethod] rollup method name, 'DEFAULT' by default.
     *
     * @return {Promise} when the rollups have been added
     */
    ModelerTestUtil.prototype.setRollup = function(pivotId, fieldName, rollupMethod) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            field = ch.getField(oldState, fieldName),
            newState = ch.setRollupForField(oldState, field, rollupMethod || "DEFAULT");

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
    * Set the configuration for sort-by-measure-value.
    *
    * @param {String} pivotId
    * @param {String} metricName, the metric to sort
    * @param {String} floatingAxis, the axis "x" or "y" that contains the floatingLevel
    * @param {cubiql.MemberValue[]} sortPositions, positions from the sort axis in the column or row that's selected for sorting by measure value
    * @param {String} sortOrder
    */
    ModelerTestUtil.prototype.setSortByMeasureValue = function(pivotId, metricName, floatingAxis, sortPositions, sortOrder) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            newState = ch.setSortByMeasureValue(this.getModelerState(), oldState, metricName, floatingAxis, sortPositions, sortOrder);

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };

    /**
     * Apply a measure value filter to the pivot
     * @param {String} pivotId        the id of the pivot to filter
     * @param {String} qualifiedName  the qualified name of the measure to filter
     * @param {Object} filter         the configuration object for filtering the values
     * @param {boolean} filter.inclusive whether or not the results should include the min or max value,
     *                                   e.g. use >= or <= instead of > or <
     * @param {Number} filter.min        the minimum value to allow
     * @param {Number} filter.max        the maximum value to allow
     * @param {boolean} filter.name      either the measure name or the string "custom"
     *                                   to indicate that it is filtering out empty values
     */
    ModelerTestUtil.prototype.setMeasureFilter = function(pivotId, qualifiedName, filter) {
        var me = this,
            oldState = this.getPivotState(pivotId),
            newState = ch.setMeasureFilter(oldState, qualifiedName, filter);

        return this.updateNewPivotConfig(newState)
            .then(function() {
                var currentRange = me.getCurrentRange(pivotId) || DEFAULT_RANGE;
                return me.dev.querySheetById(pivotId, currentRange);
            });
    };


    module.exports = ModelerTestUtil;

},{"../logicblox.pivot/constant":191,"../logicblox.pivot/cubiql":211,"../logicblox.pivot/modelerapp":238,"../logicblox.pivot/modelerstate":239,"../logicblox.pivot/pivotconfig_helper":255,"../logicblox.pivot/store/multiaxisdatastore":271,"../logicblox.pivot/util":280,"../logicblox.pivot/util/servicecaller":284,"../logicblox.pivot/util/warmups":286,"../logicblox.pivot/view/multiaxisprovider":288,"../logicblox.pivot/view/pivot/config_helper":289,"./devtestutil":296,"./jasminematchers":297,"./workspaceutils":301,"assert":undefined,"immutable":44,"inherits":45,"lodash":90,"pivottable/src/constants":116}],299:[function(require,module,exports){
"use strict";

var testutils = require("./test_utils");
var WorkspaceUtils = require("./workspaceutils");
var CubiqlUtil = require("./cubiqlutil");
var CubiqlTestBuilder = require("./cubiqltestbuilder");

function RuleTestHelper(config) {
    var appPrefix = config.appPrefix,
        workspace = config.workspace;

    this.$appPrefix = appPrefix;
    this.$workspace = workspace;
    this.$testWorkspace = WorkspaceUtils.buildTestWorkspace(appPrefix, workspace);
    this.$connectblox = testutils.buildConnectBlox(appPrefix, workspace);
}

RuleTestHelper.prototype.newCubiqlTestBuilder = function() {
    var appPrefix = this.$appPrefix,
        workspace = this.$workspace,
        cubiqlUtil = new CubiqlUtil(appPrefix + "/measure", workspace),
        connectblox = this.$connectblox;

    return CubiqlTestBuilder.newBuilder(cubiqlUtil, connectblox);
};

RuleTestHelper.prototype.useTestBranch = function() {
    var testWorkspace = this.$testWorkspace;
    return testWorkspace.useTestBranch().catch(testutils.fail);
};

RuleTestHelper.prototype.revertTestBranch = function() {
    var testWorkspace = this.$testWorkspace;
    return testWorkspace.revertTestBranch().catch(testutils.fail);
};

RuleTestHelper.prototype.setJasmineTimeout = function(jasmine, timeout) {
    this.revertJasmineTimeout = testutils.setJasmineTimeout(jasmine, timeout);
};

module.exports = RuleTestHelper;

},{"./cubiqltestbuilder":294,"./cubiqlutil":295,"./test_utils":300,"./workspaceutils":301}],300:[function(require,module,exports){
/**
 * A module to house all the various helper functions used in the modeler-js tests.
 * Any utility functions that would also be useful to consumers of the modeler, i.e.
 * a client project, should be placed in modelertestutil.
 */

/* eslint-env jasmine */

    "use strict";

    var lodash = require("lodash");
    var Immutable = require("immutable");

    var util = require("../logicblox.pivot/util");
    var cubiql = require("../logicblox.pivot/cubiql");
    var ModelerApp = require("../logicblox.pivot/modelerapp");
    var ConnectBlox = require("../logicblox.connectblox/connect").ConnectBlox;
    var UrlDriver = require("../logicblox.pivot/urldriver").UrlDriver;
    var Dispatcher = require("../logicblox.pivot/dispatcher").Dispatcher;
    var MeasureModelStore = require("../logicblox.pivot/store/measuremodelstore").MeasureModelStore;
    var PivotConfigStore = require("../logicblox.pivot/store/pivotconfigstore").PivotConfigStore;
    var FieldStore = require("../logicblox.pivot/store/fieldstore").FieldStore;

    var MeasureModel = require("../logicblox.pivot/measuremodel");
    var MQG = require("measure-query-gen/src/MQG");

    var querygen = require("../logicblox.pivot/querygen/query");
    var ms = require("../logicblox.pivot/modelerstate");

    function parseInterStr(interStr) {
        var tokens = interStr === "" ? [] : interStr.split(","),
            levels = tokens.map(function(tok) {
                return cubiql.parseDimLvl(tok, true);
            }).filter(function(ql) {
                return ql.level !== "ALL";
            });

        return new MQG.Intersection(levels);
    }

    function getMetricValues(metricName, interStr, resultObj) {
        var proc = resultObj.responseProcessor,
            resp = resultObj.result,
            inter = parseInterStr(interStr);

        return proc.getMetricValues(metricName, inter, resp);
    }

    function getSortValues(interStr, resultObj) {
        var proc = resultObj.responseProcessor,
            resp = resultObj.result,
            inter = parseInterStr(interStr);
        
        return proc.getSortColumn(inter, resp).values;
    }

    function getMetricValueAt(metricName, interStr, keys, resultObj) {
        var proc = resultObj.responseProcessor,
            resp = resultObj.result,
            inter = parseInterStr(interStr);
        
        return proc.getMetricForKeys(metricName, inter, keys, resp).value;
    }

    function getAttributeValues(name, qlStr, interStr, resultObj) {
        var proc = resultObj.responseProcessor,
            resp = resultObj.result,
            inter = parseInterStr(interStr),
            ql = parseInterStr(qlStr).qualified_level[0];
        
        return proc.getAttributeValues(name, ql, inter, resp);
    } 

    function numCompare(x, y) {
        return x - y;
    }

    function expectSortEqual(arr1, arr2, comp) {
        if (comp)
            expect(arr1.sort(comp)).toEqual(arr2.sort(comp));
        else
            expect(arr1.sort()).toEqual(arr2.sort());
    }

    function failAndLogCallStack(msg) {
        if (msg && msg.stack) {
            //log the error if it is more than a string, b/c we want stack traces
            util.logError(msg);
        }

        fail(msg);
    }

    function createMockModelerState() {
        var dispatcher = new Dispatcher(),
            measureModelStore = new MeasureModelStore(dispatcher),
            pivotConfigStore = new PivotConfigStore(dispatcher),
            fieldStore = new FieldStore(dispatcher, measureModelStore, pivotConfigStore);

        measureModelStore.$setModel(MOCK_MODEL.$model.toJS());
        pivotConfigStore.$setConfig(MOCK_PIVOT_CONFIG);
        fieldStore.$update();
        
        return ms.createModelerStateFromStores(fieldStore, measureModelStore, pivotConfigStore);
    }

    var MOCK_MODEL = new MeasureModel(Immutable.fromJS(
        {
            "aggregation": [{
                "name": "nonecal_totloc_totprod",
                "method": {
                    "composite": [{
                        "dimension": "Location",
                        "primitive": "TOTAL",
                        "label": "Location"
                    }, {
                        "dimension": "Product",
                        "primitive": "TOTAL",
                        "label": "Product"
                    }]
                }
            }],            
            "dimension": [
                {
                    "name": "Location",
                    "level": [
                        { "name": "city",   type:{kind:"NAMED",named:"model:hierarchy:location:city"},   "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:location:city_name",volatile:false},   "type": { "kind": "STRING" } } ] },
                        { "name": "region", type:{kind:"NAMED",named:"model:hierarchy:location:region"}, "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:location:region_name",volatile:false}, "type": { "kind": "STRING" } } ] },
                        { "name": "state",  type:{kind:"NAMED",named:"model:hierarchy:location:state"},  "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:location:state_name",volatile:false},  "type": { "kind": "STRING" } } ] },
                        { "name": "store",  type:{kind:"NAMED",named:"model:hierarchy:location:store"},  "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:location:store_name",volatile:false},  "type": { "kind": "STRING" } } ] }
                    ],
                    "hierarchy": [
                        {
                            "name": "Default",
                            "path": [
                                { "level": "store", "pred": {"name": "store_in_city"} },
                                { "level": "city",  "pred": {"name": "city_in_state"} },
                                { "level": "state", "pred": {"name": "state_in_region"} },
                                { "level": "region" }
                            ]
                        }
                    ],
                    "default_hierarchy": "Default"
                },
                {
                    "name": "Product",
                    "level": [
                        { "name": "class",    type:{kind:"NAMED",named:"model:hierarchy:product:class"},    "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:product:class_name",volatile:false},    "type": { "kind": "STRING" } } ] },
                        { "name": "sku",      type:{kind:"NAMED",named:"model:hierarchy:product:sku"},      "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:product:sku_name",volatile:false},      "type": { "kind": "STRING" } } ] },
                        { "name": "subclass", type:{kind:"NAMED",named:"model:hierarchy:product:subclass"}, "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:product:subclass_name",volatile:false}, "type": { "kind": "STRING" } } ] },
                        { "name": "brand",    type:{kind:"NAMED",named:"model:hierarchy:product:brand"},    "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:product:brand_name",volatile:false},    "type": { "kind": "STRING" } } ] },
                        { "name": "color",    type:{kind:"NAMED",named:"model:hierarchy:product:color"},    "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:product:color_name",volatile:false},    "type": { "kind": "STRING" } } ] }
                    ],
                    "hierarchy": [
                        {
                            "name": "Brand",
                            "path": [
                                { "level": "sku", "pred": {"name": "sku_in_brand"} },
                                { "level": "brand" }
                            ]
                        },
                        {
                            "name": "Default",
                            "path": [
                                { "level": "sku",      "pred": {"name": "sku_in_subclass"} },
                                { "level": "subclass", "pred": {"name": "subclass_in_class"} },
                                { "level": "class" } ]
                        },
                        {
                            "name": "Color",
                            "path": [
                                { "level": "sku", "pred": {"name": "sku_color"} },
                                { "level": "color" }
                            ]
                        }
                    ],
                    "default_hierarchy": "Default"
                },
                {
                    "name": "Calendar",
                    "level": [
                        { "name": "day",   type:{kind:"NAMED",named:"model:hierarchy:calendar:day"},   "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:calendar:day_id",volatile:false},   "type": { "kind": "STRING" } } ] },
                        { "name": "week",  type:{kind:"NAMED",named:"model:hierarchy:calendar:week"},  "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:calendar:week_id",volatile:false},  "type": { "kind": "STRING" } } ] },
                        { "name": "month", type:{kind:"NAMED",named:"model:hierarchy:calendar:month"}, "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:calendar:month_id",volatile:false}, "type": { "kind": "STRING" } } ] },
                        { "name": "year",  type:{kind:"NAMED",named:"model:hierarchy:calendar:year"},  "attribute": [ { "name": "id", predicate:{name:"model:hierarchy:calendar:year_id",volatile:false},  "type": { "kind": "STRING" } } ] }
                    ],
                    "hierarchy": [
                        {
                            "name": "Default",
                            "path": [
                                { "level": "day",   "pred": {"name": "day_in_month"} },
                                { "level": "month", "pred": {"name": "month_in_year"} },
                                { "level": "year" }
                            ]
                        },
                        {
                            "name": "Week_first",
                            "path": [
                                { "level": "day", "pred": {"name": "day_in_week_first"} },
                                { "level": "week" }
                            ]
                        },
                        {
                            "name": "Week",
                            "path": [
                                { "level": "day", "pred": {"name": "day_in_week"} },
                                { "level": "week" }
                            ]
                        },
                        {
                            "name": "Week_last",
                            "path": [
                                { "level": "day", "pred": {"name": "day_in_week_last"} },
                                { "level": "week" }
                            ]
                        }
                    ],
                    "default_hierarchy": "Default"
                }
            ],
            "metric": [
                {
                    "name": "Netsales",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "predicate": { "name": "netsales_daily" }
                },
                {
                    "name": "Returns",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "predicate": { "name": "returns_daily" }
                },
                {
                    "name": "Sales",
                    "caption": "Sales",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "agg_method": { primitive: "TOTAL" },
                    "predicate": { "name": "sales_daily" }
                },
                {
                    "name": "PlanTY",
                    "caption": "PlanTY",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "agg_method": { primitive: "TOTAL" },
                    "predicate": { "name": "model:measures:sales:pln_sales_ty" }
                },
                {
                    "name": "PlanTYPctProd",
                    "caption": "Plan TY % (Prod)",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku", "label": "Child" },
                                    { "dimension": "Product",  "level": "sku", "label": "Parent" },
                                    { "dimension": "Location", "level": "store" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "recalc": { "rule_name": "PlanTYPctProd" },
                },
                {
                    "name": "PlanTYPctLoc",
                    "caption": "Plan TY % (Loc)",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store", "label": "Child"  },
                                    { "dimension": "Location", "level": "store", "label": "Parent"  }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "recalc": { "rule_name": "PlanTYPctLoc" },
                },
                {
                    "name": "Str",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": {kind: "STRING"}
                            }
                        }
                    },
                    // "agg_method": {primitive: "MIN"},
                    "predicate": { "name": "model:measures:str:daily" }
                },
                {
                    "name": "StoreSize",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Location", "level": "store" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": {kind: "INT"}
                            }
                        }
                    },
                    "agg_method": {primitive: "TOTAL"},
                    "predicate": { "name": "model:hierarchy:location:store_size" }
                },
                {
                    "name": "PctParentSales",
                    "caption": "Sales %",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku", "label": "Child" },
                                    { "dimension": "Product",  "level": "sku", "label": "Parent" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "recalc": { "rule_name": "SalesPctParent" },
                },
                {
                    "name": "PctParentSales2",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku", "label": "Child2" },
                                    { "dimension": "Product",  "level": "sku", "label": "Parent2" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "recalc": { "rule_name": "SalesPctParent2" },
                },
                {
                    "name": "NetsalesComputed",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "recalc": { "rule_name": "NetsalesComputed" },
                },
                {
                    "name": "EmptyMetric",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "agg_method": { primitive: "TOTAL" },
                    "predicate": { "name": "model:measures:empty:daily" }
                },
                {
                    "name": "PromoPriceOnline",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [{
                                    "label": "Product",
                                    "dimension": "Product",
                                    "level": "sku"
                                }, {
                                    "label": "Calendar",
                                    "dimension": "Calendar",
                                    "level": "week"
                                }]
                            },
                            "type": {
                                "kind": "SET",
                                "type": {
                                    "kind": "DECIMAL"
                                }
                            }
                        }
                    },
                    "predicate": {
                        "name": "model:measures:promo:online_price",
                        "is_disjunctive_view": false
                    },
                    "agg_method": {
                        "primitive": "MIN"
                    },
                    "update_method": {
                        "primitive": "REPLICATE"
                    }
                },
                {
                    "name": "PromoPriceStore",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [{
                                    "label": "Product",
                                    "dimension": "Product",
                                    "level": "sku"
                                }, {
                                    "label": "Location",
                                    "dimension": "Location",
                                    "level": "store"
                                }, {
                                    "label": "Calendar",
                                    "dimension": "Calendar",
                                    "level": "week"
                                }]
                            },
                            "type": {
                                "kind": "SET",
                                "type": {
                                    "kind": "DECIMAL"
                                }
                            }
                        }
                    },
                    "predicate": {
                        "name": "model:measures:promo:store_price",
                        "is_disjunctive_view": false
                    },
                    "agg_method": {
                        "primitive": "MIN"
                    },
                    "update_method": {
                        "primitive": "REPLICATE"
                    }
                },
                {
                    "name": "SkuColor",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    {
                                        "dimension": "Product",
                                        "label": "Product",
                                        "level": "sku"
                                    }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": {
                                    "kind": "NAMED",
                                    "named": "model:hierarchy:product:color",
                                }
                            }
                        }
                    },
                    "predicate": {
                        "is_disjunctive_view": false,
                        "name": "model:hierarchy:product:sku_color",
                        "volatile": false
                    },
                    "agg_method": {
                        "primitive": "MIN"
                    },
                    "update_method": {
                        "primitive": "REPLICATE"
                    }
                },
                {
                    "name": "SkuMask",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" }
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "StoreMask",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Location",  "level": "store" }
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "RatioSource",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    }
                },
                {
                    "name": "RatioTarget",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": [
                                    { "dimension": "Product",  "level": "sku" },
                                    { "dimension": "Location", "level": "store" },
                                    { "dimension": "Calendar", "level": "day" }
                                ]
                            },
                            "type": {
                                "kind": "SET",
                                "type": { kind: "DECIMAL" }
                            }
                        }
                    },
                    "update_method": {
                        "by_metric": {metric: "RatioSource"}
                    }
                },
                {
                    "name": "SelectedWeek",
                    "signature": {
                        "kind": "BASE",
                        "base_signature": {
                            "intersection": {
                                "qualified_level": []
                            },
                            "type": {
                                "kind": "NAMED",
                                "named": "model:hierarchy:calendar:week",
                            }
                        }
                    }
                }
            ],
            type: [{
                "type": "model:hierarchy:product:color",
                "backing_type": {
                    "kind": "STRING"
                }
            }]
        }
    ));

    var MOCK_PIVOT_CONFIG = {
        "metric_config": [
            {"metric_name": "PctParentSales2","format": "0,000%","halign": "right","cellType": "percentage","head_metric": "Sales"},
            {"metric_name": "NetsalesNoInverse"},{"metric_name": "NetsalesDirect"},
            {"metric_name": "NetsalesTest","format": "$0,000[.]"},
            {"metric_name": "PlanTYPctLoc","format": "0,000%","halign": "right","cellType": "percentage","head_metric": "PlanTY"},
            {"metric_name": "PlanTYPctProd","format": "0,000%","halign": "right","cellType": "percentage","head_metric": "PlanTY"},
            {"metric_name": "PctParentSales","format": "0,000%","halign": "right","cellType": "percentage","head_metric": "Sales"},
            {"metric_name": "Revenue"},{"metric_name": "PctReturned","format": "%0,000[.]","halign": "right","cellType": "percentage"},
            {"metric_name": "SalesEuros","format": "€0,000.00","halign": "right"},{"metric_name": "RatioTarget"},{"metric_name": "RatioSource"},
            {"metric_name": "Returns","format": "0,000.00$","halign": "right"},
            {"metric_name": "ReadOnlySales","format": "$0,000.00","halign": "right","readonly": true},
            {"metric_name": "SalesWithoutCalAgg","format": "$0,000.00","halign": "right"},
            {"metric_name": "SalesPounds","format": "£0,000.00","halign": "right"},
            {"metric_name": "Sales","format": "$0,000.00","halign": "right","lock": [{"name": "HistLock","historical": true}]},
            {"metric_name": "SkuLink","halign": "center","cellType": "link"},
            {"metric_name": "SkuPhoto","halign": "center","cellType": "mouseover"}
        ],
        "level_config": [
            {"level_name": "Product:sku","default_sort_attr": "order"},
            {"level_name": "Calendar:month","default_sort_attr": "order"},
            {"level_name": "Calendar:day","default_sort_attr": "order"},
            {"level_name": "Product:color","default_sort_attr": "order"},
            {"level_name": "Calendar:year","default_sort_attr": "order"}
        ]
    };

    /**
     * Utility to call done when waiting for multiple asynchronous
     * calls
     *
     * @param {Array[string]} waitingFor - names of things to wait for
     * @param {Function} callback - a callback to be called once everything is done. Often
     *                              this is the jasmine done function.
     */
    function DoneTracker(waitingFor, callback) {
        var that = this;

        this.allDone = false;
        this.waitingFor = {};
        waitingFor.forEach(function(name) {
            that.waitingFor[name] = true;
        });

        /**
         * Returns true if all things have been done
         *
         * @return {boolean}
         */
        this.isAllDone = function() {
            return !Object.keys(this.waitingFor).find(function(key) {
                return that.waitingFor[key];
            });
        };

        /**
         * Indicate that something was done.
         * If all things were done, calls the callback passed into the DoneTracker constructor.
         *
         * @param {string} name - one of the names passed into the waitingFor parameter of DoneTracker
         */
        this.done = function(name) {
            //console.info("Done: " + name);
            this.waitingFor[name] = false;
            if ((!this.allDone) && this.isAllDone()) {
                this.allDone = true;
                callback();
            }
        };

        /**
         * Return a bound function to call that marks the name as complete,
         * useful for passing around or chaining done calls
         * @param {String} name
         * @return {Function}
         */
        this.doneFn = function(name) {
            return this.done.bind(this, name);
        };
    }


    function createTestModelerConfig(urls, workspace, port) {
        var app_prefix = "/modelerjs/test_projects/planning",
            result = {
                urls: lodash.extend({
                    appPrefix: app_prefix,
                    // use the internal measure service to avoid having to login
                    // for all the tests
                    // we only need to override the services that should use the internal
                    // uri since, everything else is configured using the serverUrl attribute
                    measureUrl: "/internal" + app_prefix + "/measure",
                    measureConfigUrl: "/internal" + app_prefix + "/pivot_config",
                    navigationTreeUrl: "/internal" + app_prefix + "/navtree",
                    viewsConfigsUrl: "/internal" + app_prefix + "/views",
                    viewsStatesUrl: "/internal" + app_prefix + "/viewstates",
                    viewConfigUrl: "/internal" + app_prefix + "/view",
                    viewStateUrl: "/internal" + app_prefix + "/viewstate",
                    actionsUrl: "/internal" + app_prefix + "/actions",
                    addBlockUrl: "/internal" + app_prefix + "/connectblox/addblock",
                    execBlockUrl: "/internal" + app_prefix + "/connectblox/exec",
                    createBranchUrl: "/internal" + app_prefix + "/connectblox/create_branch",
                    closeBranchUrl: "/internal" + app_prefix + "/connectblox/close_branch",
                    replaceDefaultBranchUrl: "/internal" + app_prefix + "/connectblox/replace_default_branch",
                    rulesUrl: "/internal" + app_prefix + "/rules",
                    lbWebAdminUrl: "/internal/lb-web/admin"
                }, urls),
                modelingFeatures: {
                    addLevelMembers: true,
                    editLevelMembers: true,
                    addLevels: true,
                    ruleEditor: false,
                    addMetrics: true,
                    editMetrics: true,
                    idleTimeValues: {
                        //in seconds
                        idleNotificationTime: 1800,
                        idleLogoutTime: 60,
                        ignoreBroadcastingTime: 300
                    }
                },                
                workspace: workspace || "measure-test",
                events: {},
                testing: {
                    queryViewState: false
                }
            };
        if (port) {
            result.port = port;
        }
        return ModelerApp.generateModelerAppConfig(result);
    }

    function getLoginConfig() {
        return {
            url: "/login",
            realm: "planning-realm",
            user: "user1",
            password: "password",
            currentUserUrl: "/modelerjs/test_projects/planning/admin/current_user"
        };
    }

    /**
     * Returns a handler that waits for cells to have finished loading
     * @param  {String}   selector selector for the cells
     * @param  {Function} callback actions to be triggered
     * @return {Function} handler
     */
    function spinnerCheck(selector, callback) {

        function handler() {
            setTimeout(function() {
                var firstDataCell = $(selector)[0],
                    cell_spinning = !(firstDataCell) || $(firstDataCell).hasClass("spinner"),
                    loader_spinning = $(".loader").is(":visible"),
                    spinning = cell_spinning || loader_spinning;
                if (spinning) {
                    handler();
                } else {
                    callback(firstDataCell);
                }
            }, 100);
        }

        return handler;
    }

    /**
     * Returns a promise that is resolved after 1 millisecond.
     * This is useful for testing react compoennts that will
     * be rendered on the next tick.
     */
    function nextTick() {
        return new Promise(function(resolve) {
            setTimeout(resolve, 1);
        });
    }

    function fakeResponse(processor, fakeColumns) {
        var reports = processor.$reportProcessors.map(function(proc) {
            var inter = proc.$inter,
                sourceQueries = lodash.map(proc.$queries, "sourceQuery"),
                report_column = lodash.flatten(sourceQueries.map(function(sq) {
                    var matchColumn = fakeColumns.find(function(c) {
                            if (sq.label)
                                return c.label === sq.label;
                            else
                                return querygen.measuresEqual(c.measure, sq.measure) &&
                                    cubiql.intersectionEqual(parseInterStr(c.interStr), inter, true);
                        }),
                        rows = { int_column: {} },
                        vals = {};

                    if (matchColumn) {
                        rows.int_column.value = matchColumn.values.map(function(v,i) { return i; });
                        vals[matchColumn.type.toLowerCase() + "_column"] = { value: matchColumn.values };
                    } else {
                        vals = { string_column: {} }; //dummy vals
                    }    

                    return [
                        rows,
                        vals
                    ];
                }));

            return {
                report_column: report_column
            };    
        });    

        return {
            report: reports
        };
    }

    function fakeMetricColumn(model, metricName, interStr, values) {
        return {
            measure: new querygen.Metric(metricName),
            interStr: interStr,
            type: model.getMeasureInfo(metricName).type.kind,
            values: values
        };
    }

    function fakeLabelledColumn(model, label, type, values) {
        return {
            measure: new querygen.Metric("labelled"), //dummy measure for test convenience
            label: label,
            interStr: "",
            type: type,
            values: values
        };
    }

    function fakeOverriddenAttrColumn(model, attrs, qualifiedName, interStr, values) {
        var ql = cubiql.parseDimLvl(qualifiedName),
            dim = cubiql.qlevel.getDimension(ql),
            levelName = cubiql.qlevel.getLevel(ql),
            attributes = attrs.map(function(attr) {
                return new querygen.Attribute(attr, ql);
            }),
            attrType = model.getAttributeType(attrs[0], dim, levelName) || "STRING"; //defaulting for mock model case

        return {
            measure: new querygen.OverriddenAttribute(attributes),
            interStr: interStr,
            type: attrType,
            values: values
        };
    }

    function fakeAttrColumn(model, attr, qualifiedName, interStr, values) {
        var ql = cubiql.parseDimLvl(qualifiedName),
            dim = cubiql.qlevel.getDimension(ql),
            levelName = cubiql.qlevel.getLevel(ql),
            attrType = model.getAttributeType(attr, dim, levelName) || "STRING"; //defaulting for mock model case

        return {
            measure: new querygen.Attribute(attr, ql),
            interStr: interStr,
            type: attrType,
            values: values
        };
    }

    /**
     * Sets the jasmine timeout to the given value. Returns a function to revert
     * the timeout to the original value.
     * 
     * @param {Object} jasmine the jasmine instance
     * @param {Number} timeout the new timeout value
     *
     * @return {Function} a function that when called will revert the jasmine timeout
     *                    to it's original value
     */
    function setJasmineTimeout(jasmine, timeout) {
        var originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
        jasmine.DEFAULT_TIMEOUT_INTERVAL = timeout;

        return function() {
            jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;
        };
    }

    function buildConnectBlox(appPrefix, workspace) {
        var urlDriver = new UrlDriver({
            urls: {
                addBlockUrl: appPrefix + "/connectblox/addblock",
                execBlockUrl: appPrefix + "/connectblox/exec", 
                createBranchUrl: appPrefix + "/connectblox/create_branch",
                closeBranchUrl: appPrefix + "/connectblox/close_branch",
                replaceDefaultBranchUrl: appPrefix + "/connectblox/replace_default_branch"
            },
            connectblox: {workspace: workspace}
        });
        var testWorkspace = new ConnectBlox(urlDriver.urls, workspace, urlDriver.http);
        return testWorkspace;
    }

    module.exports = {
        fakeResponse: fakeResponse,
        fakeAttrColumn: fakeAttrColumn,
        fakeMetricColumn: fakeMetricColumn,
        fakeLabelledColumn: fakeLabelledColumn,
        fakeOverriddenAttrColumn: fakeOverriddenAttrColumn,
        parseInterStr: parseInterStr,
        createMockModelerState: createMockModelerState,
        MOCK_MODEL: MOCK_MODEL,
        numCompare: numCompare,
        expectSortEqual: expectSortEqual,
        DoneTracker: DoneTracker,
        fail: failAndLogCallStack,
        createTestModelerConfig: createTestModelerConfig,
        getLoginConfig: getLoginConfig,
        getMetricValueAt: getMetricValueAt,
        getMetricValues: getMetricValues,
        getAttributeValues: getAttributeValues,
        getSortValues: getSortValues,
        spinnerCheck: spinnerCheck,
        nextTick: nextTick,
        setJasmineTimeout: setJasmineTimeout,
        buildConnectBlox: buildConnectBlox
    };

},{"../logicblox.connectblox/connect":155,"../logicblox.pivot/cubiql":211,"../logicblox.pivot/dispatcher":223,"../logicblox.pivot/measuremodel":236,"../logicblox.pivot/modelerapp":238,"../logicblox.pivot/modelerstate":239,"../logicblox.pivot/querygen/query":258,"../logicblox.pivot/store/fieldstore":264,"../logicblox.pivot/store/measuremodelstore":267,"../logicblox.pivot/store/pivotconfigstore":274,"../logicblox.pivot/urldriver":279,"../logicblox.pivot/util":280,"immutable":44,"lodash":90,"measure-query-gen/src/MQG":1}],301:[function(require,module,exports){
    "use strict";
    
    var util = require("../logicblox.pivot/util");
    var UrlDriver = require("../logicblox.pivot/urldriver").UrlDriver;
    var testUtils = require("./test_utils");
    var lodash = require("lodash");

    function WorkspaceUtils(urlDriver) {
        this.lbWebAdminUrl = urlDriver.urls.lbWebAdminUrl;
        this.http = urlDriver.http;
        this.connectblox = urlDriver.connectblox;
    }
    
    WorkspaceUtils.prototype.callAdminService = function(message) {
        return this.http.post(this.lbWebAdminUrl, message);
    };
    
    WorkspaceUtils.prototype.createBranch = function(workspace, branchName, fromBranch) {
        return this.connectblox.createBranch(workspace, branchName, fromBranch);
    };

    WorkspaceUtils.prototype.closeBranch = function(workspace, branchName) {
        return this.connectblox.closeBranch(workspace, branchName);
    };

    WorkspaceUtils.prototype.restartServices = function() {
        var promise = this.connectblox.restartMeasure();

        promise.catch(function(err) {
            console.error("Error refreshing services to/from branch", err);
        });

        return promise;
    };

    /**
     * Discards the branch used for testing and reverts back to the
     * state before branching. This replaces the default branch with
     * the branched that was used as backup and then restarts services.
     * If retainAsBranch is not
     * undefined, we save a copy of the testing branch as that name,
     * for debugging purposes.
     * 
     * @param  {string} workspace
     * @param  {string} branchName
     * @param  {string} retainAsBranch
     * @return {Promise}
     */
    WorkspaceUtils.prototype.revertTestBranch = function(workspace, branchName, retainAsBranch) {
        var promise = Promise.resolve();

        if (retainAsBranch) {
            promise = promise.then(this.closeBranch.bind(this, workspace, retainAsBranch))
                // it's ok to ignore if the branch doesn't exist. we could
                // improve this to report an error only if the branch exists and we
                // couldn't delete it
                .catch(lodash.noop)
                .then(this.createBranch.bind(this, workspace, retainAsBranch, null));
        }

        promise = promise.then(this.connectblox.replaceDefaultBranch.bind(this,workspace, branchName))
            .then(this.restartServices.bind(this))
            .then(this.closeBranch.bind(this, workspace, branchName));
        
        promise.catch(function(err) {
            console.error("Error deleting or switching from test branch", err);
        });

        return promise;
    };

    /**
     * Backs up the default branch as branchName. Tests can now be run on the
     * default branch without having to restart services. After tests are finished,
     * we can replace the default branch with this backed up branch.
     * 
     * @param  {string} workspace
     * @param  {string} branchName
     * @return {Promise}
     */
    WorkspaceUtils.prototype.useTestBranch = function(workspace, branchName) {
        var promise = this.createBranch(workspace, branchName);
        
        promise.catch(function(err) {
            console.error("Error creating test branch", err);
        });

        return promise;
    };

    /**
     * Utility for testing workbooks. This facilitates creating backup
     * branches for workbooks than can be used for testing.
     * @param {UrlDriver} urlDriver
     */
    function WorkbookUtils(urlDriver) {
        this.lbWebAdminUrl = urlDriver.urls.lbWebAdminUrl;
        this.http = urlDriver.http;
        this.connectblox = urlDriver.connectblox;
    }

    /**
     * Creates a branch off of another branch. This can be used
     * to create a branch of a workbook.
     * 
     * @param  {string} workspace
     * @param  {string} branchName name of new branch
     * @param  {string} fromBranch this is the branch that will serve
     *                              as base for the branch operation. If we want
     *                              to create a branch off of a workbook branch,
     *                              we use the workbook id here
     * @return {Promise}
     */
    WorkbookUtils.prototype.createBranch = function(workspace, branchName, fromBranch) {
        return this.connectblox.createBranch(workspace, branchName, fromBranch);
    };

    /**
     * Closes a branch.
     * 
     * @param  {string} workspace
     * @param  {string} branchName name of branch to be closed
     * @return {Promise}
     */
    WorkbookUtils.prototype.closeBranch = function(workspace, branchName) {
        return this.connectblox.closeBranch(workspace, branchName);
    };

    WorkbookUtils.prototype.restartServices = function() {
        var promise = this.connectblox.restartMeasure();

        promise.catch(function(err) {
            console.error("Error refreshing services to/from branch", err);
        });

        return promise;
    };

    /**
     * Deletes the workbook branch that was used for the test and
     * restores the workbook backup branch.
     * @param  {string} workspace
     * @param  {string} branchName - name for the backup branch for the workbook
     * @param  {string} workbookId - id of the workbook to be restored
     * @return {Promise}
     */
    WorkbookUtils.prototype.revertTestBranch = function(workspace, branchName, retainAsBranch, workbookId) {
        var promise = Promise.resolve();

        if (retainAsBranch) {
            promise = promise.then(this.closeBranch.bind(this, workspace, retainAsBranch))
                .catch(function() { })
                .then(this.createBranch.bind(this, workspace, retainAsBranch, workbookId));
        }
        promise = promise.then(this.closeBranch.bind(this, workspace, workbookId))
            .then(this.createBranch.bind(this, workspace, workbookId, branchName))
            .then(this.restartServices.bind(this))
            .then(this.closeBranch.bind(this, workspace, branchName));

        promise.catch(function(err) {
            console.error("Error deleting or switching from test branch", err);
        });

        return promise;
    };

    /**
     * Creates a branch off of the workbook branch, for backup.
     * @param  {string} workspace
     * @param  {string} branchName - branch name that will be created for the workbook backup branch
     * @param  {string} workbookId - id of the workbook to be backed up
     * @return {Promise}
     */
    WorkbookUtils.prototype.useTestBranch = function(workspace, branchName, workbookId) {
        var promise = this.createBranch(workspace, branchName, workbookId);
        
        promise.catch(function(err) {
            console.error("Error creating or switching to test branch", err);
        });

        return promise;
    };

    /**
     * Minor utility class to avoid having to passin in workspace
     * and branch names all the time when writing tests.
     * 
     * @param {string} workspace
     * @param {string} [defaultTestBranch] - Optional. The name of the test
     *                                       branch to use by default.
     */
    function TestWorkspace(urlDriver, workspace, defaultTestBranch, workbookId) {
        if (!defaultTestBranch) {
            defaultTestBranch = util.uuid();            
        }

        this.$workspace = workspace;
        this.$defaultTestBranch = defaultTestBranch;

        if (workbookId) {
            this.$workbookId = workbookId;
            this.$workspaceUtils = new WorkbookUtils(urlDriver);
        }
        else {
            this.$workspaceUtils = new WorkspaceUtils(urlDriver);    
        }
    }
    
    /**
    * Creates configuration for modelerApp. Just a utility function
    * that calls testUtils.createModelerConfig with the correct
    * workspace and branch names.
    * 
    * @param {string} [branch] - Optional. The branch to create config for. If not set, will
    *                                      use defaultBranchName
    * @return {object}
    */
    TestWorkspace.prototype.createTestModelerConfig = function(config, branch) {
        var workspace = this.$workspace;
        branch = branch || this.$defaultTestBranch;
        config = config || {};
        return testUtils.createTestModelerConfig(config, workspace + "@" + branch);    
    };
    
    /**
     * Creates a backup branch on the workspace
     * 
     * @param {string} [branch] - Optional. The branch to use. If not set, will
     *                                      use defaultBranchName
     * @return {Promise}
     */
    TestWorkspace.prototype.useTestBranch = function(branch) {
        var workspace = this.$workspace,
            workbookId = this.$workbookId,
            promise;

        branch = branch || this.$defaultTestBranch;

        promise = this.$workspaceUtils.useTestBranch(workspace, branch, workbookId);
        promise.catch(util.logError);

        return promise;
    };

    /**
    * Replaces the default branch with the backup branch
    * 
    * @param {string} [branch] - Optional. The branch to remove. If not set, will
    *                                      use defaultBranchName
    * @return {Promise}
    */
    TestWorkspace.prototype.revertTestBranch = function(branch, retainAsBranch) {
        var workspace = this.$workspace,
            workbookId = this.$workbookId,
            promise;

        branch = branch || this.$defaultTestBranch;

        promise = this.$workspaceUtils.revertTestBranch(workspace, branch, retainAsBranch, workbookId);
        promise.catch(util.logError);
        
        return promise;
    };

    function buildTestWorkspace(appPrefix, workspace) {
        var urlDriver = new UrlDriver({
            urls: {
                lbWebAdminUrl: "http://localhost:55183/lb-web/admin",
                connectBloxUrl: appPrefix + "/connectblox",
                createBranchUrl: appPrefix + "/connectblox/create_branch",
                closeBranchUrl: appPrefix + "/connectblox/close_branch",
                replaceDefaultBranchUrl: appPrefix + "/connectblox/replace_default_branch",
                measureUrl: appPrefix + "/measure",
                execBlockUrl: appPrefix + "/connectblox/exec"                
            },
            connectblox: {workspace: workspace}
        });
        var testWorkspace = new TestWorkspace(urlDriver, workspace);
        return testWorkspace;
    }

    module.exports = {
        WorkspaceUtils: WorkspaceUtils,
        TestWorkspace: TestWorkspace,
        buildTestWorkspace: buildTestWorkspace
    };

},{"../logicblox.pivot/urldriver":279,"../logicblox.pivot/util":280,"./test_utils":300,"lodash":90}],302:[function(require,module,exports){
require("es6-shim/es6-shim.min");

global.performance = { now: require("present") };
module.exports = {
    TestUtils: require("./lib/logicblox.testing/test_utils"),
    WorkspaceUtils: require("./lib/logicblox.testing/workspaceutils"),
    ModelerTestUtil: require("./lib/logicblox.testing/modelertestutil"),
    CubiqlUtil: require("./lib/logicblox.testing/cubiqlutil"),
    CubiqlTestBuilder: require("./lib/logicblox.testing/cubiqltestbuilder"),
    RuleTestHelper: require("./lib/logicblox.testing/ruletesthelper"),
    ConnectBlox: require("./lib/logicblox.connectblox/connect").ConnectBlox,
    HttpHelper: require("./lib/logicblox.core/network").HttpHelper
};

},{"./lib/logicblox.connectblox/connect":155,"./lib/logicblox.core/network":156,"./lib/logicblox.testing/cubiqltestbuilder":294,"./lib/logicblox.testing/cubiqlutil":295,"./lib/logicblox.testing/modelertestutil":298,"./lib/logicblox.testing/ruletesthelper":299,"./lib/logicblox.testing/test_utils":300,"./lib/logicblox.testing/workspaceutils":301,"es6-shim/es6-shim.min":12,"present":118}]},{},[302])(302)
});
//# sourceMappingURL=logicbloxtestutils.js.map
