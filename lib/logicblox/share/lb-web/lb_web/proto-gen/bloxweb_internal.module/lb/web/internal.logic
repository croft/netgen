//*******************************************
// This code was generated by proto2datalog.
// Do not check into version control.
//*******************************************

block (`internal) {
  export ( `{

/**
 * enum Encoding
 */
Encoding(x) -> .
Encoding_enum[s]=x -> string(s), Encoding(x).
Encoding_value[x]=s -> Encoding(x), string(s).
/*
* message Service
*/
Service(_) -> .ServiceConstructor[i]=x ->int(i), Service(x).
Service_prefix[x] = y -> Service(x), string(y).
Service_description[x] = y -> Service(x), string(y).
Service_handler[x] = y -> Service(x), string(y).
Service_handler_config[x] = y -> Service(x), lb:web:internal:HandlerConfig(y).
Service_block_name(x, y) -> Service(x), string(y).
Service_after_fixpoint_block_name(x, y) -> Service(x), string(y).
Service_request_protocol[x] = y -> Service(x), string(y).
Service_request_message[x] = y -> Service(x), string(y).
Service_response_protocol[x] = y -> Service(x), string(y).
Service_response_message[x] = y -> Service(x), string(y).
Service_file_binding[x] = y -> Service(x), string(y).
Service_request_encoding[x] = y -> Service(x), lb:web:internal:Encoding(y).
Service_response_encoding[x] = y -> Service(x), lb:web:internal:Encoding(y).
Service_transfer_protocol[x] = y -> Service(x), lb:web:internal:TransferProtocol(y).
Service_status_service[x] = y -> Service(x), lb:web:internal:StatusService(y).
Service_authenticator[x] = y -> Service(x), string(y).
Service_readonly[x] = y -> Service(x), boolean(y).
Service_exclusive[x] = y -> Service(x), boolean(y).
Service_parameter(x, y) -> Service(x), lb:web:internal:ServiceParameter(y).
Service_group(x, y) -> Service(x), string(y).
Service_disabled_status[x] = y -> Service(x), int(y).
Service_ignore_authentication_requirement[x] = y -> Service(x), boolean(y).
Service_http_method[x] = y -> Service(x), string(y).
Service_operation[x] = y -> Service(x), string(y).
Service_lazy[x] = y -> Service(x), boolean(y).
Service_host_workspace[x] = y -> Service(x), string(y).
Service_sync_mode[x] = y -> Service(x), string(y).
/*
* message CORSRule
*/
CORSRule(_) -> .CORSRuleConstructor[i]=x ->int(i), CORSRule(x).
CORSRule_allowed_origin(x, y) -> CORSRule(x), string(y).
CORSRule_allowed_method(x, y) -> CORSRule(x), string(y).
CORSRule_allowed_header(x, y) -> CORSRule(x), string(y).
CORSRule_prefixes(x, y) -> CORSRule(x), lb:web:internal:CORSRule:Prefix(y).
CORSRule_name[x] = y -> CORSRule(x), string(y).
/*
* message ServiceParameter
*/
ServiceParameter(_) -> .ServiceParameterConstructor[i]=x ->int(i), ServiceParameter(x).
ServiceParameter_key[x] = y -> ServiceParameter(x), string(y).
ServiceParameter_value[x] = y -> ServiceParameter(x), string(y).
/*
* message ServiceInstance
*/
ServiceInstance(_) -> .ServiceInstanceConstructor[i]=x ->int(i), ServiceInstance(x).
ServiceInstance_workspace[x] = y -> ServiceInstance(x), string(y).
ServiceInstance_service[x] = y -> ServiceInstance(x), lb:web:internal:Service(y).
/*
* message HandlerConfig
*/
HandlerConfig(_) -> .HandlerConfigConstructor[i]=x ->int(i), HandlerConfig(x).
HandlerConfig_proxy[x] = y -> HandlerConfig(x), lb:web:internal:ProxyHandler(y).
HandlerConfig_global_protobuf[x] = y -> HandlerConfig(x), lb:web:internal:GlobalProtoBufHandler(y).
HandlerConfig_sqs_s3_proxy[x] = y -> HandlerConfig(x), lb:web:internal:SQSS3ProxyHandler(y).
/*
* message ProxyHandler
*/
ProxyHandler(_) -> .ProxyHandlerConstructor[i]=x ->int(i), ProxyHandler(x).
ProxyHandler_target[x] = y -> ProxyHandler(x), string(y).
ProxyHandler_host[x] = y -> ProxyHandler(x), string(y).
ProxyHandler_prefix[x] = y -> ProxyHandler(x), string(y).
/*
* message GlobalProtoBufHandler
*/
GlobalProtoBufHandler(_) -> .GlobalProtoBufHandlerConstructor[i]=x ->int(i), GlobalProtoBufHandler(x).
GlobalProtoBufHandler_target(x, y) -> GlobalProtoBufHandler(x), lb:web:internal:ServiceClient(y).
GlobalProtoBufHandler_accept_failure[x] = y -> GlobalProtoBufHandler(x), boolean(y).
/*
* message SQSS3ProxyHandler
*/
SQSS3ProxyHandler(_) -> .SQSS3ProxyHandlerConstructor[i]=x ->int(i), SQSS3ProxyHandler(x).
SQSS3ProxyHandler_request_queue[x] = y -> SQSS3ProxyHandler(x), string(y).
SQSS3ProxyHandler_response_queue[x] = y -> SQSS3ProxyHandler(x), string(y).
SQSS3ProxyHandler_bucket[x] = y -> SQSS3ProxyHandler(x), string(y).
SQSS3ProxyHandler_enc_key_name[x] = y -> SQSS3ProxyHandler(x), string(y).
/*
* message TransferProtocol
*/
TransferProtocol(_) -> .TransferProtocolConstructor[i]=x ->int(i), TransferProtocol(x).
TransferProtocol_http[x] = y -> TransferProtocol(x), boolean(y).
TransferProtocol_sqs_s3[x] = y -> TransferProtocol(x), lb:web:internal:SQS_S3(y).
/*
* message SQS_S3
*/
SQS_S3(_) -> .SQS_S3Constructor[i]=x ->int(i), SQS_S3(x).
SQS_S3_queue_name[x] = y -> SQS_S3(x), string(y).
SQS_S3_bucket_name[x] = y -> SQS_S3(x), string(y).
SQS_S3_sqs_endpoint[x] = y -> SQS_S3(x), string(y).
SQS_S3_s3_endpoint[x] = y -> SQS_S3(x), string(y).
SQS_S3_s3_region[x] = y -> SQS_S3(x), string(y).
SQS_S3_delete_from_sqs[x] = y -> SQS_S3(x), boolean(y).
SQS_S3_delete_from_s3[x] = y -> SQS_S3(x), boolean(y).
SQS_S3_access_key[x] = y -> SQS_S3(x), string(y).
SQS_S3_secret_key[x] = y -> SQS_S3(x), string(y).
/*
* message SQSHeader
*/
SQSHeader(_) -> .SQSHeaderConstructor[i]=x ->int(i), SQSHeader(x).
SQSHeader_message_key[x] = y -> SQSHeader(x), string(y).
SQSHeader_tenant[x] = y -> SQSHeader(x), string(y).
/*
* message StatusService
*/
StatusService(_) -> .StatusServiceConstructor[i]=x ->int(i), StatusService(x).
StatusService_primary_queue_name[x] = y -> StatusService(x), string(y).
StatusService_backup_queue_name[x, i] = y -> StatusService(x), int(i), string(y).
StatusService_access_key[x] = y -> StatusService(x), string(y).
StatusService_secret_key[x] = y -> StatusService(x), string(y).
/*
* message Realm
*/
Realm(_) -> .RealmConstructor[i]=x ->int(i), Realm(x).
Realm_name[x] = y -> Realm(x), string(y).
Realm_config[x] = y -> Realm(x), string(y).
Realm_stateful[x] = y -> Realm(x), boolean(y).
Realm_session_key[x] = y -> Realm(x), string(y).
Realm_mechanism[x] = y -> Realm(x), lb:web:internal:Mechanism(y).
Realm_options[x, i] = y -> Realm(x), int(i), lb:web:internal:Option(y).
/*
* message Mechanism
*/
Mechanism(_) -> .MechanismConstructor[i]=x ->int(i), Mechanism(x).
Mechanism_clazz[x] = y -> Mechanism(x), string(y).
Mechanism_options[x, i] = y -> Mechanism(x), int(i), lb:web:internal:Option(y).
/*
* message Option
*/
Option(_) -> .OptionConstructor[i]=x ->int(i), Option(x).
Option_key[x] = y -> Option(x), string(y).
Option_value[x] = y -> Option(x), string(y).
/*
* message ServiceClient
*/
ServiceClient(_) -> .ServiceClientConstructor[i]=x ->int(i), ServiceClient(x).
ServiceClient_uri[x] = y -> ServiceClient(x), string(y).
ServiceClient_transport[x] = y -> ServiceClient(x), lb:web:internal:Transport(y).
/*
* message Transport
*/
Transport(_) -> .TransportConstructor[i]=x ->int(i), Transport(x).
Transport_tcp[x] = y -> Transport(x), lb:web:internal:TCPTransport(y).
Transport_sqs[x] = y -> Transport(x), lb:web:internal:SQSTransport(y).
/*
* message TCPTransport
*/
TCPTransport(_) -> .TCPTransportConstructor[i]=x ->int(i), TCPTransport(x).
/*
* message SQSTransport
*/
SQSTransport(_) -> .SQSTransportConstructor[i]=x ->int(i), SQSTransport(x).
 } ),
  clauses ( `{
lang:constructor(`Encoding_enum).
Encoding_enum[s]=_ -> s = "NONE"; s = "BINARY"; s = "JSON"; s = "AUTO".
Encoding(x), Encoding_enum["NONE"]=x <- .
Encoding(x), Encoding_enum["BINARY"]=x <- .
Encoding(x), Encoding_enum["JSON"]=x <- .
Encoding(x), Encoding_enum["AUTO"]=x <- .
Encoding_value[x]=s <- Encoding_enum[s]=x.
Encoding_value[x]=s -> Encoding_enum[s]=x.
lang:constructor(`ServiceConstructor).
lang:pulse(`ServiceConstructor).
lang:pulse(`Service).
lang:pulse(`Service_prefix).
lang:pulse(`Service_description).
lang:pulse(`Service_handler).
lang:pulse(`Service_handler_config).
lang:pulse(`Service_block_name).
lang:pulse(`Service_after_fixpoint_block_name).
lang:pulse(`Service_request_protocol).
lang:pulse(`Service_request_message).
lang:pulse(`Service_response_protocol).
lang:pulse(`Service_response_message).
lang:pulse(`Service_file_binding).
lang:pulse(`Service_request_encoding).
lang:pulse(`Service_response_encoding).
lang:pulse(`Service_transfer_protocol).
lang:pulse(`Service_status_service).
lang:pulse(`Service_authenticator).
lang:pulse(`Service_readonly).
lang:pulse(`Service_exclusive).
lang:pulse(`Service_parameter).
lang:pulse(`Service_group).
lang:pulse(`Service_disabled_status).
lang:pulse(`Service_ignore_authentication_requirement).
lang:pulse(`Service_http_method).
lang:pulse(`Service_operation).
lang:pulse(`Service_lazy).
lang:pulse(`Service_host_workspace).
lang:pulse(`Service_sync_mode).
lang:constructor(`CORSRuleConstructor).
lang:pulse(`CORSRuleConstructor).
lang:pulse(`CORSRule).
lang:pulse(`CORSRule_allowed_origin).
lang:pulse(`CORSRule_allowed_method).
lang:pulse(`CORSRule_allowed_header).
lang:pulse(`CORSRule_prefixes).
lang:pulse(`CORSRule_name).
lang:constructor(`ServiceParameterConstructor).
lang:pulse(`ServiceParameterConstructor).
lang:pulse(`ServiceParameter).
lang:pulse(`ServiceParameter_key).
lang:pulse(`ServiceParameter_value).
lang:constructor(`ServiceInstanceConstructor).
lang:pulse(`ServiceInstanceConstructor).
lang:pulse(`ServiceInstance).
lang:pulse(`ServiceInstance_workspace).
lang:pulse(`ServiceInstance_service).
lang:constructor(`HandlerConfigConstructor).
lang:pulse(`HandlerConfigConstructor).
lang:pulse(`HandlerConfig).
lang:pulse(`HandlerConfig_proxy).
lang:pulse(`HandlerConfig_global_protobuf).
lang:pulse(`HandlerConfig_sqs_s3_proxy).
lang:constructor(`ProxyHandlerConstructor).
lang:pulse(`ProxyHandlerConstructor).
lang:pulse(`ProxyHandler).
lang:pulse(`ProxyHandler_target).
lang:pulse(`ProxyHandler_host).
lang:pulse(`ProxyHandler_prefix).
lang:constructor(`GlobalProtoBufHandlerConstructor).
lang:pulse(`GlobalProtoBufHandlerConstructor).
lang:pulse(`GlobalProtoBufHandler).
lang:pulse(`GlobalProtoBufHandler_target).
lang:pulse(`GlobalProtoBufHandler_accept_failure).
lang:constructor(`SQSS3ProxyHandlerConstructor).
lang:pulse(`SQSS3ProxyHandlerConstructor).
lang:pulse(`SQSS3ProxyHandler).
lang:pulse(`SQSS3ProxyHandler_request_queue).
lang:pulse(`SQSS3ProxyHandler_response_queue).
lang:pulse(`SQSS3ProxyHandler_bucket).
lang:pulse(`SQSS3ProxyHandler_enc_key_name).
lang:constructor(`TransferProtocolConstructor).
lang:pulse(`TransferProtocolConstructor).
lang:pulse(`TransferProtocol).
lang:pulse(`TransferProtocol_http).
lang:pulse(`TransferProtocol_sqs_s3).
lang:constructor(`SQS_S3Constructor).
lang:pulse(`SQS_S3Constructor).
lang:pulse(`SQS_S3).
lang:pulse(`SQS_S3_queue_name).
lang:pulse(`SQS_S3_bucket_name).
lang:pulse(`SQS_S3_sqs_endpoint).
lang:pulse(`SQS_S3_s3_endpoint).
lang:pulse(`SQS_S3_s3_region).
lang:pulse(`SQS_S3_delete_from_sqs).
lang:pulse(`SQS_S3_delete_from_s3).
lang:pulse(`SQS_S3_access_key).
lang:pulse(`SQS_S3_secret_key).
lang:constructor(`SQSHeaderConstructor).
lang:pulse(`SQSHeaderConstructor).
lang:pulse(`SQSHeader).
lang:pulse(`SQSHeader_message_key).
lang:pulse(`SQSHeader_tenant).
lang:constructor(`StatusServiceConstructor).
lang:pulse(`StatusServiceConstructor).
lang:pulse(`StatusService).
lang:pulse(`StatusService_primary_queue_name).
lang:pulse(`StatusService_backup_queue_name).
lang:pulse(`StatusService_access_key).
lang:pulse(`StatusService_secret_key).
lang:constructor(`RealmConstructor).
lang:pulse(`RealmConstructor).
lang:pulse(`Realm).
lang:pulse(`Realm_name).
lang:pulse(`Realm_config).
lang:pulse(`Realm_stateful).
lang:pulse(`Realm_session_key).
lang:pulse(`Realm_mechanism).
lang:pulse(`Realm_options).
lang:constructor(`MechanismConstructor).
lang:pulse(`MechanismConstructor).
lang:pulse(`Mechanism).
lang:pulse(`Mechanism_clazz).
lang:pulse(`Mechanism_options).
lang:constructor(`OptionConstructor).
lang:pulse(`OptionConstructor).
lang:pulse(`Option).
lang:pulse(`Option_key).
lang:pulse(`Option_value).
lang:constructor(`ServiceClientConstructor).
lang:pulse(`ServiceClientConstructor).
lang:pulse(`ServiceClient).
lang:pulse(`ServiceClient_uri).
lang:pulse(`ServiceClient_transport).
lang:constructor(`TransportConstructor).
lang:pulse(`TransportConstructor).
lang:pulse(`Transport).
lang:pulse(`Transport_tcp).
lang:pulse(`Transport_sqs).
lang:constructor(`TCPTransportConstructor).
lang:pulse(`TCPTransportConstructor).
lang:pulse(`TCPTransport).
lang:constructor(`SQSTransportConstructor).
lang:pulse(`SQSTransportConstructor).
lang:pulse(`SQSTransport).
 } )
} <-- .