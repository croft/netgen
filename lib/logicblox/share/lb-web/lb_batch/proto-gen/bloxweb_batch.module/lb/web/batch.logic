//*******************************************
// This code was generated by proto2datalog.
// Do not check into version control.
//*******************************************

block (`batch) {
  export ( `{

/**
 * enum Status
 */
Status(x) -> .
Status_enum[s]=x -> string(s), Status(x).
Status_value[x]=s -> Status(x), string(s).

/**
 * enum HttpMethod
 */
HttpMethod(x) -> .
HttpMethod_enum[s]=x -> string(s), HttpMethod(x).
HttpMethod_value[x]=s -> HttpMethod(x), string(s).

/**
 * enum ProtoBufEncoding
 */
ProtoBufEncoding(x) -> .
ProtoBufEncoding_enum[s]=x -> string(s), ProtoBufEncoding(x).
ProtoBufEncoding_value[x]=s -> ProtoBufEncoding(x), string(s).
/*
* message Spec
*/
Spec(_) -> .SpecConstructor[i]=x ->int(i), Spec(x).
Spec_config[x] = y -> Spec(x), lb:web:batch:BatchConfig(y).
Spec_stm[x] = y -> Spec(x), lb:web:batch:Stm(y).
/*
* message BatchConfig
*/
BatchConfig(_) -> .BatchConfigConstructor[i]=x ->int(i), BatchConfig(x).
BatchConfig_keydir[x] = y -> BatchConfig(x), string(y).
BatchConfig_keyname[x] = y -> BatchConfig(x), string(y).
BatchConfig_chunksize[x] = y -> BatchConfig(x), int(y).
BatchConfig_max_concurrent[x] = y -> BatchConfig(x), int(y).
BatchConfig_max_concurrent_s3[x] = y -> BatchConfig(x), int(y).
BatchConfig_tcp_client_threads[x] = y -> BatchConfig(x), int(y).
BatchConfig_tcp_max_connections_per_address[x] = y -> BatchConfig(x), int(y).
/*
* message Stm
*/
Stm(_) -> .StmConstructor[i]=x ->int(i), Stm(x).
Stm_seq[x] = y -> Stm(x), lb:web:batch:StmSeq(y).
Stm_transaction[x] = y -> Stm(x), lb:web:batch:StmTxn(y).
Stm_parallel[x] = y -> Stm(x), lb:web:batch:StmPar(y).
Stm_simple[x] = y -> Stm(x), lb:web:batch:StmSimple(y).
Stm_try_catch[x] = y -> Stm(x), lb:web:batch:StmTryCatch(y).
Stm_status[x] = y -> Stm(x), lb:web:batch:Status(y).
Stm_exception[x] = y -> Stm(x), string(y).
Stm_end_time[x] = y -> Stm(x), string(y).
Stm_description[x] = y -> Stm(x), string(y).
Stm_start_time[x] = y -> Stm(x), string(y).
/*
* message StmSeq
*/
StmSeq(_) -> .StmSeqConstructor[i]=x ->int(i), StmSeq(x).
StmSeq_stm[x, i] = y -> StmSeq(x), int(i), lb:web:batch:Stm(y).
/*
* message StmTxn
*/
StmTxn(_) -> .StmTxnConstructor[i]=x ->int(i), StmTxn(x).
StmTxn_service[x] = y -> StmTxn(x), string(y).
StmTxn_config[x] = y -> StmTxn(x), string(y).
StmTxn_transport[x] = y -> StmTxn(x), lb:web:batch:TransportConfig(y).
StmTxn_stm[x, i] = y -> StmTxn(x), int(i), lb:web:batch:Stm(y).
StmTxn_transaction_id[x] = y -> StmTxn(x), string(y).
StmTxn_signature[x] = y -> StmTxn(x), lb:web:batch:SignatureAuth(y).
/*
* message StmPar
*/
StmPar(_) -> .StmParConstructor[i]=x ->int(i), StmPar(x).
StmPar_max[x] = y -> StmPar(x), int(y).
StmPar_stm[x, i] = y -> StmPar(x), int(i), lb:web:batch:Stm(y).
/*
* message StmTryCatch
*/
StmTryCatch(_) -> .StmTryCatchConstructor[i]=x ->int(i), StmTryCatch(x).
StmTryCatch_try[x] = y -> StmTryCatch(x), lb:web:batch:Stm(y).
StmTryCatch_catch[x] = y -> StmTryCatch(x), lb:web:batch:Stm(y).
/*
* message StmSimple
*/
StmSimple(_) -> .StmSimpleConstructor[i]=x ->int(i), StmSimple(x).
StmSimple_echo[x] = y -> StmSimple(x), lb:web:batch:Echo(y).
StmSimple_fail[x] = y -> StmSimple(x), lb:web:batch:Fail(y).
StmSimple_import_delim[x] = y -> StmSimple(x), lb:web:batch:ImportDelim(y).
StmSimple_export_delim[x] = y -> StmSimple(x), lb:web:batch:ExportDelim(y).
StmSimple_s3_upload[x] = y -> StmSimple(x), lb:web:batch:S3Upload(y).
StmSimple_s3_download[x] = y -> StmSimple(x), lb:web:batch:S3Download(y).
StmSimple_call_proto[x] = y -> StmSimple(x), lb:web:batch:CallProto(y).
StmSimple_noop[x] = y -> StmSimple(x), lb:web:batch:Noop(y).
StmSimple_exec_stm[x] = y -> StmSimple(x), lb:web:batch:Exec(y).
StmSimple_retry[x] = y -> StmSimple(x), int(y).
/*
* message Noop
*/
Noop(_) -> .NoopConstructor[i]=x ->int(i), Noop(x).
/*
* message Fail
*/
Fail(_) -> .FailConstructor[i]=x ->int(i), Fail(x).
Fail_text[x] = y -> Fail(x), string(y).
/*
* message Echo
*/
Echo(_) -> .EchoConstructor[i]=x ->int(i), Echo(x).
Echo_text[x] = y -> Echo(x), string(y).
/*
* message ImportDelim
*/
ImportDelim(_) -> .ImportDelimConstructor[i]=x ->int(i), ImportDelim(x).
ImportDelim_service[x] = y -> ImportDelim(x), string(y).
ImportDelim_data_file[x] = y -> ImportDelim(x), string(y).
ImportDelim_data_url[x] = y -> ImportDelim(x), string(y).
ImportDelim_input[x] = y -> ImportDelim(x), lb:web:batch:Input(y).
ImportDelim_config[x] = y -> ImportDelim(x), string(y).
ImportDelim_transport[x] = y -> ImportDelim(x), lb:web:batch:TransportConfig(y).
ImportDelim_gzip[x] = y -> ImportDelim(x), boolean(y).
ImportDelim_full[x] = y -> ImportDelim(x), boolean(y).
ImportDelim_out_file[x] = y -> ImportDelim(x), string(y).
ImportDelim_out_url[x] = y -> ImportDelim(x), string(y).
ImportDelim_key[x] = y -> ImportDelim(x), string(y).
ImportDelim_abort_on_error[x] = y -> ImportDelim(x), boolean(y).
ImportDelim_signature[x] = y -> ImportDelim(x), lb:web:batch:SignatureAuth(y).
ImportDelim_print_tdx_import_errors[x] = y -> ImportDelim(x), boolean(y).
ImportDelim_error_file_only_on_error[x] = y -> ImportDelim(x), boolean(y).
/*
* message ExportDelim
*/
ExportDelim(_) -> .ExportDelimConstructor[i]=x ->int(i), ExportDelim(x).
ExportDelim_service[x] = y -> ExportDelim(x), string(y).
ExportDelim_data_file[x] = y -> ExportDelim(x), string(y).
ExportDelim_data_url[x] = y -> ExportDelim(x), string(y).
ExportDelim_key[x] = y -> ExportDelim(x), string(y).
ExportDelim_config[x] = y -> ExportDelim(x), string(y).
ExportDelim_transport[x] = y -> ExportDelim(x), lb:web:batch:TransportConfig(y).
ExportDelim_gzip[x] = y -> ExportDelim(x), boolean(y).
ExportDelim_signature[x] = y -> ExportDelim(x), lb:web:batch:SignatureAuth(y).
/*
* message S3Upload
*/
S3Upload(_) -> .S3UploadConstructor[i]=x ->int(i), S3Upload(x).
S3Upload_file[x] = y -> S3Upload(x), string(y).
S3Upload_url[x] = y -> S3Upload(x), string(y).
S3Upload_key[x] = y -> S3Upload(x), string(y).
S3Upload_config[x] = y -> S3Upload(x), string(y).
/*
* message S3Download
*/
S3Download(_) -> .S3DownloadConstructor[i]=x ->int(i), S3Download(x).
S3Download_file[x] = y -> S3Download(x), string(y).
S3Download_url[x] = y -> S3Download(x), string(y).
S3Download_config[x] = y -> S3Download(x), string(y).
/*
* message CallProto
*/
CallProto(_) -> .CallProtoConstructor[i]=x ->int(i), CallProto(x).
CallProto_service[x] = y -> CallProto(x), string(y).
CallProto_config[x] = y -> CallProto(x), string(y).
CallProto_transport[x] = y -> CallProto(x), lb:web:batch:TransportConfig(y).
CallProto_encoding[x] = y -> CallProto(x), lb:web:batch:ProtoBufEncoding(y).
CallProto_gzip[x] = y -> CallProto(x), boolean(y).
CallProto_input[x] = y -> CallProto(x), lb:web:batch:Input(y).
CallProto_output_file[x] = y -> CallProto(x), string(y).
CallProto_format[x] = y -> CallProto(x), boolean(y).
CallProto_method[x] = y -> CallProto(x), lb:web:batch:HttpMethod(y).
CallProto_signature[x] = y -> CallProto(x), lb:web:batch:SignatureAuth(y).
/*
* message Exec
*/
Exec(_) -> .ExecConstructor[i]=x ->int(i), Exec(x).
Exec_command[x, i] = y -> Exec(x), int(i), string(y).
Exec_timeout[x] = y -> Exec(x), int(y).
Exec_destroy_on_timeout[x] = y -> Exec(x), boolean(y).
Exec_pipe_stdout_to[x] = y -> Exec(x), string(y).
Exec_pipe_stderr_to[x] = y -> Exec(x), string(y).
/*
* message SignatureAuth
*/
SignatureAuth(_) -> .SignatureAuthConstructor[i]=x ->int(i), SignatureAuth(x).
SignatureAuth_username[x] = y -> SignatureAuth(x), string(y).
SignatureAuth_keyname[x] = y -> SignatureAuth(x), string(y).
SignatureAuth_keydir[x] = y -> SignatureAuth(x), string(y).
/*
* message Input
*/
Input(_) -> .InputConstructor[i]=x ->int(i), Input(x).
Input_binary[x] = y -> Input(x), string(y).
Input_text[x] = y -> Input(x), string(y).
Input_file[x] = y -> Input(x), string(y).
Input_url[x] = y -> Input(x), string(y).
/*
* message TransportConfig
*/
TransportConfig(_) -> .TransportConfigConstructor[i]=x ->int(i), TransportConfig(x).
TransportConfig_config[x] = y -> TransportConfig(x), string(y).
TransportConfig_tcp[x] = y -> TransportConfig(x), lb:web:batch:TCPTransportConfig(y).
/*
* message TCPTransportConfig
*/
TCPTransportConfig(_) -> .TCPTransportConfigConstructor[i]=x ->int(i), TCPTransportConfig(x).
TCPTransportConfig_ssl[x] = y -> TCPTransportConfig(x), lb:web:batch:SSLConfig(y).
TCPTransportConfig_timeout[x] = y -> TCPTransportConfig(x), int(y).
TCPTransportConfig_connect_timeout[x] = y -> TCPTransportConfig(x), int(y).
TCPTransportConfig_idle_timeout[x] = y -> TCPTransportConfig(x), int(y).
TCPTransportConfig_max_connections_per_address[x] = y -> TCPTransportConfig(x), int(y).
/*
* message SSLConfig
*/
SSLConfig(_) -> .SSLConfigConstructor[i]=x ->int(i), SSLConfig(x).
SSLConfig_keyManagerAlgorithm[x] = y -> SSLConfig(x), string(y).
SSLConfig_keyManagerPassword[x] = y -> SSLConfig(x), string(y).
SSLConfig_keyStoreLocation[x] = y -> SSLConfig(x), string(y).
SSLConfig_keyStorePassword[x] = y -> SSLConfig(x), string(y).
SSLConfig_keyStoreType[x] = y -> SSLConfig(x), string(y).
SSLConfig_secureRandomAlgorithm[x] = y -> SSLConfig(x), string(y).
SSLConfig_trustManagerAlgorithm[x] = y -> SSLConfig(x), string(y).
SSLConfig_trustStoreLocation[x] = y -> SSLConfig(x), string(y).
SSLConfig_trustStorePassword[x] = y -> SSLConfig(x), string(y).
SSLConfig_trustStoreType[x] = y -> SSLConfig(x), string(y).
/*
* message AWSCredentials
*/
AWSCredentials(_) -> .AWSCredentialsConstructor[i]=x ->int(i), AWSCredentials(x).
AWSCredentials_access_key[x] = y -> AWSCredentials(x), string(y).
AWSCredentials_secret_key[x] = y -> AWSCredentials(x), string(y).
AWSCredentials_iam_role[x] = y -> AWSCredentials(x), string(y).
AWSCredentials_env[x] = y -> AWSCredentials(x), string(y).
 } ),
  clauses ( `{
lang:constructor(`Status_enum).
Status_enum[s]=_ -> s = "SUCCESS"; s = "ERROR"; s = "ERROR_PARTIAL"; s = "DNS".
Status(x), Status_enum["SUCCESS"]=x <- .
Status(x), Status_enum["ERROR"]=x <- .
Status(x), Status_enum["ERROR_PARTIAL"]=x <- .
Status(x), Status_enum["DNS"]=x <- .
Status_value[x]=s <- Status_enum[s]=x.
Status_value[x]=s -> Status_enum[s]=x.
lang:constructor(`HttpMethod_enum).
HttpMethod_enum[s]=_ -> s = "GET"; s = "POST"; s = "PUT"; s = "DELETE"; s = "HEAD".
HttpMethod(x), HttpMethod_enum["GET"]=x <- .
HttpMethod(x), HttpMethod_enum["POST"]=x <- .
HttpMethod(x), HttpMethod_enum["PUT"]=x <- .
HttpMethod(x), HttpMethod_enum["DELETE"]=x <- .
HttpMethod(x), HttpMethod_enum["HEAD"]=x <- .
HttpMethod_value[x]=s <- HttpMethod_enum[s]=x.
HttpMethod_value[x]=s -> HttpMethod_enum[s]=x.
lang:constructor(`ProtoBufEncoding_enum).
ProtoBufEncoding_enum[s]=_ -> s = "JSON"; s = "BINARY".
ProtoBufEncoding(x), ProtoBufEncoding_enum["JSON"]=x <- .
ProtoBufEncoding(x), ProtoBufEncoding_enum["BINARY"]=x <- .
ProtoBufEncoding_value[x]=s <- ProtoBufEncoding_enum[s]=x.
ProtoBufEncoding_value[x]=s -> ProtoBufEncoding_enum[s]=x.
lang:constructor(`SpecConstructor).
lang:pulse(`SpecConstructor).
lang:pulse(`Spec).
lang:pulse(`Spec_config).
lang:pulse(`Spec_stm).
lang:constructor(`BatchConfigConstructor).
lang:pulse(`BatchConfigConstructor).
lang:pulse(`BatchConfig).
lang:pulse(`BatchConfig_keydir).
lang:pulse(`BatchConfig_keyname).
lang:pulse(`BatchConfig_chunksize).
lang:pulse(`BatchConfig_max_concurrent).
lang:pulse(`BatchConfig_max_concurrent_s3).
lang:pulse(`BatchConfig_tcp_client_threads).
lang:pulse(`BatchConfig_tcp_max_connections_per_address).
lang:constructor(`StmConstructor).
lang:pulse(`StmConstructor).
lang:pulse(`Stm).
lang:pulse(`Stm_seq).
lang:pulse(`Stm_transaction).
lang:pulse(`Stm_parallel).
lang:pulse(`Stm_simple).
lang:pulse(`Stm_try_catch).
lang:pulse(`Stm_status).
lang:pulse(`Stm_exception).
lang:pulse(`Stm_end_time).
lang:pulse(`Stm_description).
lang:pulse(`Stm_start_time).
lang:constructor(`StmSeqConstructor).
lang:pulse(`StmSeqConstructor).
lang:pulse(`StmSeq).
lang:pulse(`StmSeq_stm).
lang:constructor(`StmTxnConstructor).
lang:pulse(`StmTxnConstructor).
lang:pulse(`StmTxn).
lang:pulse(`StmTxn_service).
lang:pulse(`StmTxn_config).
lang:pulse(`StmTxn_transport).
lang:pulse(`StmTxn_stm).
lang:pulse(`StmTxn_transaction_id).
lang:pulse(`StmTxn_signature).
lang:constructor(`StmParConstructor).
lang:pulse(`StmParConstructor).
lang:pulse(`StmPar).
lang:pulse(`StmPar_max).
lang:pulse(`StmPar_stm).
lang:constructor(`StmTryCatchConstructor).
lang:pulse(`StmTryCatchConstructor).
lang:pulse(`StmTryCatch).
lang:pulse(`StmTryCatch_try).
lang:pulse(`StmTryCatch_catch).
lang:constructor(`StmSimpleConstructor).
lang:pulse(`StmSimpleConstructor).
lang:pulse(`StmSimple).
lang:pulse(`StmSimple_echo).
lang:pulse(`StmSimple_fail).
lang:pulse(`StmSimple_import_delim).
lang:pulse(`StmSimple_export_delim).
lang:pulse(`StmSimple_s3_upload).
lang:pulse(`StmSimple_s3_download).
lang:pulse(`StmSimple_call_proto).
lang:pulse(`StmSimple_noop).
lang:pulse(`StmSimple_exec_stm).
lang:pulse(`StmSimple_retry).
lang:constructor(`NoopConstructor).
lang:pulse(`NoopConstructor).
lang:pulse(`Noop).
lang:constructor(`FailConstructor).
lang:pulse(`FailConstructor).
lang:pulse(`Fail).
lang:pulse(`Fail_text).
lang:constructor(`EchoConstructor).
lang:pulse(`EchoConstructor).
lang:pulse(`Echo).
lang:pulse(`Echo_text).
lang:constructor(`ImportDelimConstructor).
lang:pulse(`ImportDelimConstructor).
lang:pulse(`ImportDelim).
lang:pulse(`ImportDelim_service).
lang:pulse(`ImportDelim_data_file).
lang:pulse(`ImportDelim_data_url).
lang:pulse(`ImportDelim_input).
lang:pulse(`ImportDelim_config).
lang:pulse(`ImportDelim_transport).
lang:pulse(`ImportDelim_gzip).
lang:pulse(`ImportDelim_full).
lang:pulse(`ImportDelim_out_file).
lang:pulse(`ImportDelim_out_url).
lang:pulse(`ImportDelim_key).
lang:pulse(`ImportDelim_abort_on_error).
lang:pulse(`ImportDelim_signature).
lang:pulse(`ImportDelim_print_tdx_import_errors).
lang:pulse(`ImportDelim_error_file_only_on_error).
lang:constructor(`ExportDelimConstructor).
lang:pulse(`ExportDelimConstructor).
lang:pulse(`ExportDelim).
lang:pulse(`ExportDelim_service).
lang:pulse(`ExportDelim_data_file).
lang:pulse(`ExportDelim_data_url).
lang:pulse(`ExportDelim_key).
lang:pulse(`ExportDelim_config).
lang:pulse(`ExportDelim_transport).
lang:pulse(`ExportDelim_gzip).
lang:pulse(`ExportDelim_signature).
lang:constructor(`S3UploadConstructor).
lang:pulse(`S3UploadConstructor).
lang:pulse(`S3Upload).
lang:pulse(`S3Upload_file).
lang:pulse(`S3Upload_url).
lang:pulse(`S3Upload_key).
lang:pulse(`S3Upload_config).
lang:constructor(`S3DownloadConstructor).
lang:pulse(`S3DownloadConstructor).
lang:pulse(`S3Download).
lang:pulse(`S3Download_file).
lang:pulse(`S3Download_url).
lang:pulse(`S3Download_config).
lang:constructor(`CallProtoConstructor).
lang:pulse(`CallProtoConstructor).
lang:pulse(`CallProto).
lang:pulse(`CallProto_service).
lang:pulse(`CallProto_config).
lang:pulse(`CallProto_transport).
lang:pulse(`CallProto_encoding).
lang:pulse(`CallProto_gzip).
lang:pulse(`CallProto_input).
lang:pulse(`CallProto_output_file).
lang:pulse(`CallProto_format).
lang:pulse(`CallProto_method).
lang:pulse(`CallProto_signature).
lang:constructor(`ExecConstructor).
lang:pulse(`ExecConstructor).
lang:pulse(`Exec).
lang:pulse(`Exec_command).
lang:pulse(`Exec_timeout).
lang:pulse(`Exec_destroy_on_timeout).
lang:pulse(`Exec_pipe_stdout_to).
lang:pulse(`Exec_pipe_stderr_to).
lang:constructor(`SignatureAuthConstructor).
lang:pulse(`SignatureAuthConstructor).
lang:pulse(`SignatureAuth).
lang:pulse(`SignatureAuth_username).
lang:pulse(`SignatureAuth_keyname).
lang:pulse(`SignatureAuth_keydir).
lang:constructor(`InputConstructor).
lang:pulse(`InputConstructor).
lang:pulse(`Input).
lang:pulse(`Input_binary).
lang:pulse(`Input_text).
lang:pulse(`Input_file).
lang:pulse(`Input_url).
lang:constructor(`TransportConfigConstructor).
lang:pulse(`TransportConfigConstructor).
lang:pulse(`TransportConfig).
lang:pulse(`TransportConfig_config).
lang:pulse(`TransportConfig_tcp).
lang:constructor(`TCPTransportConfigConstructor).
lang:pulse(`TCPTransportConfigConstructor).
lang:pulse(`TCPTransportConfig).
lang:pulse(`TCPTransportConfig_ssl).
lang:pulse(`TCPTransportConfig_timeout).
lang:pulse(`TCPTransportConfig_connect_timeout).
lang:pulse(`TCPTransportConfig_idle_timeout).
lang:pulse(`TCPTransportConfig_max_connections_per_address).
lang:constructor(`SSLConfigConstructor).
lang:pulse(`SSLConfigConstructor).
lang:pulse(`SSLConfig).
lang:pulse(`SSLConfig_keyManagerAlgorithm).
lang:pulse(`SSLConfig_keyManagerPassword).
lang:pulse(`SSLConfig_keyStoreLocation).
lang:pulse(`SSLConfig_keyStorePassword).
lang:pulse(`SSLConfig_keyStoreType).
lang:pulse(`SSLConfig_secureRandomAlgorithm).
lang:pulse(`SSLConfig_trustManagerAlgorithm).
lang:pulse(`SSLConfig_trustStoreLocation).
lang:pulse(`SSLConfig_trustStorePassword).
lang:pulse(`SSLConfig_trustStoreType).
lang:constructor(`AWSCredentialsConstructor).
lang:pulse(`AWSCredentialsConstructor).
lang:pulse(`AWSCredentials).
lang:pulse(`AWSCredentials_access_key).
lang:pulse(`AWSCredentials_secret_key).
lang:pulse(`AWSCredentials_iam_role).
lang:pulse(`AWSCredentials_env).
 } )
} <-- .