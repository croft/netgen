//*******************************************
// This code was generated by proto2datalog.
// Do not check into version control.
//*******************************************

block (`status_service) {
  export ( `{
/*
* message Request
*/
Request(_) -> .RequestConstructor[i]=x ->int(i), Request(x).
Request_workflow_name[x] = y -> Request(x), string(y).
Request_workflow_root_uid[x] = y -> Request(x), string(y).
Request_process_name[x] = y -> Request(x), string(y).
Request_process_uid[x] = y -> Request(x), string(y).
Request_process_uids(x, y) -> Request(x), string(y).
Request_task_state(x, y) -> Request(x), string(y).
Request_get_all[x] = y -> Request(x), boolean(y).
Request_get_ancestors[x] = y -> Request(x), boolean(y).
Request_get_active_roots[x] = y -> Request(x), boolean(y).
Request_get_inactive_roots[x] = y -> Request(x), boolean(y).
Request_get_only_roots[x] = y -> Request(x), boolean(y).
Request_get_receptive_actions[x] = y -> Request(x), boolean(y).
Request_get_io[x] = y -> Request(x), boolean(y).
Request_get_history[x] = y -> Request(x), boolean(y).
Request_get_source_ref[x] = y -> Request(x), boolean(y).
Request_get_instance_vars[x] = y -> Request(x), boolean(y).
Request_get_root_summary[x] = y -> Request(x), boolean(y).
Request_get_count[x] = y -> Request(x), boolean(y).
Request_list_states[x] = y -> Request(x), boolean(y).
Request_list_workflows[x] = y -> Request(x), boolean(y).
/*
* message Response
*/
Response(_) -> .ResponseConstructor[i]=x ->int(i), Response(x).
Response_workflow(x, y) -> Response(x), status_service:Workflow(y).
Response_state(x, y) -> Response(x), string(y).
Response_workflow_name(x, y) -> Response(x), string(y).
/*
* message Workflow
*/
Workflow(_) -> .WorkflowConstructor[i]=x ->int(i), Workflow(x).
Workflow_name[x] = y -> Workflow(x), string(y).
Workflow_id[x] = y -> Workflow(x), string(y).
Workflow_timestamp[x] = y -> Workflow(x), string(y).
Workflow_instance(x, y) -> Workflow(x), status_service:WorkflowInstance(y).
/*
* message WorkflowInstance
*/
WorkflowInstance(_) -> .WorkflowInstanceConstructor[i]=x ->int(i), WorkflowInstance(x).
WorkflowInstance_timestamp[x] = y -> WorkflowInstance(x), string(y).
WorkflowInstance_root_id[x] = y -> WorkflowInstance(x), int(y).
WorkflowInstance_process(x, y) -> WorkflowInstance(x), status_service:ProcessInstance(y).
WorkflowInstance_count[x] = y -> WorkflowInstance(x), int(y).
WorkflowInstance_aborted[x] = y -> WorkflowInstance(x), boolean(y).
WorkflowInstance_paused[x] = y -> WorkflowInstance(x), boolean(y).
WorkflowInstance_global_state[x] = y -> WorkflowInstance(x), string(y).
WorkflowInstance_duration[x] = y -> WorkflowInstance(x), string(y).
/*
* message ProcessInstance
*/
ProcessInstance(_) -> .ProcessInstanceConstructor[i]=x ->int(i), ProcessInstance(x).
ProcessInstance_id[x] = y -> ProcessInstance(x), int(y).
ProcessInstance_process_name[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_root[x] = y -> ProcessInstance(x), boolean(y).
ProcessInstance_type[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_state[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_source_ref_description[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_duration[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_children(x, y) -> ProcessInstance(x), status_service:ProcessInstanceRef(y).
ProcessInstance_begins_timestamp[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_initialized_timestamp[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_last_transition_timestamp[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_terminates_timestamp[x] = y -> ProcessInstance(x), string(y).
ProcessInstance_input(x, y) -> ProcessInstance(x), status_service:IO(y).
ProcessInstance_output(x, y) -> ProcessInstance(x), status_service:IO(y).
ProcessInstance_receptive_action(x, y) -> ProcessInstance(x), string(y).
ProcessInstance_history(x, y) -> ProcessInstance(x), status_service:Transition(y).
ProcessInstance_source_ref[x] = y -> ProcessInstance(x), status_service:ProcessSourceReference(y).
ProcessInstance_instance_vars(x, y) -> ProcessInstance(x), status_service:IO(y).
/*
* message ProcessInstanceRef
*/
ProcessInstanceRef(_) -> .ProcessInstanceRefConstructor[i]=x ->int(i), ProcessInstanceRef(x).
ProcessInstanceRef_id[x] = y -> ProcessInstanceRef(x), int(y).
ProcessInstanceRef_order[x] = y -> ProcessInstanceRef(x), int(y).
ProcessInstanceRef_relation_to_parent[x] = y -> ProcessInstanceRef(x), string(y).
/*
* message IO
*/
IO(_) -> .IOConstructor[i]=x ->int(i), IO(x).
IO_key[x] = y -> IO(x), string(y).
IO_value(x, y) -> IO(x), string(y).
/*
* message Transition
*/
Transition(_) -> .TransitionConstructor[i]=x ->int(i), Transition(x).
Transition_state[x] = y -> Transition(x), string(y).
Transition_time[x] = y -> Transition(x), int(y).
Transition_timestamp[x] = y -> Transition(x), string(y).
/*
* message ProcessSourceReference
*/
ProcessSourceReference(_) -> .ProcessSourceReferenceConstructor[i]=x ->int(i), ProcessSourceReference(x).
ProcessSourceReference_workflow[x] = y -> ProcessSourceReference(x), string(y).
ProcessSourceReference_path[x] = y -> ProcessSourceReference(x), string(y).
ProcessSourceReference_line[x] = y -> ProcessSourceReference(x), int(y).
ProcessSourceReference_column[x] = y -> ProcessSourceReference(x), int(y).
ProcessSourceReference_ancestors[x] = y -> ProcessSourceReference(x), string(y).
 } ),
  clauses ( `{
lang:constructor(`RequestConstructor).
lang:pulse(`RequestConstructor).
lang:pulse(`Request).
lang:pulse(`Request_workflow_name).
lang:pulse(`Request_workflow_root_uid).
lang:pulse(`Request_process_name).
lang:pulse(`Request_process_uid).
lang:pulse(`Request_process_uids).
lang:pulse(`Request_task_state).
lang:pulse(`Request_get_all).
lang:pulse(`Request_get_ancestors).
lang:pulse(`Request_get_active_roots).
lang:pulse(`Request_get_inactive_roots).
lang:pulse(`Request_get_only_roots).
lang:pulse(`Request_get_receptive_actions).
lang:pulse(`Request_get_io).
lang:pulse(`Request_get_history).
lang:pulse(`Request_get_source_ref).
lang:pulse(`Request_get_instance_vars).
lang:pulse(`Request_get_root_summary).
lang:pulse(`Request_get_count).
lang:pulse(`Request_list_states).
lang:pulse(`Request_list_workflows).
lang:constructor(`ResponseConstructor).
lang:pulse(`ResponseConstructor).
lang:pulse(`Response).
lang:pulse(`Response_workflow).
lang:pulse(`Response_state).
lang:pulse(`Response_workflow_name).
lang:constructor(`WorkflowConstructor).
lang:pulse(`WorkflowConstructor).
lang:pulse(`Workflow).
lang:pulse(`Workflow_name).
lang:pulse(`Workflow_id).
lang:pulse(`Workflow_timestamp).
lang:pulse(`Workflow_instance).
lang:constructor(`WorkflowInstanceConstructor).
lang:pulse(`WorkflowInstanceConstructor).
lang:pulse(`WorkflowInstance).
lang:pulse(`WorkflowInstance_timestamp).
lang:pulse(`WorkflowInstance_root_id).
lang:pulse(`WorkflowInstance_process).
lang:pulse(`WorkflowInstance_count).
lang:pulse(`WorkflowInstance_aborted).
lang:pulse(`WorkflowInstance_paused).
lang:pulse(`WorkflowInstance_global_state).
lang:pulse(`WorkflowInstance_duration).
lang:constructor(`ProcessInstanceConstructor).
lang:pulse(`ProcessInstanceConstructor).
lang:pulse(`ProcessInstance).
lang:pulse(`ProcessInstance_id).
lang:pulse(`ProcessInstance_process_name).
lang:pulse(`ProcessInstance_root).
lang:pulse(`ProcessInstance_type).
lang:pulse(`ProcessInstance_state).
lang:pulse(`ProcessInstance_source_ref_description).
lang:pulse(`ProcessInstance_duration).
lang:pulse(`ProcessInstance_children).
lang:pulse(`ProcessInstance_begins_timestamp).
lang:pulse(`ProcessInstance_initialized_timestamp).
lang:pulse(`ProcessInstance_last_transition_timestamp).
lang:pulse(`ProcessInstance_terminates_timestamp).
lang:pulse(`ProcessInstance_input).
lang:pulse(`ProcessInstance_output).
lang:pulse(`ProcessInstance_receptive_action).
lang:pulse(`ProcessInstance_history).
lang:pulse(`ProcessInstance_source_ref).
lang:pulse(`ProcessInstance_instance_vars).
lang:constructor(`ProcessInstanceRefConstructor).
lang:pulse(`ProcessInstanceRefConstructor).
lang:pulse(`ProcessInstanceRef).
lang:pulse(`ProcessInstanceRef_id).
lang:pulse(`ProcessInstanceRef_order).
lang:pulse(`ProcessInstanceRef_relation_to_parent).
lang:constructor(`IOConstructor).
lang:pulse(`IOConstructor).
lang:pulse(`IO).
lang:pulse(`IO_key).
lang:pulse(`IO_value).
lang:constructor(`TransitionConstructor).
lang:pulse(`TransitionConstructor).
lang:pulse(`Transition).
lang:pulse(`Transition_state).
lang:pulse(`Transition_time).
lang:pulse(`Transition_timestamp).
lang:constructor(`ProcessSourceReferenceConstructor).
lang:pulse(`ProcessSourceReferenceConstructor).
lang:pulse(`ProcessSourceReference).
lang:pulse(`ProcessSourceReference_workflow).
lang:pulse(`ProcessSourceReference_path).
lang:pulse(`ProcessSourceReference_line).
lang:pulse(`ProcessSourceReference_column).
lang:pulse(`ProcessSourceReference_ancestors).
 } )
} <-- .