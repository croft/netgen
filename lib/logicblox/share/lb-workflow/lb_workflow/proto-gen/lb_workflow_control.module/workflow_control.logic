//*******************************************
// This code was generated by proto2datalog.
// Do not check into version control.
//*******************************************

block (`workflow_control) {
  export ( `{
/*
* message Request
*/
Request(_) -> .RequestConstructor[i]=x ->int(i), Request(x).
Request_purge[x] = y -> Request(x), workflow_control:Purge(y).
Request_action[x] = y -> Request(x), workflow_control:Action(y).
Request_start[x] = y -> Request(x), workflow_control:Start(y).
/*
* message Response
*/
Response(_) -> .ResponseConstructor[i]=x ->int(i), Response(x).
Response_exception(x, y) -> Response(x), workflow_control:Exception(y).
Response_purge[x] = y -> Response(x), workflow_control:PurgeResponse(y).
Response_action[x] = y -> Response(x), workflow_control:ActionResponse(y).
Response_start[x] = y -> Response(x), workflow_control:StartResponse(y).
/*
* message Exception
*/
Exception(_) -> .ExceptionConstructor[i]=x ->int(i), Exception(x).
Exception_error[x] = y -> Exception(x), string(y).
Exception_error_code[x] = y -> Exception(x), string(y).
/*
* message Purge
*/
Purge(_) -> .PurgeConstructor[i]=x ->int(i), Purge(x).
Purge_selector[x] = y -> Purge(x), workflow_control:WorkflowInstanceSelector(y).
/*
* message PurgeResponse
*/
PurgeResponse(_) -> .PurgeResponseConstructor[i]=x ->int(i), PurgeResponse(x).
PurgeResponse_root_uids(x, y) -> PurgeResponse(x), int(y).
/*
* message Action
*/
Action(_) -> .ActionConstructor[i]=x ->int(i), Action(x).
Action_action[x] = y -> Action(x), string(y).
Action_selector[x] = y -> Action(x), workflow_control:ProcessInstanceSelector(y).
/*
* message ActionResponse
*/
ActionResponse(_) -> .ActionResponseConstructor[i]=x ->int(i), ActionResponse(x).
ActionResponse_uids(x, y) -> ActionResponse(x), int(y).
/*
* message Start
*/
Start(_) -> .StartConstructor[i]=x ->int(i), Start(x).
Start_name[x] = y -> Start(x), string(y).
Start_arg(x, y) -> Start(x), workflow_control:Argument(y).
/*
* message StartResponse
*/
StartResponse(_) -> .StartResponseConstructor[i]=x ->int(i), StartResponse(x).
StartResponse_root_uid[x] = y -> StartResponse(x), int(y).
/*
* message Argument
*/
Argument(_) -> .ArgumentConstructor[i]=x ->int(i), Argument(x).
Argument_name[x] = y -> Argument(x), string(y).
Argument_value(x, y) -> Argument(x), string(y).
/*
* message WorkflowInstanceSelector
*/
WorkflowInstanceSelector(_) -> .WorkflowInstanceSelectorConstructor[i]=x ->int(i), WorkflowInstanceSelector(x).
WorkflowInstanceSelector_name[x] = y -> WorkflowInstanceSelector(x), string(y).
WorkflowInstanceSelector_root_uid(x, y) -> WorkflowInstanceSelector(x), int(y).
WorkflowInstanceSelector_started_before[x] = y -> WorkflowInstanceSelector(x), string(y).
WorkflowInstanceSelector_terminated_before[x] = y -> WorkflowInstanceSelector(x), string(y).
WorkflowInstanceSelector_started_after[x] = y -> WorkflowInstanceSelector(x), string(y).
WorkflowInstanceSelector_terminated_after[x] = y -> WorkflowInstanceSelector(x), string(y).
/*
* message ProcessInstanceSelector
*/
ProcessInstanceSelector(_) -> .ProcessInstanceSelectorConstructor[i]=x ->int(i), ProcessInstanceSelector(x).
ProcessInstanceSelector_workflow[x] = y -> ProcessInstanceSelector(x), workflow_control:WorkflowInstanceSelector(y).
ProcessInstanceSelector_id(x, y) -> ProcessInstanceSelector(x), int(y).
ProcessInstanceSelector_state(x, y) -> ProcessInstanceSelector(x), string(y).
ProcessInstanceSelector_workflow_source_name(x, y) -> ProcessInstanceSelector(x), string(y).
 } ),
  clauses ( `{
lang:constructor(`RequestConstructor).
lang:pulse(`RequestConstructor).
lang:pulse(`Request).
lang:pulse(`Request_purge).
lang:pulse(`Request_action).
lang:pulse(`Request_start).
lang:constructor(`ResponseConstructor).
lang:pulse(`ResponseConstructor).
lang:pulse(`Response).
lang:pulse(`Response_exception).
lang:pulse(`Response_purge).
lang:pulse(`Response_action).
lang:pulse(`Response_start).
lang:constructor(`ExceptionConstructor).
lang:pulse(`ExceptionConstructor).
lang:pulse(`Exception).
lang:pulse(`Exception_error).
lang:pulse(`Exception_error_code).
lang:constructor(`PurgeConstructor).
lang:pulse(`PurgeConstructor).
lang:pulse(`Purge).
lang:pulse(`Purge_selector).
lang:constructor(`PurgeResponseConstructor).
lang:pulse(`PurgeResponseConstructor).
lang:pulse(`PurgeResponse).
lang:pulse(`PurgeResponse_root_uids).
lang:constructor(`ActionConstructor).
lang:pulse(`ActionConstructor).
lang:pulse(`Action).
lang:pulse(`Action_action).
lang:pulse(`Action_selector).
lang:constructor(`ActionResponseConstructor).
lang:pulse(`ActionResponseConstructor).
lang:pulse(`ActionResponse).
lang:pulse(`ActionResponse_uids).
lang:constructor(`StartConstructor).
lang:pulse(`StartConstructor).
lang:pulse(`Start).
lang:pulse(`Start_name).
lang:pulse(`Start_arg).
lang:constructor(`StartResponseConstructor).
lang:pulse(`StartResponseConstructor).
lang:pulse(`StartResponse).
lang:pulse(`StartResponse_root_uid).
lang:constructor(`ArgumentConstructor).
lang:pulse(`ArgumentConstructor).
lang:pulse(`Argument).
lang:pulse(`Argument_name).
lang:pulse(`Argument_value).
lang:constructor(`WorkflowInstanceSelectorConstructor).
lang:pulse(`WorkflowInstanceSelectorConstructor).
lang:pulse(`WorkflowInstanceSelector).
lang:pulse(`WorkflowInstanceSelector_name).
lang:pulse(`WorkflowInstanceSelector_root_uid).
lang:pulse(`WorkflowInstanceSelector_started_before).
lang:pulse(`WorkflowInstanceSelector_terminated_before).
lang:pulse(`WorkflowInstanceSelector_started_after).
lang:pulse(`WorkflowInstanceSelector_terminated_after).
lang:constructor(`ProcessInstanceSelectorConstructor).
lang:pulse(`ProcessInstanceSelectorConstructor).
lang:pulse(`ProcessInstanceSelector).
lang:pulse(`ProcessInstanceSelector_workflow).
lang:pulse(`ProcessInstanceSelector_id).
lang:pulse(`ProcessInstanceSelector_state).
lang:pulse(`ProcessInstanceSelector_workflow_source_name).
 } )
} <-- .