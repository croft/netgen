# This file is protected by the VeriFlow Research License Agreement
# available at http://www.cs.illinois.edu/~khurshi1/projects/veriflow/veriflow-research-license-agreement.txt.
# A copy of this agreement is also included in this package.
#
# Copyright (c) 2012-2013 by
# The Board of Trustees of the University of Illinois.
# All rights reserved.

VeriFlow - Real-Time Network Property Verifier
----------------------------------------------

This file contains information to compile, install and run the VeriFlow software.
Please note that this is an early evaluation version of VeriFlow. Therefore, there
can be bugs, and the user interface is not fully developed. This code has been tested
with Mininet and NOX version 0.9.1~full~beta. If you have any question, or face any
problem, then please contact us at khurshi1@illinois.edu.

System requirements
-------------------

VeriFlow can be compiled and run on any Linux distribution supporting C++, pthreads
and the make utility. 

Steps to use VeriFLow
---------------------

The following steps need to be followed to setup VeriFlow and test its functionality.

1. Compile and install the veriflow-util library.
2. Compile VeriFlow.
3. Run VeriFlow in test mode.
4. Run VeriFlow in proxy mode.

The following paragraphs describe these steps in detail.

1. Compile and install the veriflow-util library
------------------------------------------------

The veriflow-util directory contains several utility functions and associated header
files used by VeriFlow. Use the following commands to setup this library.

- cd veriflow-util
- make clean all
- sudo cp libveriflowutil.so /usr/lib

2. Compile VeriFlow
-------------------

The VeriFlow directory contains the VeriFlow source code files. It also uses the header
files present in the veriflow-util directory. In addition to those header files, two 
additional header files are needed to compile VeriFlow. They are openflow.h and xtoxll.h.
These files are currently undergoing some changes. We will include them in the package
once they are ready. Please note that without these two header files the code will
not compile at this moment. 

Use the following commands to compile the code.

- cd VeriFlow
- make clean all

It will produce the binary executable file VeriFlow.

3. Run VeriFlow in test mode
----------------------------

Executing the VeriFlow binary without any command line argument runs it in test mode.
In this mode, VeriFlow executes the Test::testVerification() function present in Test.cpp.
Please go through this function to get a quick overview of how VeriFlow operates. This
function creates a small topology by specifying a set of rules, and then checks the
addition of a new rule. In this example, the egress gateway for a particular packet
header signature is denoted by a rule where the next hop points to the same location.
Use the following commands to run VeriFlow in test mode.

- cd VeriFlow
- ./VeriFlow

4. Additional directions for Panda
----------------------------------

The topology files need to be in the folder "data" within the folder Veriflow. The entries in the file use the following format:

<prefix> <mask> <location> <nexthop> <priority>

The current contents of the folder "data" represent the following topology:
		
	   m1
	   |
ingress----s1----s2-----m2
	   |
	   s3-----m3

The relevant functions have been illustrated in the function Test::test() (Defined in the file Test.cpp). Note that I have
used meaningful names rather than IP addresses in the rules.
